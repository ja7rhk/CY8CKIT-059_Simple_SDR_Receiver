ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB73:
  26              		.file 1 "..\\FreeRTOS\\tasks.c"
   1:..\FreeRTOS/tasks.c **** /*
   2:..\FreeRTOS/tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:..\FreeRTOS/tasks.c ****     All rights reserved
   4:..\FreeRTOS/tasks.c **** 
   5:..\FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS/tasks.c **** 
   7:..\FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS/tasks.c **** 
   9:..\FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS/tasks.c **** 
  13:..\FreeRTOS/tasks.c ****     ***************************************************************************
  14:..\FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS/tasks.c ****     ***************************************************************************
  19:..\FreeRTOS/tasks.c **** 
  20:..\FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS/tasks.c **** 
  25:..\FreeRTOS/tasks.c ****     ***************************************************************************
  26:..\FreeRTOS/tasks.c ****      *                                                                       *
  27:..\FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS/tasks.c ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS/tasks.c ****      *                                                                       *
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 2


  32:..\FreeRTOS/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\FreeRTOS/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS/tasks.c ****      *                                                                       *
  37:..\FreeRTOS/tasks.c ****     ***************************************************************************
  38:..\FreeRTOS/tasks.c **** 
  39:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS/tasks.c ****     defined configASSERT()?
  42:..\FreeRTOS/tasks.c **** 
  43:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS/tasks.c ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS/tasks.c ****     participating in the support forum.
  46:..\FreeRTOS/tasks.c **** 
  47:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS/tasks.c **** 
  52:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS/tasks.c **** 
  56:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS/tasks.c **** 
  59:..\FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\FreeRTOS/tasks.c **** 
  63:..\FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS/tasks.c **** 
  67:..\FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  68:..\FreeRTOS/tasks.c **** */
  69:..\FreeRTOS/tasks.c **** 
  70:..\FreeRTOS/tasks.c **** /* Standard includes. */
  71:..\FreeRTOS/tasks.c **** #include <stdlib.h>
  72:..\FreeRTOS/tasks.c **** #include <string.h>
  73:..\FreeRTOS/tasks.c **** 
  74:..\FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:..\FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:..\FreeRTOS/tasks.c **** task.h is included from an application file. */
  77:..\FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:..\FreeRTOS/tasks.c **** 
  79:..\FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  80:..\FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  81:..\FreeRTOS/tasks.c **** #include "task.h"
  82:..\FreeRTOS/tasks.c **** #include "timers.h"
  83:..\FreeRTOS/tasks.c **** #include "StackMacros.h"
  84:..\FreeRTOS/tasks.c **** 
  85:..\FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:..\FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:..\FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:..\FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 3


  89:..\FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:..\FreeRTOS/tasks.c **** 
  91:..\FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:..\FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  93:..\FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:..\FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:..\FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:..\FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:..\FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:..\FreeRTOS/tasks.c **** 	#include <stdio.h>
  99:..\FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:..\FreeRTOS/tasks.c **** 
 101:..\FreeRTOS/tasks.c **** /* Sanity check the configuration. */
 102:..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:..\FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:..\FreeRTOS/tasks.c **** 
 108:..\FreeRTOS/tasks.c **** /*
 109:..\FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:..\FreeRTOS/tasks.c ****  */
 111:..\FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:..\FreeRTOS/tasks.c **** 
 113:..\FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 114:..\FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:..\FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 116:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:..\FreeRTOS/tasks.c **** #else
 118:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:..\FreeRTOS/tasks.c **** #endif
 120:..\FreeRTOS/tasks.c **** 
 121:..\FreeRTOS/tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:..\FreeRTOS/tasks.c **** typedef enum
 123:..\FreeRTOS/tasks.c **** {
 124:..\FreeRTOS/tasks.c **** 	eNotWaitingNotification = 0,
 125:..\FreeRTOS/tasks.c **** 	eWaitingNotification,
 126:..\FreeRTOS/tasks.c **** 	eNotified
 127:..\FreeRTOS/tasks.c **** } eNotifyValue;
 128:..\FreeRTOS/tasks.c **** 
 129:..\FreeRTOS/tasks.c **** /*
 130:..\FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:..\FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:..\FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 133:..\FreeRTOS/tasks.c ****  */
 134:..\FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 135:..\FreeRTOS/tasks.c **** {
 136:..\FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:..\FreeRTOS/tasks.c **** 
 138:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:..\FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:..\FreeRTOS/tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:..\FreeRTOS/tasks.c **** 	#endif
 142:..\FreeRTOS/tasks.c **** 
 143:..\FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:..\FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:..\FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 4


 146:..\FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 147:..\FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:..\FreeRTOS/tasks.c **** 
 149:..\FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:..\FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:..\FreeRTOS/tasks.c **** 	#endif
 152:..\FreeRTOS/tasks.c **** 
 153:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 154:..\FreeRTOS/tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:..\FreeRTOS/tasks.c **** 	#endif
 156:..\FreeRTOS/tasks.c **** 
 157:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:..\FreeRTOS/tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:..\FreeRTOS/tasks.c **** 	#endif
 161:..\FreeRTOS/tasks.c **** 
 162:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:..\FreeRTOS/tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:..\FreeRTOS/tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:..\FreeRTOS/tasks.c **** 	#endif
 166:..\FreeRTOS/tasks.c **** 
 167:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:..\FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:..\FreeRTOS/tasks.c **** 	#endif
 170:..\FreeRTOS/tasks.c **** 
 171:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:..\FreeRTOS/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:..\FreeRTOS/tasks.c **** 	#endif
 174:..\FreeRTOS/tasks.c **** 
 175:..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:..\FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:..\FreeRTOS/tasks.c **** 	#endif
 178:..\FreeRTOS/tasks.c **** 
 179:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:..\FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:..\FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:..\FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:..\FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:..\FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 185:..\FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:..\FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:..\FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 188:..\FreeRTOS/tasks.c **** 	#endif
 189:..\FreeRTOS/tasks.c **** 
 190:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:..\FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:..\FreeRTOS/tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:..\FreeRTOS/tasks.c **** 	#endif
 194:..\FreeRTOS/tasks.c **** 
 195:..\FreeRTOS/tasks.c **** } tskTCB;
 196:..\FreeRTOS/tasks.c **** 
 197:..\FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:..\FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:..\FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 200:..\FreeRTOS/tasks.c **** 
 201:..\FreeRTOS/tasks.c **** /*
 202:..\FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 5


 203:..\FreeRTOS/tasks.c ****  * be global, rather than file scope.
 204:..\FreeRTOS/tasks.c ****  */
 205:..\FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 206:..\FreeRTOS/tasks.c **** 	#define static
 207:..\FreeRTOS/tasks.c **** #endif
 208:..\FreeRTOS/tasks.c **** 
 209:..\FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:..\FreeRTOS/tasks.c **** static variables must be declared volatile. */
 211:..\FreeRTOS/tasks.c **** 
 212:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:..\FreeRTOS/tasks.c **** 
 214:..\FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:..\FreeRTOS/tasks.c **** 
 222:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:..\FreeRTOS/tasks.c **** 
 224:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:..\FreeRTOS/tasks.c **** 
 227:..\FreeRTOS/tasks.c **** #endif
 228:..\FreeRTOS/tasks.c **** 
 229:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:..\FreeRTOS/tasks.c **** 
 231:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:..\FreeRTOS/tasks.c **** 
 233:..\FreeRTOS/tasks.c **** #endif
 234:..\FreeRTOS/tasks.c **** 
 235:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:..\FreeRTOS/tasks.c **** 
 237:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:..\FreeRTOS/tasks.c **** 
 239:..\FreeRTOS/tasks.c **** #endif
 240:..\FreeRTOS/tasks.c **** 
 241:..\FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 242:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:..\FreeRTOS/tasks.c **** 
 252:..\FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:..\FreeRTOS/tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:..\FreeRTOS/tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:..\FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:..\FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:..\FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:..\FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:..\FreeRTOS/tasks.c **** accessed from a critical section. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 6


 260:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 261:..\FreeRTOS/tasks.c **** 
 262:..\FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 263:..\FreeRTOS/tasks.c **** 
 264:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:..\FreeRTOS/tasks.c **** 
 267:..\FreeRTOS/tasks.c **** #endif
 268:..\FreeRTOS/tasks.c **** 
 269:..\FreeRTOS/tasks.c **** /*lint +e956 */
 270:..\FreeRTOS/tasks.c **** 
 271:..\FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:..\FreeRTOS/tasks.c **** 
 273:..\FreeRTOS/tasks.c **** /*
 274:..\FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:..\FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:..\FreeRTOS/tasks.c ****  */
 277:..\FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:..\FreeRTOS/tasks.c **** 
 279:..\FreeRTOS/tasks.c **** /*
 280:..\FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:..\FreeRTOS/tasks.c ****  */
 282:..\FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:..\FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:..\FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 285:..\FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:..\FreeRTOS/tasks.c **** 
 287:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 288:..\FreeRTOS/tasks.c **** 
 289:..\FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:..\FreeRTOS/tasks.c **** 
 291:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:..\FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:..\FreeRTOS/tasks.c **** 	microcontroller architecture. */
 294:..\FreeRTOS/tasks.c **** 
 295:..\FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:..\FreeRTOS/tasks.c **** 	state task. */
 297:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:..\FreeRTOS/tasks.c **** 	{																									\
 299:..\FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:..\FreeRTOS/tasks.c **** 		{																								\
 301:..\FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:..\FreeRTOS/tasks.c **** 		}																								\
 303:..\FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:..\FreeRTOS/tasks.c **** 
 305:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 306:..\FreeRTOS/tasks.c **** 
 307:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:..\FreeRTOS/tasks.c **** 	{																									\
 309:..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:..\FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:..\FreeRTOS/tasks.c **** 		{																								\
 312:..\FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:..\FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 314:..\FreeRTOS/tasks.c **** 		}																								\
 315:..\FreeRTOS/tasks.c **** 																										\
 316:..\FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 7


 317:..\FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 318:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 320:..\FreeRTOS/tasks.c **** 
 321:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 322:..\FreeRTOS/tasks.c **** 
 323:..\FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:..\FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 325:..\FreeRTOS/tasks.c **** 	being used. */
 326:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:..\FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:..\FreeRTOS/tasks.c **** 
 329:..\FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:..\FreeRTOS/tasks.c **** 
 331:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:..\FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:..\FreeRTOS/tasks.c **** 	architecture being used. */
 334:..\FreeRTOS/tasks.c **** 
 335:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:..\FreeRTOS/tasks.c **** 
 338:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 339:..\FreeRTOS/tasks.c **** 
 340:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:..\FreeRTOS/tasks.c **** 	{																								\
 342:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:..\FreeRTOS/tasks.c **** 																									\
 344:..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:..\FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:..\FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:..\FreeRTOS/tasks.c **** 
 350:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 351:..\FreeRTOS/tasks.c **** 
 352:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:..\FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:..\FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 356:..\FreeRTOS/tasks.c **** 	{																									\
 357:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:..\FreeRTOS/tasks.c **** 		{																								\
 359:..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:..\FreeRTOS/tasks.c **** 		}																								\
 361:..\FreeRTOS/tasks.c **** 	}
 362:..\FreeRTOS/tasks.c **** 
 363:..\FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:..\FreeRTOS/tasks.c **** 
 365:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 366:..\FreeRTOS/tasks.c **** 
 367:..\FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:..\FreeRTOS/tasks.c **** count overflows. */
 369:..\FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:..\FreeRTOS/tasks.c **** {																									\
 371:..\FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 372:..\FreeRTOS/tasks.c **** 																									\
 373:..\FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 8


 374:..\FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 375:..\FreeRTOS/tasks.c **** 																									\
 376:..\FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 377:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:..\FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 380:..\FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:..\FreeRTOS/tasks.c **** }
 382:..\FreeRTOS/tasks.c **** 
 383:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 384:..\FreeRTOS/tasks.c **** 
 385:..\FreeRTOS/tasks.c **** /*
 386:..\FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:..\FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 388:..\FreeRTOS/tasks.c ****  */
 389:..\FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:..\FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:..\FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:..\FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 394:..\FreeRTOS/tasks.c **** 
 395:..\FreeRTOS/tasks.c **** /*
 396:..\FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 397:..\FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 398:..\FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 399:..\FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 400:..\FreeRTOS/tasks.c ****  */
 401:..\FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 402:..\FreeRTOS/tasks.c **** 
 403:..\FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 404:..\FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 405:..\FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 406:..\FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 407:..\FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 408:..\FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 409:..\FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 410:..\FreeRTOS/tasks.c **** to its original value when it is released. */
 411:..\FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 412:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 413:..\FreeRTOS/tasks.c **** #else
 414:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 415:..\FreeRTOS/tasks.c **** #endif
 416:..\FreeRTOS/tasks.c **** 
 417:..\FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 418:..\FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 419:..\FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 420:..\FreeRTOS/tasks.c **** #endif
 421:..\FreeRTOS/tasks.c **** 
 422:..\FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 423:..\FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 424:..\FreeRTOS/tasks.c **** #endif
 425:..\FreeRTOS/tasks.c **** 
 426:..\FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 427:..\FreeRTOS/tasks.c **** 
 428:..\FreeRTOS/tasks.c **** /*
 429:..\FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 430:..\FreeRTOS/tasks.c ****  * into the TCB structure.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 9


 431:..\FreeRTOS/tasks.c ****  */
 432:..\FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 433:..\FreeRTOS/tasks.c **** 
 434:..\FreeRTOS/tasks.c **** /**
 435:..\FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 436:..\FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 437:..\FreeRTOS/tasks.c ****  * is in any other state.
 438:..\FreeRTOS/tasks.c ****  */
 439:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 440:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 442:..\FreeRTOS/tasks.c **** 
 443:..\FreeRTOS/tasks.c **** /*
 444:..\FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 445:..\FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 446:..\FreeRTOS/tasks.c ****  */
 447:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 448:..\FreeRTOS/tasks.c **** 
 449:..\FreeRTOS/tasks.c **** /*
 450:..\FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 451:..\FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 452:..\FreeRTOS/tasks.c ****  * creation of the first user task.
 453:..\FreeRTOS/tasks.c ****  *
 454:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 455:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 456:..\FreeRTOS/tasks.c ****  *
 457:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 458:..\FreeRTOS/tasks.c ****  *
 459:..\FreeRTOS/tasks.c ****  */
 460:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 461:..\FreeRTOS/tasks.c **** 
 462:..\FreeRTOS/tasks.c **** /*
 463:..\FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 464:..\FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 465:..\FreeRTOS/tasks.c ****  *
 466:..\FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 467:..\FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 468:..\FreeRTOS/tasks.c ****  */
 469:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 470:..\FreeRTOS/tasks.c **** 
 471:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 472:..\FreeRTOS/tasks.c **** 
 473:..\FreeRTOS/tasks.c **** #endif
 474:..\FreeRTOS/tasks.c **** 
 475:..\FreeRTOS/tasks.c **** /*
 476:..\FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 477:..\FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 478:..\FreeRTOS/tasks.c ****  * and its TCB deleted.
 479:..\FreeRTOS/tasks.c ****  */
 480:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 481:..\FreeRTOS/tasks.c **** 
 482:..\FreeRTOS/tasks.c **** /*
 483:..\FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 484:..\FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 485:..\FreeRTOS/tasks.c ****  */
 486:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 487:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 10


 488:..\FreeRTOS/tasks.c **** /*
 489:..\FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 490:..\FreeRTOS/tasks.c ****  * allocation was successful.
 491:..\FreeRTOS/tasks.c ****  */
 492:..\FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 493:..\FreeRTOS/tasks.c **** 
 494:..\FreeRTOS/tasks.c **** /*
 495:..\FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 496:..\FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 497:..\FreeRTOS/tasks.c ****  * a suspended list, etc.).
 498:..\FreeRTOS/tasks.c ****  *
 499:..\FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 500:..\FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 501:..\FreeRTOS/tasks.c ****  */
 502:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 503:..\FreeRTOS/tasks.c **** 
 504:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 505:..\FreeRTOS/tasks.c **** 
 506:..\FreeRTOS/tasks.c **** #endif
 507:..\FreeRTOS/tasks.c **** 
 508:..\FreeRTOS/tasks.c **** /*
 509:..\FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 510:..\FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 511:..\FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 512:..\FreeRTOS/tasks.c ****  */
 513:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 514:..\FreeRTOS/tasks.c **** 
 515:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 516:..\FreeRTOS/tasks.c **** 
 517:..\FreeRTOS/tasks.c **** #endif
 518:..\FreeRTOS/tasks.c **** 
 519:..\FreeRTOS/tasks.c **** /*
 520:..\FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 521:..\FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 522:..\FreeRTOS/tasks.c ****  *
 523:..\FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 524:..\FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 525:..\FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 526:..\FreeRTOS/tasks.c ****  * set to a value other than 1.
 527:..\FreeRTOS/tasks.c ****  */
 528:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 529:..\FreeRTOS/tasks.c **** 
 530:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 531:..\FreeRTOS/tasks.c **** 
 532:..\FreeRTOS/tasks.c **** #endif
 533:..\FreeRTOS/tasks.c **** 
 534:..\FreeRTOS/tasks.c **** /*
 535:..\FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 536:..\FreeRTOS/tasks.c ****  * will exit the Blocked state.
 537:..\FreeRTOS/tasks.c ****  */
 538:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 539:..\FreeRTOS/tasks.c **** 
 540:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 541:..\FreeRTOS/tasks.c **** 
 542:..\FreeRTOS/tasks.c **** 	/*
 543:..\FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 544:..\FreeRTOS/tasks.c **** 	 * human readable tables of task information.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 11


 545:..\FreeRTOS/tasks.c **** 	 */
 546:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 547:..\FreeRTOS/tasks.c **** 
 548:..\FreeRTOS/tasks.c **** #endif
 549:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 550:..\FreeRTOS/tasks.c **** 
 551:..\FreeRTOS/tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 552:..\FreeRTOS/tasks.c **** {
 553:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 554:..\FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 555:..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 556:..\FreeRTOS/tasks.c **** 
 557:..\FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 558:..\FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 559:..\FreeRTOS/tasks.c **** 
 560:..\FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 561:..\FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 562:..\FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 563:..\FreeRTOS/tasks.c **** 
 564:..\FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 565:..\FreeRTOS/tasks.c **** 	{
 566:..\FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 567:..\FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 568:..\FreeRTOS/tasks.c **** 			BaseType_t xRunPrivileged;
 569:..\FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 570:..\FreeRTOS/tasks.c **** 			{
 571:..\FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 572:..\FreeRTOS/tasks.c **** 			}
 573:..\FreeRTOS/tasks.c **** 			else
 574:..\FreeRTOS/tasks.c **** 			{
 575:..\FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 576:..\FreeRTOS/tasks.c **** 			}
 577:..\FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 578:..\FreeRTOS/tasks.c **** 
 579:..\FreeRTOS/tasks.c **** 			if( puxStackBuffer != NULL )
 580:..\FreeRTOS/tasks.c **** 			{
 581:..\FreeRTOS/tasks.c **** 				/* The application provided its own stack.  Note this so no
 582:..\FreeRTOS/tasks.c **** 				attempt is made to delete the stack should that task be
 583:..\FreeRTOS/tasks.c **** 				deleted. */
 584:..\FreeRTOS/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 585:..\FreeRTOS/tasks.c **** 			}
 586:..\FreeRTOS/tasks.c **** 			else
 587:..\FreeRTOS/tasks.c **** 			{
 588:..\FreeRTOS/tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 589:..\FreeRTOS/tasks.c **** 				deleted again if the task is deleted. */
 590:..\FreeRTOS/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 591:..\FreeRTOS/tasks.c **** 			}
 592:..\FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 593:..\FreeRTOS/tasks.c **** 
 594:..\FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 595:..\FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 596:..\FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 597:..\FreeRTOS/tasks.c **** 		required by the port. */
 598:..\FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 599:..\FreeRTOS/tasks.c **** 		{
 600:..\FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 601:..\FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 12


 602:..\FreeRTOS/tasks.c **** 
 603:..\FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 604:..\FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 605:..\FreeRTOS/tasks.c **** 		}
 606:..\FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 607:..\FreeRTOS/tasks.c **** 		{
 608:..\FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 609:..\FreeRTOS/tasks.c **** 
 610:..\FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 611:..\FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 612:..\FreeRTOS/tasks.c **** 
 613:..\FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 614:..\FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 615:..\FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 616:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 617:..\FreeRTOS/tasks.c **** 		}
 618:..\FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 619:..\FreeRTOS/tasks.c **** 
 620:..\FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 621:..\FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 622:..\FreeRTOS/tasks.c **** 
 623:..\FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 624:..\FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 625:..\FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 626:..\FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 627:..\FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 628:..\FreeRTOS/tasks.c **** 		{
 629:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 630:..\FreeRTOS/tasks.c **** 		}
 631:..\FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 632:..\FreeRTOS/tasks.c **** 		{
 633:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 634:..\FreeRTOS/tasks.c **** 		}
 635:..\FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 636:..\FreeRTOS/tasks.c **** 
 637:..\FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 638:..\FreeRTOS/tasks.c **** 		{
 639:..\FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 640:..\FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 641:..\FreeRTOS/tasks.c **** 			required.*/
 642:..\FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 643:..\FreeRTOS/tasks.c **** 		}
 644:..\FreeRTOS/tasks.c **** 		else
 645:..\FreeRTOS/tasks.c **** 		{
 646:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 647:..\FreeRTOS/tasks.c **** 		}
 648:..\FreeRTOS/tasks.c **** 
 649:..\FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 650:..\FreeRTOS/tasks.c **** 		updated. */
 651:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 652:..\FreeRTOS/tasks.c **** 		{
 653:..\FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 654:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 655:..\FreeRTOS/tasks.c **** 			{
 656:..\FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 657:..\FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 658:..\FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 13


 659:..\FreeRTOS/tasks.c **** 
 660:..\FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 661:..\FreeRTOS/tasks.c **** 				{
 662:..\FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 663:..\FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 664:..\FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 665:..\FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 666:..\FreeRTOS/tasks.c **** 				}
 667:..\FreeRTOS/tasks.c **** 				else
 668:..\FreeRTOS/tasks.c **** 				{
 669:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 670:..\FreeRTOS/tasks.c **** 				}
 671:..\FreeRTOS/tasks.c **** 			}
 672:..\FreeRTOS/tasks.c **** 			else
 673:..\FreeRTOS/tasks.c **** 			{
 674:..\FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 675:..\FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 676:..\FreeRTOS/tasks.c **** 				so far. */
 677:..\FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 678:..\FreeRTOS/tasks.c **** 				{
 679:..\FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 680:..\FreeRTOS/tasks.c **** 					{
 681:..\FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 682:..\FreeRTOS/tasks.c **** 					}
 683:..\FreeRTOS/tasks.c **** 					else
 684:..\FreeRTOS/tasks.c **** 					{
 685:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 686:..\FreeRTOS/tasks.c **** 					}
 687:..\FreeRTOS/tasks.c **** 				}
 688:..\FreeRTOS/tasks.c **** 				else
 689:..\FreeRTOS/tasks.c **** 				{
 690:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 691:..\FreeRTOS/tasks.c **** 				}
 692:..\FreeRTOS/tasks.c **** 			}
 693:..\FreeRTOS/tasks.c **** 
 694:..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
 695:..\FreeRTOS/tasks.c **** 
 696:..\FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 697:..\FreeRTOS/tasks.c **** 			{
 698:..\FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 699:..\FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 700:..\FreeRTOS/tasks.c **** 			}
 701:..\FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 702:..\FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 703:..\FreeRTOS/tasks.c **** 
 704:..\FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 705:..\FreeRTOS/tasks.c **** 
 706:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 707:..\FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 708:..\FreeRTOS/tasks.c **** 		}
 709:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 710:..\FreeRTOS/tasks.c **** 	}
 711:..\FreeRTOS/tasks.c **** 	else
 712:..\FreeRTOS/tasks.c **** 	{
 713:..\FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 714:..\FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 715:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 14


 716:..\FreeRTOS/tasks.c **** 
 717:..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 718:..\FreeRTOS/tasks.c **** 	{
 719:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 720:..\FreeRTOS/tasks.c **** 		{
 721:..\FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 722:..\FreeRTOS/tasks.c **** 			then it should run now. */
 723:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 724:..\FreeRTOS/tasks.c **** 			{
 725:..\FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 726:..\FreeRTOS/tasks.c **** 			}
 727:..\FreeRTOS/tasks.c **** 			else
 728:..\FreeRTOS/tasks.c **** 			{
 729:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 730:..\FreeRTOS/tasks.c **** 			}
 731:..\FreeRTOS/tasks.c **** 		}
 732:..\FreeRTOS/tasks.c **** 		else
 733:..\FreeRTOS/tasks.c **** 		{
 734:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 735:..\FreeRTOS/tasks.c **** 		}
 736:..\FreeRTOS/tasks.c **** 	}
 737:..\FreeRTOS/tasks.c **** 
 738:..\FreeRTOS/tasks.c **** 	return xReturn;
 739:..\FreeRTOS/tasks.c **** }
 740:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 741:..\FreeRTOS/tasks.c **** 
 742:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 743:..\FreeRTOS/tasks.c **** 
 744:..\FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 745:..\FreeRTOS/tasks.c **** 	{
 746:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 747:..\FreeRTOS/tasks.c **** 
 748:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 749:..\FreeRTOS/tasks.c **** 		{
 750:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 751:..\FreeRTOS/tasks.c **** 			being deleted. */
 752:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 753:..\FreeRTOS/tasks.c **** 
 754:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 755:..\FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 756:..\FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 757:..\FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 758:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 759:..\FreeRTOS/tasks.c **** 			{
 760:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 761:..\FreeRTOS/tasks.c **** 			}
 762:..\FreeRTOS/tasks.c **** 			else
 763:..\FreeRTOS/tasks.c **** 			{
 764:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 765:..\FreeRTOS/tasks.c **** 			}
 766:..\FreeRTOS/tasks.c **** 
 767:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 768:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 769:..\FreeRTOS/tasks.c **** 			{
 770:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 771:..\FreeRTOS/tasks.c **** 			}
 772:..\FreeRTOS/tasks.c **** 			else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 15


 773:..\FreeRTOS/tasks.c **** 			{
 774:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:..\FreeRTOS/tasks.c **** 			}
 776:..\FreeRTOS/tasks.c **** 
 777:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 778:..\FreeRTOS/tasks.c **** 
 779:..\FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 780:..\FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 781:..\FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 782:..\FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 783:..\FreeRTOS/tasks.c **** 
 784:..\FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 785:..\FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 786:..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
 787:..\FreeRTOS/tasks.c **** 
 788:..\FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 789:..\FreeRTOS/tasks.c **** 		}
 790:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 791:..\FreeRTOS/tasks.c **** 
 792:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 793:..\FreeRTOS/tasks.c **** 		been deleted. */
 794:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 795:..\FreeRTOS/tasks.c **** 		{
 796:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 797:..\FreeRTOS/tasks.c **** 			{
 798:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 799:..\FreeRTOS/tasks.c **** 
 800:..\FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 801:..\FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
 802:..\FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 803:..\FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 804:..\FreeRTOS/tasks.c **** 				required. */
 805:..\FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 806:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 807:..\FreeRTOS/tasks.c **** 			}
 808:..\FreeRTOS/tasks.c **** 			else
 809:..\FreeRTOS/tasks.c **** 			{
 810:..\FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 811:..\FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 812:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 813:..\FreeRTOS/tasks.c **** 				{
 814:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 815:..\FreeRTOS/tasks.c **** 				}
 816:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 817:..\FreeRTOS/tasks.c **** 			}
 818:..\FreeRTOS/tasks.c **** 		}
 819:..\FreeRTOS/tasks.c **** 	}
 820:..\FreeRTOS/tasks.c **** 
 821:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 822:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 823:..\FreeRTOS/tasks.c **** 
 824:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 825:..\FreeRTOS/tasks.c **** 
 826:..\FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 827:..\FreeRTOS/tasks.c **** 	{
 828:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 829:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 16


 830:..\FreeRTOS/tasks.c **** 
 831:..\FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 832:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 833:..\FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 834:..\FreeRTOS/tasks.c **** 
 835:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 836:..\FreeRTOS/tasks.c **** 		{
 837:..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 838:..\FreeRTOS/tasks.c **** 			block. */
 839:..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 840:..\FreeRTOS/tasks.c **** 
 841:..\FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 842:..\FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 843:..\FreeRTOS/tasks.c **** 
 844:..\FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 845:..\FreeRTOS/tasks.c **** 			{
 846:..\FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 847:..\FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 848:..\FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 849:..\FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 850:..\FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 851:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 852:..\FreeRTOS/tasks.c **** 				{
 853:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 854:..\FreeRTOS/tasks.c **** 				}
 855:..\FreeRTOS/tasks.c **** 				else
 856:..\FreeRTOS/tasks.c **** 				{
 857:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 858:..\FreeRTOS/tasks.c **** 				}
 859:..\FreeRTOS/tasks.c **** 			}
 860:..\FreeRTOS/tasks.c **** 			else
 861:..\FreeRTOS/tasks.c **** 			{
 862:..\FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 863:..\FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 864:..\FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 865:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 866:..\FreeRTOS/tasks.c **** 				{
 867:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 868:..\FreeRTOS/tasks.c **** 				}
 869:..\FreeRTOS/tasks.c **** 				else
 870:..\FreeRTOS/tasks.c **** 				{
 871:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 872:..\FreeRTOS/tasks.c **** 				}
 873:..\FreeRTOS/tasks.c **** 			}
 874:..\FreeRTOS/tasks.c **** 
 875:..\FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 876:..\FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 877:..\FreeRTOS/tasks.c **** 
 878:..\FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 879:..\FreeRTOS/tasks.c **** 			{
 880:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 881:..\FreeRTOS/tasks.c **** 
 882:..\FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 883:..\FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 884:..\FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 885:..\FreeRTOS/tasks.c **** 				{
 886:..\FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 17


 887:..\FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 888:..\FreeRTOS/tasks.c **** 					directly. */
 889:..\FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 890:..\FreeRTOS/tasks.c **** 				}
 891:..\FreeRTOS/tasks.c **** 				else
 892:..\FreeRTOS/tasks.c **** 				{
 893:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 894:..\FreeRTOS/tasks.c **** 				}
 895:..\FreeRTOS/tasks.c **** 
 896:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 897:..\FreeRTOS/tasks.c **** 			}
 898:..\FreeRTOS/tasks.c **** 			else
 899:..\FreeRTOS/tasks.c **** 			{
 900:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 901:..\FreeRTOS/tasks.c **** 			}
 902:..\FreeRTOS/tasks.c **** 		}
 903:..\FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 904:..\FreeRTOS/tasks.c **** 
 905:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 906:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 907:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 908:..\FreeRTOS/tasks.c **** 		{
 909:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 910:..\FreeRTOS/tasks.c **** 		}
 911:..\FreeRTOS/tasks.c **** 		else
 912:..\FreeRTOS/tasks.c **** 		{
 913:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 914:..\FreeRTOS/tasks.c **** 		}
 915:..\FreeRTOS/tasks.c **** 	}
 916:..\FreeRTOS/tasks.c **** 
 917:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 918:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 919:..\FreeRTOS/tasks.c **** 
 920:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 921:..\FreeRTOS/tasks.c **** 
 922:..\FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 923:..\FreeRTOS/tasks.c **** 	{
 924:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 925:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 926:..\FreeRTOS/tasks.c **** 
 927:..\FreeRTOS/tasks.c **** 
 928:..\FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 929:..\FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 930:..\FreeRTOS/tasks.c **** 		{
 931:..\FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 932:..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 933:..\FreeRTOS/tasks.c **** 			{
 934:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 935:..\FreeRTOS/tasks.c **** 
 936:..\FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 937:..\FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 938:..\FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 939:..\FreeRTOS/tasks.c **** 				is resumed.
 940:..\FreeRTOS/tasks.c **** 
 941:..\FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 942:..\FreeRTOS/tasks.c **** 				executing task. */
 943:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 18


 944:..\FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 945:..\FreeRTOS/tasks.c **** 				not a problem. */
 946:..\FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 947:..\FreeRTOS/tasks.c **** 
 948:..\FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 949:..\FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 950:..\FreeRTOS/tasks.c **** 				both lists. */
 951:..\FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 952:..\FreeRTOS/tasks.c **** 				{
 953:..\FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 954:..\FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 955:..\FreeRTOS/tasks.c **** 					directly. */
 956:..\FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 957:..\FreeRTOS/tasks.c **** 				}
 958:..\FreeRTOS/tasks.c **** 				else
 959:..\FreeRTOS/tasks.c **** 				{
 960:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 961:..\FreeRTOS/tasks.c **** 				}
 962:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 963:..\FreeRTOS/tasks.c **** 			}
 964:..\FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 965:..\FreeRTOS/tasks.c **** 		}
 966:..\FreeRTOS/tasks.c **** 		else
 967:..\FreeRTOS/tasks.c **** 		{
 968:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 969:..\FreeRTOS/tasks.c **** 		}
 970:..\FreeRTOS/tasks.c **** 
 971:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 972:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 973:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 974:..\FreeRTOS/tasks.c **** 		{
 975:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 976:..\FreeRTOS/tasks.c **** 		}
 977:..\FreeRTOS/tasks.c **** 		else
 978:..\FreeRTOS/tasks.c **** 		{
 979:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 980:..\FreeRTOS/tasks.c **** 		}
 981:..\FreeRTOS/tasks.c **** 	}
 982:..\FreeRTOS/tasks.c **** 
 983:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 984:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 985:..\FreeRTOS/tasks.c **** 
 986:..\FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 987:..\FreeRTOS/tasks.c **** 
 988:..\FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 989:..\FreeRTOS/tasks.c **** 	{
 990:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 991:..\FreeRTOS/tasks.c **** 	List_t *pxStateList;
 992:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 993:..\FreeRTOS/tasks.c **** 
 994:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 995:..\FreeRTOS/tasks.c **** 
 996:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 997:..\FreeRTOS/tasks.c **** 		{
 998:..\FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 999:..\FreeRTOS/tasks.c **** 			eReturn = eRunning;
1000:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 19


1001:..\FreeRTOS/tasks.c **** 		else
1002:..\FreeRTOS/tasks.c **** 		{
1003:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1004:..\FreeRTOS/tasks.c **** 			{
1005:..\FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
1006:..\FreeRTOS/tasks.c **** 			}
1007:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1008:..\FreeRTOS/tasks.c **** 
1009:..\FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1010:..\FreeRTOS/tasks.c **** 			{
1011:..\FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1012:..\FreeRTOS/tasks.c **** 				lists. */
1013:..\FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1014:..\FreeRTOS/tasks.c **** 			}
1015:..\FreeRTOS/tasks.c **** 
1016:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1017:..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1018:..\FreeRTOS/tasks.c **** 				{
1019:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1020:..\FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1021:..\FreeRTOS/tasks.c **** 					indefinitely? */
1022:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1023:..\FreeRTOS/tasks.c **** 					{
1024:..\FreeRTOS/tasks.c **** 						eReturn = eSuspended;
1025:..\FreeRTOS/tasks.c **** 					}
1026:..\FreeRTOS/tasks.c **** 					else
1027:..\FreeRTOS/tasks.c **** 					{
1028:..\FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1029:..\FreeRTOS/tasks.c **** 					}
1030:..\FreeRTOS/tasks.c **** 				}
1031:..\FreeRTOS/tasks.c **** 			#endif
1032:..\FreeRTOS/tasks.c **** 
1033:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1034:..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
1035:..\FreeRTOS/tasks.c **** 				{
1036:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1037:..\FreeRTOS/tasks.c **** 					tasks list. */
1038:..\FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1039:..\FreeRTOS/tasks.c **** 				}
1040:..\FreeRTOS/tasks.c **** 			#endif
1041:..\FreeRTOS/tasks.c **** 
1042:..\FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1043:..\FreeRTOS/tasks.c **** 			{
1044:..\FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1045:..\FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1046:..\FreeRTOS/tasks.c **** 				eReturn = eReady;
1047:..\FreeRTOS/tasks.c **** 			}
1048:..\FreeRTOS/tasks.c **** 		}
1049:..\FreeRTOS/tasks.c **** 
1050:..\FreeRTOS/tasks.c **** 		return eReturn;
1051:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1052:..\FreeRTOS/tasks.c **** 
1053:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1054:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1055:..\FreeRTOS/tasks.c **** 
1056:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1057:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 20


1058:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1059:..\FreeRTOS/tasks.c **** 	{
1060:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1061:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1062:..\FreeRTOS/tasks.c **** 
1063:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1064:..\FreeRTOS/tasks.c **** 		{
1065:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1066:..\FreeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1067:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1068:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1069:..\FreeRTOS/tasks.c **** 		}
1070:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1071:..\FreeRTOS/tasks.c **** 
1072:..\FreeRTOS/tasks.c **** 		return uxReturn;
1073:..\FreeRTOS/tasks.c **** 	}
1074:..\FreeRTOS/tasks.c **** 
1075:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1076:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1077:..\FreeRTOS/tasks.c **** 
1078:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1079:..\FreeRTOS/tasks.c **** 
1080:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1081:..\FreeRTOS/tasks.c **** 	{
1082:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1083:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1084:..\FreeRTOS/tasks.c **** 
1085:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1086:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1087:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1088:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1089:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1090:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1091:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1092:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1093:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1094:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1095:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1096:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1097:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1098:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1099:..\FreeRTOS/tasks.c **** 		provided on the following link:
1100:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1101:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1102:..\FreeRTOS/tasks.c **** 
1103:..\FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1104:..\FreeRTOS/tasks.c **** 		{
1105:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1106:..\FreeRTOS/tasks.c **** 			task that is being queried. */
1107:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1108:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1109:..\FreeRTOS/tasks.c **** 		}
1110:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1111:..\FreeRTOS/tasks.c **** 
1112:..\FreeRTOS/tasks.c **** 		return uxReturn;
1113:..\FreeRTOS/tasks.c **** 	}
1114:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 21


1115:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1116:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1117:..\FreeRTOS/tasks.c **** 
1118:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1119:..\FreeRTOS/tasks.c **** 
1120:..\FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1121:..\FreeRTOS/tasks.c **** 	{
1122:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1123:..\FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1124:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1125:..\FreeRTOS/tasks.c **** 
1126:..\FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1127:..\FreeRTOS/tasks.c **** 
1128:..\FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1129:..\FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1130:..\FreeRTOS/tasks.c **** 		{
1131:..\FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1132:..\FreeRTOS/tasks.c **** 		}
1133:..\FreeRTOS/tasks.c **** 		else
1134:..\FreeRTOS/tasks.c **** 		{
1135:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1136:..\FreeRTOS/tasks.c **** 		}
1137:..\FreeRTOS/tasks.c **** 
1138:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1139:..\FreeRTOS/tasks.c **** 		{
1140:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1141:..\FreeRTOS/tasks.c **** 			task that is being changed. */
1142:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1143:..\FreeRTOS/tasks.c **** 
1144:..\FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1145:..\FreeRTOS/tasks.c **** 
1146:..\FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1147:..\FreeRTOS/tasks.c **** 			{
1148:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1149:..\FreeRTOS/tasks.c **** 			}
1150:..\FreeRTOS/tasks.c **** 			#else
1151:..\FreeRTOS/tasks.c **** 			{
1152:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1153:..\FreeRTOS/tasks.c **** 			}
1154:..\FreeRTOS/tasks.c **** 			#endif
1155:..\FreeRTOS/tasks.c **** 
1156:..\FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1157:..\FreeRTOS/tasks.c **** 			{
1158:..\FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1159:..\FreeRTOS/tasks.c **** 				priority than the calling task. */
1160:..\FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1161:..\FreeRTOS/tasks.c **** 				{
1162:..\FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1163:..\FreeRTOS/tasks.c **** 					{
1164:..\FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1165:..\FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1166:..\FreeRTOS/tasks.c **** 						raised above that of the running task? */
1167:..\FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1168:..\FreeRTOS/tasks.c **** 						{
1169:..\FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1170:..\FreeRTOS/tasks.c **** 						}
1171:..\FreeRTOS/tasks.c **** 						else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 22


1172:..\FreeRTOS/tasks.c **** 						{
1173:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1174:..\FreeRTOS/tasks.c **** 						}
1175:..\FreeRTOS/tasks.c **** 					}
1176:..\FreeRTOS/tasks.c **** 					else
1177:..\FreeRTOS/tasks.c **** 					{
1178:..\FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1179:..\FreeRTOS/tasks.c **** 						but the running task must already be the highest
1180:..\FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1181:..\FreeRTOS/tasks.c **** 					}
1182:..\FreeRTOS/tasks.c **** 				}
1183:..\FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1184:..\FreeRTOS/tasks.c **** 				{
1185:..\FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1186:..\FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1187:..\FreeRTOS/tasks.c **** 					is ready to execute. */
1188:..\FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1189:..\FreeRTOS/tasks.c **** 				}
1190:..\FreeRTOS/tasks.c **** 				else
1191:..\FreeRTOS/tasks.c **** 				{
1192:..\FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1193:..\FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1194:..\FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1195:..\FreeRTOS/tasks.c **** 				}
1196:..\FreeRTOS/tasks.c **** 
1197:..\FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1198:..\FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1199:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1200:..\FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1201:..\FreeRTOS/tasks.c **** 
1202:..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1203:..\FreeRTOS/tasks.c **** 				{
1204:..\FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1205:..\FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1206:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1207:..\FreeRTOS/tasks.c **** 					{
1208:..\FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1209:..\FreeRTOS/tasks.c **** 					}
1210:..\FreeRTOS/tasks.c **** 					else
1211:..\FreeRTOS/tasks.c **** 					{
1212:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1213:..\FreeRTOS/tasks.c **** 					}
1214:..\FreeRTOS/tasks.c **** 
1215:..\FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1216:..\FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1217:..\FreeRTOS/tasks.c **** 				}
1218:..\FreeRTOS/tasks.c **** 				#else
1219:..\FreeRTOS/tasks.c **** 				{
1220:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1221:..\FreeRTOS/tasks.c **** 				}
1222:..\FreeRTOS/tasks.c **** 				#endif
1223:..\FreeRTOS/tasks.c **** 
1224:..\FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1225:..\FreeRTOS/tasks.c **** 				being used for anything else. */
1226:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1227:..\FreeRTOS/tasks.c **** 				{
1228:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 23


1229:..\FreeRTOS/tasks.c **** 				}
1230:..\FreeRTOS/tasks.c **** 				else
1231:..\FreeRTOS/tasks.c **** 				{
1232:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1233:..\FreeRTOS/tasks.c **** 				}
1234:..\FreeRTOS/tasks.c **** 
1235:..\FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1236:..\FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1237:..\FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1238:..\FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1239:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
1240:..\FreeRTOS/tasks.c **** 				{
1241:..\FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1242:..\FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1243:..\FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1244:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1245:..\FreeRTOS/tasks.c **** 					{
1246:..\FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1247:..\FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1248:..\FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1249:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1250:..\FreeRTOS/tasks.c **** 					}
1251:..\FreeRTOS/tasks.c **** 					else
1252:..\FreeRTOS/tasks.c **** 					{
1253:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1254:..\FreeRTOS/tasks.c **** 					}
1255:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1256:..\FreeRTOS/tasks.c **** 				}
1257:..\FreeRTOS/tasks.c **** 				else
1258:..\FreeRTOS/tasks.c **** 				{
1259:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1260:..\FreeRTOS/tasks.c **** 				}
1261:..\FreeRTOS/tasks.c **** 
1262:..\FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
1263:..\FreeRTOS/tasks.c **** 				{
1264:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1265:..\FreeRTOS/tasks.c **** 				}
1266:..\FreeRTOS/tasks.c **** 				else
1267:..\FreeRTOS/tasks.c **** 				{
1268:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1269:..\FreeRTOS/tasks.c **** 				}
1270:..\FreeRTOS/tasks.c **** 
1271:..\FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1272:..\FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1273:..\FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1274:..\FreeRTOS/tasks.c **** 			}
1275:..\FreeRTOS/tasks.c **** 		}
1276:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1277:..\FreeRTOS/tasks.c **** 	}
1278:..\FreeRTOS/tasks.c **** 
1279:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1280:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1281:..\FreeRTOS/tasks.c **** 
1282:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1283:..\FreeRTOS/tasks.c **** 
1284:..\FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1285:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 24


1286:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1287:..\FreeRTOS/tasks.c **** 
1288:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1289:..\FreeRTOS/tasks.c **** 		{
1290:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1291:..\FreeRTOS/tasks.c **** 			being suspended. */
1292:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1293:..\FreeRTOS/tasks.c **** 
1294:..\FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1295:..\FreeRTOS/tasks.c **** 
1296:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1297:..\FreeRTOS/tasks.c **** 			suspended list. */
1298:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1299:..\FreeRTOS/tasks.c **** 			{
1300:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1301:..\FreeRTOS/tasks.c **** 			}
1302:..\FreeRTOS/tasks.c **** 			else
1303:..\FreeRTOS/tasks.c **** 			{
1304:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1305:..\FreeRTOS/tasks.c **** 			}
1306:..\FreeRTOS/tasks.c **** 
1307:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1308:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1309:..\FreeRTOS/tasks.c **** 			{
1310:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1311:..\FreeRTOS/tasks.c **** 			}
1312:..\FreeRTOS/tasks.c **** 			else
1313:..\FreeRTOS/tasks.c **** 			{
1314:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:..\FreeRTOS/tasks.c **** 			}
1316:..\FreeRTOS/tasks.c **** 
1317:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1318:..\FreeRTOS/tasks.c **** 		}
1319:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1320:..\FreeRTOS/tasks.c **** 
1321:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1322:..\FreeRTOS/tasks.c **** 		{
1323:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1324:..\FreeRTOS/tasks.c **** 			{
1325:..\FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1326:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1327:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1328:..\FreeRTOS/tasks.c **** 			}
1329:..\FreeRTOS/tasks.c **** 			else
1330:..\FreeRTOS/tasks.c **** 			{
1331:..\FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1332:..\FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1333:..\FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1334:..\FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1335:..\FreeRTOS/tasks.c **** 				{
1336:..\FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1337:..\FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1338:..\FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1339:..\FreeRTOS/tasks.c **** 					is. */
1340:..\FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1341:..\FreeRTOS/tasks.c **** 				}
1342:..\FreeRTOS/tasks.c **** 				else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 25


1343:..\FreeRTOS/tasks.c **** 				{
1344:..\FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1345:..\FreeRTOS/tasks.c **** 				}
1346:..\FreeRTOS/tasks.c **** 			}
1347:..\FreeRTOS/tasks.c **** 		}
1348:..\FreeRTOS/tasks.c **** 		else
1349:..\FreeRTOS/tasks.c **** 		{
1350:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1351:..\FreeRTOS/tasks.c **** 			{
1352:..\FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1353:..\FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1354:..\FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1355:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
1356:..\FreeRTOS/tasks.c **** 				{
1357:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
1358:..\FreeRTOS/tasks.c **** 				}
1359:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
1360:..\FreeRTOS/tasks.c **** 			}
1361:..\FreeRTOS/tasks.c **** 			else
1362:..\FreeRTOS/tasks.c **** 			{
1363:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1364:..\FreeRTOS/tasks.c **** 			}
1365:..\FreeRTOS/tasks.c **** 		}
1366:..\FreeRTOS/tasks.c **** 	}
1367:..\FreeRTOS/tasks.c **** 
1368:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1369:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1370:..\FreeRTOS/tasks.c **** 
1371:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1372:..\FreeRTOS/tasks.c **** 
1373:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1374:..\FreeRTOS/tasks.c **** 	{
  27              		.loc 1 1374 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1375:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1376:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1377:..\FreeRTOS/tasks.c **** 
1378:..\FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1379:..\FreeRTOS/tasks.c **** 		section. */
1380:..\FreeRTOS/tasks.c **** 
1381:..\FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1382:..\FreeRTOS/tasks.c **** 		configASSERT( xTask );
1383:..\FreeRTOS/tasks.c **** 
1384:..\FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1385:..\FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
  33              		.loc 1 1385 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 0B4B     		ldr	r3, .L10
  36 0004 9A42     		cmp	r2, r3
  37 0006 01D1     		bne	.L5
  38 0008 0123     		movs	r3, #1
  39 000a 00E0     		b	.L2
  40              	.L5:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 26


  41 000c 0023     		movs	r3, #0
  42              	.L2:
  43              		.loc 1 1385 0 is_stmt 0 discriminator 4
  44 000e 43B1     		cbz	r3, .L6
1386:..\FreeRTOS/tasks.c **** 		{
1387:..\FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1388:..\FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1388 0 is_stmt 1
  46 0010 826A     		ldr	r2, [r0, #40]
  47 0012 0849     		ldr	r1, .L10+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 06D0     		beq	.L7
1389:..\FreeRTOS/tasks.c **** 			{
1390:..\FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1391:..\FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1392:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  50              		.loc 1 1392 0
  51 0018 02B1     		cbz	r2, .L4
  52 001a 0023     		movs	r3, #0
  53              	.L4:
  54              		.loc 1 1392 0 is_stmt 0 discriminator 4
  55 001c 2BB9     		cbnz	r3, .L9
1375:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  56              		.loc 1 1375 0 is_stmt 1
  57 001e 0020     		movs	r0, #0
  58              	.LVL1:
  59 0020 7047     		bx	lr
  60              	.LVL2:
  61              	.L6:
  62 0022 0020     		movs	r0, #0
  63              	.LVL3:
  64 0024 7047     		bx	lr
  65              	.LVL4:
  66              	.L7:
  67 0026 0020     		movs	r0, #0
  68              	.LVL5:
  69 0028 7047     		bx	lr
  70              	.LVL6:
  71              	.L9:
1393:..\FreeRTOS/tasks.c **** 				{
1394:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
  72              		.loc 1 1394 0
  73 002a 0120     		movs	r0, #1
  74              	.LVL7:
1395:..\FreeRTOS/tasks.c **** 				}
1396:..\FreeRTOS/tasks.c **** 				else
1397:..\FreeRTOS/tasks.c **** 				{
1398:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1399:..\FreeRTOS/tasks.c **** 				}
1400:..\FreeRTOS/tasks.c **** 			}
1401:..\FreeRTOS/tasks.c **** 			else
1402:..\FreeRTOS/tasks.c **** 			{
1403:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1404:..\FreeRTOS/tasks.c **** 			}
1405:..\FreeRTOS/tasks.c **** 		}
1406:..\FreeRTOS/tasks.c **** 		else
1407:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 27


1408:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1409:..\FreeRTOS/tasks.c **** 		}
1410:..\FreeRTOS/tasks.c **** 
1411:..\FreeRTOS/tasks.c **** 		return xReturn;
1412:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  75              		.loc 1 1412 0
  76 002c 7047     		bx	lr
  77              	.L11:
  78 002e 00BF     		.align	2
  79              	.L10:
  80 0030 00000000 		.word	.LANCHOR0
  81 0034 14000000 		.word	.LANCHOR0+20
  82              		.cfi_endproc
  83              	.LFE73:
  84              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  85              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  86              		.align	2
  87              		.thumb
  88              		.thumb_func
  89              		.type	prvTaskCheckFreeStackSpace, %function
  90              	prvTaskCheckFreeStackSpace:
  91              	.LFB98:
1413:..\FreeRTOS/tasks.c **** 
1414:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1415:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1416:..\FreeRTOS/tasks.c **** 
1417:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1418:..\FreeRTOS/tasks.c **** 
1419:..\FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1420:..\FreeRTOS/tasks.c **** 	{
1421:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1422:..\FreeRTOS/tasks.c **** 
1423:..\FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1424:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1425:..\FreeRTOS/tasks.c **** 
1426:..\FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1427:..\FreeRTOS/tasks.c **** 		currently executing task. */
1428:..\FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1429:..\FreeRTOS/tasks.c **** 		{
1430:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1431:..\FreeRTOS/tasks.c **** 			{
1432:..\FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1433:..\FreeRTOS/tasks.c **** 				{
1434:..\FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1435:..\FreeRTOS/tasks.c **** 
1436:..\FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1437:..\FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1438:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1439:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1440:..\FreeRTOS/tasks.c **** 
1441:..\FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1442:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1443:..\FreeRTOS/tasks.c **** 					{
1444:..\FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1445:..\FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1446:..\FreeRTOS/tasks.c **** 						next yield. */
1447:..\FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 28


1448:..\FreeRTOS/tasks.c **** 					}
1449:..\FreeRTOS/tasks.c **** 					else
1450:..\FreeRTOS/tasks.c **** 					{
1451:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1452:..\FreeRTOS/tasks.c **** 					}
1453:..\FreeRTOS/tasks.c **** 				}
1454:..\FreeRTOS/tasks.c **** 				else
1455:..\FreeRTOS/tasks.c **** 				{
1456:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1457:..\FreeRTOS/tasks.c **** 				}
1458:..\FreeRTOS/tasks.c **** 			}
1459:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1460:..\FreeRTOS/tasks.c **** 		}
1461:..\FreeRTOS/tasks.c **** 		else
1462:..\FreeRTOS/tasks.c **** 		{
1463:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1464:..\FreeRTOS/tasks.c **** 		}
1465:..\FreeRTOS/tasks.c **** 	}
1466:..\FreeRTOS/tasks.c **** 
1467:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1468:..\FreeRTOS/tasks.c **** 
1469:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1470:..\FreeRTOS/tasks.c **** 
1471:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1472:..\FreeRTOS/tasks.c **** 
1473:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1474:..\FreeRTOS/tasks.c **** 	{
1475:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1476:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1477:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1478:..\FreeRTOS/tasks.c **** 
1479:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1480:..\FreeRTOS/tasks.c **** 
1481:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1482:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1483:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1484:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1485:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1486:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1487:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1488:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1489:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1490:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1491:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1492:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1493:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1494:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1495:..\FreeRTOS/tasks.c **** 		provided on the following link:
1496:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1497:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1498:..\FreeRTOS/tasks.c **** 
1499:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1500:..\FreeRTOS/tasks.c **** 		{
1501:..\FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1502:..\FreeRTOS/tasks.c **** 			{
1503:..\FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1504:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 29


1505:..\FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1506:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1507:..\FreeRTOS/tasks.c **** 				{
1508:..\FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1509:..\FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1510:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1511:..\FreeRTOS/tasks.c **** 					{
1512:..\FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1513:..\FreeRTOS/tasks.c **** 					}
1514:..\FreeRTOS/tasks.c **** 					else
1515:..\FreeRTOS/tasks.c **** 					{
1516:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1517:..\FreeRTOS/tasks.c **** 					}
1518:..\FreeRTOS/tasks.c **** 
1519:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1520:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1521:..\FreeRTOS/tasks.c **** 				}
1522:..\FreeRTOS/tasks.c **** 				else
1523:..\FreeRTOS/tasks.c **** 				{
1524:..\FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1525:..\FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1526:..\FreeRTOS/tasks.c **** 					unsuspended. */
1527:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1528:..\FreeRTOS/tasks.c **** 				}
1529:..\FreeRTOS/tasks.c **** 			}
1530:..\FreeRTOS/tasks.c **** 			else
1531:..\FreeRTOS/tasks.c **** 			{
1532:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1533:..\FreeRTOS/tasks.c **** 			}
1534:..\FreeRTOS/tasks.c **** 		}
1535:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1536:..\FreeRTOS/tasks.c **** 
1537:..\FreeRTOS/tasks.c **** 		return xYieldRequired;
1538:..\FreeRTOS/tasks.c **** 	}
1539:..\FreeRTOS/tasks.c **** 
1540:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1541:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1542:..\FreeRTOS/tasks.c **** 
1543:..\FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1544:..\FreeRTOS/tasks.c **** {
1545:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
1546:..\FreeRTOS/tasks.c **** 
1547:..\FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1548:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1549:..\FreeRTOS/tasks.c **** 	{
1550:..\FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1551:..\FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1552:..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1553:..\FreeRTOS/tasks.c **** 	}
1554:..\FreeRTOS/tasks.c **** 	#else
1555:..\FreeRTOS/tasks.c **** 	{
1556:..\FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1557:..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1558:..\FreeRTOS/tasks.c **** 	}
1559:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1560:..\FreeRTOS/tasks.c **** 
1561:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 30


1562:..\FreeRTOS/tasks.c **** 	{
1563:..\FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1564:..\FreeRTOS/tasks.c **** 		{
1565:..\FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1566:..\FreeRTOS/tasks.c **** 		}
1567:..\FreeRTOS/tasks.c **** 		else
1568:..\FreeRTOS/tasks.c **** 		{
1569:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1570:..\FreeRTOS/tasks.c **** 		}
1571:..\FreeRTOS/tasks.c **** 	}
1572:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1573:..\FreeRTOS/tasks.c **** 
1574:..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
1575:..\FreeRTOS/tasks.c **** 	{
1576:..\FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1577:..\FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1578:..\FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1579:..\FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1580:..\FreeRTOS/tasks.c **** 		starts to run. */
1581:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1582:..\FreeRTOS/tasks.c **** 
1583:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1584:..\FreeRTOS/tasks.c **** 		{
1585:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1586:..\FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1587:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1588:..\FreeRTOS/tasks.c **** 		}
1589:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1590:..\FreeRTOS/tasks.c **** 
1591:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1592:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1593:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1594:..\FreeRTOS/tasks.c **** 
1595:..\FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1596:..\FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1597:..\FreeRTOS/tasks.c **** 		the run time counter time base. */
1598:..\FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1599:..\FreeRTOS/tasks.c **** 
1600:..\FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1601:..\FreeRTOS/tasks.c **** 		portable interface. */
1602:..\FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1603:..\FreeRTOS/tasks.c **** 		{
1604:..\FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1605:..\FreeRTOS/tasks.c **** 			function will not return. */
1606:..\FreeRTOS/tasks.c **** 		}
1607:..\FreeRTOS/tasks.c **** 		else
1608:..\FreeRTOS/tasks.c **** 		{
1609:..\FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1610:..\FreeRTOS/tasks.c **** 		}
1611:..\FreeRTOS/tasks.c **** 	}
1612:..\FreeRTOS/tasks.c **** 	else
1613:..\FreeRTOS/tasks.c **** 	{
1614:..\FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1615:..\FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1616:..\FreeRTOS/tasks.c **** 		or the timer task. */
1617:..\FreeRTOS/tasks.c **** 		configASSERT( xReturn );
1618:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 31


1619:..\FreeRTOS/tasks.c **** }
1620:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1621:..\FreeRTOS/tasks.c **** 
1622:..\FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1623:..\FreeRTOS/tasks.c **** {
1624:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1625:..\FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1626:..\FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1627:..\FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
1628:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
1629:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
1630:..\FreeRTOS/tasks.c **** }
1631:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1632:..\FreeRTOS/tasks.c **** 
1633:..\FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1634:..\FreeRTOS/tasks.c **** {
1635:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1636:..\FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1637:..\FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1638:..\FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1639:..\FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
1640:..\FreeRTOS/tasks.c **** }
1641:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1642:..\FreeRTOS/tasks.c **** 
1643:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:..\FreeRTOS/tasks.c **** 
1645:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1646:..\FreeRTOS/tasks.c **** 	{
1647:..\FreeRTOS/tasks.c **** 	TickType_t xReturn;
1648:..\FreeRTOS/tasks.c **** 
1649:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1650:..\FreeRTOS/tasks.c **** 		{
1651:..\FreeRTOS/tasks.c **** 			xReturn = 0;
1652:..\FreeRTOS/tasks.c **** 		}
1653:..\FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1654:..\FreeRTOS/tasks.c **** 		{
1655:..\FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1656:..\FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1657:..\FreeRTOS/tasks.c **** 			processed. */
1658:..\FreeRTOS/tasks.c **** 			xReturn = 0;
1659:..\FreeRTOS/tasks.c **** 		}
1660:..\FreeRTOS/tasks.c **** 		else
1661:..\FreeRTOS/tasks.c **** 		{
1662:..\FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1663:..\FreeRTOS/tasks.c **** 		}
1664:..\FreeRTOS/tasks.c **** 
1665:..\FreeRTOS/tasks.c **** 		return xReturn;
1666:..\FreeRTOS/tasks.c **** 	}
1667:..\FreeRTOS/tasks.c **** 
1668:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1669:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1670:..\FreeRTOS/tasks.c **** 
1671:..\FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
1672:..\FreeRTOS/tasks.c **** {
1673:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
1674:..\FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
1675:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 32


1676:..\FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1677:..\FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1678:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1679:..\FreeRTOS/tasks.c **** 
1680:..\FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1681:..\FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1682:..\FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1683:..\FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1684:..\FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1685:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
1686:..\FreeRTOS/tasks.c **** 	{
1687:..\FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
1688:..\FreeRTOS/tasks.c **** 
1689:..\FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1690:..\FreeRTOS/tasks.c **** 		{
1691:..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1692:..\FreeRTOS/tasks.c **** 			{
1693:..\FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1694:..\FreeRTOS/tasks.c **** 				appropriate ready list. */
1695:..\FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1696:..\FreeRTOS/tasks.c **** 				{
1697:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1698:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1699:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1700:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1701:..\FreeRTOS/tasks.c **** 
1702:..\FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
1703:..\FreeRTOS/tasks.c **** 					task then a yield must be performed. */
1704:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1705:..\FreeRTOS/tasks.c **** 					{
1706:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
1707:..\FreeRTOS/tasks.c **** 					}
1708:..\FreeRTOS/tasks.c **** 					else
1709:..\FreeRTOS/tasks.c **** 					{
1710:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1711:..\FreeRTOS/tasks.c **** 					}
1712:..\FreeRTOS/tasks.c **** 				}
1713:..\FreeRTOS/tasks.c **** 
1714:..\FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1715:..\FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1716:..\FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1717:..\FreeRTOS/tasks.c **** 				time. */
1718:..\FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
1719:..\FreeRTOS/tasks.c **** 				{
1720:..\FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
1721:..\FreeRTOS/tasks.c **** 					{
1722:..\FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
1723:..\FreeRTOS/tasks.c **** 						{
1724:..\FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
1725:..\FreeRTOS/tasks.c **** 						}
1726:..\FreeRTOS/tasks.c **** 						else
1727:..\FreeRTOS/tasks.c **** 						{
1728:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1729:..\FreeRTOS/tasks.c **** 						}
1730:..\FreeRTOS/tasks.c **** 						--uxPendedTicks;
1731:..\FreeRTOS/tasks.c **** 					}
1732:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 33


1733:..\FreeRTOS/tasks.c **** 				else
1734:..\FreeRTOS/tasks.c **** 				{
1735:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1736:..\FreeRTOS/tasks.c **** 				}
1737:..\FreeRTOS/tasks.c **** 
1738:..\FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
1739:..\FreeRTOS/tasks.c **** 				{
1740:..\FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1741:..\FreeRTOS/tasks.c **** 					{
1742:..\FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
1743:..\FreeRTOS/tasks.c **** 					}
1744:..\FreeRTOS/tasks.c **** 					#endif
1745:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1746:..\FreeRTOS/tasks.c **** 				}
1747:..\FreeRTOS/tasks.c **** 				else
1748:..\FreeRTOS/tasks.c **** 				{
1749:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1750:..\FreeRTOS/tasks.c **** 				}
1751:..\FreeRTOS/tasks.c **** 			}
1752:..\FreeRTOS/tasks.c **** 		}
1753:..\FreeRTOS/tasks.c **** 		else
1754:..\FreeRTOS/tasks.c **** 		{
1755:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1756:..\FreeRTOS/tasks.c **** 		}
1757:..\FreeRTOS/tasks.c **** 	}
1758:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1759:..\FreeRTOS/tasks.c **** 
1760:..\FreeRTOS/tasks.c **** 	return xAlreadyYielded;
1761:..\FreeRTOS/tasks.c **** }
1762:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1763:..\FreeRTOS/tasks.c **** 
1764:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
1765:..\FreeRTOS/tasks.c **** {
1766:..\FreeRTOS/tasks.c **** TickType_t xTicks;
1767:..\FreeRTOS/tasks.c **** 
1768:..\FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1769:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1770:..\FreeRTOS/tasks.c **** 	{
1771:..\FreeRTOS/tasks.c **** 		xTicks = xTickCount;
1772:..\FreeRTOS/tasks.c **** 	}
1773:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1774:..\FreeRTOS/tasks.c **** 
1775:..\FreeRTOS/tasks.c **** 	return xTicks;
1776:..\FreeRTOS/tasks.c **** }
1777:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1778:..\FreeRTOS/tasks.c **** 
1779:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1780:..\FreeRTOS/tasks.c **** {
1781:..\FreeRTOS/tasks.c **** TickType_t xReturn;
1782:..\FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
1783:..\FreeRTOS/tasks.c **** 
1784:..\FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1785:..\FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1786:..\FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1787:..\FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1788:..\FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1789:..\FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 34


1790:..\FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1791:..\FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1792:..\FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1793:..\FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1794:..\FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1795:..\FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1796:..\FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1797:..\FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1798:..\FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1799:..\FreeRTOS/tasks.c **** 
1800:..\FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
1801:..\FreeRTOS/tasks.c **** 	{
1802:..\FreeRTOS/tasks.c **** 		xReturn = xTickCount;
1803:..\FreeRTOS/tasks.c **** 	}
1804:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1805:..\FreeRTOS/tasks.c **** 
1806:..\FreeRTOS/tasks.c **** 	return xReturn;
1807:..\FreeRTOS/tasks.c **** }
1808:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:..\FreeRTOS/tasks.c **** 
1810:..\FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1811:..\FreeRTOS/tasks.c **** {
1812:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1813:..\FreeRTOS/tasks.c **** 	BaseType_t. */
1814:..\FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
1815:..\FreeRTOS/tasks.c **** }
1816:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1817:..\FreeRTOS/tasks.c **** 
1818:..\FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1819:..\FreeRTOS/tasks.c **** 
1820:..\FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1821:..\FreeRTOS/tasks.c **** 	{
1822:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1823:..\FreeRTOS/tasks.c **** 
1824:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1825:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1826:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1827:..\FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1828:..\FreeRTOS/tasks.c **** 	}
1829:..\FreeRTOS/tasks.c **** 
1830:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1831:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1832:..\FreeRTOS/tasks.c **** 
1833:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1834:..\FreeRTOS/tasks.c **** 
1835:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1836:..\FreeRTOS/tasks.c **** 	{
1837:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
1838:..\FreeRTOS/tasks.c **** 
1839:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1840:..\FreeRTOS/tasks.c **** 		{
1841:..\FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1842:..\FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1843:..\FreeRTOS/tasks.c **** 			{
1844:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1845:..\FreeRTOS/tasks.c **** 				task in the Ready state. */
1846:..\FreeRTOS/tasks.c **** 				do
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 35


1847:..\FreeRTOS/tasks.c **** 				{
1848:..\FreeRTOS/tasks.c **** 					uxQueue--;
1849:..\FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1850:..\FreeRTOS/tasks.c **** 
1851:..\FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
1852:..\FreeRTOS/tasks.c **** 
1853:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1854:..\FreeRTOS/tasks.c **** 				task in the Blocked state. */
1855:..\FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
1856:..\FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
1857:..\FreeRTOS/tasks.c **** 
1858:..\FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1859:..\FreeRTOS/tasks.c **** 				{
1860:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1861:..\FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1862:..\FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1863:..\FreeRTOS/tasks.c **** 				}
1864:..\FreeRTOS/tasks.c **** 				#endif
1865:..\FreeRTOS/tasks.c **** 
1866:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1867:..\FreeRTOS/tasks.c **** 				{
1868:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1869:..\FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1870:..\FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1871:..\FreeRTOS/tasks.c **** 				}
1872:..\FreeRTOS/tasks.c **** 				#endif
1873:..\FreeRTOS/tasks.c **** 
1874:..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1875:..\FreeRTOS/tasks.c **** 				{
1876:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1877:..\FreeRTOS/tasks.c **** 					{
1878:..\FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1879:..\FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1880:..\FreeRTOS/tasks.c **** 						#else
1881:..\FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1882:..\FreeRTOS/tasks.c **** 						#endif
1883:..\FreeRTOS/tasks.c **** 					}
1884:..\FreeRTOS/tasks.c **** 				}
1885:..\FreeRTOS/tasks.c **** 				#else
1886:..\FreeRTOS/tasks.c **** 				{
1887:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1888:..\FreeRTOS/tasks.c **** 					{
1889:..\FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
1890:..\FreeRTOS/tasks.c **** 					}
1891:..\FreeRTOS/tasks.c **** 				}
1892:..\FreeRTOS/tasks.c **** 				#endif
1893:..\FreeRTOS/tasks.c **** 			}
1894:..\FreeRTOS/tasks.c **** 			else
1895:..\FreeRTOS/tasks.c **** 			{
1896:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1897:..\FreeRTOS/tasks.c **** 			}
1898:..\FreeRTOS/tasks.c **** 		}
1899:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
1900:..\FreeRTOS/tasks.c **** 
1901:..\FreeRTOS/tasks.c **** 		return uxTask;
1902:..\FreeRTOS/tasks.c **** 	}
1903:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 36


1904:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1905:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1906:..\FreeRTOS/tasks.c **** 
1907:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1908:..\FreeRTOS/tasks.c **** 
1909:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1910:..\FreeRTOS/tasks.c **** 	{
1911:..\FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1912:..\FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1913:..\FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1914:..\FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1915:..\FreeRTOS/tasks.c **** 	}
1916:..\FreeRTOS/tasks.c **** 
1917:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1918:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1919:..\FreeRTOS/tasks.c **** 
1920:..\FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1921:..\FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1922:..\FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1923:..\FreeRTOS/tasks.c **** 1. */
1924:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1925:..\FreeRTOS/tasks.c **** 
1926:..\FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1927:..\FreeRTOS/tasks.c **** 	{
1928:..\FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1929:..\FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1930:..\FreeRTOS/tasks.c **** 		each stepped tick. */
1931:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1932:..\FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1933:..\FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1934:..\FreeRTOS/tasks.c **** 	}
1935:..\FreeRTOS/tasks.c **** 
1936:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1937:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1938:..\FreeRTOS/tasks.c **** 
1939:..\FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
1940:..\FreeRTOS/tasks.c **** {
1941:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
1942:..\FreeRTOS/tasks.c **** TickType_t xItemValue;
1943:..\FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
1944:..\FreeRTOS/tasks.c **** 
1945:..\FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1946:..\FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1947:..\FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1948:..\FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1949:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1950:..\FreeRTOS/tasks.c **** 	{
1951:..\FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1952:..\FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1953:..\FreeRTOS/tasks.c **** 		++xTickCount;
1954:..\FreeRTOS/tasks.c **** 
1955:..\FreeRTOS/tasks.c **** 		{
1956:..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1957:..\FreeRTOS/tasks.c **** 			block. */
1958:..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1959:..\FreeRTOS/tasks.c **** 
1960:..\FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 37


1961:..\FreeRTOS/tasks.c **** 			{
1962:..\FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
1963:..\FreeRTOS/tasks.c **** 			}
1964:..\FreeRTOS/tasks.c **** 			else
1965:..\FreeRTOS/tasks.c **** 			{
1966:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1967:..\FreeRTOS/tasks.c **** 			}
1968:..\FreeRTOS/tasks.c **** 
1969:..\FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1970:..\FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1971:..\FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1972:..\FreeRTOS/tasks.c **** 			look any further down the list. */
1973:..\FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
1974:..\FreeRTOS/tasks.c **** 			{
1975:..\FreeRTOS/tasks.c **** 				for( ;; )
1976:..\FreeRTOS/tasks.c **** 				{
1977:..\FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1978:..\FreeRTOS/tasks.c **** 					{
1979:..\FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1980:..\FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1981:..\FreeRTOS/tasks.c **** 						unlikely that the
1982:..\FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1983:..\FreeRTOS/tasks.c **** 						next time through. */
1984:..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
1985:..\FreeRTOS/tasks.c **** 						break;
1986:..\FreeRTOS/tasks.c **** 					}
1987:..\FreeRTOS/tasks.c **** 					else
1988:..\FreeRTOS/tasks.c **** 					{
1989:..\FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1990:..\FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1991:..\FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1992:..\FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1993:..\FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1994:..\FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1995:..\FreeRTOS/tasks.c **** 
1996:..\FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
1997:..\FreeRTOS/tasks.c **** 						{
1998:..\FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1999:..\FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
2000:..\FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
2001:..\FreeRTOS/tasks.c **** 							state -	so record the item value in
2002:..\FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
2003:..\FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
2004:..\FreeRTOS/tasks.c **** 							break;
2005:..\FreeRTOS/tasks.c **** 						}
2006:..\FreeRTOS/tasks.c **** 						else
2007:..\FreeRTOS/tasks.c **** 						{
2008:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2009:..\FreeRTOS/tasks.c **** 						}
2010:..\FreeRTOS/tasks.c **** 
2011:..\FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2012:..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2013:..\FreeRTOS/tasks.c **** 
2014:..\FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2015:..\FreeRTOS/tasks.c **** 						it from the event list. */
2016:..\FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2017:..\FreeRTOS/tasks.c **** 						{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 38


2018:..\FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2019:..\FreeRTOS/tasks.c **** 						}
2020:..\FreeRTOS/tasks.c **** 						else
2021:..\FreeRTOS/tasks.c **** 						{
2022:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2023:..\FreeRTOS/tasks.c **** 						}
2024:..\FreeRTOS/tasks.c **** 
2025:..\FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
2026:..\FreeRTOS/tasks.c **** 						list. */
2027:..\FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
2028:..\FreeRTOS/tasks.c **** 
2029:..\FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
2030:..\FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
2031:..\FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2032:..\FreeRTOS/tasks.c **** 						{
2033:..\FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
2034:..\FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
2035:..\FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
2036:..\FreeRTOS/tasks.c **** 							currently executing task. */
2037:..\FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2038:..\FreeRTOS/tasks.c **** 							{
2039:..\FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
2040:..\FreeRTOS/tasks.c **** 							}
2041:..\FreeRTOS/tasks.c **** 							else
2042:..\FreeRTOS/tasks.c **** 							{
2043:..\FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2044:..\FreeRTOS/tasks.c **** 							}
2045:..\FreeRTOS/tasks.c **** 						}
2046:..\FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
2047:..\FreeRTOS/tasks.c **** 					}
2048:..\FreeRTOS/tasks.c **** 				}
2049:..\FreeRTOS/tasks.c **** 			}
2050:..\FreeRTOS/tasks.c **** 		}
2051:..\FreeRTOS/tasks.c **** 
2052:..\FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2053:..\FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2054:..\FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2055:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2056:..\FreeRTOS/tasks.c **** 		{
2057:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2058:..\FreeRTOS/tasks.c **** 			{
2059:..\FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2060:..\FreeRTOS/tasks.c **** 			}
2061:..\FreeRTOS/tasks.c **** 			else
2062:..\FreeRTOS/tasks.c **** 			{
2063:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2064:..\FreeRTOS/tasks.c **** 			}
2065:..\FreeRTOS/tasks.c **** 		}
2066:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2067:..\FreeRTOS/tasks.c **** 
2068:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2069:..\FreeRTOS/tasks.c **** 		{
2070:..\FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2071:..\FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2072:..\FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2073:..\FreeRTOS/tasks.c **** 			{
2074:..\FreeRTOS/tasks.c **** 				vApplicationTickHook();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 39


2075:..\FreeRTOS/tasks.c **** 			}
2076:..\FreeRTOS/tasks.c **** 			else
2077:..\FreeRTOS/tasks.c **** 			{
2078:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2079:..\FreeRTOS/tasks.c **** 			}
2080:..\FreeRTOS/tasks.c **** 		}
2081:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2082:..\FreeRTOS/tasks.c **** 	}
2083:..\FreeRTOS/tasks.c **** 	else
2084:..\FreeRTOS/tasks.c **** 	{
2085:..\FreeRTOS/tasks.c **** 		++uxPendedTicks;
2086:..\FreeRTOS/tasks.c **** 
2087:..\FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2088:..\FreeRTOS/tasks.c **** 		scheduler is locked. */
2089:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2090:..\FreeRTOS/tasks.c **** 		{
2091:..\FreeRTOS/tasks.c **** 			vApplicationTickHook();
2092:..\FreeRTOS/tasks.c **** 		}
2093:..\FreeRTOS/tasks.c **** 		#endif
2094:..\FreeRTOS/tasks.c **** 	}
2095:..\FreeRTOS/tasks.c **** 
2096:..\FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2097:..\FreeRTOS/tasks.c **** 	{
2098:..\FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2099:..\FreeRTOS/tasks.c **** 		{
2100:..\FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2101:..\FreeRTOS/tasks.c **** 		}
2102:..\FreeRTOS/tasks.c **** 		else
2103:..\FreeRTOS/tasks.c **** 		{
2104:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2105:..\FreeRTOS/tasks.c **** 		}
2106:..\FreeRTOS/tasks.c **** 	}
2107:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2108:..\FreeRTOS/tasks.c **** 
2109:..\FreeRTOS/tasks.c **** 	return xSwitchRequired;
2110:..\FreeRTOS/tasks.c **** }
2111:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2112:..\FreeRTOS/tasks.c **** 
2113:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2114:..\FreeRTOS/tasks.c **** 
2115:..\FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2116:..\FreeRTOS/tasks.c **** 	{
2117:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2118:..\FreeRTOS/tasks.c **** 
2119:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2120:..\FreeRTOS/tasks.c **** 		getting set. */
2121:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2122:..\FreeRTOS/tasks.c **** 		{
2123:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2124:..\FreeRTOS/tasks.c **** 		}
2125:..\FreeRTOS/tasks.c **** 		else
2126:..\FreeRTOS/tasks.c **** 		{
2127:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2128:..\FreeRTOS/tasks.c **** 		}
2129:..\FreeRTOS/tasks.c **** 
2130:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2131:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 40


2132:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2133:..\FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2134:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2135:..\FreeRTOS/tasks.c **** 	}
2136:..\FreeRTOS/tasks.c **** 
2137:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2138:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2139:..\FreeRTOS/tasks.c **** 
2140:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2141:..\FreeRTOS/tasks.c **** 
2142:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2143:..\FreeRTOS/tasks.c **** 	{
2144:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2145:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2146:..\FreeRTOS/tasks.c **** 
2147:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2148:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2149:..\FreeRTOS/tasks.c **** 		{
2150:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2151:..\FreeRTOS/tasks.c **** 		}
2152:..\FreeRTOS/tasks.c **** 		else
2153:..\FreeRTOS/tasks.c **** 		{
2154:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2155:..\FreeRTOS/tasks.c **** 		}
2156:..\FreeRTOS/tasks.c **** 
2157:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2158:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2159:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2160:..\FreeRTOS/tasks.c **** 		{
2161:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2162:..\FreeRTOS/tasks.c **** 		}
2163:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2164:..\FreeRTOS/tasks.c **** 
2165:..\FreeRTOS/tasks.c **** 		return xReturn;
2166:..\FreeRTOS/tasks.c **** 	}
2167:..\FreeRTOS/tasks.c **** 
2168:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2169:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2170:..\FreeRTOS/tasks.c **** 
2171:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2172:..\FreeRTOS/tasks.c **** 
2173:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2174:..\FreeRTOS/tasks.c **** 	{
2175:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2176:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2177:..\FreeRTOS/tasks.c **** 
2178:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2179:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2180:..\FreeRTOS/tasks.c **** 		{
2181:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2182:..\FreeRTOS/tasks.c **** 		}
2183:..\FreeRTOS/tasks.c **** 		else
2184:..\FreeRTOS/tasks.c **** 		{
2185:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2186:..\FreeRTOS/tasks.c **** 		}
2187:..\FreeRTOS/tasks.c **** 
2188:..\FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 41


2189:..\FreeRTOS/tasks.c **** 		{
2190:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2191:..\FreeRTOS/tasks.c **** 		}
2192:..\FreeRTOS/tasks.c **** 		else
2193:..\FreeRTOS/tasks.c **** 		{
2194:..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2195:..\FreeRTOS/tasks.c **** 		}
2196:..\FreeRTOS/tasks.c **** 
2197:..\FreeRTOS/tasks.c **** 		return xReturn;
2198:..\FreeRTOS/tasks.c **** 	}
2199:..\FreeRTOS/tasks.c **** 
2200:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2201:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2202:..\FreeRTOS/tasks.c **** 
2203:..\FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2204:..\FreeRTOS/tasks.c **** {
2205:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2206:..\FreeRTOS/tasks.c **** 	{
2207:..\FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2208:..\FreeRTOS/tasks.c **** 		switch. */
2209:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2210:..\FreeRTOS/tasks.c **** 	}
2211:..\FreeRTOS/tasks.c **** 	else
2212:..\FreeRTOS/tasks.c **** 	{
2213:..\FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2214:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2215:..\FreeRTOS/tasks.c **** 
2216:..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2217:..\FreeRTOS/tasks.c **** 		{
2218:..\FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2219:..\FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2220:..\FreeRTOS/tasks.c **** 				#else
2221:..\FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2222:..\FreeRTOS/tasks.c **** 				#endif
2223:..\FreeRTOS/tasks.c **** 
2224:..\FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2225:..\FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2226:..\FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2227:..\FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2228:..\FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2229:..\FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2230:..\FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2231:..\FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2232:..\FreeRTOS/tasks.c **** 				{
2233:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2234:..\FreeRTOS/tasks.c **** 				}
2235:..\FreeRTOS/tasks.c **** 				else
2236:..\FreeRTOS/tasks.c **** 				{
2237:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2238:..\FreeRTOS/tasks.c **** 				}
2239:..\FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2240:..\FreeRTOS/tasks.c **** 		}
2241:..\FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2242:..\FreeRTOS/tasks.c **** 
2243:..\FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2244:..\FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2245:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 42


2246:..\FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2247:..\FreeRTOS/tasks.c **** 		optimised asm code. */
2248:..\FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2249:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2250:..\FreeRTOS/tasks.c **** 
2251:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2252:..\FreeRTOS/tasks.c **** 		{
2253:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2254:..\FreeRTOS/tasks.c **** 			structure specific to this task. */
2255:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2256:..\FreeRTOS/tasks.c **** 		}
2257:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2258:..\FreeRTOS/tasks.c **** 	}
2259:..\FreeRTOS/tasks.c **** }
2260:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2261:..\FreeRTOS/tasks.c **** 
2262:..\FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2263:..\FreeRTOS/tasks.c **** {
2264:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
2265:..\FreeRTOS/tasks.c **** 
2266:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2267:..\FreeRTOS/tasks.c **** 
2268:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2269:..\FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2270:..\FreeRTOS/tasks.c **** 
2271:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2272:..\FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2273:..\FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2274:..\FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2275:..\FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2276:..\FreeRTOS/tasks.c **** 
2277:..\FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2278:..\FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2279:..\FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2280:..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2281:..\FreeRTOS/tasks.c **** 	{
2282:..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2283:..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2284:..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2285:..\FreeRTOS/tasks.c **** 	}
2286:..\FreeRTOS/tasks.c **** 	else
2287:..\FreeRTOS/tasks.c **** 	{
2288:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2289:..\FreeRTOS/tasks.c **** 	}
2290:..\FreeRTOS/tasks.c **** 
2291:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2292:..\FreeRTOS/tasks.c **** 	{
2293:..\FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2294:..\FreeRTOS/tasks.c **** 		{
2295:..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2296:..\FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2297:..\FreeRTOS/tasks.c **** 			block indefinitely. */
2298:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2299:..\FreeRTOS/tasks.c **** 		}
2300:..\FreeRTOS/tasks.c **** 		else
2301:..\FreeRTOS/tasks.c **** 		{
2302:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 43


2303:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2304:..\FreeRTOS/tasks.c **** 			scheduler will handle it. */
2305:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2306:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2307:..\FreeRTOS/tasks.c **** 		}
2308:..\FreeRTOS/tasks.c **** 	}
2309:..\FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2310:..\FreeRTOS/tasks.c **** 	{
2311:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2312:..\FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2313:..\FreeRTOS/tasks.c **** 			will handle it. */
2314:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2315:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2316:..\FreeRTOS/tasks.c **** 	}
2317:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2318:..\FreeRTOS/tasks.c **** }
2319:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:..\FreeRTOS/tasks.c **** 
2321:..\FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2322:..\FreeRTOS/tasks.c **** {
2323:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
2324:..\FreeRTOS/tasks.c **** 
2325:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2326:..\FreeRTOS/tasks.c **** 
2327:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2328:..\FreeRTOS/tasks.c **** 	the event groups implementation. */
2329:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2330:..\FreeRTOS/tasks.c **** 
2331:..\FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2332:..\FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2333:..\FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2334:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2335:..\FreeRTOS/tasks.c **** 
2336:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2337:..\FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2338:..\FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2339:..\FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2340:..\FreeRTOS/tasks.c **** 	the task level). */
2341:..\FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2342:..\FreeRTOS/tasks.c **** 
2343:..\FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2344:..\FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2345:..\FreeRTOS/tasks.c **** 	scheduler is locked. */
2346:..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2347:..\FreeRTOS/tasks.c **** 	{
2348:..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2349:..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2350:..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2351:..\FreeRTOS/tasks.c **** 	}
2352:..\FreeRTOS/tasks.c **** 	else
2353:..\FreeRTOS/tasks.c **** 	{
2354:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2355:..\FreeRTOS/tasks.c **** 	}
2356:..\FreeRTOS/tasks.c **** 
2357:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2358:..\FreeRTOS/tasks.c **** 	{
2359:..\FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 44


2360:..\FreeRTOS/tasks.c **** 		{
2361:..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2362:..\FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2363:..\FreeRTOS/tasks.c **** 			indefinitely. */
2364:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2365:..\FreeRTOS/tasks.c **** 		}
2366:..\FreeRTOS/tasks.c **** 		else
2367:..\FreeRTOS/tasks.c **** 		{
2368:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2369:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2370:..\FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2371:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2372:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2373:..\FreeRTOS/tasks.c **** 		}
2374:..\FreeRTOS/tasks.c **** 	}
2375:..\FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2376:..\FreeRTOS/tasks.c **** 	{
2377:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2378:..\FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2379:..\FreeRTOS/tasks.c **** 			will manage it correctly. */
2380:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2381:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2382:..\FreeRTOS/tasks.c **** 	}
2383:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2384:..\FreeRTOS/tasks.c **** }
2385:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:..\FreeRTOS/tasks.c **** 
2387:..\FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2388:..\FreeRTOS/tasks.c **** 
2389:..\FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2390:..\FreeRTOS/tasks.c **** 	{
2391:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
2392:..\FreeRTOS/tasks.c **** 
2393:..\FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2394:..\FreeRTOS/tasks.c **** 
2395:..\FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2396:..\FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2397:..\FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2398:..\FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2399:..\FreeRTOS/tasks.c **** 
2400:..\FreeRTOS/tasks.c **** 
2401:..\FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2402:..\FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2403:..\FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2404:..\FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2405:..\FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2406:..\FreeRTOS/tasks.c **** 
2407:..\FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2408:..\FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2409:..\FreeRTOS/tasks.c **** 		function is called with the scheduler locked so interrupts will not
2410:..\FreeRTOS/tasks.c **** 		access the lists at the same time. */
2411:..\FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2412:..\FreeRTOS/tasks.c **** 		{
2413:..\FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2414:..\FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2415:..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2416:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 45


2417:..\FreeRTOS/tasks.c **** 		else
2418:..\FreeRTOS/tasks.c **** 		{
2419:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2420:..\FreeRTOS/tasks.c **** 		}
2421:..\FreeRTOS/tasks.c **** 
2422:..\FreeRTOS/tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2423:..\FreeRTOS/tasks.c **** 		available and a task that is blocking indefinitely can enter the
2424:..\FreeRTOS/tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2425:..\FreeRTOS/tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2426:..\FreeRTOS/tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2427:..\FreeRTOS/tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2428:..\FreeRTOS/tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
2429:..\FreeRTOS/tasks.c **** 		{
2430:..\FreeRTOS/tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2431:..\FreeRTOS/tasks.c **** 			{
2432:..\FreeRTOS/tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2433:..\FreeRTOS/tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2434:..\FreeRTOS/tasks.c **** 				will block indefinitely. */
2435:..\FreeRTOS/tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2436:..\FreeRTOS/tasks.c **** 			}
2437:..\FreeRTOS/tasks.c **** 			else
2438:..\FreeRTOS/tasks.c **** 			{
2439:..\FreeRTOS/tasks.c **** 				/* Calculate the time at which the task should be woken if the
2440:..\FreeRTOS/tasks.c **** 				event does not occur.  This may overflow but this doesn't
2441:..\FreeRTOS/tasks.c **** 				matter. */
2442:..\FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2443:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
2444:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2445:..\FreeRTOS/tasks.c **** 			}
2446:..\FreeRTOS/tasks.c **** 		}
2447:..\FreeRTOS/tasks.c **** 		#else
2448:..\FreeRTOS/tasks.c **** 		{
2449:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2450:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2451:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2452:..\FreeRTOS/tasks.c **** 			traceTASK_DELAY_UNTIL();
2453:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2454:..\FreeRTOS/tasks.c **** 
2455:..\FreeRTOS/tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2456:..\FreeRTOS/tasks.c **** 			defined. */
2457:..\FreeRTOS/tasks.c **** 			( void ) xWaitIndefinitely;
2458:..\FreeRTOS/tasks.c **** 		}
2459:..\FreeRTOS/tasks.c **** 		#endif
2460:..\FreeRTOS/tasks.c **** 	}
2461:..\FreeRTOS/tasks.c **** 
2462:..\FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2463:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2464:..\FreeRTOS/tasks.c **** 
2465:..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2466:..\FreeRTOS/tasks.c **** {
2467:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2468:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2469:..\FreeRTOS/tasks.c **** 
2470:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2471:..\FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2472:..\FreeRTOS/tasks.c **** 
2473:..\FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 46


2474:..\FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2475:..\FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2476:..\FreeRTOS/tasks.c **** 
2477:..\FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2478:..\FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2479:..\FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2480:..\FreeRTOS/tasks.c **** 
2481:..\FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2482:..\FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2483:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2484:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2485:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2486:..\FreeRTOS/tasks.c **** 
2487:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2488:..\FreeRTOS/tasks.c **** 	{
2489:..\FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2490:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2491:..\FreeRTOS/tasks.c **** 	}
2492:..\FreeRTOS/tasks.c **** 	else
2493:..\FreeRTOS/tasks.c **** 	{
2494:..\FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2495:..\FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2496:..\FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2497:..\FreeRTOS/tasks.c **** 	}
2498:..\FreeRTOS/tasks.c **** 
2499:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2500:..\FreeRTOS/tasks.c **** 	{
2501:..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2502:..\FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2503:..\FreeRTOS/tasks.c **** 		it should force a context switch now. */
2504:..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
2505:..\FreeRTOS/tasks.c **** 
2506:..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2507:..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2508:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2509:..\FreeRTOS/tasks.c **** 	}
2510:..\FreeRTOS/tasks.c **** 	else
2511:..\FreeRTOS/tasks.c **** 	{
2512:..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
2513:..\FreeRTOS/tasks.c **** 	}
2514:..\FreeRTOS/tasks.c **** 
2515:..\FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2516:..\FreeRTOS/tasks.c **** 	{
2517:..\FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2518:..\FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2519:..\FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2520:..\FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2521:..\FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2522:..\FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2523:..\FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2524:..\FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
2525:..\FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
2526:..\FreeRTOS/tasks.c **** 	}
2527:..\FreeRTOS/tasks.c **** 	#endif
2528:..\FreeRTOS/tasks.c **** 
2529:..\FreeRTOS/tasks.c **** 	return xReturn;
2530:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 47


2531:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2532:..\FreeRTOS/tasks.c **** 
2533:..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2534:..\FreeRTOS/tasks.c **** {
2535:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2536:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2537:..\FreeRTOS/tasks.c **** 
2538:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2539:..\FreeRTOS/tasks.c **** 	the event flags implementation. */
2540:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2541:..\FreeRTOS/tasks.c **** 
2542:..\FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2543:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2544:..\FreeRTOS/tasks.c **** 
2545:..\FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2546:..\FreeRTOS/tasks.c **** 	event flags. */
2547:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2548:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2549:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2550:..\FreeRTOS/tasks.c **** 
2551:..\FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2552:..\FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2553:..\FreeRTOS/tasks.c **** 	lists. */
2554:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2555:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2556:..\FreeRTOS/tasks.c **** 
2557:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:..\FreeRTOS/tasks.c **** 	{
2559:..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2560:..\FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2561:..\FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2562:..\FreeRTOS/tasks.c **** 		switch now. */
2563:..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
2564:..\FreeRTOS/tasks.c **** 
2565:..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2566:..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2567:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2568:..\FreeRTOS/tasks.c **** 	}
2569:..\FreeRTOS/tasks.c **** 	else
2570:..\FreeRTOS/tasks.c **** 	{
2571:..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
2572:..\FreeRTOS/tasks.c **** 	}
2573:..\FreeRTOS/tasks.c **** 
2574:..\FreeRTOS/tasks.c **** 	return xReturn;
2575:..\FreeRTOS/tasks.c **** }
2576:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2577:..\FreeRTOS/tasks.c **** 
2578:..\FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2579:..\FreeRTOS/tasks.c **** {
2580:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
2581:..\FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2582:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2583:..\FreeRTOS/tasks.c **** }
2584:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2585:..\FreeRTOS/tasks.c **** 
2586:..\FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2587:..\FreeRTOS/tasks.c **** {
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 48


2588:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2589:..\FreeRTOS/tasks.c **** 
2590:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
2591:..\FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
2592:..\FreeRTOS/tasks.c **** 
2593:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2594:..\FreeRTOS/tasks.c **** 	{
2595:..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2596:..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
2597:..\FreeRTOS/tasks.c **** 
2598:..\FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2599:..\FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2600:..\FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2601:..\FreeRTOS/tasks.c **** 			therefore never time out. */
2602:..\FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2603:..\FreeRTOS/tasks.c **** 			{
2604:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
2605:..\FreeRTOS/tasks.c **** 			}
2606:..\FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2607:..\FreeRTOS/tasks.c **** 		#endif
2608:..\FreeRTOS/tasks.c **** 
2609:..\FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
2610:..\FreeRTOS/tasks.c **** 		{
2611:..\FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2612:..\FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2613:..\FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2614:..\FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2615:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
2616:..\FreeRTOS/tasks.c **** 		}
2617:..\FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
2618:..\FreeRTOS/tasks.c **** 		{
2619:..\FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2620:..\FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2621:..\FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2622:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
2623:..\FreeRTOS/tasks.c **** 		}
2624:..\FreeRTOS/tasks.c **** 		else
2625:..\FreeRTOS/tasks.c **** 		{
2626:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
2627:..\FreeRTOS/tasks.c **** 		}
2628:..\FreeRTOS/tasks.c **** 	}
2629:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2630:..\FreeRTOS/tasks.c **** 
2631:..\FreeRTOS/tasks.c **** 	return xReturn;
2632:..\FreeRTOS/tasks.c **** }
2633:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2634:..\FreeRTOS/tasks.c **** 
2635:..\FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2636:..\FreeRTOS/tasks.c **** {
2637:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
2638:..\FreeRTOS/tasks.c **** }
2639:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2640:..\FreeRTOS/tasks.c **** 
2641:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2642:..\FreeRTOS/tasks.c **** 
2643:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2644:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 49


2645:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
2646:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2647:..\FreeRTOS/tasks.c **** 
2648:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
2649:..\FreeRTOS/tasks.c **** 		{
2650:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2651:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2652:..\FreeRTOS/tasks.c **** 		}
2653:..\FreeRTOS/tasks.c **** 		else
2654:..\FreeRTOS/tasks.c **** 		{
2655:..\FreeRTOS/tasks.c **** 			uxReturn = 0U;
2656:..\FreeRTOS/tasks.c **** 		}
2657:..\FreeRTOS/tasks.c **** 
2658:..\FreeRTOS/tasks.c **** 		return uxReturn;
2659:..\FreeRTOS/tasks.c **** 	}
2660:..\FreeRTOS/tasks.c **** 
2661:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2662:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2663:..\FreeRTOS/tasks.c **** 
2664:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2665:..\FreeRTOS/tasks.c **** 
2666:..\FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2667:..\FreeRTOS/tasks.c **** 	{
2668:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2669:..\FreeRTOS/tasks.c **** 
2670:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
2671:..\FreeRTOS/tasks.c **** 		{
2672:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2673:..\FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2674:..\FreeRTOS/tasks.c **** 		}
2675:..\FreeRTOS/tasks.c **** 	}
2676:..\FreeRTOS/tasks.c **** 
2677:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2678:..\FreeRTOS/tasks.c **** 
2679:..\FreeRTOS/tasks.c **** /*
2680:..\FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2681:..\FreeRTOS/tasks.c ****  * The Idle task.
2682:..\FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2683:..\FreeRTOS/tasks.c ****  *
2684:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2685:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2686:..\FreeRTOS/tasks.c ****  *
2687:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2688:..\FreeRTOS/tasks.c ****  *
2689:..\FreeRTOS/tasks.c ****  */
2690:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2691:..\FreeRTOS/tasks.c **** {
2692:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
2693:..\FreeRTOS/tasks.c **** 	( void ) pvParameters;
2694:..\FreeRTOS/tasks.c **** 
2695:..\FreeRTOS/tasks.c **** 	for( ;; )
2696:..\FreeRTOS/tasks.c **** 	{
2697:..\FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2698:..\FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
2699:..\FreeRTOS/tasks.c **** 
2700:..\FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2701:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 50


2702:..\FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2703:..\FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2704:..\FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2705:..\FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2706:..\FreeRTOS/tasks.c **** 			taskYIELD();
2707:..\FreeRTOS/tasks.c **** 		}
2708:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2709:..\FreeRTOS/tasks.c **** 
2710:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2711:..\FreeRTOS/tasks.c **** 		{
2712:..\FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2713:..\FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2714:..\FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2715:..\FreeRTOS/tasks.c **** 			timeslice.
2716:..\FreeRTOS/tasks.c **** 
2717:..\FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2718:..\FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2719:..\FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2720:..\FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2721:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
2722:..\FreeRTOS/tasks.c **** 			{
2723:..\FreeRTOS/tasks.c **** 				taskYIELD();
2724:..\FreeRTOS/tasks.c **** 			}
2725:..\FreeRTOS/tasks.c **** 			else
2726:..\FreeRTOS/tasks.c **** 			{
2727:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2728:..\FreeRTOS/tasks.c **** 			}
2729:..\FreeRTOS/tasks.c **** 		}
2730:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2731:..\FreeRTOS/tasks.c **** 
2732:..\FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2733:..\FreeRTOS/tasks.c **** 		{
2734:..\FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2735:..\FreeRTOS/tasks.c **** 
2736:..\FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2737:..\FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2738:..\FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2739:..\FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2740:..\FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2741:..\FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2742:..\FreeRTOS/tasks.c **** 		}
2743:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2744:..\FreeRTOS/tasks.c **** 
2745:..\FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2746:..\FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2747:..\FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2748:..\FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2749:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2750:..\FreeRTOS/tasks.c **** 		{
2751:..\FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
2752:..\FreeRTOS/tasks.c **** 
2753:..\FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2754:..\FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2755:..\FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2756:..\FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2757:..\FreeRTOS/tasks.c **** 			valid. */
2758:..\FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 51


2759:..\FreeRTOS/tasks.c **** 
2760:..\FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2761:..\FreeRTOS/tasks.c **** 			{
2762:..\FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2763:..\FreeRTOS/tasks.c **** 				{
2764:..\FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2765:..\FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2766:..\FreeRTOS/tasks.c **** 					be used. */
2767:..\FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2768:..\FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2769:..\FreeRTOS/tasks.c **** 
2770:..\FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2771:..\FreeRTOS/tasks.c **** 					{
2772:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2773:..\FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2774:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2775:..\FreeRTOS/tasks.c **** 					}
2776:..\FreeRTOS/tasks.c **** 					else
2777:..\FreeRTOS/tasks.c **** 					{
2778:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2779:..\FreeRTOS/tasks.c **** 					}
2780:..\FreeRTOS/tasks.c **** 				}
2781:..\FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2782:..\FreeRTOS/tasks.c **** 			}
2783:..\FreeRTOS/tasks.c **** 			else
2784:..\FreeRTOS/tasks.c **** 			{
2785:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2786:..\FreeRTOS/tasks.c **** 			}
2787:..\FreeRTOS/tasks.c **** 		}
2788:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2789:..\FreeRTOS/tasks.c **** 	}
2790:..\FreeRTOS/tasks.c **** }
2791:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2792:..\FreeRTOS/tasks.c **** 
2793:..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2794:..\FreeRTOS/tasks.c **** 
2795:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2796:..\FreeRTOS/tasks.c **** 	{
2797:..\FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2798:..\FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
2799:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2800:..\FreeRTOS/tasks.c **** 
2801:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2802:..\FreeRTOS/tasks.c **** 		{
2803:..\FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2804:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2805:..\FreeRTOS/tasks.c **** 		}
2806:..\FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2807:..\FreeRTOS/tasks.c **** 		{
2808:..\FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2809:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2810:..\FreeRTOS/tasks.c **** 		}
2811:..\FreeRTOS/tasks.c **** 		else
2812:..\FreeRTOS/tasks.c **** 		{
2813:..\FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2814:..\FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
2815:..\FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 52


2816:..\FreeRTOS/tasks.c **** 			interrupts. */
2817:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2818:..\FreeRTOS/tasks.c **** 			{
2819:..\FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2820:..\FreeRTOS/tasks.c **** 			}
2821:..\FreeRTOS/tasks.c **** 			else
2822:..\FreeRTOS/tasks.c **** 			{
2823:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2824:..\FreeRTOS/tasks.c **** 			}
2825:..\FreeRTOS/tasks.c **** 		}
2826:..\FreeRTOS/tasks.c **** 
2827:..\FreeRTOS/tasks.c **** 		return eReturn;
2828:..\FreeRTOS/tasks.c **** 	}
2829:..\FreeRTOS/tasks.c **** 
2830:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2831:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2832:..\FreeRTOS/tasks.c **** 
2833:..\FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2834:..\FreeRTOS/tasks.c **** {
2835:..\FreeRTOS/tasks.c **** UBaseType_t x;
2836:..\FreeRTOS/tasks.c **** 
2837:..\FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2838:..\FreeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2839:..\FreeRTOS/tasks.c **** 	{
2840:..\FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2841:..\FreeRTOS/tasks.c **** 
2842:..\FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2843:..\FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2844:..\FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2845:..\FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
2846:..\FreeRTOS/tasks.c **** 		{
2847:..\FreeRTOS/tasks.c **** 			break;
2848:..\FreeRTOS/tasks.c **** 		}
2849:..\FreeRTOS/tasks.c **** 		else
2850:..\FreeRTOS/tasks.c **** 		{
2851:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2852:..\FreeRTOS/tasks.c **** 		}
2853:..\FreeRTOS/tasks.c **** 	}
2854:..\FreeRTOS/tasks.c **** 
2855:..\FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2856:..\FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2857:..\FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2858:..\FreeRTOS/tasks.c **** 
2859:..\FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2860:..\FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2861:..\FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2862:..\FreeRTOS/tasks.c **** 	{
2863:..\FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2864:..\FreeRTOS/tasks.c **** 	}
2865:..\FreeRTOS/tasks.c **** 	else
2866:..\FreeRTOS/tasks.c **** 	{
2867:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2868:..\FreeRTOS/tasks.c **** 	}
2869:..\FreeRTOS/tasks.c **** 
2870:..\FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2871:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2872:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 53


2873:..\FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2874:..\FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
2875:..\FreeRTOS/tasks.c **** 	}
2876:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2877:..\FreeRTOS/tasks.c **** 
2878:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2879:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2880:..\FreeRTOS/tasks.c **** 
2881:..\FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2882:..\FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2883:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2884:..\FreeRTOS/tasks.c **** 
2885:..\FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2886:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
2887:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2888:..\FreeRTOS/tasks.c **** 
2889:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2890:..\FreeRTOS/tasks.c **** 	{
2891:..\FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2892:..\FreeRTOS/tasks.c **** 	}
2893:..\FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2894:..\FreeRTOS/tasks.c **** 
2895:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2896:..\FreeRTOS/tasks.c **** 	{
2897:..\FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2898:..\FreeRTOS/tasks.c **** 	}
2899:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2900:..\FreeRTOS/tasks.c **** 
2901:..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2902:..\FreeRTOS/tasks.c **** 	{
2903:..\FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2904:..\FreeRTOS/tasks.c **** 	}
2905:..\FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2906:..\FreeRTOS/tasks.c **** 
2907:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2908:..\FreeRTOS/tasks.c **** 	{
2909:..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2910:..\FreeRTOS/tasks.c **** 	}
2911:..\FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2912:..\FreeRTOS/tasks.c **** 	{
2913:..\FreeRTOS/tasks.c **** 		( void ) xRegions;
2914:..\FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2915:..\FreeRTOS/tasks.c **** 	}
2916:..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2917:..\FreeRTOS/tasks.c **** 
2918:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2919:..\FreeRTOS/tasks.c **** 	{
2920:..\FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2921:..\FreeRTOS/tasks.c **** 		{
2922:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
2923:..\FreeRTOS/tasks.c **** 		}
2924:..\FreeRTOS/tasks.c **** 	}
2925:..\FreeRTOS/tasks.c **** 	#endif
2926:..\FreeRTOS/tasks.c **** 
2927:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2928:..\FreeRTOS/tasks.c **** 	{
2929:..\FreeRTOS/tasks.c **** 		pxTCB->ulNotifiedValue = 0;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 54


2930:..\FreeRTOS/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
2931:..\FreeRTOS/tasks.c **** 	}
2932:..\FreeRTOS/tasks.c **** 	#endif
2933:..\FreeRTOS/tasks.c **** 
2934:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2935:..\FreeRTOS/tasks.c **** 	{
2936:..\FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2937:..\FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2938:..\FreeRTOS/tasks.c **** 	}
2939:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2940:..\FreeRTOS/tasks.c **** }
2941:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2942:..\FreeRTOS/tasks.c **** 
2943:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2944:..\FreeRTOS/tasks.c **** 
2945:..\FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2946:..\FreeRTOS/tasks.c **** 	{
2947:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2948:..\FreeRTOS/tasks.c **** 
2949:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2950:..\FreeRTOS/tasks.c **** 		{
2951:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2952:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2953:..\FreeRTOS/tasks.c **** 		}
2954:..\FreeRTOS/tasks.c **** 	}
2955:..\FreeRTOS/tasks.c **** 
2956:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2957:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2958:..\FreeRTOS/tasks.c **** 
2959:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2960:..\FreeRTOS/tasks.c **** 
2961:..\FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2962:..\FreeRTOS/tasks.c **** 	{
2963:..\FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
2964:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2965:..\FreeRTOS/tasks.c **** 
2966:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2967:..\FreeRTOS/tasks.c **** 		{
2968:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2969:..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2970:..\FreeRTOS/tasks.c **** 		}
2971:..\FreeRTOS/tasks.c **** 		else
2972:..\FreeRTOS/tasks.c **** 		{
2973:..\FreeRTOS/tasks.c **** 			pvReturn = NULL;
2974:..\FreeRTOS/tasks.c **** 		}
2975:..\FreeRTOS/tasks.c **** 
2976:..\FreeRTOS/tasks.c **** 		return pvReturn;
2977:..\FreeRTOS/tasks.c **** 	}
2978:..\FreeRTOS/tasks.c **** 
2979:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2980:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2981:..\FreeRTOS/tasks.c **** 
2982:..\FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2983:..\FreeRTOS/tasks.c **** 
2984:..\FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2985:..\FreeRTOS/tasks.c **** 	{
2986:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 55


2987:..\FreeRTOS/tasks.c **** 
2988:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
2989:..\FreeRTOS/tasks.c **** 		the calling task. */
2990:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2991:..\FreeRTOS/tasks.c **** 
2992:..\FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2993:..\FreeRTOS/tasks.c **** 	}
2994:..\FreeRTOS/tasks.c **** 
2995:..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2996:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2997:..\FreeRTOS/tasks.c **** 
2998:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2999:..\FreeRTOS/tasks.c **** {
3000:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3001:..\FreeRTOS/tasks.c **** 
3002:..\FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3003:..\FreeRTOS/tasks.c **** 	{
3004:..\FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3005:..\FreeRTOS/tasks.c **** 	}
3006:..\FreeRTOS/tasks.c **** 
3007:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3008:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3009:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3010:..\FreeRTOS/tasks.c **** 
3011:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3012:..\FreeRTOS/tasks.c **** 	{
3013:..\FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3014:..\FreeRTOS/tasks.c **** 	}
3015:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3016:..\FreeRTOS/tasks.c **** 
3017:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3018:..\FreeRTOS/tasks.c **** 	{
3019:..\FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3020:..\FreeRTOS/tasks.c **** 	}
3021:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3022:..\FreeRTOS/tasks.c **** 
3023:..\FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3024:..\FreeRTOS/tasks.c **** 	using list2. */
3025:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3026:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3027:..\FreeRTOS/tasks.c **** }
3028:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3029:..\FreeRTOS/tasks.c **** 
3030:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3031:..\FreeRTOS/tasks.c **** {
3032:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3033:..\FreeRTOS/tasks.c **** 	{
3034:..\FreeRTOS/tasks.c **** 		BaseType_t xListIsEmpty;
3035:..\FreeRTOS/tasks.c **** 
3036:..\FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3037:..\FreeRTOS/tasks.c **** 		too often in the idle task. */
3038:..\FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
3039:..\FreeRTOS/tasks.c **** 		{
3040:..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
3041:..\FreeRTOS/tasks.c **** 			{
3042:..\FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3043:..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 56


3044:..\FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
3045:..\FreeRTOS/tasks.c **** 
3046:..\FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3047:..\FreeRTOS/tasks.c **** 			{
3048:..\FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
3049:..\FreeRTOS/tasks.c **** 
3050:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
3051:..\FreeRTOS/tasks.c **** 				{
3052:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3053:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
3054:..\FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
3055:..\FreeRTOS/tasks.c **** 					--uxTasksDeleted;
3056:..\FreeRTOS/tasks.c **** 				}
3057:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
3058:..\FreeRTOS/tasks.c **** 
3059:..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
3060:..\FreeRTOS/tasks.c **** 			}
3061:..\FreeRTOS/tasks.c **** 			else
3062:..\FreeRTOS/tasks.c **** 			{
3063:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3064:..\FreeRTOS/tasks.c **** 			}
3065:..\FreeRTOS/tasks.c **** 		}
3066:..\FreeRTOS/tasks.c **** 	}
3067:..\FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
3068:..\FreeRTOS/tasks.c **** }
3069:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3070:..\FreeRTOS/tasks.c **** 
3071:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3072:..\FreeRTOS/tasks.c **** {
3073:..\FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
3074:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
3075:..\FreeRTOS/tasks.c **** 
3076:..\FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
3077:..\FreeRTOS/tasks.c **** 	{
3078:..\FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3079:..\FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3080:..\FreeRTOS/tasks.c **** 	}
3081:..\FreeRTOS/tasks.c **** 	else
3082:..\FreeRTOS/tasks.c **** 	{
3083:..\FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3084:..\FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3085:..\FreeRTOS/tasks.c **** 
3086:..\FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3087:..\FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3088:..\FreeRTOS/tasks.c **** 		too. */
3089:..\FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
3090:..\FreeRTOS/tasks.c **** 		{
3091:..\FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
3092:..\FreeRTOS/tasks.c **** 		}
3093:..\FreeRTOS/tasks.c **** 		else
3094:..\FreeRTOS/tasks.c **** 		{
3095:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3096:..\FreeRTOS/tasks.c **** 		}
3097:..\FreeRTOS/tasks.c **** 	}
3098:..\FreeRTOS/tasks.c **** }
3099:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3100:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 57


3101:..\FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
3102:..\FreeRTOS/tasks.c **** {
3103:..\FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
3104:..\FreeRTOS/tasks.c **** 
3105:..\FreeRTOS/tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3106:..\FreeRTOS/tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3107:..\FreeRTOS/tasks.c **** 	the TCB then the stack. */
3108:..\FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3109:..\FreeRTOS/tasks.c **** 	{
3110:..\FreeRTOS/tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3111:..\FreeRTOS/tasks.c **** 		the implementation of the port malloc function. */
3112:..\FreeRTOS/tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3113:..\FreeRTOS/tasks.c **** 
3114:..\FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
3115:..\FreeRTOS/tasks.c **** 		{
3116:..\FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created.
3117:..\FreeRTOS/tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3118:..\FreeRTOS/tasks.c **** 			be deleted later if required. */
3119:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3120:..\FreeRTOS/tasks.c **** 
3121:..\FreeRTOS/tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3122:..\FreeRTOS/tasks.c **** 			{
3123:..\FreeRTOS/tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3124:..\FreeRTOS/tasks.c **** 				vPortFree( pxNewTCB );
3125:..\FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
3126:..\FreeRTOS/tasks.c **** 			}
3127:..\FreeRTOS/tasks.c **** 		}
3128:..\FreeRTOS/tasks.c **** 	}
3129:..\FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
3130:..\FreeRTOS/tasks.c **** 	{
3131:..\FreeRTOS/tasks.c **** 	StackType_t *pxStack;
3132:..\FreeRTOS/tasks.c **** 
3133:..\FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3134:..\FreeRTOS/tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
3135:..\FreeRTOS/tasks.c **** 
3136:..\FreeRTOS/tasks.c **** 		if( pxStack != NULL )
3137:..\FreeRTOS/tasks.c **** 		{
3138:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3139:..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function. */
3140:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3141:..\FreeRTOS/tasks.c **** 
3142:..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
3143:..\FreeRTOS/tasks.c **** 			{
3144:..\FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
3145:..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxStack;
3146:..\FreeRTOS/tasks.c **** 			}
3147:..\FreeRTOS/tasks.c **** 			else
3148:..\FreeRTOS/tasks.c **** 			{
3149:..\FreeRTOS/tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3150:..\FreeRTOS/tasks.c **** 				again. */
3151:..\FreeRTOS/tasks.c **** 				vPortFree( pxStack );
3152:..\FreeRTOS/tasks.c **** 			}
3153:..\FreeRTOS/tasks.c **** 		}
3154:..\FreeRTOS/tasks.c **** 		else
3155:..\FreeRTOS/tasks.c **** 		{
3156:..\FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
3157:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 58


3158:..\FreeRTOS/tasks.c **** 	}
3159:..\FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
3160:..\FreeRTOS/tasks.c **** 
3161:..\FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
3162:..\FreeRTOS/tasks.c **** 	{
3163:..\FreeRTOS/tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3164:..\FreeRTOS/tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3165:..\FreeRTOS/tasks.c **** 		{
3166:..\FreeRTOS/tasks.c **** 			/* Just to help debugging. */
3167:..\FreeRTOS/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
3168:..\FreeRTOS/tasks.c **** 		}
3169:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
3170:..\FreeRTOS/tasks.c **** 	}
3171:..\FreeRTOS/tasks.c **** 
3172:..\FreeRTOS/tasks.c **** 	return pxNewTCB;
3173:..\FreeRTOS/tasks.c **** }
3174:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3175:..\FreeRTOS/tasks.c **** 
3176:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3177:..\FreeRTOS/tasks.c **** 
3178:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3179:..\FreeRTOS/tasks.c **** 	{
3180:..\FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3181:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3182:..\FreeRTOS/tasks.c **** 
3183:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3184:..\FreeRTOS/tasks.c **** 		{
3185:..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3186:..\FreeRTOS/tasks.c **** 
3187:..\FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3188:..\FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3189:..\FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3190:..\FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3191:..\FreeRTOS/tasks.c **** 			do
3192:..\FreeRTOS/tasks.c **** 			{
3193:..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3194:..\FreeRTOS/tasks.c **** 
3195:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
3196:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
3197:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
3198:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
3199:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
3200:..\FreeRTOS/tasks.c **** 
3201:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3202:..\FreeRTOS/tasks.c **** 				{
3203:..\FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
3204:..\FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
3205:..\FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
3206:..\FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3207:..\FreeRTOS/tasks.c **** 					{
3208:..\FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
3209:..\FreeRTOS/tasks.c **** 						{
3210:..\FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
3211:..\FreeRTOS/tasks.c **** 						}
3212:..\FreeRTOS/tasks.c **** 					}
3213:..\FreeRTOS/tasks.c **** 				}
3214:..\FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 59


3215:..\FreeRTOS/tasks.c **** 
3216:..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3217:..\FreeRTOS/tasks.c **** 				{
3218:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
3219:..\FreeRTOS/tasks.c **** 				}
3220:..\FreeRTOS/tasks.c **** 				#else
3221:..\FreeRTOS/tasks.c **** 				{
3222:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3223:..\FreeRTOS/tasks.c **** 				}
3224:..\FreeRTOS/tasks.c **** 				#endif
3225:..\FreeRTOS/tasks.c **** 
3226:..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3227:..\FreeRTOS/tasks.c **** 				{
3228:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3229:..\FreeRTOS/tasks.c **** 				}
3230:..\FreeRTOS/tasks.c **** 				#else
3231:..\FreeRTOS/tasks.c **** 				{
3232:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
3233:..\FreeRTOS/tasks.c **** 				}
3234:..\FreeRTOS/tasks.c **** 				#endif
3235:..\FreeRTOS/tasks.c **** 
3236:..\FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3237:..\FreeRTOS/tasks.c **** 				{
3238:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3239:..\FreeRTOS/tasks.c **** 				}
3240:..\FreeRTOS/tasks.c **** 				#else
3241:..\FreeRTOS/tasks.c **** 				{
3242:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3243:..\FreeRTOS/tasks.c **** 				}
3244:..\FreeRTOS/tasks.c **** 				#endif
3245:..\FreeRTOS/tasks.c **** 
3246:..\FreeRTOS/tasks.c **** 				uxTask++;
3247:..\FreeRTOS/tasks.c **** 
3248:..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3249:..\FreeRTOS/tasks.c **** 		}
3250:..\FreeRTOS/tasks.c **** 		else
3251:..\FreeRTOS/tasks.c **** 		{
3252:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3253:..\FreeRTOS/tasks.c **** 		}
3254:..\FreeRTOS/tasks.c **** 
3255:..\FreeRTOS/tasks.c **** 		return uxTask;
3256:..\FreeRTOS/tasks.c **** 	}
3257:..\FreeRTOS/tasks.c **** 
3258:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3260:..\FreeRTOS/tasks.c **** 
3261:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3262:..\FreeRTOS/tasks.c **** 
3263:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3264:..\FreeRTOS/tasks.c **** 	{
  92              		.loc 1 3264 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL8:
3265:..\FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 60


  98              		.loc 1 3265 0
  99 0000 0023     		movs	r3, #0
3266:..\FreeRTOS/tasks.c **** 
3267:..\FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 100              		.loc 1 3267 0
 101 0002 01E0     		b	.L13
 102              	.LVL9:
 103              	.L14:
3268:..\FreeRTOS/tasks.c **** 		{
3269:..\FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 104              		.loc 1 3269 0
 105 0004 0130     		adds	r0, r0, #1
 106              	.LVL10:
3270:..\FreeRTOS/tasks.c **** 			ulCount++;
 107              		.loc 1 3270 0
 108 0006 0133     		adds	r3, r3, #1
 109              	.LVL11:
 110              	.L13:
3267:..\FreeRTOS/tasks.c **** 		{
 111              		.loc 1 3267 0
 112 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 113 000a A52A     		cmp	r2, #165
 114 000c FAD0     		beq	.L14
 115              	.LVL12:
3271:..\FreeRTOS/tasks.c **** 		}
3272:..\FreeRTOS/tasks.c **** 
3273:..\FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3274:..\FreeRTOS/tasks.c **** 
3275:..\FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
3276:..\FreeRTOS/tasks.c **** 	}
 116              		.loc 1 3276 0
 117 000e C3F38F00 		ubfx	r0, r3, #2, #16
 118              	.LVL13:
 119 0012 7047     		bx	lr
 120              		.cfi_endproc
 121              	.LFE98:
 122              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 123              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 124              		.align	2
 125              		.thumb
 126              		.thumb_func
 127              		.type	prvResetNextTaskUnblockTime, %function
 128              	prvResetNextTaskUnblockTime:
 129              	.LFB101:
3277:..\FreeRTOS/tasks.c **** 
3278:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3279:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3280:..\FreeRTOS/tasks.c **** 
3281:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3282:..\FreeRTOS/tasks.c **** 
3283:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3284:..\FreeRTOS/tasks.c **** 	{
3285:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3286:..\FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3287:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3288:..\FreeRTOS/tasks.c **** 
3289:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 61


3290:..\FreeRTOS/tasks.c **** 
3291:..\FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3292:..\FreeRTOS/tasks.c **** 		{
3293:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3294:..\FreeRTOS/tasks.c **** 		}
3295:..\FreeRTOS/tasks.c **** 		#else
3296:..\FreeRTOS/tasks.c **** 		{
3297:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3298:..\FreeRTOS/tasks.c **** 		}
3299:..\FreeRTOS/tasks.c **** 		#endif
3300:..\FreeRTOS/tasks.c **** 
3301:..\FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3302:..\FreeRTOS/tasks.c **** 
3303:..\FreeRTOS/tasks.c **** 		return uxReturn;
3304:..\FreeRTOS/tasks.c **** 	}
3305:..\FreeRTOS/tasks.c **** 
3306:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3307:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3308:..\FreeRTOS/tasks.c **** 
3309:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3310:..\FreeRTOS/tasks.c **** 
3311:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3312:..\FreeRTOS/tasks.c **** 	{
3313:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3314:..\FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3315:..\FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3316:..\FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3317:..\FreeRTOS/tasks.c **** 
3318:..\FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3319:..\FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3320:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3321:..\FreeRTOS/tasks.c **** 		{
3322:..\FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3323:..\FreeRTOS/tasks.c **** 		}
3324:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3325:..\FreeRTOS/tasks.c **** 
3326:..\FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3327:..\FreeRTOS/tasks.c **** 		{
3328:..\FreeRTOS/tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3329:..\FreeRTOS/tasks.c **** 			place. */
3330:..\FreeRTOS/tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3331:..\FreeRTOS/tasks.c **** 			{
3332:..\FreeRTOS/tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3333:..\FreeRTOS/tasks.c **** 			}
3334:..\FreeRTOS/tasks.c **** 		}
3335:..\FreeRTOS/tasks.c **** 		#else
3336:..\FreeRTOS/tasks.c **** 		{
3337:..\FreeRTOS/tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
3338:..\FreeRTOS/tasks.c **** 		}
3339:..\FreeRTOS/tasks.c **** 		#endif
3340:..\FreeRTOS/tasks.c **** 
3341:..\FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
3342:..\FreeRTOS/tasks.c **** 	}
3343:..\FreeRTOS/tasks.c **** 
3344:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3345:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3346:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 62


3347:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3348:..\FreeRTOS/tasks.c **** {
 130              		.loc 1 3348 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
3349:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
3350:..\FreeRTOS/tasks.c **** 
3351:..\FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 135              		.loc 1 3351 0
 136 0000 094B     		ldr	r3, .L20
 137 0002 9B6A     		ldr	r3, [r3, #40]
 138 0004 1B68     		ldr	r3, [r3]
 139 0006 0BB9     		cbnz	r3, .L19
 140 0008 0123     		movs	r3, #1
 141 000a 00E0     		b	.L16
 142              	.L19:
 143 000c 0023     		movs	r3, #0
 144              	.L16:
 145              		.loc 1 3351 0 is_stmt 0 discriminator 4
 146 000e 23B1     		cbz	r3, .L17
3352:..\FreeRTOS/tasks.c **** 	{
3353:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3354:..\FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3355:..\FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3356:..\FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3357:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 147              		.loc 1 3357 0 is_stmt 1
 148 0010 4FF0FF32 		mov	r2, #-1
 149 0014 044B     		ldr	r3, .L20
 150 0016 DA62     		str	r2, [r3, #44]
 151 0018 7047     		bx	lr
 152              	.L17:
3358:..\FreeRTOS/tasks.c **** 	}
3359:..\FreeRTOS/tasks.c **** 	else
3360:..\FreeRTOS/tasks.c **** 	{
3361:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3362:..\FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3363:..\FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3364:..\FreeRTOS/tasks.c **** 		from the Blocked state. */
3365:..\FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 153              		.loc 1 3365 0
 154 001a 034B     		ldr	r3, .L20
 155 001c 9A6A     		ldr	r2, [r3, #40]
 156 001e D268     		ldr	r2, [r2, #12]
 157 0020 D268     		ldr	r2, [r2, #12]
 158              	.LVL14:
3366:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 159              		.loc 1 3366 0
 160 0022 5268     		ldr	r2, [r2, #4]
 161              	.LVL15:
 162 0024 DA62     		str	r2, [r3, #44]
 163 0026 7047     		bx	lr
 164              	.L21:
 165              		.align	2
 166              	.L20:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 63


 167 0028 00000000 		.word	.LANCHOR0
 168              		.cfi_endproc
 169              	.LFE101:
 170              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 171              		.section	.text.prvDeleteTCB,"ax",%progbits
 172              		.align	2
 173              		.thumb
 174              		.thumb_func
 175              		.type	prvDeleteTCB, %function
 176              	prvDeleteTCB:
 177              	.LFB100:
3312:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 178              		.loc 1 3312 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL16:
 183 0000 10B5     		push	{r4, lr}
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187 0002 0446     		mov	r4, r0
3337:..\FreeRTOS/tasks.c **** 		}
 188              		.loc 1 3337 0
 189 0004 006B     		ldr	r0, [r0, #48]
 190              	.LVL17:
 191 0006 FFF7FEFF 		bl	vPortFree
 192              	.LVL18:
3341:..\FreeRTOS/tasks.c **** 	}
 193              		.loc 1 3341 0
 194 000a 2046     		mov	r0, r4
 195 000c FFF7FEFF 		bl	vPortFree
 196              	.LVL19:
 197 0010 10BD     		pop	{r4, pc}
 198              		.cfi_endproc
 199              	.LFE100:
 200              		.size	prvDeleteTCB, .-prvDeleteTCB
 201 0012 00BF     		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 202              		.align	2
 203              		.thumb
 204              		.thumb_func
 205              		.type	prvAllocateTCBAndStack, %function
 206              	prvAllocateTCBAndStack:
 207              	.LFB97:
3102:..\FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
 208              		.loc 1 3102 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL20:
 213 0000 70B5     		push	{r4, r5, r6, lr}
 214              		.cfi_def_cfa_offset 16
 215              		.cfi_offset 4, -16
 216              		.cfi_offset 5, -12
 217              		.cfi_offset 6, -8
 218              		.cfi_offset 14, -4
 219 0002 0646     		mov	r6, r0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 64


 220              	.LBB7:
3134:..\FreeRTOS/tasks.c **** 
 221              		.loc 1 3134 0
 222 0004 0C46     		mov	r4, r1
 223 0006 19B9     		cbnz	r1, .L25
3134:..\FreeRTOS/tasks.c **** 
 224              		.loc 1 3134 0 is_stmt 0 discriminator 1
 225 0008 8000     		lsls	r0, r0, #2
 226              	.LVL21:
 227 000a FFF7FEFF 		bl	pvPortMalloc
 228              	.LVL22:
 229 000e 0446     		mov	r4, r0
 230              	.LVL23:
 231              	.L25:
3136:..\FreeRTOS/tasks.c **** 		{
 232              		.loc 1 3136 0 is_stmt 1 discriminator 4
 233 0010 54B1     		cbz	r4, .L30
3140:..\FreeRTOS/tasks.c **** 
 234              		.loc 1 3140 0
 235 0012 5020     		movs	r0, #80
 236 0014 FFF7FEFF 		bl	pvPortMalloc
 237              	.LVL24:
3142:..\FreeRTOS/tasks.c **** 			{
 238              		.loc 1 3142 0
 239 0018 0546     		mov	r5, r0
 240 001a 08B1     		cbz	r0, .L27
3145:..\FreeRTOS/tasks.c **** 			}
 241              		.loc 1 3145 0
 242 001c 0463     		str	r4, [r0, #48]
 243 001e 04E0     		b	.L26
 244              	.L27:
3151:..\FreeRTOS/tasks.c **** 			}
 245              		.loc 1 3151 0
 246 0020 2046     		mov	r0, r4
 247              	.LVL25:
 248 0022 FFF7FEFF 		bl	vPortFree
 249              	.LVL26:
 250 0026 00E0     		b	.L26
 251              	.LVL27:
 252              	.L30:
3156:..\FreeRTOS/tasks.c **** 		}
 253              		.loc 1 3156 0
 254 0028 0025     		movs	r5, #0
 255              	.L26:
 256              	.LVL28:
 257              	.LBE7:
3161:..\FreeRTOS/tasks.c **** 	{
 258              		.loc 1 3161 0
 259 002a 25B1     		cbz	r5, .L28
3167:..\FreeRTOS/tasks.c **** 		}
 260              		.loc 1 3167 0
 261 002c B200     		lsls	r2, r6, #2
 262 002e A521     		movs	r1, #165
 263 0030 286B     		ldr	r0, [r5, #48]
 264 0032 FFF7FEFF 		bl	memset
 265              	.LVL29:
 266              	.L28:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 65


3173:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 267              		.loc 1 3173 0
 268 0036 2846     		mov	r0, r5
 269 0038 70BD     		pop	{r4, r5, r6, pc}
 270              		.cfi_endproc
 271              	.LFE97:
 272              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 273 003a 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 274              		.align	2
 275              		.thumb
 276              		.thumb_func
 277              		.type	prvInitialiseTCBVariables, %function
 278              	prvInitialiseTCBVariables:
 279              	.LFB93:
2834:..\FreeRTOS/tasks.c **** UBaseType_t x;
 280              		.loc 1 2834 0
 281              		.cfi_startproc
 282              		@ args = 4, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL30:
 285 0000 70B5     		push	{r4, r5, r6, lr}
 286              		.cfi_def_cfa_offset 16
 287              		.cfi_offset 4, -16
 288              		.cfi_offset 5, -12
 289              		.cfi_offset 6, -8
 290              		.cfi_offset 14, -4
 291 0002 0446     		mov	r4, r0
 292 0004 1546     		mov	r5, r2
 293              	.LVL31:
2838:..\FreeRTOS/tasks.c **** 	{
 294              		.loc 1 2838 0
 295 0006 0023     		movs	r3, #0
 296              	.LVL32:
 297 0008 06E0     		b	.L33
 298              	.LVL33:
 299              	.L35:
2840:..\FreeRTOS/tasks.c **** 
 300              		.loc 1 2840 0
 301 000a C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 302 000c E218     		adds	r2, r4, r3
 303 000e 82F83400 		strb	r0, [r2, #52]
2845:..\FreeRTOS/tasks.c **** 		{
 304              		.loc 1 2845 0
 305 0012 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 306 0014 12B1     		cbz	r2, .L34
2838:..\FreeRTOS/tasks.c **** 	{
 307              		.loc 1 2838 0 discriminator 2
 308 0016 0133     		adds	r3, r3, #1
 309              	.LVL34:
 310              	.L33:
2838:..\FreeRTOS/tasks.c **** 	{
 311              		.loc 1 2838 0 is_stmt 0 discriminator 1
 312 0018 0B2B     		cmp	r3, #11
 313 001a F6D9     		bls	.L35
 314              	.L34:
2857:..\FreeRTOS/tasks.c **** 
 315              		.loc 1 2857 0 is_stmt 1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 66


 316 001c 0023     		movs	r3, #0
 317              	.LVL35:
 318 001e 84F83F30 		strb	r3, [r4, #63]
2861:..\FreeRTOS/tasks.c **** 	{
 319              		.loc 1 2861 0
 320 0022 042D     		cmp	r5, #4
 321 0024 00D9     		bls	.L36
2863:..\FreeRTOS/tasks.c **** 	}
 322              		.loc 1 2863 0
 323 0026 0425     		movs	r5, #4
 324              	.LVL36:
 325              	.L36:
2870:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 326              		.loc 1 2870 0
 327 0028 E562     		str	r5, [r4, #44]
2873:..\FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 328              		.loc 1 2873 0
 329 002a 2564     		str	r5, [r4, #64]
2874:..\FreeRTOS/tasks.c **** 	}
 330              		.loc 1 2874 0
 331 002c 0026     		movs	r6, #0
 332 002e 6664     		str	r6, [r4, #68]
2878:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 333              		.loc 1 2878 0
 334 0030 201D     		adds	r0, r4, #4
 335 0032 FFF7FEFF 		bl	vListInitialiseItem
 336              	.LVL37:
2879:..\FreeRTOS/tasks.c **** 
 337              		.loc 1 2879 0
 338 0036 04F11800 		add	r0, r4, #24
 339 003a FFF7FEFF 		bl	vListInitialiseItem
 340              	.LVL38:
2883:..\FreeRTOS/tasks.c **** 
 341              		.loc 1 2883 0
 342 003e 2461     		str	r4, [r4, #16]
2886:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 343              		.loc 1 2886 0
 344 0040 C5F10505 		rsb	r5, r5, #5
 345              	.LVL39:
 346 0044 A561     		str	r5, [r4, #24]
2887:..\FreeRTOS/tasks.c **** 
 347              		.loc 1 2887 0
 348 0046 6462     		str	r4, [r4, #36]
2929:..\FreeRTOS/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 349              		.loc 1 2929 0
 350 0048 A664     		str	r6, [r4, #72]
2930:..\FreeRTOS/tasks.c **** 	}
 351              		.loc 1 2930 0
 352 004a 84F84C60 		strb	r6, [r4, #76]
 353 004e 70BD     		pop	{r4, r5, r6, pc}
 354              		.cfi_endproc
 355              	.LFE93:
 356              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 357              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 358              		.align	2
 359              		.thumb
 360              		.thumb_func
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 67


 361              		.type	prvInitialiseTaskLists, %function
 362              	prvInitialiseTaskLists:
 363              	.LFB94:
2999:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 364              		.loc 1 2999 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368 0000 70B5     		push	{r4, r5, r6, lr}
 369              		.cfi_def_cfa_offset 16
 370              		.cfi_offset 4, -16
 371              		.cfi_offset 5, -12
 372              		.cfi_offset 6, -8
 373              		.cfi_offset 14, -4
 374              	.LVL40:
3002:..\FreeRTOS/tasks.c **** 	{
 375              		.loc 1 3002 0
 376 0002 0024     		movs	r4, #0
 377 0004 07E0     		b	.L40
 378              	.LVL41:
 379              	.L41:
3004:..\FreeRTOS/tasks.c **** 	}
 380              		.loc 1 3004 0 discriminator 3
 381 0006 04EB8402 		add	r2, r4, r4, lsl #2
 382 000a 9300     		lsls	r3, r2, #2
 383 000c 1048     		ldr	r0, .L43
 384 000e 1844     		add	r0, r0, r3
 385 0010 FFF7FEFF 		bl	vListInitialise
 386              	.LVL42:
3002:..\FreeRTOS/tasks.c **** 	{
 387              		.loc 1 3002 0 discriminator 3
 388 0014 0134     		adds	r4, r4, #1
 389              	.LVL43:
 390              	.L40:
3002:..\FreeRTOS/tasks.c **** 	{
 391              		.loc 1 3002 0 is_stmt 0 discriminator 1
 392 0016 042C     		cmp	r4, #4
 393 0018 F5D9     		bls	.L41
3007:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 394              		.loc 1 3007 0 is_stmt 1
 395 001a 0E4C     		ldr	r4, .L43+4
 396              	.LVL44:
 397 001c 04F19406 		add	r6, r4, #148
 398 0020 3046     		mov	r0, r6
 399 0022 FFF7FEFF 		bl	vListInitialise
 400              	.LVL45:
3008:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 401              		.loc 1 3008 0
 402 0026 04F1A805 		add	r5, r4, #168
 403 002a 2846     		mov	r0, r5
 404 002c FFF7FEFF 		bl	vListInitialise
 405              	.LVL46:
3009:..\FreeRTOS/tasks.c **** 
 406              		.loc 1 3009 0
 407 0030 04F11400 		add	r0, r4, #20
 408 0034 FFF7FEFF 		bl	vListInitialise
 409              	.LVL47:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 68


3013:..\FreeRTOS/tasks.c **** 	}
 410              		.loc 1 3013 0
 411 0038 04F1BC00 		add	r0, r4, #188
 412 003c FFF7FEFF 		bl	vListInitialise
 413              	.LVL48:
3019:..\FreeRTOS/tasks.c **** 	}
 414              		.loc 1 3019 0
 415 0040 2046     		mov	r0, r4
 416 0042 FFF7FEFF 		bl	vListInitialise
 417              	.LVL49:
3025:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 418              		.loc 1 3025 0
 419 0046 A662     		str	r6, [r4, #40]
3026:..\FreeRTOS/tasks.c **** }
 420              		.loc 1 3026 0
 421 0048 C4F8D050 		str	r5, [r4, #208]
 422 004c 70BD     		pop	{r4, r5, r6, pc}
 423              	.L44:
 424 004e 00BF     		.align	2
 425              	.L43:
 426 0050 30000000 		.word	.LANCHOR0+48
 427 0054 00000000 		.word	.LANCHOR0
 428              		.cfi_endproc
 429              	.LFE94:
 430              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 431              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 432              		.align	2
 433              		.thumb
 434              		.thumb_func
 435              		.type	prvAddCurrentTaskToDelayedList, %function
 436              	prvAddCurrentTaskToDelayedList:
 437              	.LFB96:
3072:..\FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
 438              		.loc 1 3072 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              	.LVL50:
 443 0000 38B5     		push	{r3, r4, r5, lr}
 444              		.cfi_def_cfa_offset 16
 445              		.cfi_offset 3, -16
 446              		.cfi_offset 4, -12
 447              		.cfi_offset 5, -8
 448              		.cfi_offset 14, -4
3074:..\FreeRTOS/tasks.c **** 
 449              		.loc 1 3074 0
 450 0002 0F4B     		ldr	r3, .L49
 451 0004 D3F8D420 		ldr	r2, [r3, #212]
 452 0008 5060     		str	r0, [r2, #4]
3076:..\FreeRTOS/tasks.c **** 	{
 453              		.loc 1 3076 0
 454 000a D3F8D830 		ldr	r3, [r3, #216]
 455 000e 9842     		cmp	r0, r3
 456 0010 08D2     		bcs	.L46
3079:..\FreeRTOS/tasks.c **** 	}
 457              		.loc 1 3079 0
 458 0012 0B4B     		ldr	r3, .L49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 69


 459 0014 D3F8D000 		ldr	r0, [r3, #208]
 460              	.LVL51:
 461 0018 D3F8D410 		ldr	r1, [r3, #212]
 462 001c 0431     		adds	r1, r1, #4
 463 001e FFF7FEFF 		bl	vListInsert
 464              	.LVL52:
 465 0022 38BD     		pop	{r3, r4, r5, pc}
 466              	.LVL53:
 467              	.L46:
 468 0024 0446     		mov	r4, r0
3084:..\FreeRTOS/tasks.c **** 
 469              		.loc 1 3084 0
 470 0026 064D     		ldr	r5, .L49
 471 0028 A86A     		ldr	r0, [r5, #40]
 472              	.LVL54:
 473 002a D5F8D410 		ldr	r1, [r5, #212]
 474 002e 0431     		adds	r1, r1, #4
 475 0030 FFF7FEFF 		bl	vListInsert
 476              	.LVL55:
3089:..\FreeRTOS/tasks.c **** 		{
 477              		.loc 1 3089 0
 478 0034 EB6A     		ldr	r3, [r5, #44]
 479 0036 9C42     		cmp	r4, r3
 480 0038 00D2     		bcs	.L45
3091:..\FreeRTOS/tasks.c **** 		}
 481              		.loc 1 3091 0
 482 003a EC62     		str	r4, [r5, #44]
 483              	.L45:
 484 003c 38BD     		pop	{r3, r4, r5, pc}
 485              	.LVL56:
 486              	.L50:
 487 003e 00BF     		.align	2
 488              	.L49:
 489 0040 00000000 		.word	.LANCHOR0
 490              		.cfi_endproc
 491              	.LFE96:
 492              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 493              		.section	.text.xTaskGenericCreate,"ax",%progbits
 494              		.align	2
 495              		.global	xTaskGenericCreate
 496              		.thumb
 497              		.thumb_func
 498              		.type	xTaskGenericCreate, %function
 499              	xTaskGenericCreate:
 500              	.LFB64:
 552:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 501              		.loc 1 552 0
 502              		.cfi_startproc
 503              		@ args = 16, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL57:
 506 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 507              		.cfi_def_cfa_offset 32
 508              		.cfi_offset 4, -32
 509              		.cfi_offset 5, -28
 510              		.cfi_offset 6, -24
 511              		.cfi_offset 7, -20
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 70


 512              		.cfi_offset 8, -16
 513              		.cfi_offset 9, -12
 514              		.cfi_offset 10, -8
 515              		.cfi_offset 14, -4
 516 0004 82B0     		sub	sp, sp, #8
 517              		.cfi_def_cfa_offset 40
 518 0006 8046     		mov	r8, r0
 519 0008 8A46     		mov	r10, r1
 520 000a 1646     		mov	r6, r2
 521 000c 9946     		mov	r9, r3
 522 000e 0B9F     		ldr	r7, [sp, #44]
 562:..\FreeRTOS/tasks.c **** 
 523              		.loc 1 562 0
 524 0010 0C99     		ldr	r1, [sp, #48]
 525              	.LVL58:
 526 0012 1046     		mov	r0, r2
 527              	.LVL59:
 528 0014 FFF7FEFF 		bl	prvAllocateTCBAndStack
 529              	.LVL60:
 564:..\FreeRTOS/tasks.c **** 	{
 530              		.loc 1 564 0
 531 0018 0028     		cmp	r0, #0
 532 001a 54D0     		beq	.L57
 533 001c 0446     		mov	r4, r0
 600:..\FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 534              		.loc 1 600 0
 535 001e 036B     		ldr	r3, [r0, #48]
 536 0020 06F18045 		add	r5, r6, #1073741824
 537 0024 013D     		subs	r5, r5, #1
 538 0026 03EB8505 		add	r5, r3, r5, lsl #2
 539              	.LVL61:
 601:..\FreeRTOS/tasks.c **** 
 540              		.loc 1 601 0
 541 002a 25F00705 		bic	r5, r5, #7
 542              	.LVL62:
 621:..\FreeRTOS/tasks.c **** 
 543              		.loc 1 621 0
 544 002e 0096     		str	r6, [sp]
 545 0030 0D9B     		ldr	r3, [sp, #52]
 546 0032 0A9A     		ldr	r2, [sp, #40]
 547 0034 5146     		mov	r1, r10
 548 0036 FFF7FEFF 		bl	prvInitialiseTCBVariables
 549              	.LVL63:
 633:..\FreeRTOS/tasks.c **** 		}
 550              		.loc 1 633 0
 551 003a 4A46     		mov	r2, r9
 552 003c 4146     		mov	r1, r8
 553 003e 2846     		mov	r0, r5
 554 0040 FFF7FEFF 		bl	pxPortInitialiseStack
 555              	.LVL64:
 556 0044 2060     		str	r0, [r4]
 637:..\FreeRTOS/tasks.c **** 		{
 557              		.loc 1 637 0
 558 0046 07B1     		cbz	r7, .L53
 642:..\FreeRTOS/tasks.c **** 		}
 559              		.loc 1 642 0
 560 0048 3C60     		str	r4, [r7]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 71


 561              	.L53:
 651:..\FreeRTOS/tasks.c **** 		{
 562              		.loc 1 651 0
 563 004a FFF7FEFF 		bl	vPortEnterCritical
 564              	.LVL65:
 653:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 565              		.loc 1 653 0
 566 004e 284B     		ldr	r3, .L59
 567 0050 D3F8DC20 		ldr	r2, [r3, #220]
 568 0054 0132     		adds	r2, r2, #1
 569 0056 C3F8DC20 		str	r2, [r3, #220]
 654:..\FreeRTOS/tasks.c **** 			{
 570              		.loc 1 654 0
 571 005a D3F8D430 		ldr	r3, [r3, #212]
 572 005e 4BB9     		cbnz	r3, .L54
 658:..\FreeRTOS/tasks.c **** 
 573              		.loc 1 658 0
 574 0060 234B     		ldr	r3, .L59
 575 0062 C3F8D440 		str	r4, [r3, #212]
 660:..\FreeRTOS/tasks.c **** 				{
 576              		.loc 1 660 0
 577 0066 D3F8DC30 		ldr	r3, [r3, #220]
 578 006a 012B     		cmp	r3, #1
 579 006c 10D1     		bne	.L55
 665:..\FreeRTOS/tasks.c **** 				}
 580              		.loc 1 665 0
 581 006e FFF7FEFF 		bl	prvInitialiseTaskLists
 582              	.LVL66:
 583 0072 0DE0     		b	.L55
 584              	.L54:
 677:..\FreeRTOS/tasks.c **** 				{
 585              		.loc 1 677 0
 586 0074 1E4B     		ldr	r3, .L59
 587 0076 D3F8E030 		ldr	r3, [r3, #224]
 588 007a 4BB9     		cbnz	r3, .L55
 679:..\FreeRTOS/tasks.c **** 					{
 589              		.loc 1 679 0
 590 007c 1C4B     		ldr	r3, .L59
 591 007e D3F8D430 		ldr	r3, [r3, #212]
 592 0082 DB6A     		ldr	r3, [r3, #44]
 593 0084 0A9A     		ldr	r2, [sp, #40]
 594 0086 9A42     		cmp	r2, r3
 595 0088 02D3     		bcc	.L55
 681:..\FreeRTOS/tasks.c **** 					}
 596              		.loc 1 681 0
 597 008a 194B     		ldr	r3, .L59
 598 008c C3F8D440 		str	r4, [r3, #212]
 599              	.L55:
 694:..\FreeRTOS/tasks.c **** 
 600              		.loc 1 694 0
 601 0090 174B     		ldr	r3, .L59
 602 0092 D3F8E420 		ldr	r2, [r3, #228]
 603 0096 0132     		adds	r2, r2, #1
 604 0098 C3F8E420 		str	r2, [r3, #228]
 704:..\FreeRTOS/tasks.c **** 
 605              		.loc 1 704 0
 606 009c E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 72


 607 009e 0125     		movs	r5, #1
 608              	.LVL67:
 609 00a0 05FA02F0 		lsl	r0, r5, r2
 610 00a4 D3F8E810 		ldr	r1, [r3, #232]
 611 00a8 0143     		orrs	r1, r1, r0
 612 00aa C3F8E810 		str	r1, [r3, #232]
 613 00ae 3033     		adds	r3, r3, #48
 614 00b0 02EB8202 		add	r2, r2, r2, lsl #2
 615 00b4 9000     		lsls	r0, r2, #2
 616 00b6 211D     		adds	r1, r4, #4
 617 00b8 1844     		add	r0, r0, r3
 618 00ba FFF7FEFF 		bl	vListInsertEnd
 619              	.LVL68:
 709:..\FreeRTOS/tasks.c **** 	}
 620              		.loc 1 709 0
 621 00be FFF7FEFF 		bl	vPortExitCritical
 622              	.LVL69:
 706:..\FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 623              		.loc 1 706 0
 624 00c2 2C46     		mov	r4, r5
 625              	.LVL70:
 626 00c4 01E0     		b	.L52
 627              	.LVL71:
 628              	.L57:
 713:..\FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 629              		.loc 1 713 0
 630 00c6 4FF0FF34 		mov	r4, #-1
 631              	.LVL72:
 632              	.L52:
 717:..\FreeRTOS/tasks.c **** 	{
 633              		.loc 1 717 0
 634 00ca 012C     		cmp	r4, #1
 635 00cc 0CD1     		bne	.L56
 719:..\FreeRTOS/tasks.c **** 		{
 636              		.loc 1 719 0
 637 00ce 084B     		ldr	r3, .L59
 638 00d0 D3F8E030 		ldr	r3, [r3, #224]
 639 00d4 43B1     		cbz	r3, .L56
 723:..\FreeRTOS/tasks.c **** 			{
 640              		.loc 1 723 0
 641 00d6 064B     		ldr	r3, .L59
 642 00d8 D3F8D430 		ldr	r3, [r3, #212]
 643 00dc DB6A     		ldr	r3, [r3, #44]
 644 00de 0A9A     		ldr	r2, [sp, #40]
 645 00e0 9A42     		cmp	r2, r3
 646 00e2 01D9     		bls	.L56
 725:..\FreeRTOS/tasks.c **** 			}
 647              		.loc 1 725 0
 648 00e4 FFF7FEFF 		bl	vPortYield
 649              	.LVL73:
 650              	.L56:
 739:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 651              		.loc 1 739 0
 652 00e8 2046     		mov	r0, r4
 653 00ea 02B0     		add	sp, sp, #8
 654              		.cfi_def_cfa_offset 32
 655              		@ sp needed
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 73


 656 00ec BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 657              	.LVL74:
 658              	.L60:
 659              		.align	2
 660              	.L59:
 661 00f0 00000000 		.word	.LANCHOR0
 662              		.cfi_endproc
 663              	.LFE64:
 664              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 665              		.section	.text.vTaskDelete,"ax",%progbits
 666              		.align	2
 667              		.global	vTaskDelete
 668              		.thumb
 669              		.thumb_func
 670              		.type	vTaskDelete, %function
 671              	vTaskDelete:
 672              	.LFB65:
 745:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 673              		.loc 1 745 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              	.LVL75:
 678 0000 70B5     		push	{r4, r5, r6, lr}
 679              		.cfi_def_cfa_offset 16
 680              		.cfi_offset 4, -16
 681              		.cfi_offset 5, -12
 682              		.cfi_offset 6, -8
 683              		.cfi_offset 14, -4
 684 0002 0546     		mov	r5, r0
 748:..\FreeRTOS/tasks.c **** 		{
 685              		.loc 1 748 0
 686 0004 FFF7FEFF 		bl	vPortEnterCritical
 687              	.LVL76:
 752:..\FreeRTOS/tasks.c **** 
 688              		.loc 1 752 0
 689 0008 15B9     		cbnz	r5, .L62
 752:..\FreeRTOS/tasks.c **** 
 690              		.loc 1 752 0 is_stmt 0 discriminator 1
 691 000a 214B     		ldr	r3, .L68
 692 000c D3F8D450 		ldr	r5, [r3, #212]
 693              	.LVL77:
 694              	.L62:
 758:..\FreeRTOS/tasks.c **** 			{
 695              		.loc 1 758 0 is_stmt 1 discriminator 4
 696 0010 2E1D     		adds	r6, r5, #4
 697 0012 3046     		mov	r0, r6
 698 0014 FFF7FEFF 		bl	uxListRemove
 699              	.LVL78:
 700 0018 80B9     		cbnz	r0, .L63
 760:..\FreeRTOS/tasks.c **** 			}
 701              		.loc 1 760 0
 702 001a EA6A     		ldr	r2, [r5, #44]
 703 001c 02EB8201 		add	r1, r2, r2, lsl #2
 704 0020 8B00     		lsls	r3, r1, #2
 705 0022 1B49     		ldr	r1, .L68
 706 0024 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 74


 707 0026 1B6B     		ldr	r3, [r3, #48]
 708 0028 43B9     		cbnz	r3, .L63
 760:..\FreeRTOS/tasks.c **** 			}
 709              		.loc 1 760 0 is_stmt 0 discriminator 1
 710 002a 0123     		movs	r3, #1
 711 002c 03FA02F2 		lsl	r2, r3, r2
 712 0030 D1F8E830 		ldr	r3, [r1, #232]
 713 0034 23EA0202 		bic	r2, r3, r2
 714 0038 C1F8E820 		str	r2, [r1, #232]
 715              	.L63:
 768:..\FreeRTOS/tasks.c **** 			{
 716              		.loc 1 768 0 is_stmt 1
 717 003c AB6A     		ldr	r3, [r5, #40]
 718 003e 1BB1     		cbz	r3, .L64
 770:..\FreeRTOS/tasks.c **** 			}
 719              		.loc 1 770 0
 720 0040 05F11800 		add	r0, r5, #24
 721 0044 FFF7FEFF 		bl	uxListRemove
 722              	.LVL79:
 723              	.L64:
 777:..\FreeRTOS/tasks.c **** 
 724              		.loc 1 777 0
 725 0048 114C     		ldr	r4, .L68
 726 004a 3146     		mov	r1, r6
 727 004c 04F1BC00 		add	r0, r4, #188
 728 0050 FFF7FEFF 		bl	vListInsertEnd
 729              	.LVL80:
 782:..\FreeRTOS/tasks.c **** 
 730              		.loc 1 782 0
 731 0054 D4F8EC30 		ldr	r3, [r4, #236]
 732 0058 0133     		adds	r3, r3, #1
 733 005a C4F8EC30 		str	r3, [r4, #236]
 786:..\FreeRTOS/tasks.c **** 
 734              		.loc 1 786 0
 735 005e D4F8E430 		ldr	r3, [r4, #228]
 736 0062 0133     		adds	r3, r3, #1
 737 0064 C4F8E430 		str	r3, [r4, #228]
 790:..\FreeRTOS/tasks.c **** 
 738              		.loc 1 790 0
 739 0068 FFF7FEFF 		bl	vPortExitCritical
 740              	.LVL81:
 794:..\FreeRTOS/tasks.c **** 		{
 741              		.loc 1 794 0
 742 006c D4F8E030 		ldr	r3, [r4, #224]
 743 0070 63B1     		cbz	r3, .L61
 796:..\FreeRTOS/tasks.c **** 			{
 744              		.loc 1 796 0
 745 0072 D4F8D430 		ldr	r3, [r4, #212]
 746 0076 9D42     		cmp	r5, r3
 747 0078 02D1     		bne	.L66
 806:..\FreeRTOS/tasks.c **** 			}
 748              		.loc 1 806 0
 749 007a FFF7FEFF 		bl	vPortYield
 750              	.LVL82:
 751 007e 70BD     		pop	{r4, r5, r6, pc}
 752              	.LVL83:
 753              	.L66:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 75


 812:..\FreeRTOS/tasks.c **** 				{
 754              		.loc 1 812 0
 755 0080 FFF7FEFF 		bl	vPortEnterCritical
 756              	.LVL84:
 814:..\FreeRTOS/tasks.c **** 				}
 757              		.loc 1 814 0
 758 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 759              	.LVL85:
 816:..\FreeRTOS/tasks.c **** 			}
 760              		.loc 1 816 0
 761 0088 FFF7FEFF 		bl	vPortExitCritical
 762              	.LVL86:
 763              	.L61:
 764 008c 70BD     		pop	{r4, r5, r6, pc}
 765              	.LVL87:
 766              	.L69:
 767 008e 00BF     		.align	2
 768              	.L68:
 769 0090 00000000 		.word	.LANCHOR0
 770              		.cfi_endproc
 771              	.LFE65:
 772              		.size	vTaskDelete, .-vTaskDelete
 773              		.section	.text.eTaskGetState,"ax",%progbits
 774              		.align	2
 775              		.global	eTaskGetState
 776              		.thumb
 777              		.thumb_func
 778              		.type	eTaskGetState, %function
 779              	eTaskGetState:
 780              	.LFB68:
 989:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 781              		.loc 1 989 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785              	.LVL88:
 786 0000 38B5     		push	{r3, r4, r5, lr}
 787              		.cfi_def_cfa_offset 16
 788              		.cfi_offset 3, -16
 789              		.cfi_offset 4, -12
 790              		.cfi_offset 5, -8
 791              		.cfi_offset 14, -4
 792              	.LVL89:
 996:..\FreeRTOS/tasks.c **** 		{
 793              		.loc 1 996 0
 794 0002 154B     		ldr	r3, .L79
 795 0004 D3F8D430 		ldr	r3, [r3, #212]
 796 0008 9842     		cmp	r0, r3
 797 000a 1AD0     		beq	.L73
 798 000c 0446     		mov	r4, r0
1003:..\FreeRTOS/tasks.c **** 			{
 799              		.loc 1 1003 0
 800 000e FFF7FEFF 		bl	vPortEnterCritical
 801              	.LVL90:
1005:..\FreeRTOS/tasks.c **** 			}
 802              		.loc 1 1005 0
 803 0012 6569     		ldr	r5, [r4, #20]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 76


 804              	.LVL91:
1007:..\FreeRTOS/tasks.c **** 
 805              		.loc 1 1007 0
 806 0014 FFF7FEFF 		bl	vPortExitCritical
 807              	.LVL92:
1009:..\FreeRTOS/tasks.c **** 			{
 808              		.loc 1 1009 0
 809 0018 0F4B     		ldr	r3, .L79
 810 001a 9B6A     		ldr	r3, [r3, #40]
 811 001c 9D42     		cmp	r5, r3
 812 001e 12D0     		beq	.L74
1009:..\FreeRTOS/tasks.c **** 			{
 813              		.loc 1 1009 0 is_stmt 0 discriminator 1
 814 0020 0D4B     		ldr	r3, .L79
 815 0022 D3F8D030 		ldr	r3, [r3, #208]
 816 0026 9D42     		cmp	r5, r3
 817 0028 0FD0     		beq	.L75
1017:..\FreeRTOS/tasks.c **** 				{
 818              		.loc 1 1017 0 is_stmt 1
 819 002a 0B4B     		ldr	r3, .L79
 820 002c 9D42     		cmp	r5, r3
 821 002e 03D1     		bne	.L72
1022:..\FreeRTOS/tasks.c **** 					{
 822              		.loc 1 1022 0
 823 0030 A36A     		ldr	r3, [r4, #40]
 824 0032 63B9     		cbnz	r3, .L76
1024:..\FreeRTOS/tasks.c **** 					}
 825              		.loc 1 1024 0
 826 0034 0320     		movs	r0, #3
 827 0036 38BD     		pop	{r3, r4, r5, pc}
 828              	.LVL93:
 829              	.L72:
1034:..\FreeRTOS/tasks.c **** 				{
 830              		.loc 1 1034 0
 831 0038 084B     		ldr	r3, .L79+4
 832 003a 9D42     		cmp	r5, r3
 833 003c 09D1     		bne	.L77
1038:..\FreeRTOS/tasks.c **** 				}
 834              		.loc 1 1038 0
 835 003e 0420     		movs	r0, #4
 836 0040 38BD     		pop	{r3, r4, r5, pc}
 837              	.LVL94:
 838              	.L73:
 999:..\FreeRTOS/tasks.c **** 		}
 839              		.loc 1 999 0
 840 0042 0020     		movs	r0, #0
 841              	.LVL95:
 842 0044 38BD     		pop	{r3, r4, r5, pc}
 843              	.LVL96:
 844              	.L74:
1013:..\FreeRTOS/tasks.c **** 			}
 845              		.loc 1 1013 0
 846 0046 0220     		movs	r0, #2
 847 0048 38BD     		pop	{r3, r4, r5, pc}
 848              	.LVL97:
 849              	.L75:
 850 004a 0220     		movs	r0, #2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 77


 851 004c 38BD     		pop	{r3, r4, r5, pc}
 852              	.LVL98:
 853              	.L76:
1028:..\FreeRTOS/tasks.c **** 					}
 854              		.loc 1 1028 0
 855 004e 0220     		movs	r0, #2
 856 0050 38BD     		pop	{r3, r4, r5, pc}
 857              	.LVL99:
 858              	.L77:
1046:..\FreeRTOS/tasks.c **** 			}
 859              		.loc 1 1046 0
 860 0052 0120     		movs	r0, #1
 861              	.LVL100:
1051:..\FreeRTOS/tasks.c **** 
 862              		.loc 1 1051 0
 863 0054 38BD     		pop	{r3, r4, r5, pc}
 864              	.LVL101:
 865              	.L80:
 866 0056 00BF     		.align	2
 867              	.L79:
 868 0058 00000000 		.word	.LANCHOR0
 869 005c BC000000 		.word	.LANCHOR0+188
 870              		.cfi_endproc
 871              	.LFE68:
 872              		.size	eTaskGetState, .-eTaskGetState
 873              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 874              		.align	2
 875              		.global	uxTaskPriorityGet
 876              		.thumb
 877              		.thumb_func
 878              		.type	uxTaskPriorityGet, %function
 879              	uxTaskPriorityGet:
 880              	.LFB69:
1059:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 881              		.loc 1 1059 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              	.LVL102:
 886 0000 10B5     		push	{r4, lr}
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 4, -8
 889              		.cfi_offset 14, -4
 890 0002 0446     		mov	r4, r0
1063:..\FreeRTOS/tasks.c **** 		{
 891              		.loc 1 1063 0
 892 0004 FFF7FEFF 		bl	vPortEnterCritical
 893              	.LVL103:
1067:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 894              		.loc 1 1067 0
 895 0008 14B9     		cbnz	r4, .L82
1067:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 896              		.loc 1 1067 0 is_stmt 0 discriminator 1
 897 000a 044B     		ldr	r3, .L84
 898 000c D3F8D440 		ldr	r4, [r3, #212]
 899              	.LVL104:
 900              	.L82:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 78


1068:..\FreeRTOS/tasks.c **** 		}
 901              		.loc 1 1068 0 is_stmt 1 discriminator 4
 902 0010 E46A     		ldr	r4, [r4, #44]
 903              	.LVL105:
1070:..\FreeRTOS/tasks.c **** 
 904              		.loc 1 1070 0 discriminator 4
 905 0012 FFF7FEFF 		bl	vPortExitCritical
 906              	.LVL106:
1073:..\FreeRTOS/tasks.c **** 
 907              		.loc 1 1073 0 discriminator 4
 908 0016 2046     		mov	r0, r4
 909 0018 10BD     		pop	{r4, pc}
 910              	.LVL107:
 911              	.L85:
 912 001a 00BF     		.align	2
 913              	.L84:
 914 001c 00000000 		.word	.LANCHOR0
 915              		.cfi_endproc
 916              	.LFE69:
 917              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 918              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 919              		.align	2
 920              		.global	uxTaskPriorityGetFromISR
 921              		.thumb
 922              		.thumb_func
 923              		.type	uxTaskPriorityGetFromISR, %function
 924              	uxTaskPriorityGetFromISR:
 925              	.LFB70:
1081:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 926              		.loc 1 1081 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              	.LVL108:
 931 0000 10B5     		push	{r4, lr}
 932              		.cfi_def_cfa_offset 8
 933              		.cfi_offset 4, -8
 934              		.cfi_offset 14, -4
 935 0002 0446     		mov	r4, r0
1103:..\FreeRTOS/tasks.c **** 		{
 936              		.loc 1 1103 0
 937 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 938              	.LVL109:
1107:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 939              		.loc 1 1107 0
 940 0008 14B9     		cbnz	r4, .L87
1107:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 941              		.loc 1 1107 0 is_stmt 0 discriminator 1
 942 000a 044B     		ldr	r3, .L89
 943 000c D3F8D440 		ldr	r4, [r3, #212]
 944              	.LVL110:
 945              	.L87:
1108:..\FreeRTOS/tasks.c **** 		}
 946              		.loc 1 1108 0 is_stmt 1 discriminator 4
 947 0010 E46A     		ldr	r4, [r4, #44]
 948              	.LVL111:
1110:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 79


 949              		.loc 1 1110 0 discriminator 4
 950 0012 FFF7FEFF 		bl	vPortClearInterruptMask
 951              	.LVL112:
1113:..\FreeRTOS/tasks.c **** 
 952              		.loc 1 1113 0 discriminator 4
 953 0016 2046     		mov	r0, r4
 954 0018 10BD     		pop	{r4, pc}
 955              	.LVL113:
 956              	.L90:
 957 001a 00BF     		.align	2
 958              	.L89:
 959 001c 00000000 		.word	.LANCHOR0
 960              		.cfi_endproc
 961              	.LFE70:
 962              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 963              		.section	.text.vTaskPrioritySet,"ax",%progbits
 964              		.align	2
 965              		.global	vTaskPrioritySet
 966              		.thumb
 967              		.thumb_func
 968              		.type	vTaskPrioritySet, %function
 969              	vTaskPrioritySet:
 970              	.LFB71:
1121:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 971              		.loc 1 1121 0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 0
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 975              	.LVL114:
 976 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 977              		.cfi_def_cfa_offset 24
 978              		.cfi_offset 3, -24
 979              		.cfi_offset 4, -20
 980              		.cfi_offset 5, -16
 981              		.cfi_offset 6, -12
 982              		.cfi_offset 7, -8
 983              		.cfi_offset 14, -4
 984 0002 0446     		mov	r4, r0
 985 0004 0D46     		mov	r5, r1
 986              	.LVL115:
1129:..\FreeRTOS/tasks.c **** 		{
 987              		.loc 1 1129 0
 988 0006 0429     		cmp	r1, #4
 989 0008 00D9     		bls	.L92
1131:..\FreeRTOS/tasks.c **** 		}
 990              		.loc 1 1131 0
 991 000a 0425     		movs	r5, #4
 992              	.L92:
 993              	.LVL116:
1138:..\FreeRTOS/tasks.c **** 		{
 994              		.loc 1 1138 0
 995 000c FFF7FEFF 		bl	vPortEnterCritical
 996              	.LVL117:
1142:..\FreeRTOS/tasks.c **** 
 997              		.loc 1 1142 0
 998 0010 14B9     		cbnz	r4, .L93
1142:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 80


 999              		.loc 1 1142 0 is_stmt 0 discriminator 1
 1000 0012 2F4B     		ldr	r3, .L108
 1001 0014 D3F8D440 		ldr	r4, [r3, #212]
 1002              	.LVL118:
 1003              	.L93:
1148:..\FreeRTOS/tasks.c **** 			}
 1004              		.loc 1 1148 0 is_stmt 1 discriminator 4
 1005 0018 236C     		ldr	r3, [r4, #64]
 1006              	.LVL119:
1156:..\FreeRTOS/tasks.c **** 			{
 1007              		.loc 1 1156 0 discriminator 4
 1008 001a 9D42     		cmp	r5, r3
 1009 001c 54D0     		beq	.L94
1160:..\FreeRTOS/tasks.c **** 				{
 1010              		.loc 1 1160 0
 1011 001e 0CD9     		bls	.L95
1162:..\FreeRTOS/tasks.c **** 					{
 1012              		.loc 1 1162 0
 1013 0020 2B4A     		ldr	r2, .L108
 1014 0022 D2F8D420 		ldr	r2, [r2, #212]
 1015 0026 9442     		cmp	r4, r2
 1016 0028 0ED0     		beq	.L103
1167:..\FreeRTOS/tasks.c **** 						{
 1017              		.loc 1 1167 0
 1018 002a 294A     		ldr	r2, .L108
 1019 002c D2F8D420 		ldr	r2, [r2, #212]
 1020 0030 D26A     		ldr	r2, [r2, #44]
 1021 0032 9542     		cmp	r5, r2
 1022 0034 0AD2     		bcs	.L104
1124:..\FreeRTOS/tasks.c **** 
 1023              		.loc 1 1124 0
 1024 0036 0027     		movs	r7, #0
 1025 0038 0BE0     		b	.L96
 1026              	.L95:
1183:..\FreeRTOS/tasks.c **** 				{
 1027              		.loc 1 1183 0
 1028 003a 254A     		ldr	r2, .L108
 1029 003c D2F8D420 		ldr	r2, [r2, #212]
 1030 0040 9442     		cmp	r4, r2
 1031 0042 05D0     		beq	.L105
1124:..\FreeRTOS/tasks.c **** 
 1032              		.loc 1 1124 0
 1033 0044 0027     		movs	r7, #0
 1034 0046 04E0     		b	.L96
 1035              	.L103:
 1036 0048 0027     		movs	r7, #0
 1037 004a 02E0     		b	.L96
 1038              	.L104:
1169:..\FreeRTOS/tasks.c **** 						}
 1039              		.loc 1 1169 0
 1040 004c 0127     		movs	r7, #1
 1041 004e 00E0     		b	.L96
 1042              	.L105:
1188:..\FreeRTOS/tasks.c **** 				}
 1043              		.loc 1 1188 0
 1044 0050 0127     		movs	r7, #1
 1045              	.L96:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 81


 1046              	.LVL120:
1200:..\FreeRTOS/tasks.c **** 
 1047              		.loc 1 1200 0
 1048 0052 E66A     		ldr	r6, [r4, #44]
 1049              	.LVL121:
1206:..\FreeRTOS/tasks.c **** 					{
 1050              		.loc 1 1206 0
 1051 0054 B342     		cmp	r3, r6
 1052 0056 00D1     		bne	.L97
1208:..\FreeRTOS/tasks.c **** 					}
 1053              		.loc 1 1208 0
 1054 0058 E562     		str	r5, [r4, #44]
 1055              	.L97:
1216:..\FreeRTOS/tasks.c **** 				}
 1056              		.loc 1 1216 0
 1057 005a 2564     		str	r5, [r4, #64]
1226:..\FreeRTOS/tasks.c **** 				{
 1058              		.loc 1 1226 0
 1059 005c A369     		ldr	r3, [r4, #24]
 1060              	.LVL122:
 1061 005e 002B     		cmp	r3, #0
 1062 0060 02DB     		blt	.L98
1228:..\FreeRTOS/tasks.c **** 				}
 1063              		.loc 1 1228 0
 1064 0062 C5F10505 		rsb	r5, r5, #5
 1065              	.LVL123:
 1066 0066 A561     		str	r5, [r4, #24]
 1067              	.L98:
1239:..\FreeRTOS/tasks.c **** 				{
 1068              		.loc 1 1239 0
 1069 0068 6169     		ldr	r1, [r4, #20]
 1070 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1071 006e 9300     		lsls	r3, r2, #2
 1072 0070 184A     		ldr	r2, .L108+4
 1073 0072 1344     		add	r3, r3, r2
 1074 0074 9942     		cmp	r1, r3
 1075 0076 01D1     		bne	.L106
 1076 0078 0123     		movs	r3, #1
 1077 007a 00E0     		b	.L99
 1078              	.L106:
 1079 007c 0023     		movs	r3, #0
 1080              	.L99:
1239:..\FreeRTOS/tasks.c **** 				{
 1081              		.loc 1 1239 0 is_stmt 0 discriminator 4
 1082 007e 03B3     		cbz	r3, .L100
1244:..\FreeRTOS/tasks.c **** 					{
 1083              		.loc 1 1244 0 is_stmt 1
 1084 0080 251D     		adds	r5, r4, #4
 1085 0082 2846     		mov	r0, r5
 1086 0084 FFF7FEFF 		bl	uxListRemove
 1087              	.LVL124:
 1088 0088 48B9     		cbnz	r0, .L101
1249:..\FreeRTOS/tasks.c **** 					}
 1089              		.loc 1 1249 0
 1090 008a 0123     		movs	r3, #1
 1091 008c 03FA06F6 		lsl	r6, r3, r6
 1092              	.LVL125:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 82


 1093 0090 0F4A     		ldr	r2, .L108
 1094 0092 D2F8E830 		ldr	r3, [r2, #232]
 1095 0096 23EA0606 		bic	r6, r3, r6
 1096 009a C2F8E860 		str	r6, [r2, #232]
 1097              	.L101:
1255:..\FreeRTOS/tasks.c **** 				}
 1098              		.loc 1 1255 0
 1099 009e E36A     		ldr	r3, [r4, #44]
 1100 00a0 0122     		movs	r2, #1
 1101 00a2 02FA03F1 		lsl	r1, r2, r3
 1102 00a6 0A48     		ldr	r0, .L108
 1103 00a8 D0F8E820 		ldr	r2, [r0, #232]
 1104 00ac 0A43     		orrs	r2, r2, r1
 1105 00ae C0F8E820 		str	r2, [r0, #232]
 1106 00b2 3030     		adds	r0, r0, #48
 1107 00b4 03EB8303 		add	r3, r3, r3, lsl #2
 1108 00b8 9A00     		lsls	r2, r3, #2
 1109 00ba 2946     		mov	r1, r5
 1110 00bc 1044     		add	r0, r0, r2
 1111 00be FFF7FEFF 		bl	vListInsertEnd
 1112              	.LVL126:
 1113              	.L100:
1262:..\FreeRTOS/tasks.c **** 				{
 1114              		.loc 1 1262 0
 1115 00c2 0FB1     		cbz	r7, .L94
1264:..\FreeRTOS/tasks.c **** 				}
 1116              		.loc 1 1264 0
 1117 00c4 FFF7FEFF 		bl	vPortYield
 1118              	.LVL127:
 1119              	.L94:
1276:..\FreeRTOS/tasks.c **** 	}
 1120              		.loc 1 1276 0
 1121 00c8 FFF7FEFF 		bl	vPortExitCritical
 1122              	.LVL128:
 1123 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1124              	.LVL129:
 1125              	.L109:
 1126 00ce 00BF     		.align	2
 1127              	.L108:
 1128 00d0 00000000 		.word	.LANCHOR0
 1129 00d4 30000000 		.word	.LANCHOR0+48
 1130              		.cfi_endproc
 1131              	.LFE71:
 1132              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1133              		.section	.text.vTaskResume,"ax",%progbits
 1134              		.align	2
 1135              		.global	vTaskResume
 1136              		.thumb
 1137              		.thumb_func
 1138              		.type	vTaskResume, %function
 1139              	vTaskResume:
 1140              	.LFB74:
1420:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1141              		.loc 1 1420 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 83


 1145              	.LVL130:
1428:..\FreeRTOS/tasks.c **** 		{
 1146              		.loc 1 1428 0
 1147 0000 78B3     		cbz	r0, .L114
1428:..\FreeRTOS/tasks.c **** 		{
 1148              		.loc 1 1428 0 is_stmt 0 discriminator 1
 1149 0002 184A     		ldr	r2, .L115
 1150 0004 D2F8D420 		ldr	r2, [r2, #212]
 1151 0008 9042     		cmp	r0, r2
 1152 000a 2AD0     		beq	.L114
1420:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1153              		.loc 1 1420 0 is_stmt 1
 1154 000c 70B5     		push	{r4, r5, r6, lr}
 1155              		.cfi_def_cfa_offset 16
 1156              		.cfi_offset 4, -16
 1157              		.cfi_offset 5, -12
 1158              		.cfi_offset 6, -8
 1159              		.cfi_offset 14, -4
 1160 000e 0446     		mov	r4, r0
1430:..\FreeRTOS/tasks.c **** 			{
 1161              		.loc 1 1430 0
 1162 0010 FFF7FEFF 		bl	vPortEnterCritical
 1163              	.LVL131:
1432:..\FreeRTOS/tasks.c **** 				{
 1164              		.loc 1 1432 0
 1165 0014 2046     		mov	r0, r4
 1166 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1167              	.LVL132:
 1168 001a 0128     		cmp	r0, #1
 1169 001c 1ED1     		bne	.L112
1438:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1170              		.loc 1 1438 0
 1171 001e 261D     		adds	r6, r4, #4
 1172 0020 3046     		mov	r0, r6
 1173 0022 FFF7FEFF 		bl	uxListRemove
 1174              	.LVL133:
1439:..\FreeRTOS/tasks.c **** 
 1175              		.loc 1 1439 0
 1176 0026 E36A     		ldr	r3, [r4, #44]
 1177 0028 0122     		movs	r2, #1
 1178 002a 02FA03F1 		lsl	r1, r2, r3
 1179 002e 0D4D     		ldr	r5, .L115
 1180 0030 D5F8E820 		ldr	r2, [r5, #232]
 1181 0034 0A43     		orrs	r2, r2, r1
 1182 0036 C5F8E820 		str	r2, [r5, #232]
 1183 003a 05F13000 		add	r0, r5, #48
 1184 003e 03EB8303 		add	r3, r3, r3, lsl #2
 1185 0042 9A00     		lsls	r2, r3, #2
 1186 0044 3146     		mov	r1, r6
 1187 0046 1044     		add	r0, r0, r2
 1188 0048 FFF7FEFF 		bl	vListInsertEnd
 1189              	.LVL134:
1442:..\FreeRTOS/tasks.c **** 					{
 1190              		.loc 1 1442 0
 1191 004c E26A     		ldr	r2, [r4, #44]
 1192 004e D5F8D430 		ldr	r3, [r5, #212]
 1193 0052 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 84


 1194 0054 9A42     		cmp	r2, r3
 1195 0056 01D3     		bcc	.L112
1447:..\FreeRTOS/tasks.c **** 					}
 1196              		.loc 1 1447 0
 1197 0058 FFF7FEFF 		bl	vPortYield
 1198              	.LVL135:
 1199              	.L112:
1459:..\FreeRTOS/tasks.c **** 		}
 1200              		.loc 1 1459 0
 1201 005c FFF7FEFF 		bl	vPortExitCritical
 1202              	.LVL136:
 1203 0060 70BD     		pop	{r4, r5, r6, pc}
 1204              	.LVL137:
 1205              	.L114:
 1206              		.cfi_def_cfa_offset 0
 1207              		.cfi_restore 4
 1208              		.cfi_restore 5
 1209              		.cfi_restore 6
 1210              		.cfi_restore 14
 1211 0062 7047     		bx	lr
 1212              	.L116:
 1213              		.align	2
 1214              	.L115:
 1215 0064 00000000 		.word	.LANCHOR0
 1216              		.cfi_endproc
 1217              	.LFE74:
 1218              		.size	vTaskResume, .-vTaskResume
 1219              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1220              		.align	2
 1221              		.global	xTaskResumeFromISR
 1222              		.thumb
 1223              		.thumb_func
 1224              		.type	xTaskResumeFromISR, %function
 1225              	xTaskResumeFromISR:
 1226              	.LFB75:
1474:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1227              		.loc 1 1474 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              	.LVL138:
 1232 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1233              		.cfi_def_cfa_offset 24
 1234              		.cfi_offset 3, -24
 1235              		.cfi_offset 4, -20
 1236              		.cfi_offset 5, -16
 1237              		.cfi_offset 6, -12
 1238              		.cfi_offset 7, -8
 1239              		.cfi_offset 14, -4
 1240 0002 0446     		mov	r4, r0
 1241              	.LVL139:
1499:..\FreeRTOS/tasks.c **** 		{
 1242              		.loc 1 1499 0
 1243 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 1244              	.LVL140:
 1245 0008 0546     		mov	r5, r0
 1246              	.LVL141:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 85


1501:..\FreeRTOS/tasks.c **** 			{
 1247              		.loc 1 1501 0
 1248 000a 2046     		mov	r0, r4
 1249              	.LVL142:
 1250 000c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1251              	.LVL143:
 1252 0010 0128     		cmp	r0, #1
 1253 0012 2BD1     		bne	.L121
1506:..\FreeRTOS/tasks.c **** 				{
 1254              		.loc 1 1506 0
 1255 0014 184B     		ldr	r3, .L124
 1256 0016 D3F8F030 		ldr	r3, [r3, #240]
 1257 001a 03BB     		cbnz	r3, .L119
1510:..\FreeRTOS/tasks.c **** 					{
 1258              		.loc 1 1510 0
 1259 001c E26A     		ldr	r2, [r4, #44]
 1260 001e 164B     		ldr	r3, .L124
 1261 0020 D3F8D430 		ldr	r3, [r3, #212]
 1262 0024 DB6A     		ldr	r3, [r3, #44]
 1263 0026 9A42     		cmp	r2, r3
 1264 0028 01D2     		bcs	.L122
1475:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1265              		.loc 1 1475 0
 1266 002a 0026     		movs	r6, #0
 1267 002c 00E0     		b	.L120
 1268              	.L122:
1512:..\FreeRTOS/tasks.c **** 					}
 1269              		.loc 1 1512 0
 1270 002e 0126     		movs	r6, #1
 1271              	.L120:
 1272              	.LVL144:
1519:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1273              		.loc 1 1519 0
 1274 0030 271D     		adds	r7, r4, #4
 1275 0032 3846     		mov	r0, r7
 1276 0034 FFF7FEFF 		bl	uxListRemove
 1277              	.LVL145:
1520:..\FreeRTOS/tasks.c **** 				}
 1278              		.loc 1 1520 0
 1279 0038 E36A     		ldr	r3, [r4, #44]
 1280 003a 0122     		movs	r2, #1
 1281 003c 02FA03F1 		lsl	r1, r2, r3
 1282 0040 0D48     		ldr	r0, .L124
 1283 0042 D0F8E820 		ldr	r2, [r0, #232]
 1284 0046 0A43     		orrs	r2, r2, r1
 1285 0048 C0F8E820 		str	r2, [r0, #232]
 1286 004c 3030     		adds	r0, r0, #48
 1287 004e 03EB8303 		add	r3, r3, r3, lsl #2
 1288 0052 9A00     		lsls	r2, r3, #2
 1289 0054 3946     		mov	r1, r7
 1290 0056 1044     		add	r0, r0, r2
 1291 0058 FFF7FEFF 		bl	vListInsertEnd
 1292              	.LVL146:
 1293 005c 07E0     		b	.L118
 1294              	.LVL147:
 1295              	.L119:
1527:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 86


 1296              		.loc 1 1527 0
 1297 005e 04F11801 		add	r1, r4, #24
 1298 0062 0648     		ldr	r0, .L124+4
 1299 0064 FFF7FEFF 		bl	vListInsertEnd
 1300              	.LVL148:
1475:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1301              		.loc 1 1475 0
 1302 0068 0026     		movs	r6, #0
 1303 006a 00E0     		b	.L118
 1304              	.L121:
 1305 006c 0026     		movs	r6, #0
 1306              	.LVL149:
 1307              	.L118:
1535:..\FreeRTOS/tasks.c **** 
 1308              		.loc 1 1535 0
 1309 006e 2846     		mov	r0, r5
 1310 0070 FFF7FEFF 		bl	vPortClearInterruptMask
 1311              	.LVL150:
1538:..\FreeRTOS/tasks.c **** 
 1312              		.loc 1 1538 0
 1313 0074 3046     		mov	r0, r6
 1314 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1315              	.LVL151:
 1316              	.L125:
 1317              		.align	2
 1318              	.L124:
 1319 0078 00000000 		.word	.LANCHOR0
 1320 007c 14000000 		.word	.LANCHOR0+20
 1321              		.cfi_endproc
 1322              	.LFE75:
 1323              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1324              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1325              		.align	2
 1326              		.global	vTaskStartScheduler
 1327              		.thumb
 1328              		.thumb_func
 1329              		.type	vTaskStartScheduler, %function
 1330              	vTaskStartScheduler:
 1331              	.LFB76:
1544:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 1332              		.loc 1 1544 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336 0000 00B5     		push	{lr}
 1337              		.cfi_def_cfa_offset 4
 1338              		.cfi_offset 14, -4
 1339 0002 85B0     		sub	sp, sp, #20
 1340              		.cfi_def_cfa_offset 24
1557:..\FreeRTOS/tasks.c **** 	}
 1341              		.loc 1 1557 0
 1342 0004 0023     		movs	r3, #0
 1343 0006 0393     		str	r3, [sp, #12]
 1344 0008 0293     		str	r3, [sp, #8]
 1345 000a 0193     		str	r3, [sp, #4]
 1346 000c 0093     		str	r3, [sp]
 1347 000e 6422     		movs	r2, #100
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 87


 1348 0010 0B49     		ldr	r1, .L129
 1349 0012 0C48     		ldr	r0, .L129+4
 1350 0014 FFF7FEFF 		bl	xTaskGenericCreate
 1351              	.LVL152:
1574:..\FreeRTOS/tasks.c **** 	{
 1352              		.loc 1 1574 0
 1353 0018 0128     		cmp	r0, #1
 1354 001a 0DD1     		bne	.L126
1581:..\FreeRTOS/tasks.c **** 
 1355              		.loc 1 1581 0
 1356 001c FFF7FEFF 		bl	ulPortSetInterruptMask
 1357              	.LVL153:
1591:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1358              		.loc 1 1591 0
 1359 0020 094B     		ldr	r3, .L129+8
 1360 0022 4FF0FF32 		mov	r2, #-1
 1361 0026 DA62     		str	r2, [r3, #44]
1592:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1362              		.loc 1 1592 0
 1363 0028 0122     		movs	r2, #1
 1364 002a C3F8E020 		str	r2, [r3, #224]
1593:..\FreeRTOS/tasks.c **** 
 1365              		.loc 1 1593 0
 1366 002e 0022     		movs	r2, #0
 1367 0030 C3F8D820 		str	r2, [r3, #216]
1602:..\FreeRTOS/tasks.c **** 		{
 1368              		.loc 1 1602 0
 1369 0034 FFF7FEFF 		bl	xPortStartScheduler
 1370              	.LVL154:
 1371              	.L126:
1619:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1372              		.loc 1 1619 0
 1373 0038 05B0     		add	sp, sp, #20
 1374              		.cfi_def_cfa_offset 4
 1375              		@ sp needed
 1376 003a 5DF804FB 		ldr	pc, [sp], #4
 1377              	.L130:
 1378 003e 00BF     		.align	2
 1379              	.L129:
 1380 0040 00000000 		.word	.LC0
 1381 0044 00000000 		.word	prvIdleTask
 1382 0048 00000000 		.word	.LANCHOR0
 1383              		.cfi_endproc
 1384              	.LFE76:
 1385              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1386              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1387              		.align	2
 1388              		.global	vTaskEndScheduler
 1389              		.thumb
 1390              		.thumb_func
 1391              		.type	vTaskEndScheduler, %function
 1392              	vTaskEndScheduler:
 1393              	.LFB77:
1623:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1394              		.loc 1 1623 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 88


 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398 0000 08B5     		push	{r3, lr}
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 3, -8
 1401              		.cfi_offset 14, -4
1627:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1402              		.loc 1 1627 0
 1403 0002 FFF7FEFF 		bl	ulPortSetInterruptMask
 1404              	.LVL155:
1628:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1405              		.loc 1 1628 0
 1406 0006 0022     		movs	r2, #0
 1407 0008 024B     		ldr	r3, .L133
 1408 000a C3F8E020 		str	r2, [r3, #224]
1629:..\FreeRTOS/tasks.c **** }
 1409              		.loc 1 1629 0
 1410 000e FFF7FEFF 		bl	vPortEndScheduler
 1411              	.LVL156:
 1412 0012 08BD     		pop	{r3, pc}
 1413              	.L134:
 1414              		.align	2
 1415              	.L133:
 1416 0014 00000000 		.word	.LANCHOR0
 1417              		.cfi_endproc
 1418              	.LFE77:
 1419              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1420              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1421              		.align	2
 1422              		.global	vTaskSuspendAll
 1423              		.thumb
 1424              		.thumb_func
 1425              		.type	vTaskSuspendAll, %function
 1426              	vTaskSuspendAll:
 1427              	.LFB78:
1634:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1428              		.loc 1 1634 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
1639:..\FreeRTOS/tasks.c **** }
 1433              		.loc 1 1639 0
 1434 0000 034A     		ldr	r2, .L136
 1435 0002 D2F8F030 		ldr	r3, [r2, #240]
 1436 0006 0133     		adds	r3, r3, #1
 1437 0008 C2F8F030 		str	r3, [r2, #240]
 1438 000c 7047     		bx	lr
 1439              	.L137:
 1440 000e 00BF     		.align	2
 1441              	.L136:
 1442 0010 00000000 		.word	.LANCHOR0
 1443              		.cfi_endproc
 1444              	.LFE78:
 1445              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1446              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1447              		.align	2
 1448              		.global	xTaskGetTickCount
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 89


 1449              		.thumb
 1450              		.thumb_func
 1451              		.type	xTaskGetTickCount, %function
 1452              	xTaskGetTickCount:
 1453              	.LFB80:
1765:..\FreeRTOS/tasks.c **** TickType_t xTicks;
 1454              		.loc 1 1765 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
1771:..\FreeRTOS/tasks.c **** 	}
 1459              		.loc 1 1771 0
 1460 0000 014B     		ldr	r3, .L139
 1461 0002 D3F8D800 		ldr	r0, [r3, #216]
 1462              	.LVL157:
1776:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1463              		.loc 1 1776 0
 1464 0006 7047     		bx	lr
 1465              	.L140:
 1466              		.align	2
 1467              	.L139:
 1468 0008 00000000 		.word	.LANCHOR0
 1469              		.cfi_endproc
 1470              	.LFE80:
 1471              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1472              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1473              		.align	2
 1474              		.global	xTaskGetTickCountFromISR
 1475              		.thumb
 1476              		.thumb_func
 1477              		.type	xTaskGetTickCountFromISR, %function
 1478              	xTaskGetTickCountFromISR:
 1479              	.LFB81:
1780:..\FreeRTOS/tasks.c **** TickType_t xReturn;
 1480              		.loc 1 1780 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485              	.LVL158:
1802:..\FreeRTOS/tasks.c **** 	}
 1486              		.loc 1 1802 0
 1487 0000 014B     		ldr	r3, .L142
 1488 0002 D3F8D800 		ldr	r0, [r3, #216]
 1489              	.LVL159:
1807:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1490              		.loc 1 1807 0
 1491 0006 7047     		bx	lr
 1492              	.L143:
 1493              		.align	2
 1494              	.L142:
 1495 0008 00000000 		.word	.LANCHOR0
 1496              		.cfi_endproc
 1497              	.LFE81:
 1498              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1499              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 90


 1500              		.align	2
 1501              		.global	uxTaskGetNumberOfTasks
 1502              		.thumb
 1503              		.thumb_func
 1504              		.type	uxTaskGetNumberOfTasks, %function
 1505              	uxTaskGetNumberOfTasks:
 1506              	.LFB82:
1811:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 1507              		.loc 1 1811 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              		@ link register save eliminated.
1814:..\FreeRTOS/tasks.c **** }
 1512              		.loc 1 1814 0
 1513 0000 014B     		ldr	r3, .L145
 1514 0002 D3F8DC00 		ldr	r0, [r3, #220]
1815:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1515              		.loc 1 1815 0
 1516 0006 7047     		bx	lr
 1517              	.L146:
 1518              		.align	2
 1519              	.L145:
 1520 0008 00000000 		.word	.LANCHOR0
 1521              		.cfi_endproc
 1522              	.LFE82:
 1523              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1524              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1525              		.align	2
 1526              		.global	xTaskIncrementTick
 1527              		.thumb
 1528              		.thumb_func
 1529              		.type	xTaskIncrementTick, %function
 1530              	xTaskIncrementTick:
 1531              	.LFB83:
1940:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
 1532              		.loc 1 1940 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 1536 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1537              		.cfi_def_cfa_offset 24
 1538              		.cfi_offset 4, -24
 1539              		.cfi_offset 5, -20
 1540              		.cfi_offset 6, -16
 1541              		.cfi_offset 7, -12
 1542              		.cfi_offset 8, -8
 1543              		.cfi_offset 14, -4
 1544              	.LVL160:
1949:..\FreeRTOS/tasks.c **** 	{
 1545              		.loc 1 1949 0
 1546 0004 3E4B     		ldr	r3, .L166
 1547 0006 D3F8F030 		ldr	r3, [r3, #240]
 1548 000a 002B     		cmp	r3, #0
 1549 000c 67D1     		bne	.L148
1953:..\FreeRTOS/tasks.c **** 
 1550              		.loc 1 1953 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 91


 1551 000e 3C4B     		ldr	r3, .L166
 1552 0010 D3F8D820 		ldr	r2, [r3, #216]
 1553 0014 0132     		adds	r2, r2, #1
 1554 0016 C3F8D820 		str	r2, [r3, #216]
 1555              	.LBB8:
1958:..\FreeRTOS/tasks.c **** 
 1556              		.loc 1 1958 0
 1557 001a D3F8D880 		ldr	r8, [r3, #216]
 1558              	.LVL161:
1960:..\FreeRTOS/tasks.c **** 			{
 1559              		.loc 1 1960 0
 1560 001e B8F1000F 		cmp	r8, #0
 1561 0022 0CD1     		bne	.L149
 1562              	.LBB9:
1962:..\FreeRTOS/tasks.c **** 			}
 1563              		.loc 1 1962 0
 1564 0024 9A6A     		ldr	r2, [r3, #40]
 1565              	.LVL162:
 1566 0026 D3F8D010 		ldr	r1, [r3, #208]
 1567 002a 9962     		str	r1, [r3, #40]
 1568 002c C3F8D020 		str	r2, [r3, #208]
 1569 0030 D3F8F420 		ldr	r2, [r3, #244]
 1570              	.LVL163:
 1571 0034 0132     		adds	r2, r2, #1
 1572 0036 C3F8F420 		str	r2, [r3, #244]
 1573              	.LVL164:
 1574 003a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1575              	.LVL165:
 1576              	.L149:
 1577              	.LBE9:
1973:..\FreeRTOS/tasks.c **** 			{
 1578              		.loc 1 1973 0
 1579 003e 304B     		ldr	r3, .L166
 1580 0040 DB6A     		ldr	r3, [r3, #44]
 1581 0042 9845     		cmp	r8, r3
 1582 0044 03D2     		bcs	.L160
 1583              	.LBE8:
1943:..\FreeRTOS/tasks.c **** 
 1584              		.loc 1 1943 0
 1585 0046 0027     		movs	r7, #0
 1586 0048 3DE0     		b	.L151
 1587              	.LVL166:
 1588              	.L162:
 1589              	.LBB10:
2039:..\FreeRTOS/tasks.c **** 							}
 1590              		.loc 1 2039 0
 1591 004a 0127     		movs	r7, #1
 1592              	.LVL167:
 1593 004c 00E0     		b	.L150
 1594              	.LVL168:
 1595              	.L160:
 1596 004e 0027     		movs	r7, #0
 1597              	.LVL169:
 1598              	.L150:
1977:..\FreeRTOS/tasks.c **** 					{
 1599              		.loc 1 1977 0
 1600 0050 2B4B     		ldr	r3, .L166
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 92


 1601 0052 9B6A     		ldr	r3, [r3, #40]
 1602 0054 1B68     		ldr	r3, [r3]
 1603 0056 0BB9     		cbnz	r3, .L161
 1604 0058 0123     		movs	r3, #1
 1605 005a 00E0     		b	.L152
 1606              	.L161:
 1607 005c 0023     		movs	r3, #0
 1608              	.L152:
1977:..\FreeRTOS/tasks.c **** 					{
 1609              		.loc 1 1977 0 is_stmt 0 discriminator 4
 1610 005e 23B1     		cbz	r3, .L153
1984:..\FreeRTOS/tasks.c **** 						break;
 1611              		.loc 1 1984 0 is_stmt 1
 1612 0060 4FF0FF32 		mov	r2, #-1
 1613 0064 264B     		ldr	r3, .L166
 1614 0066 DA62     		str	r2, [r3, #44]
1985:..\FreeRTOS/tasks.c **** 					}
 1615              		.loc 1 1985 0
 1616 0068 2DE0     		b	.L151
 1617              	.L153:
1993:..\FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1618              		.loc 1 1993 0
 1619 006a 254B     		ldr	r3, .L166
 1620 006c 9B6A     		ldr	r3, [r3, #40]
 1621 006e DB68     		ldr	r3, [r3, #12]
 1622 0070 DC68     		ldr	r4, [r3, #12]
 1623              	.LVL170:
1994:..\FreeRTOS/tasks.c **** 
 1624              		.loc 1 1994 0
 1625 0072 6368     		ldr	r3, [r4, #4]
 1626              	.LVL171:
1996:..\FreeRTOS/tasks.c **** 						{
 1627              		.loc 1 1996 0
 1628 0074 9845     		cmp	r8, r3
 1629 0076 02D2     		bcs	.L154
2003:..\FreeRTOS/tasks.c **** 							break;
 1630              		.loc 1 2003 0
 1631 0078 214A     		ldr	r2, .L166
 1632 007a D362     		str	r3, [r2, #44]
2004:..\FreeRTOS/tasks.c **** 						}
 1633              		.loc 1 2004 0
 1634 007c 23E0     		b	.L151
 1635              	.L154:
2012:..\FreeRTOS/tasks.c **** 
 1636              		.loc 1 2012 0
 1637 007e 261D     		adds	r6, r4, #4
 1638 0080 3046     		mov	r0, r6
 1639 0082 FFF7FEFF 		bl	uxListRemove
 1640              	.LVL172:
2016:..\FreeRTOS/tasks.c **** 						{
 1641              		.loc 1 2016 0
 1642 0086 A36A     		ldr	r3, [r4, #40]
 1643 0088 1BB1     		cbz	r3, .L155
2018:..\FreeRTOS/tasks.c **** 						}
 1644              		.loc 1 2018 0
 1645 008a 04F11800 		add	r0, r4, #24
 1646 008e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 93


 1647              	.LVL173:
 1648              	.L155:
2027:..\FreeRTOS/tasks.c **** 
 1649              		.loc 1 2027 0
 1650 0092 E36A     		ldr	r3, [r4, #44]
 1651 0094 0122     		movs	r2, #1
 1652 0096 02FA03F1 		lsl	r1, r2, r3
 1653 009a 194D     		ldr	r5, .L166
 1654 009c D5F8E820 		ldr	r2, [r5, #232]
 1655 00a0 0A43     		orrs	r2, r2, r1
 1656 00a2 C5F8E820 		str	r2, [r5, #232]
 1657 00a6 05F13000 		add	r0, r5, #48
 1658 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 1659 00ae 9A00     		lsls	r2, r3, #2
 1660 00b0 3146     		mov	r1, r6
 1661 00b2 1044     		add	r0, r0, r2
 1662 00b4 FFF7FEFF 		bl	vListInsertEnd
 1663              	.LVL174:
2037:..\FreeRTOS/tasks.c **** 							{
 1664              		.loc 1 2037 0
 1665 00b8 E26A     		ldr	r2, [r4, #44]
 1666 00ba D5F8D430 		ldr	r3, [r5, #212]
 1667 00be DB6A     		ldr	r3, [r3, #44]
 1668 00c0 9A42     		cmp	r2, r3
 1669 00c2 C2D2     		bcs	.L162
 1670 00c4 C4E7     		b	.L150
 1671              	.LVL175:
 1672              	.L151:
 1673              	.LBE10:
2057:..\FreeRTOS/tasks.c **** 			{
 1674              		.loc 1 2057 0
 1675 00c6 0E49     		ldr	r1, .L166
 1676 00c8 D1F8D430 		ldr	r3, [r1, #212]
 1677 00cc DB6A     		ldr	r3, [r3, #44]
 1678 00ce 03EB8303 		add	r3, r3, r3, lsl #2
 1679 00d2 9A00     		lsls	r2, r3, #2
 1680 00d4 0A44     		add	r2, r2, r1
 1681 00d6 136B     		ldr	r3, [r2, #48]
 1682 00d8 012B     		cmp	r3, #1
 1683 00da 08D8     		bhi	.L163
 1684 00dc 08E0     		b	.L158
 1685              	.LVL176:
 1686              	.L148:
2085:..\FreeRTOS/tasks.c **** 
 1687              		.loc 1 2085 0
 1688 00de 084A     		ldr	r2, .L166
 1689 00e0 D2F8F830 		ldr	r3, [r2, #248]
 1690 00e4 0133     		adds	r3, r3, #1
 1691 00e6 C2F8F830 		str	r3, [r2, #248]
1943:..\FreeRTOS/tasks.c **** 
 1692              		.loc 1 1943 0
 1693 00ea 0027     		movs	r7, #0
 1694 00ec 00E0     		b	.L158
 1695              	.LVL177:
 1696              	.L163:
2059:..\FreeRTOS/tasks.c **** 			}
 1697              		.loc 1 2059 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 94


 1698 00ee 0127     		movs	r7, #1
 1699              	.LVL178:
 1700              	.L158:
2098:..\FreeRTOS/tasks.c **** 		{
 1701              		.loc 1 2098 0
 1702 00f0 034B     		ldr	r3, .L166
 1703 00f2 D3F8FC30 		ldr	r3, [r3, #252]
 1704 00f6 03B1     		cbz	r3, .L159
2100:..\FreeRTOS/tasks.c **** 		}
 1705              		.loc 1 2100 0
 1706 00f8 0127     		movs	r7, #1
 1707              	.LVL179:
 1708              	.L159:
2110:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1709              		.loc 1 2110 0
 1710 00fa 3846     		mov	r0, r7
 1711 00fc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1712              	.LVL180:
 1713              	.L167:
 1714              		.align	2
 1715              	.L166:
 1716 0100 00000000 		.word	.LANCHOR0
 1717              		.cfi_endproc
 1718              	.LFE83:
 1719              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1720              		.section	.text.xTaskResumeAll,"ax",%progbits
 1721              		.align	2
 1722              		.global	xTaskResumeAll
 1723              		.thumb
 1724              		.thumb_func
 1725              		.type	xTaskResumeAll, %function
 1726              	xTaskResumeAll:
 1727              	.LFB79:
1672:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
 1728              		.loc 1 1672 0
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 0
 1731              		@ frame_needed = 0, uses_anonymous_args = 0
 1732 0000 70B5     		push	{r4, r5, r6, lr}
 1733              		.cfi_def_cfa_offset 16
 1734              		.cfi_offset 4, -16
 1735              		.cfi_offset 5, -12
 1736              		.cfi_offset 6, -8
 1737              		.cfi_offset 14, -4
 1738              	.LVL181:
1685:..\FreeRTOS/tasks.c **** 	{
 1739              		.loc 1 1685 0
 1740 0002 FFF7FEFF 		bl	vPortEnterCritical
 1741              	.LVL182:
1687:..\FreeRTOS/tasks.c **** 
 1742              		.loc 1 1687 0
 1743 0006 304B     		ldr	r3, .L180
 1744 0008 D3F8F020 		ldr	r2, [r3, #240]
 1745 000c 013A     		subs	r2, r2, #1
 1746 000e C3F8F020 		str	r2, [r3, #240]
1689:..\FreeRTOS/tasks.c **** 		{
 1747              		.loc 1 1689 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 95


 1748 0012 D3F8F030 		ldr	r3, [r3, #240]
 1749 0016 002B     		cmp	r3, #0
 1750 0018 4FD1     		bne	.L177
1691:..\FreeRTOS/tasks.c **** 			{
 1751              		.loc 1 1691 0
 1752 001a 2B4B     		ldr	r3, .L180
 1753 001c D3F8DC30 		ldr	r3, [r3, #220]
 1754 0020 3BBB     		cbnz	r3, .L171
1674:..\FreeRTOS/tasks.c **** 
 1755              		.loc 1 1674 0
 1756 0022 0024     		movs	r4, #0
 1757 0024 4CE0     		b	.L169
 1758              	.L172:
1697:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1759              		.loc 1 1697 0
 1760 0026 284C     		ldr	r4, .L180
 1761 0028 236A     		ldr	r3, [r4, #32]
 1762 002a DD68     		ldr	r5, [r3, #12]
 1763              	.LVL183:
1698:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1764              		.loc 1 1698 0
 1765 002c 05F11800 		add	r0, r5, #24
 1766 0030 FFF7FEFF 		bl	uxListRemove
 1767              	.LVL184:
1699:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1768              		.loc 1 1699 0
 1769 0034 2E1D     		adds	r6, r5, #4
 1770 0036 3046     		mov	r0, r6
 1771 0038 FFF7FEFF 		bl	uxListRemove
 1772              	.LVL185:
1700:..\FreeRTOS/tasks.c **** 
 1773              		.loc 1 1700 0
 1774 003c EB6A     		ldr	r3, [r5, #44]
 1775 003e 0122     		movs	r2, #1
 1776 0040 02FA03F1 		lsl	r1, r2, r3
 1777 0044 D4F8E820 		ldr	r2, [r4, #232]
 1778 0048 0A43     		orrs	r2, r2, r1
 1779 004a C4F8E820 		str	r2, [r4, #232]
 1780 004e 04F13000 		add	r0, r4, #48
 1781 0052 03EB8303 		add	r3, r3, r3, lsl #2
 1782 0056 9A00     		lsls	r2, r3, #2
 1783 0058 3146     		mov	r1, r6
 1784 005a 1044     		add	r0, r0, r2
 1785 005c FFF7FEFF 		bl	vListInsertEnd
 1786              	.LVL186:
1704:..\FreeRTOS/tasks.c **** 					{
 1787              		.loc 1 1704 0
 1788 0060 EA6A     		ldr	r2, [r5, #44]
 1789 0062 D4F8D430 		ldr	r3, [r4, #212]
 1790 0066 DB6A     		ldr	r3, [r3, #44]
 1791 0068 9A42     		cmp	r2, r3
 1792 006a 02D3     		bcc	.L171
1706:..\FreeRTOS/tasks.c **** 					}
 1793              		.loc 1 1706 0
 1794 006c 0122     		movs	r2, #1
 1795 006e C4F8FC20 		str	r2, [r4, #252]
 1796              	.LVL187:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 96


 1797              	.L171:
1695:..\FreeRTOS/tasks.c **** 				{
 1798              		.loc 1 1695 0
 1799 0072 154B     		ldr	r3, .L180
 1800 0074 5B69     		ldr	r3, [r3, #20]
 1801 0076 002B     		cmp	r3, #0
 1802 0078 D5D1     		bne	.L172
1718:..\FreeRTOS/tasks.c **** 				{
 1803              		.loc 1 1718 0
 1804 007a 134B     		ldr	r3, .L180
 1805 007c D3F8F830 		ldr	r3, [r3, #248]
 1806 0080 6BB9     		cbnz	r3, .L173
 1807 0082 11E0     		b	.L174
 1808              	.L176:
1722:..\FreeRTOS/tasks.c **** 						{
 1809              		.loc 1 1722 0
 1810 0084 FFF7FEFF 		bl	xTaskIncrementTick
 1811              	.LVL188:
 1812 0088 18B1     		cbz	r0, .L175
1724:..\FreeRTOS/tasks.c **** 						}
 1813              		.loc 1 1724 0
 1814 008a 0122     		movs	r2, #1
 1815 008c 0E4B     		ldr	r3, .L180
 1816 008e C3F8FC20 		str	r2, [r3, #252]
 1817              	.L175:
1730:..\FreeRTOS/tasks.c **** 					}
 1818              		.loc 1 1730 0
 1819 0092 0D4A     		ldr	r2, .L180
 1820 0094 D2F8F830 		ldr	r3, [r2, #248]
 1821 0098 013B     		subs	r3, r3, #1
 1822 009a C2F8F830 		str	r3, [r2, #248]
 1823              	.L173:
1720:..\FreeRTOS/tasks.c **** 					{
 1824              		.loc 1 1720 0
 1825 009e 0A4B     		ldr	r3, .L180
 1826 00a0 D3F8F830 		ldr	r3, [r3, #248]
 1827 00a4 002B     		cmp	r3, #0
 1828 00a6 EDD1     		bne	.L176
 1829              	.L174:
1738:..\FreeRTOS/tasks.c **** 				{
 1830              		.loc 1 1738 0
 1831 00a8 074B     		ldr	r3, .L180
 1832 00aa D3F8FC30 		ldr	r3, [r3, #252]
 1833 00ae 012B     		cmp	r3, #1
 1834 00b0 05D1     		bne	.L178
 1835              	.LVL189:
1745:..\FreeRTOS/tasks.c **** 				}
 1836              		.loc 1 1745 0
 1837 00b2 FFF7FEFF 		bl	vPortYield
 1838              	.LVL190:
1742:..\FreeRTOS/tasks.c **** 					}
 1839              		.loc 1 1742 0
 1840 00b6 0124     		movs	r4, #1
 1841 00b8 02E0     		b	.L169
 1842              	.LVL191:
 1843              	.L177:
1674:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 97


 1844              		.loc 1 1674 0
 1845 00ba 0024     		movs	r4, #0
 1846 00bc 00E0     		b	.L169
 1847              	.L178:
 1848 00be 0024     		movs	r4, #0
 1849              	.LVL192:
 1850              	.L169:
1758:..\FreeRTOS/tasks.c **** 
 1851              		.loc 1 1758 0
 1852 00c0 FFF7FEFF 		bl	vPortExitCritical
 1853              	.LVL193:
1761:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1854              		.loc 1 1761 0
 1855 00c4 2046     		mov	r0, r4
 1856 00c6 70BD     		pop	{r4, r5, r6, pc}
 1857              	.LVL194:
 1858              	.L181:
 1859              		.align	2
 1860              	.L180:
 1861 00c8 00000000 		.word	.LANCHOR0
 1862              		.cfi_endproc
 1863              	.LFE79:
 1864              		.size	xTaskResumeAll, .-xTaskResumeAll
 1865              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1866              		.align	2
 1867              		.global	vTaskDelayUntil
 1868              		.thumb
 1869              		.thumb_func
 1870              		.type	vTaskDelayUntil, %function
 1871              	vTaskDelayUntil:
 1872              	.LFB66:
 827:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 1873              		.loc 1 827 0
 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 0
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 1877              	.LVL195:
 1878 0000 38B5     		push	{r3, r4, r5, lr}
 1879              		.cfi_def_cfa_offset 16
 1880              		.cfi_offset 3, -16
 1881              		.cfi_offset 4, -12
 1882              		.cfi_offset 5, -8
 1883              		.cfi_offset 14, -4
 1884 0002 0546     		mov	r5, r0
 1885 0004 0C46     		mov	r4, r1
 1886              	.LVL196:
 835:..\FreeRTOS/tasks.c **** 		{
 1887              		.loc 1 835 0
 1888 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1889              	.LVL197:
 1890              	.LBB11:
 839:..\FreeRTOS/tasks.c **** 
 1891              		.loc 1 839 0
 1892 000a 1C4B     		ldr	r3, .L193
 1893 000c D3F8D820 		ldr	r2, [r3, #216]
 1894              	.LVL198:
 842:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 98


 1895              		.loc 1 842 0
 1896 0010 2B68     		ldr	r3, [r5]
 1897 0012 1C44     		add	r4, r4, r3
 1898              	.LVL199:
 844:..\FreeRTOS/tasks.c **** 			{
 1899              		.loc 1 844 0
 1900 0014 9A42     		cmp	r2, r3
 1901 0016 05D2     		bcs	.L183
 851:..\FreeRTOS/tasks.c **** 				{
 1902              		.loc 1 851 0
 1903 0018 A342     		cmp	r3, r4
 1904 001a 09D9     		bls	.L188
 851:..\FreeRTOS/tasks.c **** 				{
 1905              		.loc 1 851 0 is_stmt 0 discriminator 1
 1906 001c A242     		cmp	r2, r4
 1907 001e 09D3     		bcc	.L189
 1908              	.LBE11:
 829:..\FreeRTOS/tasks.c **** 
 1909              		.loc 1 829 0 is_stmt 1
 1910 0020 0023     		movs	r3, #0
 1911 0022 0CE0     		b	.L184
 1912              	.L183:
 1913              	.LBB12:
 865:..\FreeRTOS/tasks.c **** 				{
 1914              		.loc 1 865 0
 1915 0024 A342     		cmp	r3, r4
 1916 0026 07D8     		bhi	.L190
 865:..\FreeRTOS/tasks.c **** 				{
 1917              		.loc 1 865 0 is_stmt 0 discriminator 1
 1918 0028 A242     		cmp	r2, r4
 1919 002a 07D3     		bcc	.L191
 1920              	.LBE12:
 829:..\FreeRTOS/tasks.c **** 
 1921              		.loc 1 829 0 is_stmt 1
 1922 002c 0023     		movs	r3, #0
 1923 002e 06E0     		b	.L184
 1924              	.L188:
 1925 0030 0023     		movs	r3, #0
 1926 0032 04E0     		b	.L184
 1927              	.L189:
 1928              	.LBB13:
 853:..\FreeRTOS/tasks.c **** 				}
 1929              		.loc 1 853 0
 1930 0034 0123     		movs	r3, #1
 1931 0036 02E0     		b	.L184
 1932              	.L190:
 867:..\FreeRTOS/tasks.c **** 				}
 1933              		.loc 1 867 0
 1934 0038 0123     		movs	r3, #1
 1935 003a 00E0     		b	.L184
 1936              	.L191:
 1937 003c 0123     		movs	r3, #1
 1938              	.L184:
 1939              	.LVL200:
 876:..\FreeRTOS/tasks.c **** 
 1940              		.loc 1 876 0
 1941 003e 2C60     		str	r4, [r5]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 99


 878:..\FreeRTOS/tasks.c **** 			{
 1942              		.loc 1 878 0
 1943 0040 B3B1     		cbz	r3, .L185
 884:..\FreeRTOS/tasks.c **** 				{
 1944              		.loc 1 884 0
 1945 0042 0E4B     		ldr	r3, .L193
 1946              	.LVL201:
 1947 0044 D3F8D400 		ldr	r0, [r3, #212]
 1948 0048 0430     		adds	r0, r0, #4
 1949 004a FFF7FEFF 		bl	uxListRemove
 1950              	.LVL202:
 1951 004e 60B9     		cbnz	r0, .L186
 889:..\FreeRTOS/tasks.c **** 				}
 1952              		.loc 1 889 0
 1953 0050 0A4B     		ldr	r3, .L193
 1954 0052 D3F8D420 		ldr	r2, [r3, #212]
 1955 0056 D16A     		ldr	r1, [r2, #44]
 1956 0058 0122     		movs	r2, #1
 1957 005a 02FA01F1 		lsl	r1, r2, r1
 1958 005e D3F8E820 		ldr	r2, [r3, #232]
 1959 0062 22EA0102 		bic	r2, r2, r1
 1960 0066 C3F8E820 		str	r2, [r3, #232]
 1961              	.L186:
 896:..\FreeRTOS/tasks.c **** 			}
 1962              		.loc 1 896 0
 1963 006a 2046     		mov	r0, r4
 1964 006c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1965              	.LVL203:
 1966              	.L185:
 1967              	.LBE13:
 903:..\FreeRTOS/tasks.c **** 
 1968              		.loc 1 903 0
 1969 0070 FFF7FEFF 		bl	xTaskResumeAll
 1970              	.LVL204:
 907:..\FreeRTOS/tasks.c **** 		{
 1971              		.loc 1 907 0
 1972 0074 08B9     		cbnz	r0, .L182
 909:..\FreeRTOS/tasks.c **** 		}
 1973              		.loc 1 909 0
 1974 0076 FFF7FEFF 		bl	vPortYield
 1975              	.LVL205:
 1976              	.L182:
 1977 007a 38BD     		pop	{r3, r4, r5, pc}
 1978              	.LVL206:
 1979              	.L194:
 1980              		.align	2
 1981              	.L193:
 1982 007c 00000000 		.word	.LANCHOR0
 1983              		.cfi_endproc
 1984              	.LFE66:
 1985              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 1986              		.section	.text.vTaskDelay,"ax",%progbits
 1987              		.align	2
 1988              		.global	vTaskDelay
 1989              		.thumb
 1990              		.thumb_func
 1991              		.type	vTaskDelay, %function
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 100


 1992              	vTaskDelay:
 1993              	.LFB67:
 923:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 1994              		.loc 1 923 0
 1995              		.cfi_startproc
 1996              		@ args = 0, pretend = 0, frame = 0
 1997              		@ frame_needed = 0, uses_anonymous_args = 0
 1998              	.LVL207:
 1999 0000 10B5     		push	{r4, lr}
 2000              		.cfi_def_cfa_offset 8
 2001              		.cfi_offset 4, -8
 2002              		.cfi_offset 14, -4
 2003              	.LVL208:
 929:..\FreeRTOS/tasks.c **** 		{
 2004              		.loc 1 929 0
 2005 0002 F8B1     		cbz	r0, .L199
 2006 0004 0446     		mov	r4, r0
 932:..\FreeRTOS/tasks.c **** 			{
 2007              		.loc 1 932 0
 2008 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2009              	.LVL209:
 946:..\FreeRTOS/tasks.c **** 
 2010              		.loc 1 946 0
 2011 000a 114B     		ldr	r3, .L201
 2012 000c D3F8D820 		ldr	r2, [r3, #216]
 2013 0010 1444     		add	r4, r4, r2
 2014              	.LVL210:
 951:..\FreeRTOS/tasks.c **** 				{
 2015              		.loc 1 951 0
 2016 0012 D3F8D400 		ldr	r0, [r3, #212]
 2017 0016 0430     		adds	r0, r0, #4
 2018 0018 FFF7FEFF 		bl	uxListRemove
 2019              	.LVL211:
 2020 001c 60B9     		cbnz	r0, .L197
 956:..\FreeRTOS/tasks.c **** 				}
 2021              		.loc 1 956 0
 2022 001e 0C4B     		ldr	r3, .L201
 2023 0020 D3F8D420 		ldr	r2, [r3, #212]
 2024 0024 D16A     		ldr	r1, [r2, #44]
 2025 0026 0122     		movs	r2, #1
 2026 0028 02FA01F1 		lsl	r1, r2, r1
 2027 002c D3F8E820 		ldr	r2, [r3, #232]
 2028 0030 22EA0102 		bic	r2, r2, r1
 2029 0034 C3F8E820 		str	r2, [r3, #232]
 2030              	.L197:
 962:..\FreeRTOS/tasks.c **** 			}
 2031              		.loc 1 962 0
 2032 0038 2046     		mov	r0, r4
 2033 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2034              	.LVL212:
 964:..\FreeRTOS/tasks.c **** 		}
 2035              		.loc 1 964 0
 2036 003e FFF7FEFF 		bl	xTaskResumeAll
 2037              	.LVL213:
 2038 0042 00E0     		b	.L196
 2039              	.LVL214:
 2040              	.L199:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 101


 925:..\FreeRTOS/tasks.c **** 
 2041              		.loc 1 925 0
 2042 0044 0020     		movs	r0, #0
 2043              	.LVL215:
 2044              	.L196:
 973:..\FreeRTOS/tasks.c **** 		{
 2045              		.loc 1 973 0
 2046 0046 08B9     		cbnz	r0, .L195
 975:..\FreeRTOS/tasks.c **** 		}
 2047              		.loc 1 975 0
 2048 0048 FFF7FEFF 		bl	vPortYield
 2049              	.LVL216:
 2050              	.L195:
 2051 004c 10BD     		pop	{r4, pc}
 2052              	.L202:
 2053 004e 00BF     		.align	2
 2054              	.L201:
 2055 0050 00000000 		.word	.LANCHOR0
 2056              		.cfi_endproc
 2057              	.LFE67:
 2058              		.size	vTaskDelay, .-vTaskDelay
 2059              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2060              		.align	2
 2061              		.thumb
 2062              		.thumb_func
 2063              		.type	prvCheckTasksWaitingTermination, %function
 2064              	prvCheckTasksWaitingTermination:
 2065              	.LFB95:
3031:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
 2066              		.loc 1 3031 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070 0000 38B5     		push	{r3, r4, r5, lr}
 2071              		.cfi_def_cfa_offset 16
 2072              		.cfi_offset 3, -16
 2073              		.cfi_offset 4, -12
 2074              		.cfi_offset 5, -8
 2075              		.cfi_offset 14, -4
 2076              	.LBB14:
3038:..\FreeRTOS/tasks.c **** 		{
 2077              		.loc 1 3038 0
 2078 0002 1FE0     		b	.L205
 2079              	.L206:
3040:..\FreeRTOS/tasks.c **** 			{
 2080              		.loc 1 3040 0
 2081 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2082              	.LVL217:
3042:..\FreeRTOS/tasks.c **** 			}
 2083              		.loc 1 3042 0
 2084 0008 114B     		ldr	r3, .L208
 2085 000a D3F8BC40 		ldr	r4, [r3, #188]
 2086              	.LVL218:
3044:..\FreeRTOS/tasks.c **** 
 2087              		.loc 1 3044 0
 2088 000e FFF7FEFF 		bl	xTaskResumeAll
 2089              	.LVL219:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 102


3046:..\FreeRTOS/tasks.c **** 			{
 2090              		.loc 1 3046 0
 2091 0012 BCB1     		cbz	r4, .L205
 2092              	.LBB15:
3050:..\FreeRTOS/tasks.c **** 				{
 2093              		.loc 1 3050 0
 2094 0014 FFF7FEFF 		bl	vPortEnterCritical
 2095              	.LVL220:
3052:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2096              		.loc 1 3052 0
 2097 0018 0D4C     		ldr	r4, .L208
 2098              	.LVL221:
 2099 001a D4F8C830 		ldr	r3, [r4, #200]
 2100 001e DD68     		ldr	r5, [r3, #12]
 2101              	.LVL222:
3053:..\FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2102              		.loc 1 3053 0
 2103 0020 281D     		adds	r0, r5, #4
 2104 0022 FFF7FEFF 		bl	uxListRemove
 2105              	.LVL223:
3054:..\FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 2106              		.loc 1 3054 0
 2107 0026 D4F8DC30 		ldr	r3, [r4, #220]
 2108 002a 013B     		subs	r3, r3, #1
 2109 002c C4F8DC30 		str	r3, [r4, #220]
3055:..\FreeRTOS/tasks.c **** 				}
 2110              		.loc 1 3055 0
 2111 0030 D4F8EC30 		ldr	r3, [r4, #236]
 2112 0034 013B     		subs	r3, r3, #1
 2113 0036 C4F8EC30 		str	r3, [r4, #236]
3057:..\FreeRTOS/tasks.c **** 
 2114              		.loc 1 3057 0
 2115 003a FFF7FEFF 		bl	vPortExitCritical
 2116              	.LVL224:
3059:..\FreeRTOS/tasks.c **** 			}
 2117              		.loc 1 3059 0
 2118 003e 2846     		mov	r0, r5
 2119 0040 FFF7FEFF 		bl	prvDeleteTCB
 2120              	.LVL225:
 2121              	.L205:
 2122              	.LBE15:
3038:..\FreeRTOS/tasks.c **** 		{
 2123              		.loc 1 3038 0
 2124 0044 024B     		ldr	r3, .L208
 2125 0046 D3F8EC30 		ldr	r3, [r3, #236]
 2126 004a 002B     		cmp	r3, #0
 2127 004c DAD1     		bne	.L206
 2128              	.LBE14:
3068:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2129              		.loc 1 3068 0
 2130 004e 38BD     		pop	{r3, r4, r5, pc}
 2131              	.L209:
 2132              		.align	2
 2133              	.L208:
 2134 0050 00000000 		.word	.LANCHOR0
 2135              		.cfi_endproc
 2136              	.LFE95:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 103


 2137              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 2138              		.section	.text.prvIdleTask,"ax",%progbits
 2139              		.align	2
 2140              		.thumb
 2141              		.thumb_func
 2142              		.type	prvIdleTask, %function
 2143              	prvIdleTask:
 2144              	.LFB92:
2691:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
 2145              		.loc 1 2691 0
 2146              		.cfi_startproc
 2147              		@ Volatile: function does not return.
 2148              		@ args = 0, pretend = 0, frame = 0
 2149              		@ frame_needed = 0, uses_anonymous_args = 0
 2150              	.LVL226:
 2151 0000 08B5     		push	{r3, lr}
 2152              		.cfi_def_cfa_offset 8
 2153              		.cfi_offset 3, -8
 2154              		.cfi_offset 14, -4
 2155              	.LVL227:
 2156              	.L211:
2698:..\FreeRTOS/tasks.c **** 
 2157              		.loc 1 2698 0 discriminator 1
 2158 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2159              	.LVL228:
 2160 0006 FCE7     		b	.L211
 2161              		.cfi_endproc
 2162              	.LFE92:
 2163              		.size	prvIdleTask, .-prvIdleTask
 2164              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2165              		.align	2
 2166              		.global	vTaskSwitchContext
 2167              		.thumb
 2168              		.thumb_func
 2169              		.type	vTaskSwitchContext, %function
 2170              	vTaskSwitchContext:
 2171              	.LFB84:
2204:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2172              		.loc 1 2204 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
2205:..\FreeRTOS/tasks.c **** 	{
 2176              		.loc 1 2205 0
 2177 0000 284B     		ldr	r3, .L220
 2178 0002 D3F8F030 		ldr	r3, [r3, #240]
 2179 0006 23B1     		cbz	r3, .L214
2209:..\FreeRTOS/tasks.c **** 	}
 2180              		.loc 1 2209 0
 2181 0008 0122     		movs	r2, #1
 2182 000a 264B     		ldr	r3, .L220
 2183 000c C3F8FC20 		str	r2, [r3, #252]
 2184 0010 7047     		bx	lr
 2185              	.L214:
2204:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2186              		.loc 1 2204 0
 2187 0012 10B5     		push	{r4, lr}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 104


 2188              		.cfi_def_cfa_offset 8
 2189              		.cfi_offset 4, -8
 2190              		.cfi_offset 14, -4
2213:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2191              		.loc 1 2213 0
 2192 0014 234B     		ldr	r3, .L220
 2193 0016 0022     		movs	r2, #0
 2194 0018 C3F8FC20 		str	r2, [r3, #252]
 2195              	.LBB16:
2244:..\FreeRTOS/tasks.c **** 
 2196              		.loc 1 2244 0
 2197 001c D3F8D430 		ldr	r3, [r3, #212]
 2198 0020 1B6B     		ldr	r3, [r3, #48]
 2199              	.LVL229:
 2200 0022 1A68     		ldr	r2, [r3]
 2201 0024 B2F1A53F 		cmp	r2, #-1515870811
 2202 0028 0BD1     		bne	.L216
2244:..\FreeRTOS/tasks.c **** 
 2203              		.loc 1 2244 0 is_stmt 0 discriminator 2
 2204 002a 5A68     		ldr	r2, [r3, #4]
 2205 002c B2F1A53F 		cmp	r2, #-1515870811
 2206 0030 07D1     		bne	.L216
2244:..\FreeRTOS/tasks.c **** 
 2207              		.loc 1 2244 0 discriminator 4
 2208 0032 9A68     		ldr	r2, [r3, #8]
 2209 0034 B2F1A53F 		cmp	r2, #-1515870811
 2210 0038 03D1     		bne	.L216
2244:..\FreeRTOS/tasks.c **** 
 2211              		.loc 1 2244 0 discriminator 6
 2212 003a DB68     		ldr	r3, [r3, #12]
 2213              	.LVL230:
 2214 003c B3F1A53F 		cmp	r3, #-1515870811
 2215 0040 07D0     		beq	.L217
 2216              	.L216:
2244:..\FreeRTOS/tasks.c **** 
 2217              		.loc 1 2244 0 discriminator 7
 2218 0042 184B     		ldr	r3, .L220
 2219 0044 D3F8D400 		ldr	r0, [r3, #212]
 2220 0048 D3F8D410 		ldr	r1, [r3, #212]
 2221 004c 3431     		adds	r1, r1, #52
 2222 004e FFF7FEFF 		bl	vApplicationStackOverflowHook
 2223              	.LVL231:
 2224              	.L217:
 2225              	.LBE16:
 2226              	.LBB17:
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2227              		.loc 1 2248 0 is_stmt 1
 2228 0052 144A     		ldr	r2, .L220
 2229 0054 D2F8E830 		ldr	r3, [r2, #232]
 2230              	.LVL232:
 2231              	.LBB18:
 2232              	.LBB19:
 2233              		.file 2 "..\\FreeRTOS\\portmacro.h"
   1:..\FreeRTOS/portmacro.h **** /*
   2:..\FreeRTOS/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:..\FreeRTOS/portmacro.h ****     All rights reserved
   4:..\FreeRTOS/portmacro.h **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 105


   5:..\FreeRTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS/portmacro.h **** 
   7:..\FreeRTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS/portmacro.h **** 
   9:..\FreeRTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS/portmacro.h **** 
  13:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  14:..\FreeRTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  19:..\FreeRTOS/portmacro.h **** 
  20:..\FreeRTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS/portmacro.h **** 
  25:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  26:..\FreeRTOS/portmacro.h ****      *                                                                       *
  27:..\FreeRTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS/portmacro.h ****      *                                                                       *
  32:..\FreeRTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\FreeRTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS/portmacro.h ****      *                                                                       *
  37:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  38:..\FreeRTOS/portmacro.h **** 
  39:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS/portmacro.h ****     defined configASSERT()?
  42:..\FreeRTOS/portmacro.h **** 
  43:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS/portmacro.h ****     participating in the support forum.
  46:..\FreeRTOS/portmacro.h **** 
  47:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS/portmacro.h **** 
  52:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS/portmacro.h **** 
  56:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS/portmacro.h **** 
  59:..\FreeRTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\FreeRTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 106


  62:..\FreeRTOS/portmacro.h **** 
  63:..\FreeRTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS/portmacro.h **** 
  67:..\FreeRTOS/portmacro.h ****     1 tab == 4 spaces!
  68:..\FreeRTOS/portmacro.h **** */
  69:..\FreeRTOS/portmacro.h **** 
  70:..\FreeRTOS/portmacro.h **** 
  71:..\FreeRTOS/portmacro.h **** #ifndef PORTMACRO_H
  72:..\FreeRTOS/portmacro.h **** #define PORTMACRO_H
  73:..\FreeRTOS/portmacro.h **** 
  74:..\FreeRTOS/portmacro.h **** #ifdef __cplusplus
  75:..\FreeRTOS/portmacro.h **** extern "C" {
  76:..\FreeRTOS/portmacro.h **** #endif
  77:..\FreeRTOS/portmacro.h **** 
  78:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------
  79:..\FreeRTOS/portmacro.h ****  * Port specific definitions.
  80:..\FreeRTOS/portmacro.h ****  *
  81:..\FreeRTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:..\FreeRTOS/portmacro.h ****  * given hardware and compiler.
  83:..\FreeRTOS/portmacro.h ****  *
  84:..\FreeRTOS/portmacro.h ****  * These settings should not be altered.
  85:..\FreeRTOS/portmacro.h ****  *-----------------------------------------------------------
  86:..\FreeRTOS/portmacro.h ****  */
  87:..\FreeRTOS/portmacro.h **** 
  88:..\FreeRTOS/portmacro.h **** /* Type definitions. */
  89:..\FreeRTOS/portmacro.h **** #define portCHAR		char
  90:..\FreeRTOS/portmacro.h **** #define portFLOAT		float
  91:..\FreeRTOS/portmacro.h **** #define portDOUBLE		double
  92:..\FreeRTOS/portmacro.h **** #define portLONG		long
  93:..\FreeRTOS/portmacro.h **** #define portSHORT		short
  94:..\FreeRTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:..\FreeRTOS/portmacro.h **** #define portBASE_TYPE	long
  96:..\FreeRTOS/portmacro.h **** 
  97:..\FreeRTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:..\FreeRTOS/portmacro.h **** typedef long BaseType_t;
  99:..\FreeRTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 100:..\FreeRTOS/portmacro.h **** 
 101:..\FreeRTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:..\FreeRTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 103:..\FreeRTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:..\FreeRTOS/portmacro.h **** #else
 105:..\FreeRTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 106:..\FreeRTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:..\FreeRTOS/portmacro.h **** 
 108:..\FreeRTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:..\FreeRTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 110:..\FreeRTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:..\FreeRTOS/portmacro.h **** #endif
 112:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\FreeRTOS/portmacro.h **** 
 114:..\FreeRTOS/portmacro.h **** /* Architecture specifics. */
 115:..\FreeRTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:..\FreeRTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:..\FreeRTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 107


 119:..\FreeRTOS/portmacro.h **** 
 120:..\FreeRTOS/portmacro.h **** 
 121:..\FreeRTOS/portmacro.h **** /* Scheduler utilities. */
 122:..\FreeRTOS/portmacro.h **** extern void vPortYield( void );
 123:..\FreeRTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 124:..\FreeRTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 125:..\FreeRTOS/portmacro.h **** #define portYIELD()					vPortYield()
 126:..\FreeRTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 127:..\FreeRTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 128:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 129:..\FreeRTOS/portmacro.h **** 
 130:..\FreeRTOS/portmacro.h **** /* Critical section management. */
 131:..\FreeRTOS/portmacro.h **** extern void vPortEnterCritical( void );
 132:..\FreeRTOS/portmacro.h **** extern void vPortExitCritical( void );
 133:..\FreeRTOS/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 134:..\FreeRTOS/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 135:..\FreeRTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 136:..\FreeRTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 137:..\FreeRTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 138:..\FreeRTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 139:..\FreeRTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 140:..\FreeRTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 141:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 142:..\FreeRTOS/portmacro.h **** 
 143:..\FreeRTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 144:..\FreeRTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 145:..\FreeRTOS/portmacro.h **** (which build with all the ports) will build. */
 146:..\FreeRTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 147:..\FreeRTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 148:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 149:..\FreeRTOS/portmacro.h **** 
 150:..\FreeRTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 151:..\FreeRTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 152:..\FreeRTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 153:..\FreeRTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 154:..\FreeRTOS/portmacro.h **** #endif
 155:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 156:..\FreeRTOS/portmacro.h **** 
 157:..\FreeRTOS/portmacro.h **** /* Architecture specific optimisations. */
 158:..\FreeRTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 159:..\FreeRTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 160:..\FreeRTOS/portmacro.h **** #endif
 161:..\FreeRTOS/portmacro.h **** 
 162:..\FreeRTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 163:..\FreeRTOS/portmacro.h **** 
 164:..\FreeRTOS/portmacro.h **** 	/* Generic helper function. */
 165:..\FreeRTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 166:..\FreeRTOS/portmacro.h **** 	{
 167:..\FreeRTOS/portmacro.h **** 	uint8_t ucReturn;
 168:..\FreeRTOS/portmacro.h **** 
 169:..\FreeRTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2234              		.loc 2 169 0
 2235              		.syntax unified
 2236              	@ 169 "..\FreeRTOS\portmacro.h" 1
 2237 0058 B3FA83F3 		clz r3, r3
 2238              	@ 0 "" 2
 2239              	.LVL233:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 108


 2240              		.thumb
 2241              		.syntax unified
 2242 005c DBB2     		uxtb	r3, r3
 2243              	.LBE19:
 2244              	.LBE18:
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2245              		.loc 1 2248 0
 2246 005e C3F11F03 		rsb	r3, r3, #31
 2247              	.LVL234:
 2248              	.LBB20:
 2249 0062 9800     		lsls	r0, r3, #2
 2250 0064 C418     		adds	r4, r0, r3
 2251 0066 A100     		lsls	r1, r4, #2
 2252 0068 1144     		add	r1, r1, r2
 2253 006a 4C6B     		ldr	r4, [r1, #52]
 2254 006c 6468     		ldr	r4, [r4, #4]
 2255 006e 4C63     		str	r4, [r1, #52]
 2256 0070 02F13001 		add	r1, r2, #48
 2257 0074 1844     		add	r0, r0, r3
 2258 0076 8200     		lsls	r2, r0, #2
 2259 0078 0832     		adds	r2, r2, #8
 2260 007a 0A44     		add	r2, r2, r1
 2261 007c 9442     		cmp	r4, r2
 2262 007e 06D1     		bne	.L218
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2263              		.loc 1 2248 0 is_stmt 0 discriminator 1
 2264 0080 6068     		ldr	r0, [r4, #4]
 2265 0082 03EB8301 		add	r1, r3, r3, lsl #2
 2266 0086 8A00     		lsls	r2, r1, #2
 2267 0088 0649     		ldr	r1, .L220
 2268 008a 0A44     		add	r2, r2, r1
 2269 008c 5063     		str	r0, [r2, #52]
 2270              	.L218:
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2271              		.loc 1 2248 0 discriminator 3
 2272 008e 0549     		ldr	r1, .L220
 2273 0090 03EB8303 		add	r3, r3, r3, lsl #2
 2274              	.LVL235:
 2275 0094 9A00     		lsls	r2, r3, #2
 2276 0096 0A44     		add	r2, r2, r1
 2277 0098 536B     		ldr	r3, [r2, #52]
 2278 009a DB68     		ldr	r3, [r3, #12]
 2279 009c C1F8D430 		str	r3, [r1, #212]
 2280 00a0 10BD     		pop	{r4, pc}
 2281              	.L221:
 2282 00a2 00BF     		.align	2
 2283              	.L220:
 2284 00a4 00000000 		.word	.LANCHOR0
 2285              	.LBE20:
 2286              	.LBE17:
 2287              		.cfi_endproc
 2288              	.LFE84:
 2289              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2290              		.section	.text.vTaskSuspend,"ax",%progbits
 2291              		.align	2
 2292              		.global	vTaskSuspend
 2293              		.thumb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 109


 2294              		.thumb_func
 2295              		.type	vTaskSuspend, %function
 2296              	vTaskSuspend:
 2297              	.LFB72:
1285:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2298              		.loc 1 1285 0 is_stmt 1
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 0, uses_anonymous_args = 0
 2302              	.LVL236:
 2303 0000 70B5     		push	{r4, r5, r6, lr}
 2304              		.cfi_def_cfa_offset 16
 2305              		.cfi_offset 4, -16
 2306              		.cfi_offset 5, -12
 2307              		.cfi_offset 6, -8
 2308              		.cfi_offset 14, -4
 2309 0002 0446     		mov	r4, r0
1288:..\FreeRTOS/tasks.c **** 		{
 2310              		.loc 1 1288 0
 2311 0004 FFF7FEFF 		bl	vPortEnterCritical
 2312              	.LVL237:
1292:..\FreeRTOS/tasks.c **** 
 2313              		.loc 1 1292 0
 2314 0008 14B9     		cbnz	r4, .L223
1292:..\FreeRTOS/tasks.c **** 
 2315              		.loc 1 1292 0 is_stmt 0 discriminator 1
 2316 000a 244B     		ldr	r3, .L231
 2317 000c D3F8D440 		ldr	r4, [r3, #212]
 2318              	.LVL238:
 2319              	.L223:
1298:..\FreeRTOS/tasks.c **** 			{
 2320              		.loc 1 1298 0 is_stmt 1 discriminator 4
 2321 0010 261D     		adds	r6, r4, #4
 2322 0012 3046     		mov	r0, r6
 2323 0014 FFF7FEFF 		bl	uxListRemove
 2324              	.LVL239:
 2325 0018 80B9     		cbnz	r0, .L224
1300:..\FreeRTOS/tasks.c **** 			}
 2326              		.loc 1 1300 0
 2327 001a E26A     		ldr	r2, [r4, #44]
 2328 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2329 0020 8B00     		lsls	r3, r1, #2
 2330 0022 1E49     		ldr	r1, .L231
 2331 0024 0B44     		add	r3, r3, r1
 2332 0026 1B6B     		ldr	r3, [r3, #48]
 2333 0028 43B9     		cbnz	r3, .L224
1300:..\FreeRTOS/tasks.c **** 			}
 2334              		.loc 1 1300 0 is_stmt 0 discriminator 1
 2335 002a 0123     		movs	r3, #1
 2336 002c 03FA02F2 		lsl	r2, r3, r2
 2337 0030 D1F8E830 		ldr	r3, [r1, #232]
 2338 0034 23EA0202 		bic	r2, r3, r2
 2339 0038 C1F8E820 		str	r2, [r1, #232]
 2340              	.L224:
1308:..\FreeRTOS/tasks.c **** 			{
 2341              		.loc 1 1308 0 is_stmt 1
 2342 003c A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 110


 2343 003e 1BB1     		cbz	r3, .L225
1310:..\FreeRTOS/tasks.c **** 			}
 2344              		.loc 1 1310 0
 2345 0040 04F11800 		add	r0, r4, #24
 2346 0044 FFF7FEFF 		bl	uxListRemove
 2347              	.LVL240:
 2348              	.L225:
1317:..\FreeRTOS/tasks.c **** 		}
 2349              		.loc 1 1317 0
 2350 0048 144D     		ldr	r5, .L231
 2351 004a 3146     		mov	r1, r6
 2352 004c 2846     		mov	r0, r5
 2353 004e FFF7FEFF 		bl	vListInsertEnd
 2354              	.LVL241:
1319:..\FreeRTOS/tasks.c **** 
 2355              		.loc 1 1319 0
 2356 0052 FFF7FEFF 		bl	vPortExitCritical
 2357              	.LVL242:
1321:..\FreeRTOS/tasks.c **** 		{
 2358              		.loc 1 1321 0
 2359 0056 D5F8D430 		ldr	r3, [r5, #212]
 2360 005a 9C42     		cmp	r4, r3
 2361 005c 13D1     		bne	.L226
1323:..\FreeRTOS/tasks.c **** 			{
 2362              		.loc 1 1323 0
 2363 005e D5F8E030 		ldr	r3, [r5, #224]
 2364 0062 13B1     		cbz	r3, .L227
1327:..\FreeRTOS/tasks.c **** 			}
 2365              		.loc 1 1327 0
 2366 0064 FFF7FEFF 		bl	vPortYield
 2367              	.LVL243:
 2368 0068 70BD     		pop	{r4, r5, r6, pc}
 2369              	.LVL244:
 2370              	.L227:
1334:..\FreeRTOS/tasks.c **** 				{
 2371              		.loc 1 1334 0
 2372 006a 0C4B     		ldr	r3, .L231
 2373 006c 1A68     		ldr	r2, [r3]
 2374 006e D3F8DC30 		ldr	r3, [r3, #220]
 2375 0072 9A42     		cmp	r2, r3
 2376 0074 04D1     		bne	.L229
1340:..\FreeRTOS/tasks.c **** 				}
 2377              		.loc 1 1340 0
 2378 0076 0022     		movs	r2, #0
 2379 0078 084B     		ldr	r3, .L231
 2380 007a C3F8D420 		str	r2, [r3, #212]
 2381 007e 70BD     		pop	{r4, r5, r6, pc}
 2382              	.LVL245:
 2383              	.L229:
1344:..\FreeRTOS/tasks.c **** 				}
 2384              		.loc 1 1344 0
 2385 0080 FFF7FEFF 		bl	vTaskSwitchContext
 2386              	.LVL246:
 2387 0084 70BD     		pop	{r4, r5, r6, pc}
 2388              	.LVL247:
 2389              	.L226:
1350:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 111


 2390              		.loc 1 1350 0
 2391 0086 054B     		ldr	r3, .L231
 2392 0088 D3F8E030 		ldr	r3, [r3, #224]
 2393 008c 2BB1     		cbz	r3, .L222
1355:..\FreeRTOS/tasks.c **** 				{
 2394              		.loc 1 1355 0
 2395 008e FFF7FEFF 		bl	vPortEnterCritical
 2396              	.LVL248:
1357:..\FreeRTOS/tasks.c **** 				}
 2397              		.loc 1 1357 0
 2398 0092 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2399              	.LVL249:
1359:..\FreeRTOS/tasks.c **** 			}
 2400              		.loc 1 1359 0
 2401 0096 FFF7FEFF 		bl	vPortExitCritical
 2402              	.LVL250:
 2403              	.L222:
 2404 009a 70BD     		pop	{r4, r5, r6, pc}
 2405              	.LVL251:
 2406              	.L232:
 2407              		.align	2
 2408              	.L231:
 2409 009c 00000000 		.word	.LANCHOR0
 2410              		.cfi_endproc
 2411              	.LFE72:
 2412              		.size	vTaskSuspend, .-vTaskSuspend
 2413              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2414              		.align	2
 2415              		.global	vTaskPlaceOnEventList
 2416              		.thumb
 2417              		.thumb_func
 2418              		.type	vTaskPlaceOnEventList, %function
 2419              	vTaskPlaceOnEventList:
 2420              	.LFB85:
2263:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
 2421              		.loc 1 2263 0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
 2425              	.LVL252:
 2426 0000 38B5     		push	{r3, r4, r5, lr}
 2427              		.cfi_def_cfa_offset 16
 2428              		.cfi_offset 3, -16
 2429              		.cfi_offset 4, -12
 2430              		.cfi_offset 5, -8
 2431              		.cfi_offset 14, -4
 2432 0002 0D46     		mov	r5, r1
2275:..\FreeRTOS/tasks.c **** 
 2433              		.loc 1 2275 0
 2434 0004 144C     		ldr	r4, .L238
 2435 0006 D4F8D410 		ldr	r1, [r4, #212]
 2436              	.LVL253:
 2437 000a 1831     		adds	r1, r1, #24
 2438 000c FFF7FEFF 		bl	vListInsert
 2439              	.LVL254:
2280:..\FreeRTOS/tasks.c **** 	{
 2440              		.loc 1 2280 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 112


 2441 0010 D4F8D400 		ldr	r0, [r4, #212]
 2442 0014 0430     		adds	r0, r0, #4
 2443 0016 FFF7FEFF 		bl	uxListRemove
 2444              	.LVL255:
 2445 001a 58B9     		cbnz	r0, .L234
2284:..\FreeRTOS/tasks.c **** 	}
 2446              		.loc 1 2284 0
 2447 001c D4F8D420 		ldr	r2, [r4, #212]
 2448 0020 D16A     		ldr	r1, [r2, #44]
 2449 0022 0122     		movs	r2, #1
 2450 0024 02FA01F1 		lsl	r1, r2, r1
 2451 0028 D4F8E820 		ldr	r2, [r4, #232]
 2452 002c 22EA0102 		bic	r2, r2, r1
 2453 0030 C4F8E820 		str	r2, [r4, #232]
 2454              	.L234:
2293:..\FreeRTOS/tasks.c **** 		{
 2455              		.loc 1 2293 0
 2456 0034 B5F1FF3F 		cmp	r5, #-1
 2457 0038 06D1     		bne	.L235
2298:..\FreeRTOS/tasks.c **** 		}
 2458              		.loc 1 2298 0
 2459 003a 0748     		ldr	r0, .L238
 2460 003c D0F8D410 		ldr	r1, [r0, #212]
 2461 0040 0431     		adds	r1, r1, #4
 2462 0042 FFF7FEFF 		bl	vListInsertEnd
 2463              	.LVL256:
 2464 0046 38BD     		pop	{r3, r4, r5, pc}
 2465              	.LVL257:
 2466              	.L235:
2305:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2467              		.loc 1 2305 0
 2468 0048 034B     		ldr	r3, .L238
 2469 004a D3F8D800 		ldr	r0, [r3, #216]
 2470              	.LVL258:
2306:..\FreeRTOS/tasks.c **** 		}
 2471              		.loc 1 2306 0
 2472 004e 2844     		add	r0, r0, r5
 2473              	.LVL259:
 2474 0050 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2475              	.LVL260:
 2476 0054 38BD     		pop	{r3, r4, r5, pc}
 2477              	.LVL261:
 2478              	.L239:
 2479 0056 00BF     		.align	2
 2480              	.L238:
 2481 0058 00000000 		.word	.LANCHOR0
 2482              		.cfi_endproc
 2483              	.LFE85:
 2484              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2485              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2486              		.align	2
 2487              		.global	vTaskPlaceOnUnorderedEventList
 2488              		.thumb
 2489              		.thumb_func
 2490              		.type	vTaskPlaceOnUnorderedEventList, %function
 2491              	vTaskPlaceOnUnorderedEventList:
 2492              	.LFB86:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 113


2322:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
 2493              		.loc 1 2322 0
 2494              		.cfi_startproc
 2495              		@ args = 0, pretend = 0, frame = 0
 2496              		@ frame_needed = 0, uses_anonymous_args = 0
 2497              	.LVL262:
 2498 0000 38B5     		push	{r3, r4, r5, lr}
 2499              		.cfi_def_cfa_offset 16
 2500              		.cfi_offset 3, -16
 2501              		.cfi_offset 4, -12
 2502              		.cfi_offset 5, -8
 2503              		.cfi_offset 14, -4
 2504 0002 1546     		mov	r5, r2
2334:..\FreeRTOS/tasks.c **** 
 2505              		.loc 1 2334 0
 2506 0004 164C     		ldr	r4, .L245
 2507 0006 D4F8D430 		ldr	r3, [r4, #212]
 2508 000a 41F00041 		orr	r1, r1, #-2147483648
 2509              	.LVL263:
 2510 000e 9961     		str	r1, [r3, #24]
2341:..\FreeRTOS/tasks.c **** 
 2511              		.loc 1 2341 0
 2512 0010 D4F8D410 		ldr	r1, [r4, #212]
 2513 0014 1831     		adds	r1, r1, #24
 2514 0016 FFF7FEFF 		bl	vListInsertEnd
 2515              	.LVL264:
2346:..\FreeRTOS/tasks.c **** 	{
 2516              		.loc 1 2346 0
 2517 001a D4F8D400 		ldr	r0, [r4, #212]
 2518 001e 0430     		adds	r0, r0, #4
 2519 0020 FFF7FEFF 		bl	uxListRemove
 2520              	.LVL265:
 2521 0024 58B9     		cbnz	r0, .L241
2350:..\FreeRTOS/tasks.c **** 	}
 2522              		.loc 1 2350 0
 2523 0026 D4F8D420 		ldr	r2, [r4, #212]
 2524 002a D16A     		ldr	r1, [r2, #44]
 2525 002c 0122     		movs	r2, #1
 2526 002e 02FA01F1 		lsl	r1, r2, r1
 2527 0032 D4F8E820 		ldr	r2, [r4, #232]
 2528 0036 22EA0102 		bic	r2, r2, r1
 2529 003a C4F8E820 		str	r2, [r4, #232]
 2530              	.L241:
2359:..\FreeRTOS/tasks.c **** 		{
 2531              		.loc 1 2359 0
 2532 003e B5F1FF3F 		cmp	r5, #-1
 2533 0042 06D1     		bne	.L242
2364:..\FreeRTOS/tasks.c **** 		}
 2534              		.loc 1 2364 0
 2535 0044 0648     		ldr	r0, .L245
 2536 0046 D0F8D410 		ldr	r1, [r0, #212]
 2537 004a 0431     		adds	r1, r1, #4
 2538 004c FFF7FEFF 		bl	vListInsertEnd
 2539              	.LVL266:
 2540 0050 38BD     		pop	{r3, r4, r5, pc}
 2541              	.LVL267:
 2542              	.L242:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 114


2371:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2543              		.loc 1 2371 0
 2544 0052 034B     		ldr	r3, .L245
 2545 0054 D3F8D800 		ldr	r0, [r3, #216]
 2546              	.LVL268:
2372:..\FreeRTOS/tasks.c **** 		}
 2547              		.loc 1 2372 0
 2548 0058 2844     		add	r0, r0, r5
 2549              	.LVL269:
 2550 005a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2551              	.LVL270:
 2552 005e 38BD     		pop	{r3, r4, r5, pc}
 2553              	.LVL271:
 2554              	.L246:
 2555              		.align	2
 2556              	.L245:
 2557 0060 00000000 		.word	.LANCHOR0
 2558              		.cfi_endproc
 2559              	.LFE86:
 2560              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2561              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2562              		.align	2
 2563              		.global	xTaskRemoveFromEventList
 2564              		.thumb
 2565              		.thumb_func
 2566              		.type	xTaskRemoveFromEventList, %function
 2567              	xTaskRemoveFromEventList:
 2568              	.LFB87:
2466:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2569              		.loc 1 2466 0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 2573              	.LVL272:
 2574 0000 38B5     		push	{r3, r4, r5, lr}
 2575              		.cfi_def_cfa_offset 16
 2576              		.cfi_offset 3, -16
 2577              		.cfi_offset 4, -12
 2578              		.cfi_offset 5, -8
 2579              		.cfi_offset 14, -4
2483:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2580              		.loc 1 2483 0
 2581 0002 C368     		ldr	r3, [r0, #12]
 2582 0004 DC68     		ldr	r4, [r3, #12]
 2583              	.LVL273:
2485:..\FreeRTOS/tasks.c **** 
 2584              		.loc 1 2485 0
 2585 0006 04F11805 		add	r5, r4, #24
 2586 000a 2846     		mov	r0, r5
 2587              	.LVL274:
 2588 000c FFF7FEFF 		bl	uxListRemove
 2589              	.LVL275:
2487:..\FreeRTOS/tasks.c **** 	{
 2590              		.loc 1 2487 0
 2591 0010 164B     		ldr	r3, .L253
 2592 0012 D3F8F030 		ldr	r3, [r3, #240]
 2593 0016 B3B9     		cbnz	r3, .L248
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 115


2489:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2594              		.loc 1 2489 0
 2595 0018 251D     		adds	r5, r4, #4
 2596 001a 2846     		mov	r0, r5
 2597 001c FFF7FEFF 		bl	uxListRemove
 2598              	.LVL276:
2490:..\FreeRTOS/tasks.c **** 	}
 2599              		.loc 1 2490 0
 2600 0020 E36A     		ldr	r3, [r4, #44]
 2601 0022 0122     		movs	r2, #1
 2602 0024 02FA03F1 		lsl	r1, r2, r3
 2603 0028 1048     		ldr	r0, .L253
 2604 002a D0F8E820 		ldr	r2, [r0, #232]
 2605 002e 0A43     		orrs	r2, r2, r1
 2606 0030 C0F8E820 		str	r2, [r0, #232]
 2607 0034 3030     		adds	r0, r0, #48
 2608 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2609 003a 9A00     		lsls	r2, r3, #2
 2610 003c 2946     		mov	r1, r5
 2611 003e 1044     		add	r0, r0, r2
 2612 0040 FFF7FEFF 		bl	vListInsertEnd
 2613              	.LVL277:
 2614 0044 03E0     		b	.L249
 2615              	.L248:
2496:..\FreeRTOS/tasks.c **** 	}
 2616              		.loc 1 2496 0
 2617 0046 2946     		mov	r1, r5
 2618 0048 0948     		ldr	r0, .L253+4
 2619 004a FFF7FEFF 		bl	vListInsertEnd
 2620              	.LVL278:
 2621              	.L249:
2499:..\FreeRTOS/tasks.c **** 	{
 2622              		.loc 1 2499 0
 2623 004e E26A     		ldr	r2, [r4, #44]
 2624 0050 064B     		ldr	r3, .L253
 2625 0052 D3F8D430 		ldr	r3, [r3, #212]
 2626 0056 DB6A     		ldr	r3, [r3, #44]
 2627 0058 9A42     		cmp	r2, r3
 2628 005a 04D9     		bls	.L251
 2629              	.LVL279:
2508:..\FreeRTOS/tasks.c **** 	}
 2630              		.loc 1 2508 0
 2631 005c 0120     		movs	r0, #1
 2632 005e 034B     		ldr	r3, .L253
 2633 0060 C3F8FC00 		str	r0, [r3, #252]
 2634 0064 38BD     		pop	{r3, r4, r5, pc}
 2635              	.LVL280:
 2636              	.L251:
2512:..\FreeRTOS/tasks.c **** 	}
 2637              		.loc 1 2512 0
 2638 0066 0020     		movs	r0, #0
 2639              	.LVL281:
2530:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2640              		.loc 1 2530 0
 2641 0068 38BD     		pop	{r3, r4, r5, pc}
 2642              	.LVL282:
 2643              	.L254:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 116


 2644 006a 00BF     		.align	2
 2645              	.L253:
 2646 006c 00000000 		.word	.LANCHOR0
 2647 0070 14000000 		.word	.LANCHOR0+20
 2648              		.cfi_endproc
 2649              	.LFE87:
 2650              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2651              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2652              		.align	2
 2653              		.global	xTaskRemoveFromUnorderedEventList
 2654              		.thumb
 2655              		.thumb_func
 2656              		.type	xTaskRemoveFromUnorderedEventList, %function
 2657              	xTaskRemoveFromUnorderedEventList:
 2658              	.LFB88:
2534:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2659              		.loc 1 2534 0
 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 0
 2662              		@ frame_needed = 0, uses_anonymous_args = 0
 2663              	.LVL283:
 2664 0000 70B5     		push	{r4, r5, r6, lr}
 2665              		.cfi_def_cfa_offset 16
 2666              		.cfi_offset 4, -16
 2667              		.cfi_offset 5, -12
 2668              		.cfi_offset 6, -8
 2669              		.cfi_offset 14, -4
2543:..\FreeRTOS/tasks.c **** 
 2670              		.loc 1 2543 0
 2671 0002 41F00041 		orr	r1, r1, #-2147483648
 2672              	.LVL284:
 2673 0006 0160     		str	r1, [r0]
2547:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2674              		.loc 1 2547 0
 2675 0008 C568     		ldr	r5, [r0, #12]
 2676              	.LVL285:
2549:..\FreeRTOS/tasks.c **** 
 2677              		.loc 1 2549 0
 2678 000a FFF7FEFF 		bl	uxListRemove
 2679              	.LVL286:
2554:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2680              		.loc 1 2554 0
 2681 000e 2E1D     		adds	r6, r5, #4
 2682 0010 3046     		mov	r0, r6
 2683 0012 FFF7FEFF 		bl	uxListRemove
 2684              	.LVL287:
2555:..\FreeRTOS/tasks.c **** 
 2685              		.loc 1 2555 0
 2686 0016 EB6A     		ldr	r3, [r5, #44]
 2687 0018 0122     		movs	r2, #1
 2688 001a 02FA03F1 		lsl	r1, r2, r3
 2689 001e 0D4C     		ldr	r4, .L259
 2690 0020 D4F8E820 		ldr	r2, [r4, #232]
 2691 0024 0A43     		orrs	r2, r2, r1
 2692 0026 C4F8E820 		str	r2, [r4, #232]
 2693 002a 04F13000 		add	r0, r4, #48
 2694 002e 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 117


 2695 0032 9A00     		lsls	r2, r3, #2
 2696 0034 3146     		mov	r1, r6
 2697 0036 1044     		add	r0, r0, r2
 2698 0038 FFF7FEFF 		bl	vListInsertEnd
 2699              	.LVL288:
2557:..\FreeRTOS/tasks.c **** 	{
 2700              		.loc 1 2557 0
 2701 003c EA6A     		ldr	r2, [r5, #44]
 2702 003e D4F8D430 		ldr	r3, [r4, #212]
 2703 0042 DB6A     		ldr	r3, [r3, #44]
 2704 0044 9A42     		cmp	r2, r3
 2705 0046 03D9     		bls	.L257
 2706              	.LVL289:
2567:..\FreeRTOS/tasks.c **** 	}
 2707              		.loc 1 2567 0
 2708 0048 0120     		movs	r0, #1
 2709 004a C4F8FC00 		str	r0, [r4, #252]
 2710 004e 70BD     		pop	{r4, r5, r6, pc}
 2711              	.LVL290:
 2712              	.L257:
2571:..\FreeRTOS/tasks.c **** 	}
 2713              		.loc 1 2571 0
 2714 0050 0020     		movs	r0, #0
 2715              	.LVL291:
2575:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2716              		.loc 1 2575 0
 2717 0052 70BD     		pop	{r4, r5, r6, pc}
 2718              	.LVL292:
 2719              	.L260:
 2720              		.align	2
 2721              	.L259:
 2722 0054 00000000 		.word	.LANCHOR0
 2723              		.cfi_endproc
 2724              	.LFE88:
 2725              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 2726              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2727              		.align	2
 2728              		.global	vTaskSetTimeOutState
 2729              		.thumb
 2730              		.thumb_func
 2731              		.type	vTaskSetTimeOutState, %function
 2732              	vTaskSetTimeOutState:
 2733              	.LFB89:
2579:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 2734              		.loc 1 2579 0
 2735              		.cfi_startproc
 2736              		@ args = 0, pretend = 0, frame = 0
 2737              		@ frame_needed = 0, uses_anonymous_args = 0
 2738              		@ link register save eliminated.
 2739              	.LVL293:
2581:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2740              		.loc 1 2581 0
 2741 0000 034B     		ldr	r3, .L262
 2742 0002 D3F8F420 		ldr	r2, [r3, #244]
 2743 0006 0260     		str	r2, [r0]
2582:..\FreeRTOS/tasks.c **** }
 2744              		.loc 1 2582 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 118


 2745 0008 D3F8D830 		ldr	r3, [r3, #216]
 2746 000c 4360     		str	r3, [r0, #4]
 2747 000e 7047     		bx	lr
 2748              	.L263:
 2749              		.align	2
 2750              	.L262:
 2751 0010 00000000 		.word	.LANCHOR0
 2752              		.cfi_endproc
 2753              	.LFE89:
 2754              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2755              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2756              		.align	2
 2757              		.global	xTaskCheckForTimeOut
 2758              		.thumb
 2759              		.thumb_func
 2760              		.type	xTaskCheckForTimeOut, %function
 2761              	xTaskCheckForTimeOut:
 2762              	.LFB90:
2587:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 2763              		.loc 1 2587 0
 2764              		.cfi_startproc
 2765              		@ args = 0, pretend = 0, frame = 0
 2766              		@ frame_needed = 0, uses_anonymous_args = 0
 2767              	.LVL294:
 2768 0000 38B5     		push	{r3, r4, r5, lr}
 2769              		.cfi_def_cfa_offset 16
 2770              		.cfi_offset 3, -16
 2771              		.cfi_offset 4, -12
 2772              		.cfi_offset 5, -8
 2773              		.cfi_offset 14, -4
 2774 0002 0446     		mov	r4, r0
 2775 0004 0D46     		mov	r5, r1
2593:..\FreeRTOS/tasks.c **** 	{
 2776              		.loc 1 2593 0
 2777 0006 FFF7FEFF 		bl	vPortEnterCritical
 2778              	.LVL295:
 2779              	.LBB21:
2596:..\FreeRTOS/tasks.c **** 
 2780              		.loc 1 2596 0
 2781 000a 124B     		ldr	r3, .L271
 2782 000c D3F8D820 		ldr	r2, [r3, #216]
 2783              	.LVL296:
2602:..\FreeRTOS/tasks.c **** 			{
 2784              		.loc 1 2602 0
 2785 0010 2B68     		ldr	r3, [r5]
 2786 0012 B3F1FF3F 		cmp	r3, #-1
 2787 0016 14D0     		beq	.L267
2609:..\FreeRTOS/tasks.c **** 		{
 2788              		.loc 1 2609 0
 2789 0018 2068     		ldr	r0, [r4]
 2790 001a 0E49     		ldr	r1, .L271
 2791 001c D1F8F410 		ldr	r1, [r1, #244]
 2792 0020 8842     		cmp	r0, r1
 2793 0022 02D0     		beq	.L266
2609:..\FreeRTOS/tasks.c **** 		{
 2794              		.loc 1 2609 0 is_stmt 0 discriminator 1
 2795 0024 6168     		ldr	r1, [r4, #4]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 119


 2796 0026 8A42     		cmp	r2, r1
 2797 0028 0DD2     		bcs	.L268
 2798              	.L266:
2617:..\FreeRTOS/tasks.c **** 		{
 2799              		.loc 1 2617 0 is_stmt 1
 2800 002a 6168     		ldr	r1, [r4, #4]
 2801 002c 501A     		subs	r0, r2, r1
 2802 002e 8342     		cmp	r3, r0
 2803 0030 0BD9     		bls	.L269
2620:..\FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2804              		.loc 1 2620 0
 2805 0032 8A1A     		subs	r2, r1, r2
 2806              	.LVL297:
 2807 0034 1344     		add	r3, r3, r2
 2808 0036 2B60     		str	r3, [r5]
2621:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 2809              		.loc 1 2621 0
 2810 0038 2046     		mov	r0, r4
 2811 003a FFF7FEFF 		bl	vTaskSetTimeOutState
 2812              	.LVL298:
2622:..\FreeRTOS/tasks.c **** 		}
 2813              		.loc 1 2622 0
 2814 003e 0024     		movs	r4, #0
 2815              	.LVL299:
 2816 0040 04E0     		b	.L265
 2817              	.LVL300:
 2818              	.L267:
2604:..\FreeRTOS/tasks.c **** 			}
 2819              		.loc 1 2604 0
 2820 0042 0024     		movs	r4, #0
 2821              	.LVL301:
 2822 0044 02E0     		b	.L265
 2823              	.LVL302:
 2824              	.L268:
2615:..\FreeRTOS/tasks.c **** 		}
 2825              		.loc 1 2615 0
 2826 0046 0124     		movs	r4, #1
 2827              	.LVL303:
 2828 0048 00E0     		b	.L265
 2829              	.LVL304:
 2830              	.L269:
2626:..\FreeRTOS/tasks.c **** 		}
 2831              		.loc 1 2626 0
 2832 004a 0124     		movs	r4, #1
 2833              	.LVL305:
 2834              	.L265:
 2835              	.LBE21:
2629:..\FreeRTOS/tasks.c **** 
 2836              		.loc 1 2629 0
 2837 004c FFF7FEFF 		bl	vPortExitCritical
 2838              	.LVL306:
2632:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2839              		.loc 1 2632 0
 2840 0050 2046     		mov	r0, r4
 2841 0052 38BD     		pop	{r3, r4, r5, pc}
 2842              	.LVL307:
 2843              	.L272:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 120


 2844              		.align	2
 2845              	.L271:
 2846 0054 00000000 		.word	.LANCHOR0
 2847              		.cfi_endproc
 2848              	.LFE90:
 2849              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2850              		.section	.text.vTaskMissedYield,"ax",%progbits
 2851              		.align	2
 2852              		.global	vTaskMissedYield
 2853              		.thumb
 2854              		.thumb_func
 2855              		.type	vTaskMissedYield, %function
 2856              	vTaskMissedYield:
 2857              	.LFB91:
2636:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 2858              		.loc 1 2636 0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 2862              		@ link register save eliminated.
2637:..\FreeRTOS/tasks.c **** }
 2863              		.loc 1 2637 0
 2864 0000 0122     		movs	r2, #1
 2865 0002 024B     		ldr	r3, .L274
 2866 0004 C3F8FC20 		str	r2, [r3, #252]
 2867 0008 7047     		bx	lr
 2868              	.L275:
 2869 000a 00BF     		.align	2
 2870              	.L274:
 2871 000c 00000000 		.word	.LANCHOR0
 2872              		.cfi_endproc
 2873              	.LFE91:
 2874              		.size	vTaskMissedYield, .-vTaskMissedYield
 2875              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 2876              		.align	2
 2877              		.global	uxTaskGetStackHighWaterMark
 2878              		.thumb
 2879              		.thumb_func
 2880              		.type	uxTaskGetStackHighWaterMark, %function
 2881              	uxTaskGetStackHighWaterMark:
 2882              	.LFB99:
3284:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2883              		.loc 1 3284 0
 2884              		.cfi_startproc
 2885              		@ args = 0, pretend = 0, frame = 0
 2886              		@ frame_needed = 0, uses_anonymous_args = 0
 2887              	.LVL308:
 2888 0000 08B5     		push	{r3, lr}
 2889              		.cfi_def_cfa_offset 8
 2890              		.cfi_offset 3, -8
 2891              		.cfi_offset 14, -4
3289:..\FreeRTOS/tasks.c **** 
 2892              		.loc 1 3289 0
 2893 0002 0346     		mov	r3, r0
 2894 0004 10B9     		cbnz	r0, .L277
3289:..\FreeRTOS/tasks.c **** 
 2895              		.loc 1 3289 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 121


 2896 0006 034B     		ldr	r3, .L279
 2897 0008 D3F8D430 		ldr	r3, [r3, #212]
 2898              	.LVL309:
 2899              	.L277:
3301:..\FreeRTOS/tasks.c **** 
 2900              		.loc 1 3301 0 is_stmt 1 discriminator 4
 2901 000c 186B     		ldr	r0, [r3, #48]
 2902 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 2903              	.LVL310:
3304:..\FreeRTOS/tasks.c **** 
 2904              		.loc 1 3304 0 discriminator 4
 2905 0012 08BD     		pop	{r3, pc}
 2906              	.L280:
 2907              		.align	2
 2908              	.L279:
 2909 0014 00000000 		.word	.LANCHOR0
 2910              		.cfi_endproc
 2911              	.LFE99:
 2912              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 2913              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 2914              		.align	2
 2915              		.global	xTaskGetCurrentTaskHandle
 2916              		.thumb
 2917              		.thumb_func
 2918              		.type	xTaskGetCurrentTaskHandle, %function
 2919              	xTaskGetCurrentTaskHandle:
 2920              	.LFB102:
3367:..\FreeRTOS/tasks.c **** 	}
3368:..\FreeRTOS/tasks.c **** }
3369:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3370:..\FreeRTOS/tasks.c **** 
3371:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3372:..\FreeRTOS/tasks.c **** 
3373:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3374:..\FreeRTOS/tasks.c **** 	{
 2921              		.loc 1 3374 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 0, uses_anonymous_args = 0
 2925              		@ link register save eliminated.
3375:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3376:..\FreeRTOS/tasks.c **** 
3377:..\FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3378:..\FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3379:..\FreeRTOS/tasks.c **** 		individual execution thread. */
3380:..\FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 2926              		.loc 1 3380 0
 2927 0000 014B     		ldr	r3, .L282
 2928 0002 D3F8D400 		ldr	r0, [r3, #212]
 2929              	.LVL311:
3381:..\FreeRTOS/tasks.c **** 
3382:..\FreeRTOS/tasks.c **** 		return xReturn;
3383:..\FreeRTOS/tasks.c **** 	}
 2930              		.loc 1 3383 0
 2931 0006 7047     		bx	lr
 2932              	.L283:
 2933              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 122


 2934              	.L282:
 2935 0008 00000000 		.word	.LANCHOR0
 2936              		.cfi_endproc
 2937              	.LFE102:
 2938              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 2939              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 2940              		.align	2
 2941              		.global	vTaskPriorityInherit
 2942              		.thumb
 2943              		.thumb_func
 2944              		.type	vTaskPriorityInherit, %function
 2945              	vTaskPriorityInherit:
 2946              	.LFB103:
3384:..\FreeRTOS/tasks.c **** 
3385:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3386:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3387:..\FreeRTOS/tasks.c **** 
3388:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3389:..\FreeRTOS/tasks.c **** 
3390:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3391:..\FreeRTOS/tasks.c **** 	{
3392:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3393:..\FreeRTOS/tasks.c **** 
3394:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3395:..\FreeRTOS/tasks.c **** 		{
3396:..\FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3397:..\FreeRTOS/tasks.c **** 		}
3398:..\FreeRTOS/tasks.c **** 		else
3399:..\FreeRTOS/tasks.c **** 		{
3400:..\FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3401:..\FreeRTOS/tasks.c **** 			{
3402:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3403:..\FreeRTOS/tasks.c **** 			}
3404:..\FreeRTOS/tasks.c **** 			else
3405:..\FreeRTOS/tasks.c **** 			{
3406:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3407:..\FreeRTOS/tasks.c **** 			}
3408:..\FreeRTOS/tasks.c **** 		}
3409:..\FreeRTOS/tasks.c **** 
3410:..\FreeRTOS/tasks.c **** 		return xReturn;
3411:..\FreeRTOS/tasks.c **** 	}
3412:..\FreeRTOS/tasks.c **** 
3413:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3414:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3415:..\FreeRTOS/tasks.c **** 
3416:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3417:..\FreeRTOS/tasks.c **** 
3418:..\FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3419:..\FreeRTOS/tasks.c **** 	{
 2947              		.loc 1 3419 0
 2948              		.cfi_startproc
 2949              		@ args = 0, pretend = 0, frame = 0
 2950              		@ frame_needed = 0, uses_anonymous_args = 0
 2951              	.LVL312:
3420:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3421:..\FreeRTOS/tasks.c **** 
3422:..\FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 123


3423:..\FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3424:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 2952              		.loc 1 3424 0
 2953 0000 0028     		cmp	r0, #0
 2954 0002 51D0     		beq	.L292
3419:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 2955              		.loc 1 3419 0
 2956 0004 38B5     		push	{r3, r4, r5, lr}
 2957              		.cfi_def_cfa_offset 16
 2958              		.cfi_offset 3, -16
 2959              		.cfi_offset 4, -12
 2960              		.cfi_offset 5, -8
 2961              		.cfi_offset 14, -4
 2962 0006 0246     		mov	r2, r0
3425:..\FreeRTOS/tasks.c **** 		{
3426:..\FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3427:..\FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3428:..\FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3429:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2963              		.loc 1 3429 0
 2964 0008 C36A     		ldr	r3, [r0, #44]
 2965 000a 2849     		ldr	r1, .L293
 2966 000c D1F8D410 		ldr	r1, [r1, #212]
 2967 0010 C96A     		ldr	r1, [r1, #44]
 2968 0012 8B42     		cmp	r3, r1
 2969 0014 47D2     		bcs	.L284
3430:..\FreeRTOS/tasks.c **** 			{
3431:..\FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3432:..\FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3433:..\FreeRTOS/tasks.c **** 				not	being used for anything else. */
3434:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 2970              		.loc 1 3434 0
 2971 0016 8169     		ldr	r1, [r0, #24]
 2972 0018 0029     		cmp	r1, #0
 2973 001a 06DB     		blt	.L286
3435:..\FreeRTOS/tasks.c **** 				{
3436:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 2974              		.loc 1 3436 0
 2975 001c 2349     		ldr	r1, .L293
 2976 001e D1F8D410 		ldr	r1, [r1, #212]
 2977 0022 C96A     		ldr	r1, [r1, #44]
 2978 0024 C1F10501 		rsb	r1, r1, #5
 2979 0028 8161     		str	r1, [r0, #24]
 2980              	.L286:
3437:..\FreeRTOS/tasks.c **** 				}
3438:..\FreeRTOS/tasks.c **** 				else
3439:..\FreeRTOS/tasks.c **** 				{
3440:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3441:..\FreeRTOS/tasks.c **** 				}
3442:..\FreeRTOS/tasks.c **** 
3443:..\FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3444:..\FreeRTOS/tasks.c **** 				to be moved into a new list. */
3445:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 2981              		.loc 1 3445 0
 2982 002a 5069     		ldr	r0, [r2, #20]
 2983              	.LVL313:
 2984 002c 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 124


 2985 0030 9900     		lsls	r1, r3, #2
 2986 0032 1F4B     		ldr	r3, .L293+4
 2987 0034 1944     		add	r1, r1, r3
 2988 0036 8842     		cmp	r0, r1
 2989 0038 01D1     		bne	.L290
 2990 003a 0123     		movs	r3, #1
 2991 003c 00E0     		b	.L287
 2992              	.L290:
 2993 003e 0023     		movs	r3, #0
 2994              	.L287:
 2995              		.loc 1 3445 0 is_stmt 0 discriminator 4
 2996 0040 63B3     		cbz	r3, .L288
 2997 0042 1546     		mov	r5, r2
3446:..\FreeRTOS/tasks.c **** 				{
3447:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 2998              		.loc 1 3447 0 is_stmt 1
 2999 0044 141D     		adds	r4, r2, #4
 3000 0046 2046     		mov	r0, r4
 3001 0048 FFF7FEFF 		bl	uxListRemove
 3002              	.LVL314:
 3003 004c 80B9     		cbnz	r0, .L289
3448:..\FreeRTOS/tasks.c **** 					{
3449:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3004              		.loc 1 3449 0
 3005 004e EA6A     		ldr	r2, [r5, #44]
 3006 0050 02EB8201 		add	r1, r2, r2, lsl #2
 3007 0054 8B00     		lsls	r3, r1, #2
 3008 0056 1549     		ldr	r1, .L293
 3009 0058 0B44     		add	r3, r3, r1
 3010 005a 1B6B     		ldr	r3, [r3, #48]
 3011 005c 43B9     		cbnz	r3, .L289
 3012              		.loc 1 3449 0 is_stmt 0 discriminator 1
 3013 005e 0123     		movs	r3, #1
 3014 0060 03FA02F2 		lsl	r2, r3, r2
 3015 0064 D1F8E830 		ldr	r3, [r1, #232]
 3016 0068 23EA0202 		bic	r2, r3, r2
 3017 006c C1F8E820 		str	r2, [r1, #232]
 3018              	.L289:
3450:..\FreeRTOS/tasks.c **** 					}
3451:..\FreeRTOS/tasks.c **** 					else
3452:..\FreeRTOS/tasks.c **** 					{
3453:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3454:..\FreeRTOS/tasks.c **** 					}
3455:..\FreeRTOS/tasks.c **** 
3456:..\FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3457:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3019              		.loc 1 3457 0 is_stmt 1
 3020 0070 0E48     		ldr	r0, .L293
 3021 0072 D0F8D430 		ldr	r3, [r0, #212]
 3022 0076 DB6A     		ldr	r3, [r3, #44]
 3023 0078 EB62     		str	r3, [r5, #44]
3458:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3024              		.loc 1 3458 0
 3025 007a 0122     		movs	r2, #1
 3026 007c 02FA03F1 		lsl	r1, r2, r3
 3027 0080 D0F8E820 		ldr	r2, [r0, #232]
 3028 0084 0A43     		orrs	r2, r2, r1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 125


 3029 0086 C0F8E820 		str	r2, [r0, #232]
 3030 008a 3030     		adds	r0, r0, #48
 3031 008c 03EB8303 		add	r3, r3, r3, lsl #2
 3032 0090 9A00     		lsls	r2, r3, #2
 3033 0092 2146     		mov	r1, r4
 3034 0094 1044     		add	r0, r0, r2
 3035 0096 FFF7FEFF 		bl	vListInsertEnd
 3036              	.LVL315:
 3037 009a 38BD     		pop	{r3, r4, r5, pc}
 3038              	.LVL316:
 3039              	.L288:
3459:..\FreeRTOS/tasks.c **** 				}
3460:..\FreeRTOS/tasks.c **** 				else
3461:..\FreeRTOS/tasks.c **** 				{
3462:..\FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3463:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3040              		.loc 1 3463 0
 3041 009c 034B     		ldr	r3, .L293
 3042 009e D3F8D430 		ldr	r3, [r3, #212]
 3043 00a2 DB6A     		ldr	r3, [r3, #44]
 3044 00a4 D362     		str	r3, [r2, #44]
 3045              	.L284:
 3046 00a6 38BD     		pop	{r3, r4, r5, pc}
 3047              	.LVL317:
 3048              	.L292:
 3049              		.cfi_def_cfa_offset 0
 3050              		.cfi_restore 3
 3051              		.cfi_restore 4
 3052              		.cfi_restore 5
 3053              		.cfi_restore 14
 3054 00a8 7047     		bx	lr
 3055              	.L294:
 3056 00aa 00BF     		.align	2
 3057              	.L293:
 3058 00ac 00000000 		.word	.LANCHOR0
 3059 00b0 30000000 		.word	.LANCHOR0+48
 3060              		.cfi_endproc
 3061              	.LFE103:
 3062              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 3063              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3064              		.align	2
 3065              		.global	xTaskPriorityDisinherit
 3066              		.thumb
 3067              		.thumb_func
 3068              		.type	xTaskPriorityDisinherit, %function
 3069              	xTaskPriorityDisinherit:
 3070              	.LFB104:
3464:..\FreeRTOS/tasks.c **** 				}
3465:..\FreeRTOS/tasks.c **** 
3466:..\FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3467:..\FreeRTOS/tasks.c **** 			}
3468:..\FreeRTOS/tasks.c **** 			else
3469:..\FreeRTOS/tasks.c **** 			{
3470:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3471:..\FreeRTOS/tasks.c **** 			}
3472:..\FreeRTOS/tasks.c **** 		}
3473:..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 126


3474:..\FreeRTOS/tasks.c **** 		{
3475:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3476:..\FreeRTOS/tasks.c **** 		}
3477:..\FreeRTOS/tasks.c **** 	}
3478:..\FreeRTOS/tasks.c **** 
3479:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3480:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3481:..\FreeRTOS/tasks.c **** 
3482:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3483:..\FreeRTOS/tasks.c **** 
3484:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3485:..\FreeRTOS/tasks.c **** 	{
 3071              		.loc 1 3485 0
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 0
 3074              		@ frame_needed = 0, uses_anonymous_args = 0
 3075              	.LVL318:
3486:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3487:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3488:..\FreeRTOS/tasks.c **** 
3489:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 3076              		.loc 1 3489 0
 3077 0000 0028     		cmp	r0, #0
 3078 0002 38D0     		beq	.L298
3485:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3079              		.loc 1 3485 0
 3080 0004 38B5     		push	{r3, r4, r5, lr}
 3081              		.cfi_def_cfa_offset 16
 3082              		.cfi_offset 3, -16
 3083              		.cfi_offset 4, -12
 3084              		.cfi_offset 5, -8
 3085              		.cfi_offset 14, -4
 3086 0006 0346     		mov	r3, r0
3490:..\FreeRTOS/tasks.c **** 		{
3491:..\FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3492:..\FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3493:..\FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3494:..\FreeRTOS/tasks.c **** 			be the running state task. */
3495:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3496:..\FreeRTOS/tasks.c **** 
3497:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3498:..\FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3087              		.loc 1 3498 0
 3088 0008 426C     		ldr	r2, [r0, #68]
 3089 000a 013A     		subs	r2, r2, #1
 3090 000c 4264     		str	r2, [r0, #68]
3499:..\FreeRTOS/tasks.c **** 
3500:..\FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3501:..\FreeRTOS/tasks.c **** 			task? */
3502:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3091              		.loc 1 3502 0
 3092 000e C06A     		ldr	r0, [r0, #44]
 3093              	.LVL319:
 3094 0010 196C     		ldr	r1, [r3, #64]
 3095 0012 8842     		cmp	r0, r1
 3096 0014 31D0     		beq	.L299
3503:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 127


3504:..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3505:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 3097              		.loc 1 3505 0
 3098 0016 92BB     		cbnz	r2, .L300
 3099 0018 1C46     		mov	r4, r3
3506:..\FreeRTOS/tasks.c **** 				{
3507:..\FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3508:..\FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3509:..\FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3510:..\FreeRTOS/tasks.c **** 					holding	task then it must be the running state task.  Remove
3511:..\FreeRTOS/tasks.c **** 					the	holding task from the ready	list. */
3512:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3100              		.loc 1 3512 0
 3101 001a 1D1D     		adds	r5, r3, #4
 3102 001c 2846     		mov	r0, r5
 3103 001e FFF7FEFF 		bl	uxListRemove
 3104              	.LVL320:
 3105 0022 80B9     		cbnz	r0, .L297
3513:..\FreeRTOS/tasks.c **** 					{
3514:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3106              		.loc 1 3514 0
 3107 0024 E26A     		ldr	r2, [r4, #44]
 3108 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3109 002a 8B00     		lsls	r3, r1, #2
 3110 002c 1549     		ldr	r1, .L302
 3111 002e 0B44     		add	r3, r3, r1
 3112 0030 1B6B     		ldr	r3, [r3, #48]
 3113 0032 43B9     		cbnz	r3, .L297
 3114              		.loc 1 3514 0 is_stmt 0 discriminator 1
 3115 0034 0123     		movs	r3, #1
 3116 0036 03FA02F2 		lsl	r2, r3, r2
 3117 003a D1F8E830 		ldr	r3, [r1, #232]
 3118 003e 23EA0202 		bic	r2, r3, r2
 3119 0042 C1F8E820 		str	r2, [r1, #232]
 3120              	.L297:
3515:..\FreeRTOS/tasks.c **** 					}
3516:..\FreeRTOS/tasks.c **** 					else
3517:..\FreeRTOS/tasks.c **** 					{
3518:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3519:..\FreeRTOS/tasks.c **** 					}
3520:..\FreeRTOS/tasks.c **** 
3521:..\FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3522:..\FreeRTOS/tasks.c **** 					new	ready list. */
3523:..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3524:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 3121              		.loc 1 3524 0 is_stmt 1
 3122 0046 236C     		ldr	r3, [r4, #64]
 3123 0048 E362     		str	r3, [r4, #44]
3525:..\FreeRTOS/tasks.c **** 
3526:..\FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3527:..\FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3528:..\FreeRTOS/tasks.c **** 					running to give back the mutex. */
3529:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 3124              		.loc 1 3529 0
 3125 004a C3F10502 		rsb	r2, r3, #5
 3126 004e A261     		str	r2, [r4, #24]
3530:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 128


 3127              		.loc 1 3530 0
 3128 0050 0124     		movs	r4, #1
 3129              	.LVL321:
 3130 0052 04FA03F1 		lsl	r1, r4, r3
 3131 0056 0B48     		ldr	r0, .L302
 3132 0058 D0F8E820 		ldr	r2, [r0, #232]
 3133 005c 0A43     		orrs	r2, r2, r1
 3134 005e C0F8E820 		str	r2, [r0, #232]
 3135 0062 3030     		adds	r0, r0, #48
 3136 0064 03EB8303 		add	r3, r3, r3, lsl #2
 3137 0068 9A00     		lsls	r2, r3, #2
 3138 006a 2946     		mov	r1, r5
 3139 006c 1044     		add	r0, r0, r2
 3140 006e FFF7FEFF 		bl	vListInsertEnd
 3141              	.LVL322:
3531:..\FreeRTOS/tasks.c **** 
3532:..\FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3533:..\FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3534:..\FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3535:..\FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3536:..\FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3537:..\FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3538:..\FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3539:..\FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
3540:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 3142              		.loc 1 3540 0
 3143 0072 2046     		mov	r0, r4
 3144 0074 38BD     		pop	{r3, r4, r5, pc}
 3145              	.LVL323:
 3146              	.L298:
 3147              		.cfi_def_cfa_offset 0
 3148              		.cfi_restore 3
 3149              		.cfi_restore 4
 3150              		.cfi_restore 5
 3151              		.cfi_restore 14
3487:..\FreeRTOS/tasks.c **** 
 3152              		.loc 1 3487 0
 3153 0076 0020     		movs	r0, #0
 3154              	.LVL324:
3541:..\FreeRTOS/tasks.c **** 				}
3542:..\FreeRTOS/tasks.c **** 				else
3543:..\FreeRTOS/tasks.c **** 				{
3544:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3545:..\FreeRTOS/tasks.c **** 				}
3546:..\FreeRTOS/tasks.c **** 			}
3547:..\FreeRTOS/tasks.c **** 			else
3548:..\FreeRTOS/tasks.c **** 			{
3549:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3550:..\FreeRTOS/tasks.c **** 			}
3551:..\FreeRTOS/tasks.c **** 		}
3552:..\FreeRTOS/tasks.c **** 		else
3553:..\FreeRTOS/tasks.c **** 		{
3554:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3555:..\FreeRTOS/tasks.c **** 		}
3556:..\FreeRTOS/tasks.c **** 
3557:..\FreeRTOS/tasks.c **** 		return xReturn;
3558:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 129


 3155              		.loc 1 3558 0
 3156 0078 7047     		bx	lr
 3157              	.LVL325:
 3158              	.L299:
 3159              		.cfi_def_cfa_offset 16
 3160              		.cfi_offset 3, -16
 3161              		.cfi_offset 4, -12
 3162              		.cfi_offset 5, -8
 3163              		.cfi_offset 14, -4
3487:..\FreeRTOS/tasks.c **** 
 3164              		.loc 1 3487 0
 3165 007a 0020     		movs	r0, #0
 3166 007c 38BD     		pop	{r3, r4, r5, pc}
 3167              	.LVL326:
 3168              	.L300:
 3169 007e 0020     		movs	r0, #0
 3170              	.LVL327:
 3171              		.loc 1 3558 0
 3172 0080 38BD     		pop	{r3, r4, r5, pc}
 3173              	.LVL328:
 3174              	.L303:
 3175 0082 00BF     		.align	2
 3176              	.L302:
 3177 0084 00000000 		.word	.LANCHOR0
 3178              		.cfi_endproc
 3179              	.LFE104:
 3180              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3181              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3182              		.align	2
 3183              		.global	uxTaskResetEventItemValue
 3184              		.thumb
 3185              		.thumb_func
 3186              		.type	uxTaskResetEventItemValue, %function
 3187              	uxTaskResetEventItemValue:
 3188              	.LFB105:
3559:..\FreeRTOS/tasks.c **** 
3560:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3561:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3562:..\FreeRTOS/tasks.c **** 
3563:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3564:..\FreeRTOS/tasks.c **** 
3565:..\FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3566:..\FreeRTOS/tasks.c **** 	{
3567:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3568:..\FreeRTOS/tasks.c **** 
3569:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3570:..\FreeRTOS/tasks.c **** 		{
3571:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3572:..\FreeRTOS/tasks.c **** 
3573:..\FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3574:..\FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3575:..\FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3576:..\FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3577:..\FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3578:..\FreeRTOS/tasks.c **** 			critical section. */
3579:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3580:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 130


3581:..\FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3582:..\FreeRTOS/tasks.c **** 			}
3583:..\FreeRTOS/tasks.c **** 		}
3584:..\FreeRTOS/tasks.c **** 		else
3585:..\FreeRTOS/tasks.c **** 		{
3586:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3587:..\FreeRTOS/tasks.c **** 		}
3588:..\FreeRTOS/tasks.c **** 	}
3589:..\FreeRTOS/tasks.c **** 
3590:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3591:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:..\FreeRTOS/tasks.c **** 
3593:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3594:..\FreeRTOS/tasks.c **** 
3595:..\FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3596:..\FreeRTOS/tasks.c **** 	{
3597:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:..\FreeRTOS/tasks.c **** 		{
3599:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3600:..\FreeRTOS/tasks.c **** 			{
3601:..\FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3602:..\FreeRTOS/tasks.c **** 
3603:..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3604:..\FreeRTOS/tasks.c **** 				{
3605:..\FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3606:..\FreeRTOS/tasks.c **** 				}
3607:..\FreeRTOS/tasks.c **** 				else
3608:..\FreeRTOS/tasks.c **** 				{
3609:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3610:..\FreeRTOS/tasks.c **** 				}
3611:..\FreeRTOS/tasks.c **** 			}
3612:..\FreeRTOS/tasks.c **** 			else
3613:..\FreeRTOS/tasks.c **** 			{
3614:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3615:..\FreeRTOS/tasks.c **** 			}
3616:..\FreeRTOS/tasks.c **** 		}
3617:..\FreeRTOS/tasks.c **** 		else
3618:..\FreeRTOS/tasks.c **** 		{
3619:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3620:..\FreeRTOS/tasks.c **** 		}
3621:..\FreeRTOS/tasks.c **** 	}
3622:..\FreeRTOS/tasks.c **** 
3623:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3624:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:..\FreeRTOS/tasks.c **** 
3626:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3627:..\FreeRTOS/tasks.c **** 
3628:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3629:..\FreeRTOS/tasks.c **** 	{
3630:..\FreeRTOS/tasks.c **** 	size_t x;
3631:..\FreeRTOS/tasks.c **** 
3632:..\FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
3633:..\FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3634:..\FreeRTOS/tasks.c **** 
3635:..\FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3636:..\FreeRTOS/tasks.c **** 		printed out. */
3637:..\FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 131


3638:..\FreeRTOS/tasks.c **** 		{
3639:..\FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
3640:..\FreeRTOS/tasks.c **** 		}
3641:..\FreeRTOS/tasks.c **** 
3642:..\FreeRTOS/tasks.c **** 		/* Terminate. */
3643:..\FreeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
3644:..\FreeRTOS/tasks.c **** 
3645:..\FreeRTOS/tasks.c **** 		/* Return the new end of string. */
3646:..\FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
3647:..\FreeRTOS/tasks.c **** 	}
3648:..\FreeRTOS/tasks.c **** 
3649:..\FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3650:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3651:..\FreeRTOS/tasks.c **** 
3652:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3653:..\FreeRTOS/tasks.c **** 
3654:..\FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3655:..\FreeRTOS/tasks.c **** 	{
3656:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3657:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3658:..\FreeRTOS/tasks.c **** 	char cStatus;
3659:..\FreeRTOS/tasks.c **** 
3660:..\FreeRTOS/tasks.c **** 		/*
3661:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3662:..\FreeRTOS/tasks.c **** 		 *
3663:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3664:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3665:..\FreeRTOS/tasks.c **** 		 * scheduler.
3666:..\FreeRTOS/tasks.c **** 		 *
3667:..\FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3668:..\FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3669:..\FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3670:..\FreeRTOS/tasks.c **** 		 *
3671:..\FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3672:..\FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3673:..\FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3674:..\FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3675:..\FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3676:..\FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3677:..\FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3678:..\FreeRTOS/tasks.c **** 		 *
3679:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3680:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3681:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3682:..\FreeRTOS/tasks.c **** 		 */
3683:..\FreeRTOS/tasks.c **** 
3684:..\FreeRTOS/tasks.c **** 
3685:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3686:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3687:..\FreeRTOS/tasks.c **** 
3688:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3689:..\FreeRTOS/tasks.c **** 		function is executing. */
3690:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3691:..\FreeRTOS/tasks.c **** 
3692:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3693:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3694:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 132


3695:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3696:..\FreeRTOS/tasks.c **** 		{
3697:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3698:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3699:..\FreeRTOS/tasks.c **** 
3700:..\FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3701:..\FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3702:..\FreeRTOS/tasks.c **** 			{
3703:..\FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3704:..\FreeRTOS/tasks.c **** 				{
3705:..\FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3706:..\FreeRTOS/tasks.c **** 										break;
3707:..\FreeRTOS/tasks.c **** 
3708:..\FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3709:..\FreeRTOS/tasks.c **** 										break;
3710:..\FreeRTOS/tasks.c **** 
3711:..\FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3712:..\FreeRTOS/tasks.c **** 										break;
3713:..\FreeRTOS/tasks.c **** 
3714:..\FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
3715:..\FreeRTOS/tasks.c **** 										break;
3716:..\FreeRTOS/tasks.c **** 
3717:..\FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
3718:..\FreeRTOS/tasks.c **** 										to prevent static checking errors. */
3719:..\FreeRTOS/tasks.c **** 										cStatus = 0x00;
3720:..\FreeRTOS/tasks.c **** 										break;
3721:..\FreeRTOS/tasks.c **** 				}
3722:..\FreeRTOS/tasks.c **** 
3723:..\FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3724:..\FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
3725:..\FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3726:..\FreeRTOS/tasks.c **** 
3727:..\FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
3728:..\FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
3729:..\FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3730:..\FreeRTOS/tasks.c **** 			}
3731:..\FreeRTOS/tasks.c **** 
3732:..\FreeRTOS/tasks.c **** 			/* Free the array again. */
3733:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3734:..\FreeRTOS/tasks.c **** 		}
3735:..\FreeRTOS/tasks.c **** 		else
3736:..\FreeRTOS/tasks.c **** 		{
3737:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3738:..\FreeRTOS/tasks.c **** 		}
3739:..\FreeRTOS/tasks.c **** 	}
3740:..\FreeRTOS/tasks.c **** 
3741:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3742:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3743:..\FreeRTOS/tasks.c **** 
3744:..\FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3745:..\FreeRTOS/tasks.c **** 
3746:..\FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3747:..\FreeRTOS/tasks.c **** 	{
3748:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3749:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3750:..\FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3751:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 133


3752:..\FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3753:..\FreeRTOS/tasks.c **** 		{
3754:..\FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3755:..\FreeRTOS/tasks.c **** 		}
3756:..\FreeRTOS/tasks.c **** 		#endif
3757:..\FreeRTOS/tasks.c **** 
3758:..\FreeRTOS/tasks.c **** 		/*
3759:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3760:..\FreeRTOS/tasks.c **** 		 *
3761:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3762:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3763:..\FreeRTOS/tasks.c **** 		 * scheduler.
3764:..\FreeRTOS/tasks.c **** 		 *
3765:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3766:..\FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3767:..\FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3768:..\FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3769:..\FreeRTOS/tasks.c **** 		 *
3770:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3771:..\FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3772:..\FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3773:..\FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3774:..\FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3775:..\FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3776:..\FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3777:..\FreeRTOS/tasks.c **** 		 *
3778:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3779:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3780:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3781:..\FreeRTOS/tasks.c **** 		 */
3782:..\FreeRTOS/tasks.c **** 
3783:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3784:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3785:..\FreeRTOS/tasks.c **** 
3786:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3787:..\FreeRTOS/tasks.c **** 		function is executing. */
3788:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3789:..\FreeRTOS/tasks.c **** 
3790:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3791:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3792:..\FreeRTOS/tasks.c **** 
3793:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3794:..\FreeRTOS/tasks.c **** 		{
3795:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3796:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3797:..\FreeRTOS/tasks.c **** 
3798:..\FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3799:..\FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3800:..\FreeRTOS/tasks.c **** 
3801:..\FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3802:..\FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3803:..\FreeRTOS/tasks.c **** 			{
3804:..\FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3805:..\FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3806:..\FreeRTOS/tasks.c **** 				{
3807:..\FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3808:..\FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 134


3809:..\FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3810:..\FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3811:..\FreeRTOS/tasks.c **** 
3812:..\FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
3813:..\FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
3814:..\FreeRTOS/tasks.c **** 					easily. */
3815:..\FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3816:..\FreeRTOS/tasks.c **** 
3817:..\FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3818:..\FreeRTOS/tasks.c **** 					{
3819:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3820:..\FreeRTOS/tasks.c **** 						{
3821:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3822:..\FreeRTOS/tasks.c **** 						}
3823:..\FreeRTOS/tasks.c **** 						#else
3824:..\FreeRTOS/tasks.c **** 						{
3825:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3826:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
3827:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3828:..\FreeRTOS/tasks.c **** 						}
3829:..\FreeRTOS/tasks.c **** 						#endif
3830:..\FreeRTOS/tasks.c **** 					}
3831:..\FreeRTOS/tasks.c **** 					else
3832:..\FreeRTOS/tasks.c **** 					{
3833:..\FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3834:..\FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3835:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3836:..\FreeRTOS/tasks.c **** 						{
3837:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3838:..\FreeRTOS/tasks.c **** 						}
3839:..\FreeRTOS/tasks.c **** 						#else
3840:..\FreeRTOS/tasks.c **** 						{
3841:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3842:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
3843:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3844:..\FreeRTOS/tasks.c **** 						}
3845:..\FreeRTOS/tasks.c **** 						#endif
3846:..\FreeRTOS/tasks.c **** 					}
3847:..\FreeRTOS/tasks.c **** 
3848:..\FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3849:..\FreeRTOS/tasks.c **** 				}
3850:..\FreeRTOS/tasks.c **** 			}
3851:..\FreeRTOS/tasks.c **** 			else
3852:..\FreeRTOS/tasks.c **** 			{
3853:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3854:..\FreeRTOS/tasks.c **** 			}
3855:..\FreeRTOS/tasks.c **** 
3856:..\FreeRTOS/tasks.c **** 			/* Free the array again. */
3857:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3858:..\FreeRTOS/tasks.c **** 		}
3859:..\FreeRTOS/tasks.c **** 		else
3860:..\FreeRTOS/tasks.c **** 		{
3861:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3862:..\FreeRTOS/tasks.c **** 		}
3863:..\FreeRTOS/tasks.c **** 	}
3864:..\FreeRTOS/tasks.c **** 
3865:..\FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 135


3866:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3867:..\FreeRTOS/tasks.c **** 
3868:..\FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
3869:..\FreeRTOS/tasks.c **** {
 3189              		.loc 1 3869 0
 3190              		.cfi_startproc
 3191              		@ args = 0, pretend = 0, frame = 0
 3192              		@ frame_needed = 0, uses_anonymous_args = 0
 3193              		@ link register save eliminated.
3870:..\FreeRTOS/tasks.c **** TickType_t uxReturn;
3871:..\FreeRTOS/tasks.c **** 
3872:..\FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 3194              		.loc 1 3872 0
 3195 0000 064B     		ldr	r3, .L305
 3196 0002 D3F8D420 		ldr	r2, [r3, #212]
 3197 0006 9069     		ldr	r0, [r2, #24]
 3198              	.LVL329:
3873:..\FreeRTOS/tasks.c **** 
3874:..\FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3875:..\FreeRTOS/tasks.c **** 	queues and semaphores. */
3876:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 3199              		.loc 1 3876 0
 3200 0008 D3F8D420 		ldr	r2, [r3, #212]
 3201 000c D3F8D430 		ldr	r3, [r3, #212]
 3202 0010 DB6A     		ldr	r3, [r3, #44]
 3203 0012 C3F10503 		rsb	r3, r3, #5
 3204 0016 9361     		str	r3, [r2, #24]
3877:..\FreeRTOS/tasks.c **** 
3878:..\FreeRTOS/tasks.c **** 	return uxReturn;
3879:..\FreeRTOS/tasks.c **** }
 3205              		.loc 1 3879 0
 3206 0018 7047     		bx	lr
 3207              	.L306:
 3208 001a 00BF     		.align	2
 3209              	.L305:
 3210 001c 00000000 		.word	.LANCHOR0
 3211              		.cfi_endproc
 3212              	.LFE105:
 3213              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3214              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3215              		.align	2
 3216              		.global	pvTaskIncrementMutexHeldCount
 3217              		.thumb
 3218              		.thumb_func
 3219              		.type	pvTaskIncrementMutexHeldCount, %function
 3220              	pvTaskIncrementMutexHeldCount:
 3221              	.LFB106:
3880:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3881:..\FreeRTOS/tasks.c **** 
3882:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3883:..\FreeRTOS/tasks.c **** 
3884:..\FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3885:..\FreeRTOS/tasks.c **** 	{
 3222              		.loc 1 3885 0
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 0
 3225              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 136


 3226              		@ link register save eliminated.
3886:..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3887:..\FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3888:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 3227              		.loc 1 3888 0
 3228 0000 064B     		ldr	r3, .L309
 3229 0002 D3F8D430 		ldr	r3, [r3, #212]
 3230 0006 2BB1     		cbz	r3, .L308
3889:..\FreeRTOS/tasks.c **** 		{
3890:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 3231              		.loc 1 3890 0
 3232 0008 044B     		ldr	r3, .L309
 3233 000a D3F8D420 		ldr	r2, [r3, #212]
 3234 000e 536C     		ldr	r3, [r2, #68]
 3235 0010 0133     		adds	r3, r3, #1
 3236 0012 5364     		str	r3, [r2, #68]
 3237              	.L308:
3891:..\FreeRTOS/tasks.c **** 		}
3892:..\FreeRTOS/tasks.c **** 
3893:..\FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 3238              		.loc 1 3893 0
 3239 0014 014B     		ldr	r3, .L309
 3240 0016 D3F8D400 		ldr	r0, [r3, #212]
3894:..\FreeRTOS/tasks.c **** 	}
 3241              		.loc 1 3894 0
 3242 001a 7047     		bx	lr
 3243              	.L310:
 3244              		.align	2
 3245              	.L309:
 3246 001c 00000000 		.word	.LANCHOR0
 3247              		.cfi_endproc
 3248              	.LFE106:
 3249              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3250              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3251              		.align	2
 3252              		.global	ulTaskNotifyTake
 3253              		.thumb
 3254              		.thumb_func
 3255              		.type	ulTaskNotifyTake, %function
 3256              	ulTaskNotifyTake:
 3257              	.LFB107:
3895:..\FreeRTOS/tasks.c **** 
3896:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3897:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3898:..\FreeRTOS/tasks.c **** 
3899:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3900:..\FreeRTOS/tasks.c **** 
3901:..\FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3902:..\FreeRTOS/tasks.c **** 	{
 3258              		.loc 1 3902 0
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 0
 3261              		@ frame_needed = 0, uses_anonymous_args = 0
 3262              	.LVL330:
 3263 0000 38B5     		push	{r3, r4, r5, lr}
 3264              		.cfi_def_cfa_offset 16
 3265              		.cfi_offset 3, -16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 137


 3266              		.cfi_offset 4, -12
 3267              		.cfi_offset 5, -8
 3268              		.cfi_offset 14, -4
 3269 0002 0546     		mov	r5, r0
 3270 0004 0C46     		mov	r4, r1
3903:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
3904:..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
3905:..\FreeRTOS/tasks.c **** 
3906:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3271              		.loc 1 3906 0
 3272 0006 FFF7FEFF 		bl	vPortEnterCritical
 3273              	.LVL331:
3907:..\FreeRTOS/tasks.c **** 		{
3908:..\FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3909:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 3274              		.loc 1 3909 0
 3275 000a 294B     		ldr	r3, .L319
 3276 000c D3F8D430 		ldr	r3, [r3, #212]
 3277 0010 9B6C     		ldr	r3, [r3, #72]
 3278 0012 63BB     		cbnz	r3, .L312
3910:..\FreeRTOS/tasks.c **** 			{
3911:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
3912:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 3279              		.loc 1 3912 0
 3280 0014 264B     		ldr	r3, .L319
 3281 0016 D3F8D430 		ldr	r3, [r3, #212]
 3282 001a 0122     		movs	r2, #1
 3283 001c 83F84C20 		strb	r2, [r3, #76]
3913:..\FreeRTOS/tasks.c **** 
3914:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 3284              		.loc 1 3914 0
 3285 0020 2CB3     		cbz	r4, .L312
3915:..\FreeRTOS/tasks.c **** 				{
3916:..\FreeRTOS/tasks.c **** 					/* The task is going to block.  First it must be removed
3917:..\FreeRTOS/tasks.c **** 					from the ready list. */
3918:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3286              		.loc 1 3918 0
 3287 0022 234B     		ldr	r3, .L319
 3288 0024 D3F8D400 		ldr	r0, [r3, #212]
 3289 0028 0430     		adds	r0, r0, #4
 3290 002a FFF7FEFF 		bl	uxListRemove
 3291              	.LVL332:
 3292 002e 60B9     		cbnz	r0, .L313
3919:..\FreeRTOS/tasks.c **** 					{
3920:..\FreeRTOS/tasks.c **** 						/* The current task must be in a ready list, so there is
3921:..\FreeRTOS/tasks.c **** 						no need to check, and the port reset macro can be called
3922:..\FreeRTOS/tasks.c **** 						directly. */
3923:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3293              		.loc 1 3923 0
 3294 0030 1F4B     		ldr	r3, .L319
 3295 0032 D3F8D420 		ldr	r2, [r3, #212]
 3296 0036 D16A     		ldr	r1, [r2, #44]
 3297 0038 0122     		movs	r2, #1
 3298 003a 02FA01F1 		lsl	r1, r2, r1
 3299 003e D3F8E820 		ldr	r2, [r3, #232]
 3300 0042 22EA0102 		bic	r2, r2, r1
 3301 0046 C3F8E820 		str	r2, [r3, #232]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 138


 3302              	.L313:
3924:..\FreeRTOS/tasks.c **** 					}
3925:..\FreeRTOS/tasks.c **** 					else
3926:..\FreeRTOS/tasks.c **** 					{
3927:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3928:..\FreeRTOS/tasks.c **** 					}
3929:..\FreeRTOS/tasks.c **** 
3930:..\FreeRTOS/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3931:..\FreeRTOS/tasks.c **** 					{
3932:..\FreeRTOS/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 3303              		.loc 1 3932 0
 3304 004a B4F1FF3F 		cmp	r4, #-1
 3305 004e 06D1     		bne	.L314
3933:..\FreeRTOS/tasks.c **** 						{
3934:..\FreeRTOS/tasks.c **** 							/* Add the task to the suspended task list instead
3935:..\FreeRTOS/tasks.c **** 							of a delayed task list to ensure the task is not
3936:..\FreeRTOS/tasks.c **** 							woken by a timing event.  It will block
3937:..\FreeRTOS/tasks.c **** 							indefinitely. */
3938:..\FreeRTOS/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3306              		.loc 1 3938 0
 3307 0050 1748     		ldr	r0, .L319
 3308 0052 D0F8D410 		ldr	r1, [r0, #212]
 3309 0056 0431     		adds	r1, r1, #4
 3310 0058 FFF7FEFF 		bl	vListInsertEnd
 3311              	.LVL333:
 3312 005c 05E0     		b	.L315
 3313              	.L314:
3939:..\FreeRTOS/tasks.c **** 						}
3940:..\FreeRTOS/tasks.c **** 						else
3941:..\FreeRTOS/tasks.c **** 						{
3942:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
3943:..\FreeRTOS/tasks.c **** 							woken if no notification events occur.  This may
3944:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3945:..\FreeRTOS/tasks.c **** 							handle it. */
3946:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 3314              		.loc 1 3946 0
 3315 005e 144B     		ldr	r3, .L319
 3316 0060 D3F8D800 		ldr	r0, [r3, #216]
 3317              	.LVL334:
3947:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 3318              		.loc 1 3947 0
 3319 0064 2044     		add	r0, r0, r4
 3320              	.LVL335:
 3321 0066 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3322              	.LVL336:
 3323              	.L315:
3948:..\FreeRTOS/tasks.c **** 						}
3949:..\FreeRTOS/tasks.c **** 					}
3950:..\FreeRTOS/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3951:..\FreeRTOS/tasks.c **** 					{
3952:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
3953:..\FreeRTOS/tasks.c **** 							woken if the event does not occur.  This may
3954:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3955:..\FreeRTOS/tasks.c **** 							handle it. */
3956:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3957:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3958:..\FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 139


3959:..\FreeRTOS/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3960:..\FreeRTOS/tasks.c **** 
3961:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3962:..\FreeRTOS/tasks.c **** 
3963:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
3964:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
3965:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
3966:..\FreeRTOS/tasks.c **** 					application code should ever do. */
3967:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 3324              		.loc 1 3967 0
 3325 006a FFF7FEFF 		bl	vPortYield
 3326              	.LVL337:
 3327              	.L312:
3968:..\FreeRTOS/tasks.c **** 				}
3969:..\FreeRTOS/tasks.c **** 				else
3970:..\FreeRTOS/tasks.c **** 				{
3971:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3972:..\FreeRTOS/tasks.c **** 				}
3973:..\FreeRTOS/tasks.c **** 			}
3974:..\FreeRTOS/tasks.c **** 			else
3975:..\FreeRTOS/tasks.c **** 			{
3976:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3977:..\FreeRTOS/tasks.c **** 			}
3978:..\FreeRTOS/tasks.c **** 		}
3979:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3328              		.loc 1 3979 0
 3329 006e FFF7FEFF 		bl	vPortExitCritical
 3330              	.LVL338:
3980:..\FreeRTOS/tasks.c **** 
3981:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3331              		.loc 1 3981 0
 3332 0072 FFF7FEFF 		bl	vPortEnterCritical
 3333              	.LVL339:
3982:..\FreeRTOS/tasks.c **** 		{
3983:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
3984:..\FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 3334              		.loc 1 3984 0
 3335 0076 0E4B     		ldr	r3, .L319
 3336 0078 D3F8D430 		ldr	r3, [r3, #212]
 3337 007c 9C6C     		ldr	r4, [r3, #72]
 3338              	.LVL340:
3985:..\FreeRTOS/tasks.c **** 
3986:..\FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
 3339              		.loc 1 3986 0
 3340 007e 64B1     		cbz	r4, .L316
3987:..\FreeRTOS/tasks.c **** 			{
3988:..\FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 3341              		.loc 1 3988 0
 3342 0080 2DB1     		cbz	r5, .L317
3989:..\FreeRTOS/tasks.c **** 				{
3990:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 3343              		.loc 1 3990 0
 3344 0082 0B4B     		ldr	r3, .L319
 3345 0084 D3F8D430 		ldr	r3, [r3, #212]
 3346 0088 0022     		movs	r2, #0
 3347 008a 9A64     		str	r2, [r3, #72]
 3348 008c 05E0     		b	.L316
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 140


 3349              	.L317:
3991:..\FreeRTOS/tasks.c **** 				}
3992:..\FreeRTOS/tasks.c **** 				else
3993:..\FreeRTOS/tasks.c **** 				{
3994:..\FreeRTOS/tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
 3350              		.loc 1 3994 0
 3351 008e 084B     		ldr	r3, .L319
 3352 0090 D3F8D420 		ldr	r2, [r3, #212]
 3353 0094 936C     		ldr	r3, [r2, #72]
 3354 0096 013B     		subs	r3, r3, #1
 3355 0098 9364     		str	r3, [r2, #72]
 3356              	.L316:
3995:..\FreeRTOS/tasks.c **** 				}
3996:..\FreeRTOS/tasks.c **** 			}
3997:..\FreeRTOS/tasks.c **** 			else
3998:..\FreeRTOS/tasks.c **** 			{
3999:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4000:..\FreeRTOS/tasks.c **** 			}
4001:..\FreeRTOS/tasks.c **** 
4002:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 3357              		.loc 1 4002 0
 3358 009a 054B     		ldr	r3, .L319
 3359 009c D3F8D430 		ldr	r3, [r3, #212]
 3360 00a0 0022     		movs	r2, #0
 3361 00a2 83F84C20 		strb	r2, [r3, #76]
4003:..\FreeRTOS/tasks.c **** 		}
4004:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3362              		.loc 1 4004 0
 3363 00a6 FFF7FEFF 		bl	vPortExitCritical
 3364              	.LVL341:
4005:..\FreeRTOS/tasks.c **** 
4006:..\FreeRTOS/tasks.c **** 		return ulReturn;
4007:..\FreeRTOS/tasks.c **** 	}
 3365              		.loc 1 4007 0
 3366 00aa 2046     		mov	r0, r4
 3367 00ac 38BD     		pop	{r3, r4, r5, pc}
 3368              	.LVL342:
 3369              	.L320:
 3370 00ae 00BF     		.align	2
 3371              	.L319:
 3372 00b0 00000000 		.word	.LANCHOR0
 3373              		.cfi_endproc
 3374              	.LFE107:
 3375              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3376              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3377              		.align	2
 3378              		.global	xTaskNotifyWait
 3379              		.thumb
 3380              		.thumb_func
 3381              		.type	xTaskNotifyWait, %function
 3382              	xTaskNotifyWait:
 3383              	.LFB108:
4008:..\FreeRTOS/tasks.c **** 
4009:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4010:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4011:..\FreeRTOS/tasks.c **** 
4012:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 141


4013:..\FreeRTOS/tasks.c **** 
4014:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4015:..\FreeRTOS/tasks.c **** 	{
 3384              		.loc 1 4015 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
 3388              	.LVL343:
 3389 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3390              		.cfi_def_cfa_offset 24
 3391              		.cfi_offset 3, -24
 3392              		.cfi_offset 4, -20
 3393              		.cfi_offset 5, -16
 3394              		.cfi_offset 6, -12
 3395              		.cfi_offset 7, -8
 3396              		.cfi_offset 14, -4
 3397 0002 0746     		mov	r7, r0
 3398 0004 0C46     		mov	r4, r1
 3399 0006 1546     		mov	r5, r2
 3400 0008 1E46     		mov	r6, r3
4016:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
4017:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4018:..\FreeRTOS/tasks.c **** 
4019:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3401              		.loc 1 4019 0
 3402 000a FFF7FEFF 		bl	vPortEnterCritical
 3403              	.LVL344:
4020:..\FreeRTOS/tasks.c **** 		{
4021:..\FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4022:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 3404              		.loc 1 4022 0
 3405 000e 304B     		ldr	r3, .L330
 3406 0010 D3F8D430 		ldr	r3, [r3, #212]
 3407 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3408 0018 DBB2     		uxtb	r3, r3
 3409 001a 022B     		cmp	r3, #2
 3410 001c 32D0     		beq	.L322
4023:..\FreeRTOS/tasks.c **** 			{
4024:..\FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4025:..\FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4026:..\FreeRTOS/tasks.c **** 				clear the value to zero. */
4027:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 3411              		.loc 1 4027 0
 3412 001e 2C4B     		ldr	r3, .L330
 3413 0020 D3F8D420 		ldr	r2, [r3, #212]
 3414 0024 906C     		ldr	r0, [r2, #72]
 3415 0026 20EA0700 		bic	r0, r0, r7
 3416 002a 9064     		str	r0, [r2, #72]
4028:..\FreeRTOS/tasks.c **** 
4029:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4030:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 3417              		.loc 1 4030 0
 3418 002c D3F8D430 		ldr	r3, [r3, #212]
 3419 0030 0122     		movs	r2, #1
 3420 0032 83F84C20 		strb	r2, [r3, #76]
4031:..\FreeRTOS/tasks.c **** 
4032:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 142


 3421              		.loc 1 4032 0
 3422 0036 2EB3     		cbz	r6, .L322
4033:..\FreeRTOS/tasks.c **** 				{
4034:..\FreeRTOS/tasks.c **** 					/* The task is going to block.  First it must be removed
4035:..\FreeRTOS/tasks.c **** 					from the	ready list. */
4036:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3423              		.loc 1 4036 0
 3424 0038 254B     		ldr	r3, .L330
 3425 003a D3F8D400 		ldr	r0, [r3, #212]
 3426 003e 0430     		adds	r0, r0, #4
 3427 0040 FFF7FEFF 		bl	uxListRemove
 3428              	.LVL345:
 3429 0044 60B9     		cbnz	r0, .L323
4037:..\FreeRTOS/tasks.c **** 					{
4038:..\FreeRTOS/tasks.c **** 						/* The current task must be in a ready list, so there is
4039:..\FreeRTOS/tasks.c **** 						no need to check, and the port reset macro can be called
4040:..\FreeRTOS/tasks.c **** 						directly. */
4041:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3430              		.loc 1 4041 0
 3431 0046 224B     		ldr	r3, .L330
 3432 0048 D3F8D420 		ldr	r2, [r3, #212]
 3433 004c D16A     		ldr	r1, [r2, #44]
 3434 004e 0122     		movs	r2, #1
 3435 0050 02FA01F1 		lsl	r1, r2, r1
 3436 0054 D3F8E820 		ldr	r2, [r3, #232]
 3437 0058 22EA0102 		bic	r2, r2, r1
 3438 005c C3F8E820 		str	r2, [r3, #232]
 3439              	.L323:
4042:..\FreeRTOS/tasks.c **** 					}
4043:..\FreeRTOS/tasks.c **** 					else
4044:..\FreeRTOS/tasks.c **** 					{
4045:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4046:..\FreeRTOS/tasks.c **** 					}
4047:..\FreeRTOS/tasks.c **** 
4048:..\FreeRTOS/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4049:..\FreeRTOS/tasks.c **** 					{
4050:..\FreeRTOS/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 3440              		.loc 1 4050 0
 3441 0060 B6F1FF3F 		cmp	r6, #-1
 3442 0064 06D1     		bne	.L324
4051:..\FreeRTOS/tasks.c **** 						{
4052:..\FreeRTOS/tasks.c **** 							/* Add the task to the suspended task list instead
4053:..\FreeRTOS/tasks.c **** 							of a delayed task list to ensure the task is not
4054:..\FreeRTOS/tasks.c **** 							woken by a timing event.  It will block
4055:..\FreeRTOS/tasks.c **** 							indefinitely. */
4056:..\FreeRTOS/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3443              		.loc 1 4056 0
 3444 0066 1A48     		ldr	r0, .L330
 3445 0068 D0F8D410 		ldr	r1, [r0, #212]
 3446 006c 0431     		adds	r1, r1, #4
 3447 006e FFF7FEFF 		bl	vListInsertEnd
 3448              	.LVL346:
 3449 0072 05E0     		b	.L325
 3450              	.L324:
4057:..\FreeRTOS/tasks.c **** 						}
4058:..\FreeRTOS/tasks.c **** 						else
4059:..\FreeRTOS/tasks.c **** 						{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 143


4060:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
4061:..\FreeRTOS/tasks.c **** 							woken if no notification events occur.  This may
4062:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4063:..\FreeRTOS/tasks.c **** 							handle it. */
4064:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 3451              		.loc 1 4064 0
 3452 0074 164B     		ldr	r3, .L330
 3453 0076 D3F8D800 		ldr	r0, [r3, #216]
 3454              	.LVL347:
4065:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 3455              		.loc 1 4065 0
 3456 007a 3044     		add	r0, r0, r6
 3457              	.LVL348:
 3458 007c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3459              	.LVL349:
 3460              	.L325:
4066:..\FreeRTOS/tasks.c **** 						}
4067:..\FreeRTOS/tasks.c **** 					}
4068:..\FreeRTOS/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4069:..\FreeRTOS/tasks.c **** 					{
4070:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
4071:..\FreeRTOS/tasks.c **** 							woken if the event does not occur.  This may
4072:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4073:..\FreeRTOS/tasks.c **** 							handle it. */
4074:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4075:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4076:..\FreeRTOS/tasks.c **** 					}
4077:..\FreeRTOS/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
4078:..\FreeRTOS/tasks.c **** 
4079:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4080:..\FreeRTOS/tasks.c **** 
4081:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4082:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4083:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4084:..\FreeRTOS/tasks.c **** 					application code should ever do. */
4085:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 3461              		.loc 1 4085 0
 3462 0080 FFF7FEFF 		bl	vPortYield
 3463              	.LVL350:
 3464              	.L322:
4086:..\FreeRTOS/tasks.c **** 				}
4087:..\FreeRTOS/tasks.c **** 				else
4088:..\FreeRTOS/tasks.c **** 				{
4089:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4090:..\FreeRTOS/tasks.c **** 				}
4091:..\FreeRTOS/tasks.c **** 			}
4092:..\FreeRTOS/tasks.c **** 			else
4093:..\FreeRTOS/tasks.c **** 			{
4094:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4095:..\FreeRTOS/tasks.c **** 			}
4096:..\FreeRTOS/tasks.c **** 		}
4097:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3465              		.loc 1 4097 0
 3466 0084 FFF7FEFF 		bl	vPortExitCritical
 3467              	.LVL351:
4098:..\FreeRTOS/tasks.c **** 
4099:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 144


 3468              		.loc 1 4099 0
 3469 0088 FFF7FEFF 		bl	vPortEnterCritical
 3470              	.LVL352:
4100:..\FreeRTOS/tasks.c **** 		{
4101:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4102:..\FreeRTOS/tasks.c **** 
4103:..\FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
 3471              		.loc 1 4103 0
 3472 008c 25B1     		cbz	r5, .L326
4104:..\FreeRTOS/tasks.c **** 			{
4105:..\FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4106:..\FreeRTOS/tasks.c **** 				have changed. */
4107:..\FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 3473              		.loc 1 4107 0
 3474 008e 104B     		ldr	r3, .L330
 3475 0090 D3F8D430 		ldr	r3, [r3, #212]
 3476 0094 9B6C     		ldr	r3, [r3, #72]
 3477 0096 2B60     		str	r3, [r5]
 3478              	.L326:
4108:..\FreeRTOS/tasks.c **** 			}
4109:..\FreeRTOS/tasks.c **** 
4110:..\FreeRTOS/tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4111:..\FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4112:..\FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4113:..\FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4114:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 3479              		.loc 1 4114 0
 3480 0098 0D4B     		ldr	r3, .L330
 3481 009a D3F8D430 		ldr	r3, [r3, #212]
 3482 009e 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3483 00a2 DBB2     		uxtb	r3, r3
 3484 00a4 012B     		cmp	r3, #1
 3485 00a6 08D0     		beq	.L328
4115:..\FreeRTOS/tasks.c **** 			{
4116:..\FreeRTOS/tasks.c **** 				/* A notification was not received. */
4117:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4118:..\FreeRTOS/tasks.c **** 			}
4119:..\FreeRTOS/tasks.c **** 			else
4120:..\FreeRTOS/tasks.c **** 			{
4121:..\FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4122:..\FreeRTOS/tasks.c **** 				received while the task was waiting. */
4123:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 3486              		.loc 1 4123 0
 3487 00a8 094B     		ldr	r3, .L330
 3488 00aa D3F8D430 		ldr	r3, [r3, #212]
 3489 00ae 996C     		ldr	r1, [r3, #72]
 3490 00b0 21EA0401 		bic	r1, r1, r4
 3491 00b4 9964     		str	r1, [r3, #72]
 3492              	.LVL353:
4124:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 3493              		.loc 1 4124 0
 3494 00b6 0124     		movs	r4, #1
 3495              	.LVL354:
 3496 00b8 00E0     		b	.L327
 3497              	.LVL355:
 3498              	.L328:
4117:..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 145


 3499              		.loc 1 4117 0
 3500 00ba 0024     		movs	r4, #0
 3501              	.LVL356:
 3502              	.L327:
4125:..\FreeRTOS/tasks.c **** 			}
4126:..\FreeRTOS/tasks.c **** 
4127:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 3503              		.loc 1 4127 0
 3504 00bc 044B     		ldr	r3, .L330
 3505 00be D3F8D430 		ldr	r3, [r3, #212]
 3506 00c2 0022     		movs	r2, #0
 3507 00c4 83F84C20 		strb	r2, [r3, #76]
4128:..\FreeRTOS/tasks.c **** 		}
4129:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3508              		.loc 1 4129 0
 3509 00c8 FFF7FEFF 		bl	vPortExitCritical
 3510              	.LVL357:
4130:..\FreeRTOS/tasks.c **** 
4131:..\FreeRTOS/tasks.c **** 		return xReturn;
4132:..\FreeRTOS/tasks.c **** 	}
 3511              		.loc 1 4132 0
 3512 00cc 2046     		mov	r0, r4
 3513 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3514              	.LVL358:
 3515              	.L331:
 3516              		.align	2
 3517              	.L330:
 3518 00d0 00000000 		.word	.LANCHOR0
 3519              		.cfi_endproc
 3520              	.LFE108:
 3521              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3522              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3523              		.align	2
 3524              		.global	xTaskGenericNotify
 3525              		.thumb
 3526              		.thumb_func
 3527              		.type	xTaskGenericNotify, %function
 3528              	xTaskGenericNotify:
 3529              	.LFB109:
4133:..\FreeRTOS/tasks.c **** 
4134:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4135:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4136:..\FreeRTOS/tasks.c **** 
4137:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4138:..\FreeRTOS/tasks.c **** 
4139:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4140:..\FreeRTOS/tasks.c **** 	{
 3530              		.loc 1 4140 0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 0
 3533              		@ frame_needed = 0, uses_anonymous_args = 0
 3534              	.LVL359:
 3535 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3536              		.cfi_def_cfa_offset 24
 3537              		.cfi_offset 3, -24
 3538              		.cfi_offset 4, -20
 3539              		.cfi_offset 5, -16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 146


 3540              		.cfi_offset 6, -12
 3541              		.cfi_offset 7, -8
 3542              		.cfi_offset 14, -4
 3543 0002 0446     		mov	r4, r0
 3544 0004 0F46     		mov	r7, r1
 3545 0006 1546     		mov	r5, r2
 3546 0008 1E46     		mov	r6, r3
 3547              	.LVL360:
4141:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4142:..\FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4143:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4144:..\FreeRTOS/tasks.c **** 
4145:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4146:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4147:..\FreeRTOS/tasks.c **** 
4148:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3548              		.loc 1 4148 0
 3549 000a FFF7FEFF 		bl	vPortEnterCritical
 3550              	.LVL361:
4149:..\FreeRTOS/tasks.c **** 		{
4150:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 3551              		.loc 1 4150 0
 3552 000e 0EB1     		cbz	r6, .L333
4151:..\FreeRTOS/tasks.c **** 			{
4152:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 3553              		.loc 1 4152 0
 3554 0010 A36C     		ldr	r3, [r4, #72]
 3555 0012 3360     		str	r3, [r6]
 3556              	.L333:
4153:..\FreeRTOS/tasks.c **** 			}
4154:..\FreeRTOS/tasks.c **** 
4155:..\FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 3557              		.loc 1 4155 0
 3558 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3559 0018 DBB2     		uxtb	r3, r3
 3560              	.LVL362:
4156:..\FreeRTOS/tasks.c **** 
4157:..\FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3561              		.loc 1 4157 0
 3562 001a 0222     		movs	r2, #2
 3563 001c 84F84C20 		strb	r2, [r4, #76]
4158:..\FreeRTOS/tasks.c **** 
4159:..\FreeRTOS/tasks.c **** 			switch( eAction )
 3564              		.loc 1 4159 0
 3565 0020 6A1E     		subs	r2, r5, #1
 3566 0022 032A     		cmp	r2, #3
 3567 0024 15D8     		bhi	.L341
 3568 0026 DFE802F0 		tbb	[pc, r2]
 3569              	.L336:
 3570 002a 02       		.byte	(.L335-.L336)/2
 3571 002b 07       		.byte	(.L337-.L336)/2
 3572 002c 0C       		.byte	(.L338-.L336)/2
 3573 002d 0F       		.byte	(.L339-.L336)/2
 3574              		.p2align 1
 3575              	.L335:
4160:..\FreeRTOS/tasks.c **** 			{
4161:..\FreeRTOS/tasks.c **** 				case eSetBits	:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 147


4162:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 3576              		.loc 1 4162 0
 3577 002e A26C     		ldr	r2, [r4, #72]
 3578 0030 1743     		orrs	r7, r7, r2
 3579              	.LVL363:
 3580 0032 A764     		str	r7, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3581              		.loc 1 4143 0
 3582 0034 0125     		movs	r5, #1
4163:..\FreeRTOS/tasks.c **** 					break;
 3583              		.loc 1 4163 0
 3584 0036 0FE0     		b	.L334
 3585              	.LVL364:
 3586              	.L337:
4164:..\FreeRTOS/tasks.c **** 
4165:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4166:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 3587              		.loc 1 4166 0
 3588 0038 A26C     		ldr	r2, [r4, #72]
 3589 003a 0132     		adds	r2, r2, #1
 3590 003c A264     		str	r2, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3591              		.loc 1 4143 0
 3592 003e 0125     		movs	r5, #1
4167:..\FreeRTOS/tasks.c **** 					break;
 3593              		.loc 1 4167 0
 3594 0040 0AE0     		b	.L334
 3595              	.L338:
4168:..\FreeRTOS/tasks.c **** 
4169:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4170:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 3596              		.loc 1 4170 0
 3597 0042 A764     		str	r7, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3598              		.loc 1 4143 0
 3599 0044 0125     		movs	r5, #1
4171:..\FreeRTOS/tasks.c **** 					break;
 3600              		.loc 1 4171 0
 3601 0046 07E0     		b	.L334
 3602              	.L339:
4172:..\FreeRTOS/tasks.c **** 
4173:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4174:..\FreeRTOS/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 3603              		.loc 1 4174 0
 3604 0048 022B     		cmp	r3, #2
 3605 004a 04D0     		beq	.L342
4175:..\FreeRTOS/tasks.c **** 					{
4176:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 3606              		.loc 1 4176 0
 3607 004c A764     		str	r7, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3608              		.loc 1 4143 0
 3609 004e 0125     		movs	r5, #1
 3610 0050 02E0     		b	.L334
 3611              	.L341:
 3612 0052 0125     		movs	r5, #1
 3613 0054 00E0     		b	.L334
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 148


 3614              	.L342:
4177:..\FreeRTOS/tasks.c **** 					}
4178:..\FreeRTOS/tasks.c **** 					else
4179:..\FreeRTOS/tasks.c **** 					{
4180:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4181:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
 3615              		.loc 1 4181 0
 3616 0056 0025     		movs	r5, #0
 3617              	.LVL365:
 3618              	.L334:
4182:..\FreeRTOS/tasks.c **** 					}
4183:..\FreeRTOS/tasks.c **** 					break;
4184:..\FreeRTOS/tasks.c **** 
4185:..\FreeRTOS/tasks.c **** 				case eNoAction:
4186:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4187:..\FreeRTOS/tasks.c **** 					updated. */
4188:..\FreeRTOS/tasks.c **** 					break;
4189:..\FreeRTOS/tasks.c **** 			}
4190:..\FreeRTOS/tasks.c **** 
4191:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4192:..\FreeRTOS/tasks.c **** 
4193:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4194:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4195:..\FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3619              		.loc 1 4195 0
 3620 0058 012B     		cmp	r3, #1
 3621 005a 1ED1     		bne	.L340
4196:..\FreeRTOS/tasks.c **** 			{
4197:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3622              		.loc 1 4197 0
 3623 005c 271D     		adds	r7, r4, #4
 3624 005e 3846     		mov	r0, r7
 3625 0060 FFF7FEFF 		bl	uxListRemove
 3626              	.LVL366:
4198:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3627              		.loc 1 4198 0
 3628 0064 E36A     		ldr	r3, [r4, #44]
 3629 0066 0122     		movs	r2, #1
 3630 0068 02FA03F1 		lsl	r1, r2, r3
 3631 006c 0D4E     		ldr	r6, .L344
 3632              	.LVL367:
 3633 006e D6F8E820 		ldr	r2, [r6, #232]
 3634 0072 0A43     		orrs	r2, r2, r1
 3635 0074 C6F8E820 		str	r2, [r6, #232]
 3636 0078 06F13000 		add	r0, r6, #48
 3637 007c 03EB8303 		add	r3, r3, r3, lsl #2
 3638 0080 9A00     		lsls	r2, r3, #2
 3639 0082 3946     		mov	r1, r7
 3640 0084 1044     		add	r0, r0, r2
 3641 0086 FFF7FEFF 		bl	vListInsertEnd
 3642              	.LVL368:
4199:..\FreeRTOS/tasks.c **** 
4200:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4201:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4202:..\FreeRTOS/tasks.c **** 
4203:..\FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4204:..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 149


4205:..\FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4206:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4207:..\FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4208:..\FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4209:..\FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4210:..\FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4211:..\FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4212:..\FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4213:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4214:..\FreeRTOS/tasks.c **** 					earliest possible time. */
4215:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4216:..\FreeRTOS/tasks.c **** 				}
4217:..\FreeRTOS/tasks.c **** 				#endif
4218:..\FreeRTOS/tasks.c **** 
4219:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3643              		.loc 1 4219 0
 3644 008a E26A     		ldr	r2, [r4, #44]
 3645 008c D6F8D430 		ldr	r3, [r6, #212]
 3646 0090 DB6A     		ldr	r3, [r3, #44]
 3647 0092 9A42     		cmp	r2, r3
 3648 0094 01D9     		bls	.L340
4220:..\FreeRTOS/tasks.c **** 				{
4221:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4222:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4223:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3649              		.loc 1 4223 0
 3650 0096 FFF7FEFF 		bl	vPortYield
 3651              	.LVL369:
 3652              	.L340:
4224:..\FreeRTOS/tasks.c **** 				}
4225:..\FreeRTOS/tasks.c **** 				else
4226:..\FreeRTOS/tasks.c **** 				{
4227:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4228:..\FreeRTOS/tasks.c **** 				}
4229:..\FreeRTOS/tasks.c **** 			}
4230:..\FreeRTOS/tasks.c **** 			else
4231:..\FreeRTOS/tasks.c **** 			{
4232:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4233:..\FreeRTOS/tasks.c **** 			}
4234:..\FreeRTOS/tasks.c **** 		}
4235:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3653              		.loc 1 4235 0
 3654 009a FFF7FEFF 		bl	vPortExitCritical
 3655              	.LVL370:
4236:..\FreeRTOS/tasks.c **** 
4237:..\FreeRTOS/tasks.c **** 		return xReturn;
4238:..\FreeRTOS/tasks.c **** 	}
 3656              		.loc 1 4238 0
 3657 009e 2846     		mov	r0, r5
 3658 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3659              	.LVL371:
 3660              	.L345:
 3661 00a2 00BF     		.align	2
 3662              	.L344:
 3663 00a4 00000000 		.word	.LANCHOR0
 3664              		.cfi_endproc
 3665              	.LFE109:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 150


 3666              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3667              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3668              		.align	2
 3669              		.global	xTaskGenericNotifyFromISR
 3670              		.thumb
 3671              		.thumb_func
 3672              		.type	xTaskGenericNotifyFromISR, %function
 3673              	xTaskGenericNotifyFromISR:
 3674              	.LFB110:
4239:..\FreeRTOS/tasks.c **** 
4240:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4241:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4242:..\FreeRTOS/tasks.c **** 
4243:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4244:..\FreeRTOS/tasks.c **** 
4245:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4246:..\FreeRTOS/tasks.c **** 	{
 3675              		.loc 1 4246 0
 3676              		.cfi_startproc
 3677              		@ args = 4, pretend = 0, frame = 0
 3678              		@ frame_needed = 0, uses_anonymous_args = 0
 3679              	.LVL372:
 3680 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3681              		.cfi_def_cfa_offset 24
 3682              		.cfi_offset 4, -24
 3683              		.cfi_offset 5, -20
 3684              		.cfi_offset 6, -16
 3685              		.cfi_offset 7, -12
 3686              		.cfi_offset 8, -8
 3687              		.cfi_offset 14, -4
 3688 0004 0446     		mov	r4, r0
 3689 0006 8846     		mov	r8, r1
 3690 0008 1546     		mov	r5, r2
 3691 000a 1E46     		mov	r6, r3
 3692              	.LVL373:
4247:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4248:..\FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4249:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4250:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4251:..\FreeRTOS/tasks.c **** 
4252:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4253:..\FreeRTOS/tasks.c **** 
4254:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4255:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4256:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4257:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4258:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4259:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4260:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4261:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4262:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4263:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4264:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4265:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4266:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4267:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4268:..\FreeRTOS/tasks.c **** 		provided on the following link:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 151


4269:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4270:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4271:..\FreeRTOS/tasks.c **** 
4272:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4273:..\FreeRTOS/tasks.c **** 
4274:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3693              		.loc 1 4274 0
 3694 000c FFF7FEFF 		bl	ulPortSetInterruptMask
 3695              	.LVL374:
 3696 0010 0746     		mov	r7, r0
 3697              	.LVL375:
4275:..\FreeRTOS/tasks.c **** 		{
4276:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 3698              		.loc 1 4276 0
 3699 0012 0EB1     		cbz	r6, .L347
4277:..\FreeRTOS/tasks.c **** 			{
4278:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 3700              		.loc 1 4278 0
 3701 0014 A36C     		ldr	r3, [r4, #72]
 3702 0016 3360     		str	r3, [r6]
 3703              	.L347:
4279:..\FreeRTOS/tasks.c **** 			}
4280:..\FreeRTOS/tasks.c **** 
4281:..\FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 3704              		.loc 1 4281 0
 3705 0018 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3706 001c DBB2     		uxtb	r3, r3
 3707              	.LVL376:
4282:..\FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3708              		.loc 1 4282 0
 3709 001e 0222     		movs	r2, #2
 3710 0020 84F84C20 		strb	r2, [r4, #76]
4283:..\FreeRTOS/tasks.c **** 
4284:..\FreeRTOS/tasks.c **** 			switch( eAction )
 3711              		.loc 1 4284 0
 3712 0024 6A1E     		subs	r2, r5, #1
 3713 0026 032A     		cmp	r2, #3
 3714 0028 18D8     		bhi	.L357
 3715 002a DFE802F0 		tbb	[pc, r2]
 3716              	.L350:
 3717 002e 02       		.byte	(.L349-.L350)/2
 3718 002f 08       		.byte	(.L351-.L350)/2
 3719 0030 0D       		.byte	(.L352-.L350)/2
 3720 0031 11       		.byte	(.L353-.L350)/2
 3721              		.p2align 1
 3722              	.L349:
4285:..\FreeRTOS/tasks.c **** 			{
4286:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4287:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 3723              		.loc 1 4287 0
 3724 0032 A26C     		ldr	r2, [r4, #72]
 3725 0034 42EA0802 		orr	r2, r2, r8
 3726 0038 A264     		str	r2, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3727              		.loc 1 4249 0
 3728 003a 0125     		movs	r5, #1
4288:..\FreeRTOS/tasks.c **** 					break;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 152


 3729              		.loc 1 4288 0
 3730 003c 11E0     		b	.L348
 3731              	.L351:
4289:..\FreeRTOS/tasks.c **** 
4290:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4291:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 3732              		.loc 1 4291 0
 3733 003e A26C     		ldr	r2, [r4, #72]
 3734 0040 0132     		adds	r2, r2, #1
 3735 0042 A264     		str	r2, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3736              		.loc 1 4249 0
 3737 0044 0125     		movs	r5, #1
4292:..\FreeRTOS/tasks.c **** 					break;
 3738              		.loc 1 4292 0
 3739 0046 0CE0     		b	.L348
 3740              	.L352:
4293:..\FreeRTOS/tasks.c **** 
4294:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4295:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 3741              		.loc 1 4295 0
 3742 0048 C4F84880 		str	r8, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3743              		.loc 1 4249 0
 3744 004c 0125     		movs	r5, #1
4296:..\FreeRTOS/tasks.c **** 					break;
 3745              		.loc 1 4296 0
 3746 004e 08E0     		b	.L348
 3747              	.L353:
4297:..\FreeRTOS/tasks.c **** 
4298:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4299:..\FreeRTOS/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 3748              		.loc 1 4299 0
 3749 0050 022B     		cmp	r3, #2
 3750 0052 05D0     		beq	.L358
4300:..\FreeRTOS/tasks.c **** 					{
4301:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 3751              		.loc 1 4301 0
 3752 0054 C4F84880 		str	r8, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3753              		.loc 1 4249 0
 3754 0058 0125     		movs	r5, #1
 3755 005a 02E0     		b	.L348
 3756              	.L357:
 3757 005c 0125     		movs	r5, #1
 3758 005e 00E0     		b	.L348
 3759              	.L358:
4302:..\FreeRTOS/tasks.c **** 					}
4303:..\FreeRTOS/tasks.c **** 					else
4304:..\FreeRTOS/tasks.c **** 					{
4305:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4306:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
 3760              		.loc 1 4306 0
 3761 0060 0025     		movs	r5, #0
 3762              	.L348:
 3763              	.LVL377:
4307:..\FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 153


4308:..\FreeRTOS/tasks.c **** 					break;
4309:..\FreeRTOS/tasks.c **** 
4310:..\FreeRTOS/tasks.c **** 				case eNoAction :
4311:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4312:..\FreeRTOS/tasks.c **** 					updated. */
4313:..\FreeRTOS/tasks.c **** 					break;
4314:..\FreeRTOS/tasks.c **** 			}
4315:..\FreeRTOS/tasks.c **** 
4316:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4317:..\FreeRTOS/tasks.c **** 
4318:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4319:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4320:..\FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3764              		.loc 1 4320 0
 3765 0062 012B     		cmp	r3, #1
 3766 0064 2BD1     		bne	.L354
4321:..\FreeRTOS/tasks.c **** 			{
4322:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4323:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4324:..\FreeRTOS/tasks.c **** 
4325:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3767              		.loc 1 4325 0
 3768 0066 194B     		ldr	r3, .L360
 3769              	.LVL378:
 3770 0068 D3F8F030 		ldr	r3, [r3, #240]
 3771 006c B3B9     		cbnz	r3, .L355
4326:..\FreeRTOS/tasks.c **** 				{
4327:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3772              		.loc 1 4327 0
 3773 006e 261D     		adds	r6, r4, #4
 3774              	.LVL379:
 3775 0070 3046     		mov	r0, r6
 3776              	.LVL380:
 3777 0072 FFF7FEFF 		bl	uxListRemove
 3778              	.LVL381:
4328:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3779              		.loc 1 4328 0
 3780 0076 E36A     		ldr	r3, [r4, #44]
 3781 0078 0122     		movs	r2, #1
 3782 007a 02FA03F1 		lsl	r1, r2, r3
 3783 007e 1348     		ldr	r0, .L360
 3784 0080 D0F8E820 		ldr	r2, [r0, #232]
 3785 0084 0A43     		orrs	r2, r2, r1
 3786 0086 C0F8E820 		str	r2, [r0, #232]
 3787 008a 3030     		adds	r0, r0, #48
 3788 008c 03EB8303 		add	r3, r3, r3, lsl #2
 3789 0090 9A00     		lsls	r2, r3, #2
 3790 0092 3146     		mov	r1, r6
 3791 0094 1044     		add	r0, r0, r2
 3792 0096 FFF7FEFF 		bl	vListInsertEnd
 3793              	.LVL382:
 3794 009a 04E0     		b	.L356
 3795              	.LVL383:
 3796              	.L355:
4329:..\FreeRTOS/tasks.c **** 				}
4330:..\FreeRTOS/tasks.c **** 				else
4331:..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 154


4332:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4333:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4334:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 3797              		.loc 1 4334 0
 3798 009c 04F11801 		add	r1, r4, #24
 3799 00a0 0B48     		ldr	r0, .L360+4
 3800              	.LVL384:
 3801 00a2 FFF7FEFF 		bl	vListInsertEnd
 3802              	.LVL385:
 3803              	.L356:
4335:..\FreeRTOS/tasks.c **** 				}
4336:..\FreeRTOS/tasks.c **** 
4337:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3804              		.loc 1 4337 0
 3805 00a6 E26A     		ldr	r2, [r4, #44]
 3806 00a8 084B     		ldr	r3, .L360
 3807 00aa D3F8D430 		ldr	r3, [r3, #212]
 3808 00ae DB6A     		ldr	r3, [r3, #44]
 3809 00b0 9A42     		cmp	r2, r3
 3810 00b2 04D9     		bls	.L354
4338:..\FreeRTOS/tasks.c **** 				{
4339:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4340:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4341:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 3811              		.loc 1 4341 0
 3812 00b4 069B     		ldr	r3, [sp, #24]
 3813 00b6 13B1     		cbz	r3, .L354
4342:..\FreeRTOS/tasks.c **** 					{
4343:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 3814              		.loc 1 4343 0
 3815 00b8 0123     		movs	r3, #1
 3816 00ba 069A     		ldr	r2, [sp, #24]
 3817 00bc 1360     		str	r3, [r2]
 3818              	.L354:
4344:..\FreeRTOS/tasks.c **** 					}
4345:..\FreeRTOS/tasks.c **** 				}
4346:..\FreeRTOS/tasks.c **** 				else
4347:..\FreeRTOS/tasks.c **** 				{
4348:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4349:..\FreeRTOS/tasks.c **** 				}
4350:..\FreeRTOS/tasks.c **** 			}
4351:..\FreeRTOS/tasks.c **** 		}
4352:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 3819              		.loc 1 4352 0
 3820 00be 3846     		mov	r0, r7
 3821 00c0 FFF7FEFF 		bl	vPortClearInterruptMask
 3822              	.LVL386:
4353:..\FreeRTOS/tasks.c **** 
4354:..\FreeRTOS/tasks.c **** 		return xReturn;
4355:..\FreeRTOS/tasks.c **** 	}
 3823              		.loc 1 4355 0
 3824 00c4 2846     		mov	r0, r5
 3825 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3826              	.LVL387:
 3827              	.L361:
 3828 00ca 00BF     		.align	2
 3829              	.L360:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 155


 3830 00cc 00000000 		.word	.LANCHOR0
 3831 00d0 14000000 		.word	.LANCHOR0+20
 3832              		.cfi_endproc
 3833              	.LFE110:
 3834              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 3835              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 3836              		.align	2
 3837              		.global	vTaskNotifyGiveFromISR
 3838              		.thumb
 3839              		.thumb_func
 3840              		.type	vTaskNotifyGiveFromISR, %function
 3841              	vTaskNotifyGiveFromISR:
 3842              	.LFB111:
4356:..\FreeRTOS/tasks.c **** 
4357:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4358:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4359:..\FreeRTOS/tasks.c **** 
4360:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4361:..\FreeRTOS/tasks.c **** 
4362:..\FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4363:..\FreeRTOS/tasks.c **** 	{
 3843              		.loc 1 4363 0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
 3847              	.LVL388:
 3848 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3849              		.cfi_def_cfa_offset 24
 3850              		.cfi_offset 3, -24
 3851              		.cfi_offset 4, -20
 3852              		.cfi_offset 5, -16
 3853              		.cfi_offset 6, -12
 3854              		.cfi_offset 7, -8
 3855              		.cfi_offset 14, -4
 3856 0002 0446     		mov	r4, r0
 3857 0004 0E46     		mov	r6, r1
 3858              	.LVL389:
4364:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4365:..\FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4366:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4367:..\FreeRTOS/tasks.c **** 
4368:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4369:..\FreeRTOS/tasks.c **** 
4370:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4371:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4372:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4373:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4374:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4375:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4376:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4377:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4378:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4379:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4380:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4381:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4382:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4383:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 156


4384:..\FreeRTOS/tasks.c **** 		provided on the following link:
4385:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4386:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4387:..\FreeRTOS/tasks.c **** 
4388:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4389:..\FreeRTOS/tasks.c **** 
4390:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3859              		.loc 1 4390 0
 3860 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 3861              	.LVL390:
 3862 000a 0546     		mov	r5, r0
 3863              	.LVL391:
4391:..\FreeRTOS/tasks.c **** 		{
4392:..\FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 3864              		.loc 1 4392 0
 3865 000c 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3866 0010 DBB2     		uxtb	r3, r3
 3867              	.LVL392:
4393:..\FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3868              		.loc 1 4393 0
 3869 0012 0222     		movs	r2, #2
 3870 0014 84F84C20 		strb	r2, [r4, #76]
4394:..\FreeRTOS/tasks.c **** 
4395:..\FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4396:..\FreeRTOS/tasks.c **** 			semaphore. */
4397:..\FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 3871              		.loc 1 4397 0
 3872 0018 A26C     		ldr	r2, [r4, #72]
 3873 001a 0132     		adds	r2, r2, #1
 3874 001c A264     		str	r2, [r4, #72]
4398:..\FreeRTOS/tasks.c **** 
4399:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4400:..\FreeRTOS/tasks.c **** 
4401:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4402:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4403:..\FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3875              		.loc 1 4403 0
 3876 001e 012B     		cmp	r3, #1
 3877 0020 29D1     		bne	.L363
4404:..\FreeRTOS/tasks.c **** 			{
4405:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4406:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4407:..\FreeRTOS/tasks.c **** 
4408:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3878              		.loc 1 4408 0
 3879 0022 174B     		ldr	r3, .L367
 3880              	.LVL393:
 3881 0024 D3F8F030 		ldr	r3, [r3, #240]
 3882 0028 B3B9     		cbnz	r3, .L364
4409:..\FreeRTOS/tasks.c **** 				{
4410:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3883              		.loc 1 4410 0
 3884 002a 271D     		adds	r7, r4, #4
 3885 002c 3846     		mov	r0, r7
 3886              	.LVL394:
 3887 002e FFF7FEFF 		bl	uxListRemove
 3888              	.LVL395:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 157


4411:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3889              		.loc 1 4411 0
 3890 0032 E36A     		ldr	r3, [r4, #44]
 3891 0034 0122     		movs	r2, #1
 3892 0036 02FA03F1 		lsl	r1, r2, r3
 3893 003a 1148     		ldr	r0, .L367
 3894 003c D0F8E820 		ldr	r2, [r0, #232]
 3895 0040 0A43     		orrs	r2, r2, r1
 3896 0042 C0F8E820 		str	r2, [r0, #232]
 3897 0046 3030     		adds	r0, r0, #48
 3898 0048 03EB8303 		add	r3, r3, r3, lsl #2
 3899 004c 9A00     		lsls	r2, r3, #2
 3900 004e 3946     		mov	r1, r7
 3901 0050 1044     		add	r0, r0, r2
 3902 0052 FFF7FEFF 		bl	vListInsertEnd
 3903              	.LVL396:
 3904 0056 04E0     		b	.L365
 3905              	.LVL397:
 3906              	.L364:
4412:..\FreeRTOS/tasks.c **** 				}
4413:..\FreeRTOS/tasks.c **** 				else
4414:..\FreeRTOS/tasks.c **** 				{
4415:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4416:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4417:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 3907              		.loc 1 4417 0
 3908 0058 04F11801 		add	r1, r4, #24
 3909 005c 0948     		ldr	r0, .L367+4
 3910              	.LVL398:
 3911 005e FFF7FEFF 		bl	vListInsertEnd
 3912              	.LVL399:
 3913              	.L365:
4418:..\FreeRTOS/tasks.c **** 				}
4419:..\FreeRTOS/tasks.c **** 
4420:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3914              		.loc 1 4420 0
 3915 0062 E26A     		ldr	r2, [r4, #44]
 3916 0064 064B     		ldr	r3, .L367
 3917 0066 D3F8D430 		ldr	r3, [r3, #212]
 3918 006a DB6A     		ldr	r3, [r3, #44]
 3919 006c 9A42     		cmp	r2, r3
 3920 006e 02D9     		bls	.L363
4421:..\FreeRTOS/tasks.c **** 				{
4422:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4423:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4424:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 3921              		.loc 1 4424 0
 3922 0070 0EB1     		cbz	r6, .L363
4425:..\FreeRTOS/tasks.c **** 					{
4426:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 3923              		.loc 1 4426 0
 3924 0072 0123     		movs	r3, #1
 3925 0074 3360     		str	r3, [r6]
 3926              	.L363:
4427:..\FreeRTOS/tasks.c **** 					}
4428:..\FreeRTOS/tasks.c **** 				}
4429:..\FreeRTOS/tasks.c **** 				else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 158


4430:..\FreeRTOS/tasks.c **** 				{
4431:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:..\FreeRTOS/tasks.c **** 				}
4433:..\FreeRTOS/tasks.c **** 			}
4434:..\FreeRTOS/tasks.c **** 		}
4435:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 3927              		.loc 1 4435 0
 3928 0076 2846     		mov	r0, r5
 3929 0078 FFF7FEFF 		bl	vPortClearInterruptMask
 3930              	.LVL400:
 3931 007c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3932              	.LVL401:
 3933              	.L368:
 3934 007e 00BF     		.align	2
 3935              	.L367:
 3936 0080 00000000 		.word	.LANCHOR0
 3937 0084 14000000 		.word	.LANCHOR0+20
 3938              		.cfi_endproc
 3939              	.LFE111:
 3940              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 3941              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 3942              		.align	2
 3943              		.global	xTaskNotifyStateClear
 3944              		.thumb
 3945              		.thumb_func
 3946              		.type	xTaskNotifyStateClear, %function
 3947              	xTaskNotifyStateClear:
 3948              	.LFB112:
4436:..\FreeRTOS/tasks.c **** 	}
4437:..\FreeRTOS/tasks.c **** 
4438:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4439:..\FreeRTOS/tasks.c **** 
4440:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4441:..\FreeRTOS/tasks.c **** 
4442:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4443:..\FreeRTOS/tasks.c **** 
4444:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4445:..\FreeRTOS/tasks.c **** 	{
 3949              		.loc 1 4445 0
 3950              		.cfi_startproc
 3951              		@ args = 0, pretend = 0, frame = 0
 3952              		@ frame_needed = 0, uses_anonymous_args = 0
 3953              	.LVL402:
 3954 0000 10B5     		push	{r4, lr}
 3955              		.cfi_def_cfa_offset 8
 3956              		.cfi_offset 4, -8
 3957              		.cfi_offset 14, -4
 3958              	.LVL403:
4446:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
4447:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4448:..\FreeRTOS/tasks.c **** 
4449:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
4450:..\FreeRTOS/tasks.c **** 
4451:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4452:..\FreeRTOS/tasks.c **** 		its notification state cleared. */
4453:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
 3959              		.loc 1 4453 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 159


 3960 0002 0446     		mov	r4, r0
 3961 0004 10B9     		cbnz	r0, .L370
 3962              		.loc 1 4453 0 is_stmt 0 discriminator 1
 3963 0006 0A4B     		ldr	r3, .L374
 3964 0008 D3F8D440 		ldr	r4, [r3, #212]
 3965              	.LVL404:
 3966              	.L370:
4454:..\FreeRTOS/tasks.c **** 
4455:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3967              		.loc 1 4455 0 is_stmt 1 discriminator 4
 3968 000c FFF7FEFF 		bl	vPortEnterCritical
 3969              	.LVL405:
4456:..\FreeRTOS/tasks.c **** 		{
4457:..\FreeRTOS/tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 3970              		.loc 1 4457 0 discriminator 4
 3971 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3972 0014 DBB2     		uxtb	r3, r3
 3973 0016 022B     		cmp	r3, #2
 3974 0018 04D1     		bne	.L372
4458:..\FreeRTOS/tasks.c **** 			{
4459:..\FreeRTOS/tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
 3975              		.loc 1 4459 0
 3976 001a 0023     		movs	r3, #0
 3977 001c 84F84C30 		strb	r3, [r4, #76]
 3978              	.LVL406:
4460:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 3979              		.loc 1 4460 0
 3980 0020 0124     		movs	r4, #1
 3981              	.LVL407:
 3982 0022 00E0     		b	.L371
 3983              	.LVL408:
 3984              	.L372:
4461:..\FreeRTOS/tasks.c **** 			}
4462:..\FreeRTOS/tasks.c **** 			else
4463:..\FreeRTOS/tasks.c **** 			{
4464:..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
 3985              		.loc 1 4464 0
 3986 0024 0024     		movs	r4, #0
 3987              	.LVL409:
 3988              	.L371:
4465:..\FreeRTOS/tasks.c **** 			}
4466:..\FreeRTOS/tasks.c **** 		}
4467:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3989              		.loc 1 4467 0
 3990 0026 FFF7FEFF 		bl	vPortExitCritical
 3991              	.LVL410:
4468:..\FreeRTOS/tasks.c **** 
4469:..\FreeRTOS/tasks.c **** 		return xReturn;
4470:..\FreeRTOS/tasks.c **** 	}
 3992              		.loc 1 4470 0
 3993 002a 2046     		mov	r0, r4
 3994 002c 10BD     		pop	{r4, pc}
 3995              	.LVL411:
 3996              	.L375:
 3997 002e 00BF     		.align	2
 3998              	.L374:
 3999 0030 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 160


 4000              		.cfi_endproc
 4001              	.LFE112:
 4002              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4003              		.global	pxCurrentTCB
 4004              		.section	.rodata.str1.4,"aMS",%progbits,1
 4005              		.align	2
 4006              	.LC0:
 4007 0000 49444C45 		.ascii	"IDLE\000"
 4007      00
 4008              		.bss
 4009              		.align	2
 4010              		.set	.LANCHOR0,. + 0
 4011              		.type	xSuspendedTaskList, %object
 4012              		.size	xSuspendedTaskList, 20
 4013              	xSuspendedTaskList:
 4014 0000 00000000 		.space	20
 4014      00000000 
 4014      00000000 
 4014      00000000 
 4014      00000000 
 4015              		.type	xPendingReadyList, %object
 4016              		.size	xPendingReadyList, 20
 4017              	xPendingReadyList:
 4018 0014 00000000 		.space	20
 4018      00000000 
 4018      00000000 
 4018      00000000 
 4018      00000000 
 4019              		.type	pxDelayedTaskList, %object
 4020              		.size	pxDelayedTaskList, 4
 4021              	pxDelayedTaskList:
 4022 0028 00000000 		.space	4
 4023              		.type	xNextTaskUnblockTime, %object
 4024              		.size	xNextTaskUnblockTime, 4
 4025              	xNextTaskUnblockTime:
 4026 002c 00000000 		.space	4
 4027              		.type	pxReadyTasksLists, %object
 4028              		.size	pxReadyTasksLists, 100
 4029              	pxReadyTasksLists:
 4030 0030 00000000 		.space	100
 4030      00000000 
 4030      00000000 
 4030      00000000 
 4030      00000000 
 4031              		.type	xDelayedTaskList1, %object
 4032              		.size	xDelayedTaskList1, 20
 4033              	xDelayedTaskList1:
 4034 0094 00000000 		.space	20
 4034      00000000 
 4034      00000000 
 4034      00000000 
 4034      00000000 
 4035              		.type	xDelayedTaskList2, %object
 4036              		.size	xDelayedTaskList2, 20
 4037              	xDelayedTaskList2:
 4038 00a8 00000000 		.space	20
 4038      00000000 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 161


 4038      00000000 
 4038      00000000 
 4038      00000000 
 4039              		.type	xTasksWaitingTermination, %object
 4040              		.size	xTasksWaitingTermination, 20
 4041              	xTasksWaitingTermination:
 4042 00bc 00000000 		.space	20
 4042      00000000 
 4042      00000000 
 4042      00000000 
 4042      00000000 
 4043              		.type	pxOverflowDelayedTaskList, %object
 4044              		.size	pxOverflowDelayedTaskList, 4
 4045              	pxOverflowDelayedTaskList:
 4046 00d0 00000000 		.space	4
 4047              		.type	pxCurrentTCB, %object
 4048              		.size	pxCurrentTCB, 4
 4049              	pxCurrentTCB:
 4050 00d4 00000000 		.space	4
 4051              		.type	xTickCount, %object
 4052              		.size	xTickCount, 4
 4053              	xTickCount:
 4054 00d8 00000000 		.space	4
 4055              		.type	uxCurrentNumberOfTasks, %object
 4056              		.size	uxCurrentNumberOfTasks, 4
 4057              	uxCurrentNumberOfTasks:
 4058 00dc 00000000 		.space	4
 4059              		.type	xSchedulerRunning, %object
 4060              		.size	xSchedulerRunning, 4
 4061              	xSchedulerRunning:
 4062 00e0 00000000 		.space	4
 4063              		.type	uxTaskNumber, %object
 4064              		.size	uxTaskNumber, 4
 4065              	uxTaskNumber:
 4066 00e4 00000000 		.space	4
 4067              		.type	uxTopReadyPriority, %object
 4068              		.size	uxTopReadyPriority, 4
 4069              	uxTopReadyPriority:
 4070 00e8 00000000 		.space	4
 4071              		.type	uxTasksDeleted, %object
 4072              		.size	uxTasksDeleted, 4
 4073              	uxTasksDeleted:
 4074 00ec 00000000 		.space	4
 4075              		.type	uxSchedulerSuspended, %object
 4076              		.size	uxSchedulerSuspended, 4
 4077              	uxSchedulerSuspended:
 4078 00f0 00000000 		.space	4
 4079              		.type	xNumOfOverflows, %object
 4080              		.size	xNumOfOverflows, 4
 4081              	xNumOfOverflows:
 4082 00f4 00000000 		.space	4
 4083              		.type	uxPendedTicks, %object
 4084              		.size	uxPendedTicks, 4
 4085              	uxPendedTicks:
 4086 00f8 00000000 		.space	4
 4087              		.type	xYieldPending, %object
 4088              		.size	xYieldPending, 4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 162


 4089              	xYieldPending:
 4090 00fc 00000000 		.space	4
 4091              		.text
 4092              	.Letext0:
 4093              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4094              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4095              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 4096              		.file 6 "..\\FreeRTOS\\projdefs.h"
 4097              		.file 7 "..\\FreeRTOS\\list.h"
 4098              		.file 8 "..\\FreeRTOS\\task.h"
 4099              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 4100              		.file 10 "..\\FreeRTOS\\portable.h"
 4101              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 4102              		.section	.debug_info,"",%progbits
 4103              	.Ldebug_info0:
 4104 0000 A31E0000 		.4byte	0x1ea3
 4105 0004 0400     		.2byte	0x4
 4106 0006 00000000 		.4byte	.Ldebug_abbrev0
 4107 000a 04       		.byte	0x4
 4108 000b 01       		.uleb128 0x1
 4109 000c 58090000 		.4byte	.LASF227
 4110 0010 0C       		.byte	0xc
 4111 0011 6B060000 		.4byte	.LASF228
 4112 0015 A80A0000 		.4byte	.LASF229
 4113 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4114 001d 00000000 		.4byte	0
 4115 0021 00000000 		.4byte	.Ldebug_line0
 4116 0025 02       		.uleb128 0x2
 4117 0026 2D000000 		.4byte	.LASF4
 4118 002a 03       		.byte	0x3
 4119 002b D8       		.byte	0xd8
 4120 002c 30000000 		.4byte	0x30
 4121 0030 03       		.uleb128 0x3
 4122 0031 04       		.byte	0x4
 4123 0032 07       		.byte	0x7
 4124 0033 2C040000 		.4byte	.LASF0
 4125 0037 04       		.uleb128 0x4
 4126 0038 04       		.byte	0x4
 4127 0039 05       		.byte	0x5
 4128 003a 696E7400 		.ascii	"int\000"
 4129 003e 03       		.uleb128 0x3
 4130 003f 08       		.byte	0x8
 4131 0040 05       		.byte	0x5
 4132 0041 8F010000 		.4byte	.LASF1
 4133 0045 03       		.uleb128 0x3
 4134 0046 08       		.byte	0x8
 4135 0047 04       		.byte	0x4
 4136 0048 340B0000 		.4byte	.LASF2
 4137 004c 03       		.uleb128 0x3
 4138 004d 01       		.byte	0x1
 4139 004e 06       		.byte	0x6
 4140 004f 9D010000 		.4byte	.LASF3
 4141 0053 02       		.uleb128 0x2
 4142 0054 94000000 		.4byte	.LASF5
 4143 0058 04       		.byte	0x4
 4144 0059 1D       		.byte	0x1d
 4145 005a 5E000000 		.4byte	0x5e
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 163


 4146 005e 03       		.uleb128 0x3
 4147 005f 01       		.byte	0x1
 4148 0060 08       		.byte	0x8
 4149 0061 73080000 		.4byte	.LASF6
 4150 0065 03       		.uleb128 0x3
 4151 0066 02       		.byte	0x2
 4152 0067 05       		.byte	0x5
 4153 0068 DD050000 		.4byte	.LASF7
 4154 006c 02       		.uleb128 0x2
 4155 006d BA0B0000 		.4byte	.LASF8
 4156 0071 04       		.byte	0x4
 4157 0072 2B       		.byte	0x2b
 4158 0073 77000000 		.4byte	0x77
 4159 0077 03       		.uleb128 0x3
 4160 0078 02       		.byte	0x2
 4161 0079 07       		.byte	0x7
 4162 007a 2A050000 		.4byte	.LASF9
 4163 007e 02       		.uleb128 0x2
 4164 007f E70B0000 		.4byte	.LASF10
 4165 0083 04       		.byte	0x4
 4166 0084 3F       		.byte	0x3f
 4167 0085 89000000 		.4byte	0x89
 4168 0089 03       		.uleb128 0x3
 4169 008a 04       		.byte	0x4
 4170 008b 05       		.byte	0x5
 4171 008c 41020000 		.4byte	.LASF11
 4172 0090 02       		.uleb128 0x2
 4173 0091 0C040000 		.4byte	.LASF12
 4174 0095 04       		.byte	0x4
 4175 0096 41       		.byte	0x41
 4176 0097 9B000000 		.4byte	0x9b
 4177 009b 03       		.uleb128 0x3
 4178 009c 04       		.byte	0x4
 4179 009d 07       		.byte	0x7
 4180 009e 9E040000 		.4byte	.LASF13
 4181 00a2 03       		.uleb128 0x3
 4182 00a3 08       		.byte	0x8
 4183 00a4 07       		.byte	0x7
 4184 00a5 04020000 		.4byte	.LASF14
 4185 00a9 03       		.uleb128 0x3
 4186 00aa 04       		.byte	0x4
 4187 00ab 07       		.byte	0x7
 4188 00ac 99060000 		.4byte	.LASF15
 4189 00b0 05       		.uleb128 0x5
 4190 00b1 04       		.byte	0x4
 4191 00b2 03       		.uleb128 0x3
 4192 00b3 01       		.byte	0x1
 4193 00b4 08       		.byte	0x8
 4194 00b5 5F0B0000 		.4byte	.LASF16
 4195 00b9 06       		.uleb128 0x6
 4196 00ba 04       		.byte	0x4
 4197 00bb BF000000 		.4byte	0xbf
 4198 00bf 07       		.uleb128 0x7
 4199 00c0 B2000000 		.4byte	0xb2
 4200 00c4 02       		.uleb128 0x2
 4201 00c5 630D0000 		.4byte	.LASF17
 4202 00c9 05       		.byte	0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 164


 4203 00ca 18       		.byte	0x18
 4204 00cb 53000000 		.4byte	0x53
 4205 00cf 02       		.uleb128 0x2
 4206 00d0 EE020000 		.4byte	.LASF18
 4207 00d4 05       		.byte	0x5
 4208 00d5 24       		.byte	0x24
 4209 00d6 6C000000 		.4byte	0x6c
 4210 00da 02       		.uleb128 0x2
 4211 00db 6B080000 		.4byte	.LASF19
 4212 00df 05       		.byte	0x5
 4213 00e0 2C       		.byte	0x2c
 4214 00e1 7E000000 		.4byte	0x7e
 4215 00e5 02       		.uleb128 0x2
 4216 00e6 BC0E0000 		.4byte	.LASF20
 4217 00ea 05       		.byte	0x5
 4218 00eb 30       		.byte	0x30
 4219 00ec 90000000 		.4byte	0x90
 4220 00f0 03       		.uleb128 0x3
 4221 00f1 04       		.byte	0x4
 4222 00f2 04       		.byte	0x4
 4223 00f3 00080000 		.4byte	.LASF21
 4224 00f7 03       		.uleb128 0x3
 4225 00f8 08       		.byte	0x8
 4226 00f9 04       		.byte	0x4
 4227 00fa 930E0000 		.4byte	.LASF22
 4228 00fe 08       		.uleb128 0x8
 4229 00ff E5000000 		.4byte	0xe5
 4230 0103 02       		.uleb128 0x2
 4231 0104 2A090000 		.4byte	.LASF23
 4232 0108 06       		.byte	0x6
 4233 0109 4D       		.byte	0x4d
 4234 010a 0E010000 		.4byte	0x10e
 4235 010e 06       		.uleb128 0x6
 4236 010f 04       		.byte	0x4
 4237 0110 14010000 		.4byte	0x114
 4238 0114 09       		.uleb128 0x9
 4239 0115 1F010000 		.4byte	0x11f
 4240 0119 0A       		.uleb128 0xa
 4241 011a B0000000 		.4byte	0xb0
 4242 011e 00       		.byte	0
 4243 011f 02       		.uleb128 0x2
 4244 0120 3D050000 		.4byte	.LASF24
 4245 0124 02       		.byte	0x2
 4246 0125 61       		.byte	0x61
 4247 0126 E5000000 		.4byte	0xe5
 4248 012a 02       		.uleb128 0x2
 4249 012b 05030000 		.4byte	.LASF25
 4250 012f 02       		.byte	0x2
 4251 0130 62       		.byte	0x62
 4252 0131 89000000 		.4byte	0x89
 4253 0135 02       		.uleb128 0x2
 4254 0136 870E0000 		.4byte	.LASF26
 4255 013a 02       		.byte	0x2
 4256 013b 63       		.byte	0x63
 4257 013c 9B000000 		.4byte	0x9b
 4258 0140 02       		.uleb128 0x2
 4259 0141 900D0000 		.4byte	.LASF27
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 165


 4260 0145 02       		.byte	0x2
 4261 0146 69       		.byte	0x69
 4262 0147 E5000000 		.4byte	0xe5
 4263 014b 06       		.uleb128 0x6
 4264 014c 04       		.byte	0x4
 4265 014d C4000000 		.4byte	0xc4
 4266 0151 0B       		.uleb128 0xb
 4267 0152 370C0000 		.4byte	.LASF34
 4268 0156 14       		.byte	0x14
 4269 0157 07       		.byte	0x7
 4270 0158 B5       		.byte	0xb5
 4271 0159 9A010000 		.4byte	0x19a
 4272 015d 0C       		.uleb128 0xc
 4273 015e E30C0000 		.4byte	.LASF28
 4274 0162 07       		.byte	0x7
 4275 0163 B8       		.byte	0xb8
 4276 0164 40010000 		.4byte	0x140
 4277 0168 00       		.byte	0
 4278 0169 0C       		.uleb128 0xc
 4279 016a 9B0D0000 		.4byte	.LASF29
 4280 016e 07       		.byte	0x7
 4281 016f B9       		.byte	0xb9
 4282 0170 9A010000 		.4byte	0x19a
 4283 0174 04       		.byte	0x4
 4284 0175 0C       		.uleb128 0xc
 4285 0176 D9070000 		.4byte	.LASF30
 4286 017a 07       		.byte	0x7
 4287 017b BA       		.byte	0xba
 4288 017c 9A010000 		.4byte	0x19a
 4289 0180 08       		.byte	0x8
 4290 0181 0C       		.uleb128 0xc
 4291 0182 DB0C0000 		.4byte	.LASF31
 4292 0186 07       		.byte	0x7
 4293 0187 BB       		.byte	0xbb
 4294 0188 B0000000 		.4byte	0xb0
 4295 018c 0C       		.byte	0xc
 4296 018d 0C       		.uleb128 0xc
 4297 018e 0E080000 		.4byte	.LASF32
 4298 0192 07       		.byte	0x7
 4299 0193 BC       		.byte	0xbc
 4300 0194 B0000000 		.4byte	0xb0
 4301 0198 10       		.byte	0x10
 4302 0199 00       		.byte	0
 4303 019a 06       		.uleb128 0x6
 4304 019b 04       		.byte	0x4
 4305 019c 51010000 		.4byte	0x151
 4306 01a0 02       		.uleb128 0x2
 4307 01a1 AB070000 		.4byte	.LASF33
 4308 01a5 07       		.byte	0x7
 4309 01a6 BF       		.byte	0xbf
 4310 01a7 51010000 		.4byte	0x151
 4311 01ab 0B       		.uleb128 0xb
 4312 01ac 5D010000 		.4byte	.LASF35
 4313 01b0 0C       		.byte	0xc
 4314 01b1 07       		.byte	0x7
 4315 01b2 C1       		.byte	0xc1
 4316 01b3 DC010000 		.4byte	0x1dc
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 166


 4317 01b7 0C       		.uleb128 0xc
 4318 01b8 E30C0000 		.4byte	.LASF28
 4319 01bc 07       		.byte	0x7
 4320 01bd C4       		.byte	0xc4
 4321 01be 40010000 		.4byte	0x140
 4322 01c2 00       		.byte	0
 4323 01c3 0C       		.uleb128 0xc
 4324 01c4 9B0D0000 		.4byte	.LASF29
 4325 01c8 07       		.byte	0x7
 4326 01c9 C5       		.byte	0xc5
 4327 01ca 9A010000 		.4byte	0x19a
 4328 01ce 04       		.byte	0x4
 4329 01cf 0C       		.uleb128 0xc
 4330 01d0 D9070000 		.4byte	.LASF30
 4331 01d4 07       		.byte	0x7
 4332 01d5 C6       		.byte	0xc6
 4333 01d6 9A010000 		.4byte	0x19a
 4334 01da 08       		.byte	0x8
 4335 01db 00       		.byte	0
 4336 01dc 02       		.uleb128 0x2
 4337 01dd 34000000 		.4byte	.LASF36
 4338 01e1 07       		.byte	0x7
 4339 01e2 C8       		.byte	0xc8
 4340 01e3 AB010000 		.4byte	0x1ab
 4341 01e7 0B       		.uleb128 0xb
 4342 01e8 39090000 		.4byte	.LASF37
 4343 01ec 14       		.byte	0x14
 4344 01ed 07       		.byte	0x7
 4345 01ee CD       		.byte	0xcd
 4346 01ef 18020000 		.4byte	0x218
 4347 01f3 0C       		.uleb128 0xc
 4348 01f4 8E040000 		.4byte	.LASF38
 4349 01f8 07       		.byte	0x7
 4350 01f9 D0       		.byte	0xd0
 4351 01fa 35010000 		.4byte	0x135
 4352 01fe 00       		.byte	0
 4353 01ff 0C       		.uleb128 0xc
 4354 0200 06080000 		.4byte	.LASF39
 4355 0204 07       		.byte	0x7
 4356 0205 D1       		.byte	0xd1
 4357 0206 18020000 		.4byte	0x218
 4358 020a 04       		.byte	0x4
 4359 020b 0C       		.uleb128 0xc
 4360 020c 3D010000 		.4byte	.LASF40
 4361 0210 07       		.byte	0x7
 4362 0211 D2       		.byte	0xd2
 4363 0212 DC010000 		.4byte	0x1dc
 4364 0216 08       		.byte	0x8
 4365 0217 00       		.byte	0
 4366 0218 06       		.uleb128 0x6
 4367 0219 04       		.byte	0x4
 4368 021a A0010000 		.4byte	0x1a0
 4369 021e 02       		.uleb128 0x2
 4370 021f E7050000 		.4byte	.LASF41
 4371 0223 07       		.byte	0x7
 4372 0224 D4       		.byte	0xd4
 4373 0225 E7010000 		.4byte	0x1e7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 167


 4374 0229 02       		.uleb128 0x2
 4375 022a 89020000 		.4byte	.LASF42
 4376 022e 08       		.byte	0x8
 4377 022f 67       		.byte	0x67
 4378 0230 B0000000 		.4byte	0xb0
 4379 0234 0D       		.uleb128 0xd
 4380 0235 01       		.byte	0x1
 4381 0236 5E000000 		.4byte	0x5e
 4382 023a 08       		.byte	0x8
 4383 023b 71       		.byte	0x71
 4384 023c 5F020000 		.4byte	0x25f
 4385 0240 0E       		.uleb128 0xe
 4386 0241 610A0000 		.4byte	.LASF43
 4387 0245 00       		.byte	0
 4388 0246 0E       		.uleb128 0xe
 4389 0247 B0040000 		.4byte	.LASF44
 4390 024b 01       		.byte	0x1
 4391 024c 0E       		.uleb128 0xe
 4392 024d FB000000 		.4byte	.LASF45
 4393 0251 02       		.byte	0x2
 4394 0252 0E       		.uleb128 0xe
 4395 0253 00000000 		.4byte	.LASF46
 4396 0257 03       		.byte	0x3
 4397 0258 0E       		.uleb128 0xe
 4398 0259 1A080000 		.4byte	.LASF47
 4399 025d 04       		.byte	0x4
 4400 025e 00       		.byte	0
 4401 025f 02       		.uleb128 0x2
 4402 0260 A20D0000 		.4byte	.LASF48
 4403 0264 08       		.byte	0x8
 4404 0265 77       		.byte	0x77
 4405 0266 34020000 		.4byte	0x234
 4406 026a 0D       		.uleb128 0xd
 4407 026b 01       		.byte	0x1
 4408 026c 5E000000 		.4byte	0x5e
 4409 0270 08       		.byte	0x8
 4410 0271 7B       		.byte	0x7b
 4411 0272 95020000 		.4byte	0x295
 4412 0276 0E       		.uleb128 0xe
 4413 0277 C2020000 		.4byte	.LASF49
 4414 027b 00       		.byte	0
 4415 027c 0E       		.uleb128 0xe
 4416 027d 67020000 		.4byte	.LASF50
 4417 0281 01       		.byte	0x1
 4418 0282 0E       		.uleb128 0xe
 4419 0283 36060000 		.4byte	.LASF51
 4420 0287 02       		.byte	0x2
 4421 0288 0E       		.uleb128 0xe
 4422 0289 4C070000 		.4byte	.LASF52
 4423 028d 03       		.byte	0x3
 4424 028e 0E       		.uleb128 0xe
 4425 028f 3E0D0000 		.4byte	.LASF53
 4426 0293 04       		.byte	0x4
 4427 0294 00       		.byte	0
 4428 0295 02       		.uleb128 0x2
 4429 0296 BD0D0000 		.4byte	.LASF54
 4430 029a 08       		.byte	0x8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 168


 4431 029b 81       		.byte	0x81
 4432 029c 6A020000 		.4byte	0x26a
 4433 02a0 0B       		.uleb128 0xb
 4434 02a1 53010000 		.4byte	.LASF55
 4435 02a5 08       		.byte	0x8
 4436 02a6 08       		.byte	0x8
 4437 02a7 86       		.byte	0x86
 4438 02a8 C5020000 		.4byte	0x2c5
 4439 02ac 0C       		.uleb128 0xc
 4440 02ad C6030000 		.4byte	.LASF56
 4441 02b1 08       		.byte	0x8
 4442 02b2 88       		.byte	0x88
 4443 02b3 2A010000 		.4byte	0x12a
 4444 02b7 00       		.byte	0
 4445 02b8 0C       		.uleb128 0xc
 4446 02b9 51040000 		.4byte	.LASF57
 4447 02bd 08       		.byte	0x8
 4448 02be 89       		.byte	0x89
 4449 02bf 40010000 		.4byte	0x140
 4450 02c3 04       		.byte	0x4
 4451 02c4 00       		.byte	0
 4452 02c5 02       		.uleb128 0x2
 4453 02c6 43000000 		.4byte	.LASF58
 4454 02ca 08       		.byte	0x8
 4455 02cb 8A       		.byte	0x8a
 4456 02cc A0020000 		.4byte	0x2a0
 4457 02d0 0B       		.uleb128 0xb
 4458 02d1 31080000 		.4byte	.LASF59
 4459 02d5 0C       		.byte	0xc
 4460 02d6 08       		.byte	0x8
 4461 02d7 8F       		.byte	0x8f
 4462 02d8 01030000 		.4byte	0x301
 4463 02dc 0C       		.uleb128 0xc
 4464 02dd 23020000 		.4byte	.LASF60
 4465 02e1 08       		.byte	0x8
 4466 02e2 91       		.byte	0x91
 4467 02e3 B0000000 		.4byte	0xb0
 4468 02e7 00       		.byte	0
 4469 02e8 0C       		.uleb128 0xc
 4470 02e9 9B070000 		.4byte	.LASF61
 4471 02ed 08       		.byte	0x8
 4472 02ee 92       		.byte	0x92
 4473 02ef E5000000 		.4byte	0xe5
 4474 02f3 04       		.byte	0x4
 4475 02f4 0C       		.uleb128 0xc
 4476 02f5 AC050000 		.4byte	.LASF62
 4477 02f9 08       		.byte	0x8
 4478 02fa 93       		.byte	0x93
 4479 02fb E5000000 		.4byte	0xe5
 4480 02ff 08       		.byte	0x8
 4481 0300 00       		.byte	0
 4482 0301 02       		.uleb128 0x2
 4483 0302 CC020000 		.4byte	.LASF63
 4484 0306 08       		.byte	0x8
 4485 0307 94       		.byte	0x94
 4486 0308 D0020000 		.4byte	0x2d0
 4487 030c 07       		.uleb128 0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 169


 4488 030d B9000000 		.4byte	0xb9
 4489 0311 06       		.uleb128 0x6
 4490 0312 04       		.byte	0x4
 4491 0313 1F010000 		.4byte	0x11f
 4492 0317 0D       		.uleb128 0xd
 4493 0318 01       		.byte	0x1
 4494 0319 5E000000 		.4byte	0x5e
 4495 031d 01       		.byte	0x1
 4496 031e 7B       		.byte	0x7b
 4497 031f 36030000 		.4byte	0x336
 4498 0323 0E       		.uleb128 0xe
 4499 0324 9D030000 		.4byte	.LASF64
 4500 0328 00       		.byte	0
 4501 0329 0E       		.uleb128 0xe
 4502 032a 10030000 		.4byte	.LASF65
 4503 032e 01       		.byte	0x1
 4504 032f 0E       		.uleb128 0xe
 4505 0330 E40D0000 		.4byte	.LASF66
 4506 0334 02       		.byte	0x2
 4507 0335 00       		.byte	0
 4508 0336 02       		.uleb128 0x2
 4509 0337 310D0000 		.4byte	.LASF67
 4510 033b 01       		.byte	0x1
 4511 033c 7F       		.byte	0x7f
 4512 033d 17030000 		.4byte	0x317
 4513 0341 0B       		.uleb128 0xb
 4514 0342 4A020000 		.4byte	.LASF68
 4515 0346 50       		.byte	0x50
 4516 0347 01       		.byte	0x1
 4517 0348 86       		.byte	0x86
 4518 0349 C6030000 		.4byte	0x3c6
 4519 034d 0C       		.uleb128 0xc
 4520 034e C5040000 		.4byte	.LASF69
 4521 0352 01       		.byte	0x1
 4522 0353 88       		.byte	0x88
 4523 0354 C6030000 		.4byte	0x3c6
 4524 0358 00       		.byte	0
 4525 0359 0C       		.uleb128 0xc
 4526 035a E6090000 		.4byte	.LASF70
 4527 035e 01       		.byte	0x1
 4528 035f 8F       		.byte	0x8f
 4529 0360 A0010000 		.4byte	0x1a0
 4530 0364 04       		.byte	0x4
 4531 0365 0C       		.uleb128 0xc
 4532 0366 35070000 		.4byte	.LASF71
 4533 036a 01       		.byte	0x1
 4534 036b 90       		.byte	0x90
 4535 036c A0010000 		.4byte	0x1a0
 4536 0370 18       		.byte	0x18
 4537 0371 0C       		.uleb128 0xc
 4538 0372 170E0000 		.4byte	.LASF72
 4539 0376 01       		.byte	0x1
 4540 0377 91       		.byte	0x91
 4541 0378 35010000 		.4byte	0x135
 4542 037c 2C       		.byte	0x2c
 4543 037d 0C       		.uleb128 0xc
 4544 037e 4F060000 		.4byte	.LASF73
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 170


 4545 0382 01       		.byte	0x1
 4546 0383 92       		.byte	0x92
 4547 0384 11030000 		.4byte	0x311
 4548 0388 30       		.byte	0x30
 4549 0389 0C       		.uleb128 0xc
 4550 038a 580D0000 		.4byte	.LASF74
 4551 038e 01       		.byte	0x1
 4552 038f 93       		.byte	0x93
 4553 0390 D1030000 		.4byte	0x3d1
 4554 0394 34       		.byte	0x34
 4555 0395 0C       		.uleb128 0xc
 4556 0396 F7090000 		.4byte	.LASF75
 4557 039a 01       		.byte	0x1
 4558 039b A3       		.byte	0xa3
 4559 039c 35010000 		.4byte	0x135
 4560 03a0 40       		.byte	0x40
 4561 03a1 0C       		.uleb128 0xc
 4562 03a2 260B0000 		.4byte	.LASF76
 4563 03a6 01       		.byte	0x1
 4564 03a7 A4       		.byte	0xa4
 4565 03a8 35010000 		.4byte	0x135
 4566 03ac 44       		.byte	0x44
 4567 03ad 0C       		.uleb128 0xc
 4568 03ae 81080000 		.4byte	.LASF77
 4569 03b2 01       		.byte	0x1
 4570 03b3 BF       		.byte	0xbf
 4571 03b4 FE000000 		.4byte	0xfe
 4572 03b8 48       		.byte	0x48
 4573 03b9 0C       		.uleb128 0xc
 4574 03ba 640B0000 		.4byte	.LASF78
 4575 03be 01       		.byte	0x1
 4576 03bf C0       		.byte	0xc0
 4577 03c0 E1030000 		.4byte	0x3e1
 4578 03c4 4C       		.byte	0x4c
 4579 03c5 00       		.byte	0
 4580 03c6 06       		.uleb128 0x6
 4581 03c7 04       		.byte	0x4
 4582 03c8 CC030000 		.4byte	0x3cc
 4583 03cc 08       		.uleb128 0x8
 4584 03cd 1F010000 		.4byte	0x11f
 4585 03d1 0F       		.uleb128 0xf
 4586 03d2 B2000000 		.4byte	0xb2
 4587 03d6 E1030000 		.4byte	0x3e1
 4588 03da 10       		.uleb128 0x10
 4589 03db A9000000 		.4byte	0xa9
 4590 03df 0B       		.byte	0xb
 4591 03e0 00       		.byte	0
 4592 03e1 08       		.uleb128 0x8
 4593 03e2 36030000 		.4byte	0x336
 4594 03e6 02       		.uleb128 0x2
 4595 03e7 F9040000 		.4byte	.LASF79
 4596 03eb 01       		.byte	0x1
 4597 03ec C3       		.byte	0xc3
 4598 03ed 41030000 		.4byte	0x341
 4599 03f1 02       		.uleb128 0x2
 4600 03f2 BE080000 		.4byte	.LASF80
 4601 03f6 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 171


 4602 03f7 C7       		.byte	0xc7
 4603 03f8 E6030000 		.4byte	0x3e6
 4604 03fc 11       		.uleb128 0x11
 4605 03fd F50C0000 		.4byte	.LASF230
 4606 0401 02       		.byte	0x2
 4607 0402 A5       		.byte	0xa5
 4608 0403 C4000000 		.4byte	0xc4
 4609 0407 03       		.byte	0x3
 4610 0408 23040000 		.4byte	0x423
 4611 040c 12       		.uleb128 0x12
 4612 040d D3080000 		.4byte	.LASF231
 4613 0411 02       		.byte	0x2
 4614 0412 A5       		.byte	0xa5
 4615 0413 E5000000 		.4byte	0xe5
 4616 0417 13       		.uleb128 0x13
 4617 0418 0B000000 		.4byte	.LASF232
 4618 041c 02       		.byte	0x2
 4619 041d A7       		.byte	0xa7
 4620 041e C4000000 		.4byte	0xc4
 4621 0422 00       		.byte	0
 4622 0423 14       		.uleb128 0x14
 4623 0424 790D0000 		.4byte	.LASF83
 4624 0428 01       		.byte	0x1
 4625 0429 5D05     		.2byte	0x55d
 4626 042b 2A010000 		.4byte	0x12a
 4627 042f 00000000 		.4byte	.LFB73
 4628 0433 38000000 		.4byte	.LFE73-.LFB73
 4629 0437 01       		.uleb128 0x1
 4630 0438 9C       		.byte	0x9c
 4631 0439 6E040000 		.4byte	0x46e
 4632 043d 15       		.uleb128 0x15
 4633 043e 8A0A0000 		.4byte	.LASF85
 4634 0442 01       		.byte	0x1
 4635 0443 5D05     		.2byte	0x55d
 4636 0445 6E040000 		.4byte	0x46e
 4637 0449 00000000 		.4byte	.LLST0
 4638 044d 16       		.uleb128 0x16
 4639 044e 39040000 		.4byte	.LASF81
 4640 0452 01       		.byte	0x1
 4641 0453 5F05     		.2byte	0x55f
 4642 0455 2A010000 		.4byte	0x12a
 4643 0459 6C000000 		.4byte	.LLST1
 4644 045d 16       		.uleb128 0x16
 4645 045e 49050000 		.4byte	.LASF82
 4646 0462 01       		.byte	0x1
 4647 0463 6005     		.2byte	0x560
 4648 0465 7E040000 		.4byte	0x47e
 4649 0469 8B000000 		.4byte	.LLST2
 4650 046d 00       		.byte	0
 4651 046e 07       		.uleb128 0x7
 4652 046f 29020000 		.4byte	0x229
 4653 0473 06       		.uleb128 0x6
 4654 0474 04       		.byte	0x4
 4655 0475 79040000 		.4byte	0x479
 4656 0479 07       		.uleb128 0x7
 4657 047a F1030000 		.4byte	0x3f1
 4658 047e 07       		.uleb128 0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 172


 4659 047f 73040000 		.4byte	0x473
 4660 0483 14       		.uleb128 0x14
 4661 0484 50080000 		.4byte	.LASF84
 4662 0488 01       		.byte	0x1
 4663 0489 BF0C     		.2byte	0xcbf
 4664 048b CF000000 		.4byte	0xcf
 4665 048f 00000000 		.4byte	.LFB98
 4666 0493 14000000 		.4byte	.LFE98-.LFB98
 4667 0497 01       		.uleb128 0x1
 4668 0498 9C       		.byte	0x9c
 4669 0499 BE040000 		.4byte	0x4be
 4670 049d 15       		.uleb128 0x15
 4671 049e EE050000 		.4byte	.LASF86
 4672 04a2 01       		.byte	0x1
 4673 04a3 BF0C     		.2byte	0xcbf
 4674 04a5 BE040000 		.4byte	0x4be
 4675 04a9 F7000000 		.4byte	.LLST3
 4676 04ad 16       		.uleb128 0x16
 4677 04ae 44070000 		.4byte	.LASF87
 4678 04b2 01       		.byte	0x1
 4679 04b3 C10C     		.2byte	0xcc1
 4680 04b5 E5000000 		.4byte	0xe5
 4681 04b9 15010000 		.4byte	.LLST4
 4682 04bd 00       		.byte	0
 4683 04be 06       		.uleb128 0x6
 4684 04bf 04       		.byte	0x4
 4685 04c0 C4040000 		.4byte	0x4c4
 4686 04c4 07       		.uleb128 0x7
 4687 04c5 C4000000 		.4byte	0xc4
 4688 04c9 17       		.uleb128 0x17
 4689 04ca 65030000 		.4byte	.LASF88
 4690 04ce 01       		.byte	0x1
 4691 04cf 130D     		.2byte	0xd13
 4692 04d1 00000000 		.4byte	.LFB101
 4693 04d5 2C000000 		.4byte	.LFE101-.LFB101
 4694 04d9 01       		.uleb128 0x1
 4695 04da 9C       		.byte	0x9c
 4696 04db F0040000 		.4byte	0x4f0
 4697 04df 16       		.uleb128 0x16
 4698 04e0 49050000 		.4byte	.LASF82
 4699 04e4 01       		.byte	0x1
 4700 04e5 150D     		.2byte	0xd15
 4701 04e7 F0040000 		.4byte	0x4f0
 4702 04eb 43010000 		.4byte	.LLST5
 4703 04ef 00       		.byte	0
 4704 04f0 06       		.uleb128 0x6
 4705 04f1 04       		.byte	0x4
 4706 04f2 F1030000 		.4byte	0x3f1
 4707 04f6 17       		.uleb128 0x17
 4708 04f7 FB050000 		.4byte	.LASF89
 4709 04fb 01       		.byte	0x1
 4710 04fc EF0C     		.2byte	0xcef
 4711 04fe 00000000 		.4byte	.LFB100
 4712 0502 12000000 		.4byte	.LFE100-.LFB100
 4713 0506 01       		.uleb128 0x1
 4714 0507 9C       		.byte	0x9c
 4715 0508 36050000 		.4byte	0x536
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 173


 4716 050c 15       		.uleb128 0x15
 4717 050d 49050000 		.4byte	.LASF82
 4718 0511 01       		.byte	0x1
 4719 0512 EF0C     		.2byte	0xcef
 4720 0514 F0040000 		.4byte	0x4f0
 4721 0518 56010000 		.4byte	.LLST6
 4722 051c 18       		.uleb128 0x18
 4723 051d 0A000000 		.4byte	.LVL18
 4724 0521 E51D0000 		.4byte	0x1de5
 4725 0525 19       		.uleb128 0x19
 4726 0526 10000000 		.4byte	.LVL19
 4727 052a E51D0000 		.4byte	0x1de5
 4728 052e 1A       		.uleb128 0x1a
 4729 052f 01       		.uleb128 0x1
 4730 0530 50       		.byte	0x50
 4731 0531 02       		.uleb128 0x2
 4732 0532 74       		.byte	0x74
 4733 0533 00       		.sleb128 0
 4734 0534 00       		.byte	0
 4735 0535 00       		.byte	0
 4736 0536 14       		.uleb128 0x14
 4737 0537 AB020000 		.4byte	.LASF90
 4738 053b 01       		.byte	0x1
 4739 053c 1D0C     		.2byte	0xc1d
 4740 053e F0040000 		.4byte	0x4f0
 4741 0542 00000000 		.4byte	.LFB97
 4742 0546 3A000000 		.4byte	.LFE97-.LFB97
 4743 054a 01       		.uleb128 0x1
 4744 054b 9C       		.byte	0x9c
 4745 054c EF050000 		.4byte	0x5ef
 4746 0550 15       		.uleb128 0x15
 4747 0551 81030000 		.4byte	.LASF91
 4748 0555 01       		.byte	0x1
 4749 0556 1D0C     		.2byte	0xc1d
 4750 0558 EF050000 		.4byte	0x5ef
 4751 055c 74010000 		.4byte	.LLST7
 4752 0560 15       		.uleb128 0x15
 4753 0561 8E030000 		.4byte	.LASF92
 4754 0565 01       		.byte	0x1
 4755 0566 1D0C     		.2byte	0xc1d
 4756 0568 F4050000 		.4byte	0x5f4
 4757 056c 95010000 		.4byte	.LLST8
 4758 0570 16       		.uleb128 0x16
 4759 0571 5E020000 		.4byte	.LASF93
 4760 0575 01       		.byte	0x1
 4761 0576 1F0C     		.2byte	0xc1f
 4762 0578 F0040000 		.4byte	0x4f0
 4763 057c C1010000 		.4byte	.LLST9
 4764 0580 1B       		.uleb128 0x1b
 4765 0581 04000000 		.4byte	.LBB7
 4766 0585 26000000 		.4byte	.LBE7-.LBB7
 4767 0589 D6050000 		.4byte	0x5d6
 4768 058d 1C       		.uleb128 0x1c
 4769 058e 4F060000 		.4byte	.LASF73
 4770 0592 01       		.byte	0x1
 4771 0593 3B0C     		.2byte	0xc3b
 4772 0595 11030000 		.4byte	0x311
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 174


 4773 0599 01       		.uleb128 0x1
 4774 059a 54       		.byte	0x54
 4775 059b 1D       		.uleb128 0x1d
 4776 059c 0E000000 		.4byte	.LVL22
 4777 05a0 F01D0000 		.4byte	0x1df0
 4778 05a4 B1050000 		.4byte	0x5b1
 4779 05a8 1A       		.uleb128 0x1a
 4780 05a9 01       		.uleb128 0x1
 4781 05aa 50       		.byte	0x50
 4782 05ab 04       		.uleb128 0x4
 4783 05ac 76       		.byte	0x76
 4784 05ad 00       		.sleb128 0
 4785 05ae 32       		.byte	0x32
 4786 05af 24       		.byte	0x24
 4787 05b0 00       		.byte	0
 4788 05b1 1D       		.uleb128 0x1d
 4789 05b2 18000000 		.4byte	.LVL24
 4790 05b6 F01D0000 		.4byte	0x1df0
 4791 05ba C5050000 		.4byte	0x5c5
 4792 05be 1A       		.uleb128 0x1a
 4793 05bf 01       		.uleb128 0x1
 4794 05c0 50       		.byte	0x50
 4795 05c1 02       		.uleb128 0x2
 4796 05c2 08       		.byte	0x8
 4797 05c3 50       		.byte	0x50
 4798 05c4 00       		.byte	0
 4799 05c5 19       		.uleb128 0x19
 4800 05c6 26000000 		.4byte	.LVL26
 4801 05ca E51D0000 		.4byte	0x1de5
 4802 05ce 1A       		.uleb128 0x1a
 4803 05cf 01       		.uleb128 0x1
 4804 05d0 50       		.byte	0x50
 4805 05d1 02       		.uleb128 0x2
 4806 05d2 74       		.byte	0x74
 4807 05d3 00       		.sleb128 0
 4808 05d4 00       		.byte	0
 4809 05d5 00       		.byte	0
 4810 05d6 19       		.uleb128 0x19
 4811 05d7 36000000 		.4byte	.LVL29
 4812 05db FB1D0000 		.4byte	0x1dfb
 4813 05df 1A       		.uleb128 0x1a
 4814 05e0 01       		.uleb128 0x1
 4815 05e1 51       		.byte	0x51
 4816 05e2 02       		.uleb128 0x2
 4817 05e3 08       		.byte	0x8
 4818 05e4 A5       		.byte	0xa5
 4819 05e5 1A       		.uleb128 0x1a
 4820 05e6 01       		.uleb128 0x1
 4821 05e7 52       		.byte	0x52
 4822 05e8 04       		.uleb128 0x4
 4823 05e9 76       		.byte	0x76
 4824 05ea 00       		.sleb128 0
 4825 05eb 32       		.byte	0x32
 4826 05ec 24       		.byte	0x24
 4827 05ed 00       		.byte	0
 4828 05ee 00       		.byte	0
 4829 05ef 07       		.uleb128 0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 175


 4830 05f0 CF000000 		.4byte	0xcf
 4831 05f4 07       		.uleb128 0x7
 4832 05f5 11030000 		.4byte	0x311
 4833 05f9 17       		.uleb128 0x17
 4834 05fa 190A0000 		.4byte	.LASF94
 4835 05fe 01       		.byte	0x1
 4836 05ff 110B     		.2byte	0xb11
 4837 0601 00000000 		.4byte	.LFB93
 4838 0605 50000000 		.4byte	.LFE93-.LFB93
 4839 0609 01       		.uleb128 0x1
 4840 060a 9C       		.byte	0x9c
 4841 060b 91060000 		.4byte	0x691
 4842 060f 15       		.uleb128 0x15
 4843 0610 49050000 		.4byte	.LASF82
 4844 0614 01       		.byte	0x1
 4845 0615 110B     		.2byte	0xb11
 4846 0617 91060000 		.4byte	0x691
 4847 061b EA010000 		.4byte	.LLST10
 4848 061f 15       		.uleb128 0x15
 4849 0620 450E0000 		.4byte	.LASF95
 4850 0624 01       		.byte	0x1
 4851 0625 110B     		.2byte	0xb11
 4852 0627 0C030000 		.4byte	0x30c
 4853 062b 08020000 		.4byte	.LLST11
 4854 062f 15       		.uleb128 0x15
 4855 0630 170E0000 		.4byte	.LASF72
 4856 0634 01       		.byte	0x1
 4857 0635 110B     		.2byte	0xb11
 4858 0637 35010000 		.4byte	0x135
 4859 063b 29020000 		.4byte	.LLST12
 4860 063f 15       		.uleb128 0x15
 4861 0640 A2060000 		.4byte	.LASF96
 4862 0644 01       		.byte	0x1
 4863 0645 110B     		.2byte	0xb11
 4864 0647 A1060000 		.4byte	0x6a1
 4865 064b 47020000 		.4byte	.LLST13
 4866 064f 1E       		.uleb128 0x1e
 4867 0650 81030000 		.4byte	.LASF91
 4868 0654 01       		.byte	0x1
 4869 0655 110B     		.2byte	0xb11
 4870 0657 EF050000 		.4byte	0x5ef
 4871 065b 02       		.uleb128 0x2
 4872 065c 91       		.byte	0x91
 4873 065d 00       		.sleb128 0
 4874 065e 1F       		.uleb128 0x1f
 4875 065f 7800     		.ascii	"x\000"
 4876 0661 01       		.byte	0x1
 4877 0662 130B     		.2byte	0xb13
 4878 0664 35010000 		.4byte	0x135
 4879 0668 68020000 		.4byte	.LLST14
 4880 066c 1D       		.uleb128 0x1d
 4881 066d 36000000 		.4byte	.LVL37
 4882 0671 061E0000 		.4byte	0x1e06
 4883 0675 80060000 		.4byte	0x680
 4884 0679 1A       		.uleb128 0x1a
 4885 067a 01       		.uleb128 0x1
 4886 067b 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 176


 4887 067c 02       		.uleb128 0x2
 4888 067d 74       		.byte	0x74
 4889 067e 04       		.sleb128 4
 4890 067f 00       		.byte	0
 4891 0680 19       		.uleb128 0x19
 4892 0681 3E000000 		.4byte	.LVL38
 4893 0685 061E0000 		.4byte	0x1e06
 4894 0689 1A       		.uleb128 0x1a
 4895 068a 01       		.uleb128 0x1
 4896 068b 50       		.byte	0x50
 4897 068c 02       		.uleb128 0x2
 4898 068d 74       		.byte	0x74
 4899 068e 18       		.sleb128 24
 4900 068f 00       		.byte	0
 4901 0690 00       		.byte	0
 4902 0691 07       		.uleb128 0x7
 4903 0692 F0040000 		.4byte	0x4f0
 4904 0696 06       		.uleb128 0x6
 4905 0697 04       		.byte	0x4
 4906 0698 9C060000 		.4byte	0x69c
 4907 069c 07       		.uleb128 0x7
 4908 069d 01030000 		.4byte	0x301
 4909 06a1 07       		.uleb128 0x7
 4910 06a2 96060000 		.4byte	0x696
 4911 06a6 17       		.uleb128 0x17
 4912 06a7 95050000 		.4byte	.LASF97
 4913 06ab 01       		.byte	0x1
 4914 06ac B60B     		.2byte	0xbb6
 4915 06ae 00000000 		.4byte	.LFB94
 4916 06b2 58000000 		.4byte	.LFE94-.LFB94
 4917 06b6 01       		.uleb128 0x1
 4918 06b7 9C       		.byte	0x9c
 4919 06b8 4F070000 		.4byte	0x74f
 4920 06bc 16       		.uleb128 0x16
 4921 06bd 170E0000 		.4byte	.LASF72
 4922 06c1 01       		.byte	0x1
 4923 06c2 B80B     		.2byte	0xbb8
 4924 06c4 35010000 		.4byte	0x135
 4925 06c8 87020000 		.4byte	.LLST15
 4926 06cc 1D       		.uleb128 0x1d
 4927 06cd 14000000 		.4byte	.LVL42
 4928 06d1 121E0000 		.4byte	0x1e12
 4929 06d5 ED060000 		.4byte	0x6ed
 4930 06d9 1A       		.uleb128 0x1a
 4931 06da 01       		.uleb128 0x1
 4932 06db 50       		.byte	0x50
 4933 06dc 0F       		.uleb128 0xf
 4934 06dd 74       		.byte	0x74
 4935 06de 00       		.sleb128 0
 4936 06df 32       		.byte	0x32
 4937 06e0 24       		.byte	0x24
 4938 06e1 74       		.byte	0x74
 4939 06e2 00       		.sleb128 0
 4940 06e3 22       		.byte	0x22
 4941 06e4 32       		.byte	0x32
 4942 06e5 24       		.byte	0x24
 4943 06e6 03       		.byte	0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 177


 4944 06e7 30000000 		.4byte	.LANCHOR0+48
 4945 06eb 22       		.byte	0x22
 4946 06ec 00       		.byte	0
 4947 06ed 1D       		.uleb128 0x1d
 4948 06ee 26000000 		.4byte	.LVL45
 4949 06f2 121E0000 		.4byte	0x1e12
 4950 06f6 01070000 		.4byte	0x701
 4951 06fa 1A       		.uleb128 0x1a
 4952 06fb 01       		.uleb128 0x1
 4953 06fc 50       		.byte	0x50
 4954 06fd 02       		.uleb128 0x2
 4955 06fe 76       		.byte	0x76
 4956 06ff 00       		.sleb128 0
 4957 0700 00       		.byte	0
 4958 0701 1D       		.uleb128 0x1d
 4959 0702 30000000 		.4byte	.LVL46
 4960 0706 121E0000 		.4byte	0x1e12
 4961 070a 15070000 		.4byte	0x715
 4962 070e 1A       		.uleb128 0x1a
 4963 070f 01       		.uleb128 0x1
 4964 0710 50       		.byte	0x50
 4965 0711 02       		.uleb128 0x2
 4966 0712 75       		.byte	0x75
 4967 0713 00       		.sleb128 0
 4968 0714 00       		.byte	0
 4969 0715 1D       		.uleb128 0x1d
 4970 0716 38000000 		.4byte	.LVL47
 4971 071a 121E0000 		.4byte	0x1e12
 4972 071e 29070000 		.4byte	0x729
 4973 0722 1A       		.uleb128 0x1a
 4974 0723 01       		.uleb128 0x1
 4975 0724 50       		.byte	0x50
 4976 0725 02       		.uleb128 0x2
 4977 0726 74       		.byte	0x74
 4978 0727 14       		.sleb128 20
 4979 0728 00       		.byte	0
 4980 0729 1D       		.uleb128 0x1d
 4981 072a 40000000 		.4byte	.LVL48
 4982 072e 121E0000 		.4byte	0x1e12
 4983 0732 3E070000 		.4byte	0x73e
 4984 0736 1A       		.uleb128 0x1a
 4985 0737 01       		.uleb128 0x1
 4986 0738 50       		.byte	0x50
 4987 0739 03       		.uleb128 0x3
 4988 073a 74       		.byte	0x74
 4989 073b BC01     		.sleb128 188
 4990 073d 00       		.byte	0
 4991 073e 19       		.uleb128 0x19
 4992 073f 46000000 		.4byte	.LVL49
 4993 0743 121E0000 		.4byte	0x1e12
 4994 0747 1A       		.uleb128 0x1a
 4995 0748 01       		.uleb128 0x1
 4996 0749 50       		.byte	0x50
 4997 074a 02       		.uleb128 0x2
 4998 074b 74       		.byte	0x74
 4999 074c 00       		.sleb128 0
 5000 074d 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 178


 5001 074e 00       		.byte	0
 5002 074f 17       		.uleb128 0x17
 5003 0750 400B0000 		.4byte	.LASF98
 5004 0754 01       		.byte	0x1
 5005 0755 FF0B     		.2byte	0xbff
 5006 0757 00000000 		.4byte	.LFB96
 5007 075b 44000000 		.4byte	.LFE96-.LFB96
 5008 075f 01       		.uleb128 0x1
 5009 0760 9C       		.byte	0x9c
 5010 0761 88070000 		.4byte	0x788
 5011 0765 15       		.uleb128 0x15
 5012 0766 17010000 		.4byte	.LASF99
 5013 076a 01       		.byte	0x1
 5014 076b FF0B     		.2byte	0xbff
 5015 076d 88070000 		.4byte	0x788
 5016 0771 A6020000 		.4byte	.LLST16
 5017 0775 18       		.uleb128 0x18
 5018 0776 22000000 		.4byte	.LVL52
 5019 077a 1E1E0000 		.4byte	0x1e1e
 5020 077e 18       		.uleb128 0x18
 5021 077f 34000000 		.4byte	.LVL55
 5022 0783 1E1E0000 		.4byte	0x1e1e
 5023 0787 00       		.byte	0
 5024 0788 07       		.uleb128 0x7
 5025 0789 40010000 		.4byte	0x140
 5026 078d 20       		.uleb128 0x20
 5027 078e 04010000 		.4byte	.LASF104
 5028 0792 01       		.byte	0x1
 5029 0793 2702     		.2byte	0x227
 5030 0795 2A010000 		.4byte	0x12a
 5031 0799 00000000 		.4byte	.LFB64
 5032 079d F4000000 		.4byte	.LFE64-.LFB64
 5033 07a1 01       		.uleb128 0x1
 5034 07a2 9C       		.byte	0x9c
 5035 07a3 FA080000 		.4byte	0x8fa
 5036 07a7 15       		.uleb128 0x15
 5037 07a8 16070000 		.4byte	.LASF100
 5038 07ac 01       		.byte	0x1
 5039 07ad 2702     		.2byte	0x227
 5040 07af 03010000 		.4byte	0x103
 5041 07b3 03030000 		.4byte	.LLST17
 5042 07b7 15       		.uleb128 0x15
 5043 07b8 450E0000 		.4byte	.LASF95
 5044 07bc 01       		.byte	0x1
 5045 07bd 2702     		.2byte	0x227
 5046 07bf 0C030000 		.4byte	0x30c
 5047 07c3 2F030000 		.4byte	.LLST18
 5048 07c7 15       		.uleb128 0x15
 5049 07c8 81030000 		.4byte	.LASF91
 5050 07cc 01       		.byte	0x1
 5051 07cd 2702     		.2byte	0x227
 5052 07cf EF050000 		.4byte	0x5ef
 5053 07d3 5B030000 		.4byte	.LLST19
 5054 07d7 15       		.uleb128 0x15
 5055 07d8 D2040000 		.4byte	.LASF101
 5056 07dc 01       		.byte	0x1
 5057 07dd 2702     		.2byte	0x227
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 179


 5058 07df FA080000 		.4byte	0x8fa
 5059 07e3 7C030000 		.4byte	.LLST20
 5060 07e7 15       		.uleb128 0x15
 5061 07e8 170E0000 		.4byte	.LASF72
 5062 07ec 01       		.byte	0x1
 5063 07ed 2702     		.2byte	0x227
 5064 07ef 35010000 		.4byte	0x135
 5065 07f3 A8030000 		.4byte	.LLST21
 5066 07f7 15       		.uleb128 0x15
 5067 07f8 80040000 		.4byte	.LASF102
 5068 07fc 01       		.byte	0x1
 5069 07fd 2702     		.2byte	0x227
 5070 07ff 05090000 		.4byte	0x905
 5071 0803 C8030000 		.4byte	.LLST22
 5072 0807 15       		.uleb128 0x15
 5073 0808 8E030000 		.4byte	.LASF92
 5074 080c 01       		.byte	0x1
 5075 080d 2702     		.2byte	0x227
 5076 080f F4050000 		.4byte	0x5f4
 5077 0813 E8030000 		.4byte	.LLST23
 5078 0817 15       		.uleb128 0x15
 5079 0818 A2060000 		.4byte	.LASF96
 5080 081c 01       		.byte	0x1
 5081 081d 2702     		.2byte	0x227
 5082 081f A1060000 		.4byte	0x6a1
 5083 0823 08040000 		.4byte	.LLST24
 5084 0827 16       		.uleb128 0x16
 5085 0828 39040000 		.4byte	.LASF81
 5086 082c 01       		.byte	0x1
 5087 082d 2902     		.2byte	0x229
 5088 082f 2A010000 		.4byte	0x12a
 5089 0833 28040000 		.4byte	.LLST25
 5090 0837 16       		.uleb128 0x16
 5091 0838 5E020000 		.4byte	.LASF93
 5092 083c 01       		.byte	0x1
 5093 083d 2A02     		.2byte	0x22a
 5094 083f F0040000 		.4byte	0x4f0
 5095 0843 52040000 		.4byte	.LLST26
 5096 0847 16       		.uleb128 0x16
 5097 0848 C5040000 		.4byte	.LASF69
 5098 084c 01       		.byte	0x1
 5099 084d 2B02     		.2byte	0x22b
 5100 084f 11030000 		.4byte	0x311
 5101 0853 7B040000 		.4byte	.LLST27
 5102 0857 1D       		.uleb128 0x1d
 5103 0858 18000000 		.4byte	.LVL60
 5104 085c 36050000 		.4byte	0x536
 5105 0860 72080000 		.4byte	0x872
 5106 0864 1A       		.uleb128 0x1a
 5107 0865 01       		.uleb128 0x1
 5108 0866 50       		.byte	0x50
 5109 0867 02       		.uleb128 0x2
 5110 0868 76       		.byte	0x76
 5111 0869 00       		.sleb128 0
 5112 086a 1A       		.uleb128 0x1a
 5113 086b 01       		.uleb128 0x1
 5114 086c 51       		.byte	0x51
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 180


 5115 086d 03       		.uleb128 0x3
 5116 086e 91       		.byte	0x91
 5117 086f 08       		.sleb128 8
 5118 0870 06       		.byte	0x6
 5119 0871 00       		.byte	0
 5120 0872 1D       		.uleb128 0x1d
 5121 0873 3A000000 		.4byte	.LVL63
 5122 0877 F9050000 		.4byte	0x5f9
 5123 087b A1080000 		.4byte	0x8a1
 5124 087f 1A       		.uleb128 0x1a
 5125 0880 01       		.uleb128 0x1
 5126 0881 50       		.byte	0x50
 5127 0882 02       		.uleb128 0x2
 5128 0883 74       		.byte	0x74
 5129 0884 00       		.sleb128 0
 5130 0885 1A       		.uleb128 0x1a
 5131 0886 01       		.uleb128 0x1
 5132 0887 51       		.byte	0x51
 5133 0888 02       		.uleb128 0x2
 5134 0889 7A       		.byte	0x7a
 5135 088a 00       		.sleb128 0
 5136 088b 1A       		.uleb128 0x1a
 5137 088c 01       		.uleb128 0x1
 5138 088d 52       		.byte	0x52
 5139 088e 03       		.uleb128 0x3
 5140 088f 91       		.byte	0x91
 5141 0890 00       		.sleb128 0
 5142 0891 06       		.byte	0x6
 5143 0892 1A       		.uleb128 0x1a
 5144 0893 01       		.uleb128 0x1
 5145 0894 53       		.byte	0x53
 5146 0895 03       		.uleb128 0x3
 5147 0896 91       		.byte	0x91
 5148 0897 0C       		.sleb128 12
 5149 0898 06       		.byte	0x6
 5150 0899 1A       		.uleb128 0x1a
 5151 089a 02       		.uleb128 0x2
 5152 089b 7D       		.byte	0x7d
 5153 089c 00       		.sleb128 0
 5154 089d 02       		.uleb128 0x2
 5155 089e 76       		.byte	0x76
 5156 089f 00       		.sleb128 0
 5157 08a0 00       		.byte	0
 5158 08a1 1D       		.uleb128 0x1d
 5159 08a2 44000000 		.4byte	.LVL64
 5160 08a6 2A1E0000 		.4byte	0x1e2a
 5161 08aa C1080000 		.4byte	0x8c1
 5162 08ae 1A       		.uleb128 0x1a
 5163 08af 01       		.uleb128 0x1
 5164 08b0 50       		.byte	0x50
 5165 08b1 02       		.uleb128 0x2
 5166 08b2 75       		.byte	0x75
 5167 08b3 00       		.sleb128 0
 5168 08b4 1A       		.uleb128 0x1a
 5169 08b5 01       		.uleb128 0x1
 5170 08b6 51       		.byte	0x51
 5171 08b7 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 181


 5172 08b8 78       		.byte	0x78
 5173 08b9 00       		.sleb128 0
 5174 08ba 1A       		.uleb128 0x1a
 5175 08bb 01       		.uleb128 0x1
 5176 08bc 52       		.byte	0x52
 5177 08bd 02       		.uleb128 0x2
 5178 08be 79       		.byte	0x79
 5179 08bf 00       		.sleb128 0
 5180 08c0 00       		.byte	0
 5181 08c1 18       		.uleb128 0x18
 5182 08c2 4E000000 		.4byte	.LVL65
 5183 08c6 351E0000 		.4byte	0x1e35
 5184 08ca 18       		.uleb128 0x18
 5185 08cb 72000000 		.4byte	.LVL66
 5186 08cf A6060000 		.4byte	0x6a6
 5187 08d3 1D       		.uleb128 0x1d
 5188 08d4 BE000000 		.4byte	.LVL68
 5189 08d8 401E0000 		.4byte	0x1e40
 5190 08dc E7080000 		.4byte	0x8e7
 5191 08e0 1A       		.uleb128 0x1a
 5192 08e1 01       		.uleb128 0x1
 5193 08e2 51       		.byte	0x51
 5194 08e3 02       		.uleb128 0x2
 5195 08e4 74       		.byte	0x74
 5196 08e5 04       		.sleb128 4
 5197 08e6 00       		.byte	0
 5198 08e7 18       		.uleb128 0x18
 5199 08e8 C2000000 		.4byte	.LVL69
 5200 08ec 4C1E0000 		.4byte	0x1e4c
 5201 08f0 18       		.uleb128 0x18
 5202 08f1 E8000000 		.4byte	.LVL73
 5203 08f5 571E0000 		.4byte	0x1e57
 5204 08f9 00       		.byte	0
 5205 08fa 07       		.uleb128 0x7
 5206 08fb B0000000 		.4byte	0xb0
 5207 08ff 06       		.uleb128 0x6
 5208 0900 04       		.byte	0x4
 5209 0901 29020000 		.4byte	0x229
 5210 0905 07       		.uleb128 0x7
 5211 0906 FF080000 		.4byte	0x8ff
 5212 090a 21       		.uleb128 0x21
 5213 090b C50B0000 		.4byte	.LASF112
 5214 090f 01       		.byte	0x1
 5215 0910 E802     		.2byte	0x2e8
 5216 0912 00000000 		.4byte	.LFB65
 5217 0916 94000000 		.4byte	.LFE65-.LFB65
 5218 091a 01       		.uleb128 0x1
 5219 091b 9C       		.byte	0x9c
 5220 091c BA090000 		.4byte	0x9ba
 5221 0920 15       		.uleb128 0x15
 5222 0921 E4070000 		.4byte	.LASF103
 5223 0925 01       		.byte	0x1
 5224 0926 E802     		.2byte	0x2e8
 5225 0928 29020000 		.4byte	0x229
 5226 092c 8E040000 		.4byte	.LLST28
 5227 0930 16       		.uleb128 0x16
 5228 0931 49050000 		.4byte	.LASF82
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 182


 5229 0935 01       		.byte	0x1
 5230 0936 EA02     		.2byte	0x2ea
 5231 0938 F0040000 		.4byte	0x4f0
 5232 093c AC040000 		.4byte	.LLST29
 5233 0940 18       		.uleb128 0x18
 5234 0941 08000000 		.4byte	.LVL76
 5235 0945 351E0000 		.4byte	0x1e35
 5236 0949 1D       		.uleb128 0x1d
 5237 094a 18000000 		.4byte	.LVL78
 5238 094e 621E0000 		.4byte	0x1e62
 5239 0952 5D090000 		.4byte	0x95d
 5240 0956 1A       		.uleb128 0x1a
 5241 0957 01       		.uleb128 0x1
 5242 0958 50       		.byte	0x50
 5243 0959 02       		.uleb128 0x2
 5244 095a 76       		.byte	0x76
 5245 095b 00       		.sleb128 0
 5246 095c 00       		.byte	0
 5247 095d 1D       		.uleb128 0x1d
 5248 095e 48000000 		.4byte	.LVL79
 5249 0962 621E0000 		.4byte	0x1e62
 5250 0966 71090000 		.4byte	0x971
 5251 096a 1A       		.uleb128 0x1a
 5252 096b 01       		.uleb128 0x1
 5253 096c 50       		.byte	0x50
 5254 096d 02       		.uleb128 0x2
 5255 096e 75       		.byte	0x75
 5256 096f 18       		.sleb128 24
 5257 0970 00       		.byte	0
 5258 0971 1D       		.uleb128 0x1d
 5259 0972 54000000 		.4byte	.LVL80
 5260 0976 401E0000 		.4byte	0x1e40
 5261 097a 8C090000 		.4byte	0x98c
 5262 097e 1A       		.uleb128 0x1a
 5263 097f 01       		.uleb128 0x1
 5264 0980 50       		.byte	0x50
 5265 0981 03       		.uleb128 0x3
 5266 0982 74       		.byte	0x74
 5267 0983 BC01     		.sleb128 188
 5268 0985 1A       		.uleb128 0x1a
 5269 0986 01       		.uleb128 0x1
 5270 0987 51       		.byte	0x51
 5271 0988 02       		.uleb128 0x2
 5272 0989 76       		.byte	0x76
 5273 098a 00       		.sleb128 0
 5274 098b 00       		.byte	0
 5275 098c 18       		.uleb128 0x18
 5276 098d 6C000000 		.4byte	.LVL81
 5277 0991 4C1E0000 		.4byte	0x1e4c
 5278 0995 18       		.uleb128 0x18
 5279 0996 7E000000 		.4byte	.LVL82
 5280 099a 571E0000 		.4byte	0x1e57
 5281 099e 18       		.uleb128 0x18
 5282 099f 84000000 		.4byte	.LVL84
 5283 09a3 351E0000 		.4byte	0x1e35
 5284 09a7 18       		.uleb128 0x18
 5285 09a8 88000000 		.4byte	.LVL85
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 183


 5286 09ac C9040000 		.4byte	0x4c9
 5287 09b0 18       		.uleb128 0x18
 5288 09b1 8C000000 		.4byte	.LVL86
 5289 09b5 4C1E0000 		.4byte	0x1e4c
 5290 09b9 00       		.byte	0
 5291 09ba 20       		.uleb128 0x20
 5292 09bb 23080000 		.4byte	.LASF105
 5293 09bf 01       		.byte	0x1
 5294 09c0 DC03     		.2byte	0x3dc
 5295 09c2 5F020000 		.4byte	0x25f
 5296 09c6 00000000 		.4byte	.LFB68
 5297 09ca 60000000 		.4byte	.LFE68-.LFB68
 5298 09ce 01       		.uleb128 0x1
 5299 09cf 9C       		.byte	0x9c
 5300 09d0 250A0000 		.4byte	0xa25
 5301 09d4 15       		.uleb128 0x15
 5302 09d5 8A0A0000 		.4byte	.LASF85
 5303 09d9 01       		.byte	0x1
 5304 09da DC03     		.2byte	0x3dc
 5305 09dc 29020000 		.4byte	0x229
 5306 09e0 BF040000 		.4byte	.LLST30
 5307 09e4 1C       		.uleb128 0x1c
 5308 09e5 25030000 		.4byte	.LASF106
 5309 09e9 01       		.byte	0x1
 5310 09ea DE03     		.2byte	0x3de
 5311 09ec 5F020000 		.4byte	0x25f
 5312 09f0 01       		.uleb128 0x1
 5313 09f1 50       		.byte	0x50
 5314 09f2 16       		.uleb128 0x16
 5315 09f3 59030000 		.4byte	.LASF107
 5316 09f7 01       		.byte	0x1
 5317 09f8 DF03     		.2byte	0x3df
 5318 09fa 250A0000 		.4byte	0xa25
 5319 09fe 0F050000 		.4byte	.LLST31
 5320 0a02 16       		.uleb128 0x16
 5321 0a03 49050000 		.4byte	.LASF82
 5322 0a07 01       		.byte	0x1
 5323 0a08 E003     		.2byte	0x3e0
 5324 0a0a 7E040000 		.4byte	0x47e
 5325 0a0e 2D050000 		.4byte	.LLST32
 5326 0a12 18       		.uleb128 0x18
 5327 0a13 12000000 		.4byte	.LVL90
 5328 0a17 351E0000 		.4byte	0x1e35
 5329 0a1b 18       		.uleb128 0x18
 5330 0a1c 18000000 		.4byte	.LVL92
 5331 0a20 4C1E0000 		.4byte	0x1e4c
 5332 0a24 00       		.byte	0
 5333 0a25 06       		.uleb128 0x6
 5334 0a26 04       		.byte	0x4
 5335 0a27 1E020000 		.4byte	0x21e
 5336 0a2b 20       		.uleb128 0x20
 5337 0a2c 4C0E0000 		.4byte	.LASF108
 5338 0a30 01       		.byte	0x1
 5339 0a31 2204     		.2byte	0x422
 5340 0a33 35010000 		.4byte	0x135
 5341 0a37 00000000 		.4byte	.LFB69
 5342 0a3b 20000000 		.4byte	.LFE69-.LFB69
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 184


 5343 0a3f 01       		.uleb128 0x1
 5344 0a40 9C       		.byte	0x9c
 5345 0a41 880A0000 		.4byte	0xa88
 5346 0a45 15       		.uleb128 0x15
 5347 0a46 8A0A0000 		.4byte	.LASF85
 5348 0a4a 01       		.byte	0x1
 5349 0a4b 2204     		.2byte	0x422
 5350 0a4d 29020000 		.4byte	0x229
 5351 0a51 7D050000 		.4byte	.LLST33
 5352 0a55 16       		.uleb128 0x16
 5353 0a56 49050000 		.4byte	.LASF82
 5354 0a5a 01       		.byte	0x1
 5355 0a5b 2404     		.2byte	0x424
 5356 0a5d F0040000 		.4byte	0x4f0
 5357 0a61 9B050000 		.4byte	.LLST34
 5358 0a65 16       		.uleb128 0x16
 5359 0a66 8C050000 		.4byte	.LASF109
 5360 0a6a 01       		.byte	0x1
 5361 0a6b 2504     		.2byte	0x425
 5362 0a6d 35010000 		.4byte	0x135
 5363 0a71 AE050000 		.4byte	.LLST35
 5364 0a75 18       		.uleb128 0x18
 5365 0a76 08000000 		.4byte	.LVL103
 5366 0a7a 351E0000 		.4byte	0x1e35
 5367 0a7e 18       		.uleb128 0x18
 5368 0a7f 16000000 		.4byte	.LVL106
 5369 0a83 4C1E0000 		.4byte	0x1e4c
 5370 0a87 00       		.byte	0
 5371 0a88 20       		.uleb128 0x20
 5372 0a89 3F090000 		.4byte	.LASF110
 5373 0a8d 01       		.byte	0x1
 5374 0a8e 3804     		.2byte	0x438
 5375 0a90 35010000 		.4byte	0x135
 5376 0a94 00000000 		.4byte	.LFB70
 5377 0a98 20000000 		.4byte	.LFE70-.LFB70
 5378 0a9c 01       		.uleb128 0x1
 5379 0a9d 9C       		.byte	0x9c
 5380 0a9e F50A0000 		.4byte	0xaf5
 5381 0aa2 15       		.uleb128 0x15
 5382 0aa3 8A0A0000 		.4byte	.LASF85
 5383 0aa7 01       		.byte	0x1
 5384 0aa8 3804     		.2byte	0x438
 5385 0aaa 29020000 		.4byte	0x229
 5386 0aae CC050000 		.4byte	.LLST36
 5387 0ab2 16       		.uleb128 0x16
 5388 0ab3 49050000 		.4byte	.LASF82
 5389 0ab7 01       		.byte	0x1
 5390 0ab8 3A04     		.2byte	0x43a
 5391 0aba F0040000 		.4byte	0x4f0
 5392 0abe EA050000 		.4byte	.LLST37
 5393 0ac2 16       		.uleb128 0x16
 5394 0ac3 8C050000 		.4byte	.LASF109
 5395 0ac7 01       		.byte	0x1
 5396 0ac8 3B04     		.2byte	0x43b
 5397 0aca 35010000 		.4byte	0x135
 5398 0ace FD050000 		.4byte	.LLST38
 5399 0ad2 16       		.uleb128 0x16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 185


 5400 0ad3 D10B0000 		.4byte	.LASF111
 5401 0ad7 01       		.byte	0x1
 5402 0ad8 3B04     		.2byte	0x43b
 5403 0ada 35010000 		.4byte	0x135
 5404 0ade 1B060000 		.4byte	.LLST39
 5405 0ae2 18       		.uleb128 0x18
 5406 0ae3 08000000 		.4byte	.LVL109
 5407 0ae7 6E1E0000 		.4byte	0x1e6e
 5408 0aeb 18       		.uleb128 0x18
 5409 0aec 16000000 		.4byte	.LVL112
 5410 0af0 791E0000 		.4byte	0x1e79
 5411 0af4 00       		.byte	0
 5412 0af5 21       		.uleb128 0x21
 5413 0af6 B5030000 		.4byte	.LASF113
 5414 0afa 01       		.byte	0x1
 5415 0afb 6004     		.2byte	0x460
 5416 0afd 00000000 		.4byte	.LFB71
 5417 0b01 D8000000 		.4byte	.LFE71-.LFB71
 5418 0b05 01       		.uleb128 0x1
 5419 0b06 9C       		.byte	0x9c
 5420 0b07 AF0B0000 		.4byte	0xbaf
 5421 0b0b 15       		.uleb128 0x15
 5422 0b0c 8A0A0000 		.4byte	.LASF85
 5423 0b10 01       		.byte	0x1
 5424 0b11 6004     		.2byte	0x460
 5425 0b13 29020000 		.4byte	0x229
 5426 0b17 2E060000 		.4byte	.LLST40
 5427 0b1b 15       		.uleb128 0x15
 5428 0b1c F2070000 		.4byte	.LASF114
 5429 0b20 01       		.byte	0x1
 5430 0b21 6004     		.2byte	0x460
 5431 0b23 35010000 		.4byte	0x135
 5432 0b27 4C060000 		.4byte	.LLST41
 5433 0b2b 16       		.uleb128 0x16
 5434 0b2c 49050000 		.4byte	.LASF82
 5435 0b30 01       		.byte	0x1
 5436 0b31 6204     		.2byte	0x462
 5437 0b33 F0040000 		.4byte	0x4f0
 5438 0b37 77060000 		.4byte	.LLST42
 5439 0b3b 16       		.uleb128 0x16
 5440 0b3c A8080000 		.4byte	.LASF115
 5441 0b40 01       		.byte	0x1
 5442 0b41 6304     		.2byte	0x463
 5443 0b43 35010000 		.4byte	0x135
 5444 0b47 8A060000 		.4byte	.LLST43
 5445 0b4b 16       		.uleb128 0x16
 5446 0b4c BA010000 		.4byte	.LASF116
 5447 0b50 01       		.byte	0x1
 5448 0b51 6304     		.2byte	0x463
 5449 0b53 35010000 		.4byte	0x135
 5450 0b57 9D060000 		.4byte	.LLST44
 5451 0b5b 16       		.uleb128 0x16
 5452 0b5c 4F050000 		.4byte	.LASF117
 5453 0b60 01       		.byte	0x1
 5454 0b61 6404     		.2byte	0x464
 5455 0b63 2A010000 		.4byte	0x12a
 5456 0b67 B0060000 		.4byte	.LLST45
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 186


 5457 0b6b 18       		.uleb128 0x18
 5458 0b6c 10000000 		.4byte	.LVL117
 5459 0b70 351E0000 		.4byte	0x1e35
 5460 0b74 1D       		.uleb128 0x1d
 5461 0b75 88000000 		.4byte	.LVL124
 5462 0b79 621E0000 		.4byte	0x1e62
 5463 0b7d 880B0000 		.4byte	0xb88
 5464 0b81 1A       		.uleb128 0x1a
 5465 0b82 01       		.uleb128 0x1
 5466 0b83 50       		.byte	0x50
 5467 0b84 02       		.uleb128 0x2
 5468 0b85 75       		.byte	0x75
 5469 0b86 00       		.sleb128 0
 5470 0b87 00       		.byte	0
 5471 0b88 1D       		.uleb128 0x1d
 5472 0b89 C2000000 		.4byte	.LVL126
 5473 0b8d 401E0000 		.4byte	0x1e40
 5474 0b91 9C0B0000 		.4byte	0xb9c
 5475 0b95 1A       		.uleb128 0x1a
 5476 0b96 01       		.uleb128 0x1
 5477 0b97 51       		.byte	0x51
 5478 0b98 02       		.uleb128 0x2
 5479 0b99 75       		.byte	0x75
 5480 0b9a 00       		.sleb128 0
 5481 0b9b 00       		.byte	0
 5482 0b9c 18       		.uleb128 0x18
 5483 0b9d C8000000 		.4byte	.LVL127
 5484 0ba1 571E0000 		.4byte	0x1e57
 5485 0ba5 18       		.uleb128 0x18
 5486 0ba6 CC000000 		.4byte	.LVL128
 5487 0baa 4C1E0000 		.4byte	0x1e4c
 5488 0bae 00       		.byte	0
 5489 0baf 21       		.uleb128 0x21
 5490 0bb0 73050000 		.4byte	.LASF118
 5491 0bb4 01       		.byte	0x1
 5492 0bb5 8B05     		.2byte	0x58b
 5493 0bb7 00000000 		.4byte	.LFB74
 5494 0bbb 68000000 		.4byte	.LFE74-.LFB74
 5495 0bbf 01       		.uleb128 0x1
 5496 0bc0 9C       		.byte	0x9c
 5497 0bc1 3D0C0000 		.4byte	0xc3d
 5498 0bc5 15       		.uleb128 0x15
 5499 0bc6 0D090000 		.4byte	.LASF119
 5500 0bca 01       		.byte	0x1
 5501 0bcb 8B05     		.2byte	0x58b
 5502 0bcd 29020000 		.4byte	0x229
 5503 0bd1 CF060000 		.4byte	.LLST46
 5504 0bd5 16       		.uleb128 0x16
 5505 0bd6 49050000 		.4byte	.LASF82
 5506 0bda 01       		.byte	0x1
 5507 0bdb 8D05     		.2byte	0x58d
 5508 0bdd 91060000 		.4byte	0x691
 5509 0be1 CF060000 		.4byte	.LLST46
 5510 0be5 18       		.uleb128 0x18
 5511 0be6 14000000 		.4byte	.LVL131
 5512 0bea 351E0000 		.4byte	0x1e35
 5513 0bee 1D       		.uleb128 0x1d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 187


 5514 0bef 1A000000 		.4byte	.LVL132
 5515 0bf3 23040000 		.4byte	0x423
 5516 0bf7 020C0000 		.4byte	0xc02
 5517 0bfb 1A       		.uleb128 0x1a
 5518 0bfc 01       		.uleb128 0x1
 5519 0bfd 50       		.byte	0x50
 5520 0bfe 02       		.uleb128 0x2
 5521 0bff 74       		.byte	0x74
 5522 0c00 00       		.sleb128 0
 5523 0c01 00       		.byte	0
 5524 0c02 1D       		.uleb128 0x1d
 5525 0c03 26000000 		.4byte	.LVL133
 5526 0c07 621E0000 		.4byte	0x1e62
 5527 0c0b 160C0000 		.4byte	0xc16
 5528 0c0f 1A       		.uleb128 0x1a
 5529 0c10 01       		.uleb128 0x1
 5530 0c11 50       		.byte	0x50
 5531 0c12 02       		.uleb128 0x2
 5532 0c13 76       		.byte	0x76
 5533 0c14 00       		.sleb128 0
 5534 0c15 00       		.byte	0
 5535 0c16 1D       		.uleb128 0x1d
 5536 0c17 4C000000 		.4byte	.LVL134
 5537 0c1b 401E0000 		.4byte	0x1e40
 5538 0c1f 2A0C0000 		.4byte	0xc2a
 5539 0c23 1A       		.uleb128 0x1a
 5540 0c24 01       		.uleb128 0x1
 5541 0c25 51       		.byte	0x51
 5542 0c26 02       		.uleb128 0x2
 5543 0c27 76       		.byte	0x76
 5544 0c28 00       		.sleb128 0
 5545 0c29 00       		.byte	0
 5546 0c2a 18       		.uleb128 0x18
 5547 0c2b 5C000000 		.4byte	.LVL135
 5548 0c2f 571E0000 		.4byte	0x1e57
 5549 0c33 18       		.uleb128 0x18
 5550 0c34 60000000 		.4byte	.LVL136
 5551 0c38 4C1E0000 		.4byte	0x1e4c
 5552 0c3c 00       		.byte	0
 5553 0c3d 20       		.uleb128 0x20
 5554 0c3e 060A0000 		.4byte	.LASF120
 5555 0c42 01       		.byte	0x1
 5556 0c43 C105     		.2byte	0x5c1
 5557 0c45 2A010000 		.4byte	0x12a
 5558 0c49 00000000 		.4byte	.LFB75
 5559 0c4d 80000000 		.4byte	.LFE75-.LFB75
 5560 0c51 01       		.uleb128 0x1
 5561 0c52 9C       		.byte	0x9c
 5562 0c53 0A0D0000 		.4byte	0xd0a
 5563 0c57 15       		.uleb128 0x15
 5564 0c58 0D090000 		.4byte	.LASF119
 5565 0c5c 01       		.byte	0x1
 5566 0c5d C105     		.2byte	0x5c1
 5567 0c5f 29020000 		.4byte	0x229
 5568 0c63 F8060000 		.4byte	.LLST48
 5569 0c67 16       		.uleb128 0x16
 5570 0c68 4F050000 		.4byte	.LASF117
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 188


 5571 0c6c 01       		.byte	0x1
 5572 0c6d C305     		.2byte	0x5c3
 5573 0c6f 2A010000 		.4byte	0x12a
 5574 0c73 24070000 		.4byte	.LLST49
 5575 0c77 16       		.uleb128 0x16
 5576 0c78 49050000 		.4byte	.LASF82
 5577 0c7c 01       		.byte	0x1
 5578 0c7d C405     		.2byte	0x5c4
 5579 0c7f 91060000 		.4byte	0x691
 5580 0c83 65070000 		.4byte	.LLST50
 5581 0c87 16       		.uleb128 0x16
 5582 0c88 3D0A0000 		.4byte	.LASF121
 5583 0c8c 01       		.byte	0x1
 5584 0c8d C505     		.2byte	0x5c5
 5585 0c8f 35010000 		.4byte	0x135
 5586 0c93 91070000 		.4byte	.LLST51
 5587 0c97 18       		.uleb128 0x18
 5588 0c98 08000000 		.4byte	.LVL140
 5589 0c9c 6E1E0000 		.4byte	0x1e6e
 5590 0ca0 1D       		.uleb128 0x1d
 5591 0ca1 10000000 		.4byte	.LVL143
 5592 0ca5 23040000 		.4byte	0x423
 5593 0ca9 B40C0000 		.4byte	0xcb4
 5594 0cad 1A       		.uleb128 0x1a
 5595 0cae 01       		.uleb128 0x1
 5596 0caf 50       		.byte	0x50
 5597 0cb0 02       		.uleb128 0x2
 5598 0cb1 74       		.byte	0x74
 5599 0cb2 00       		.sleb128 0
 5600 0cb3 00       		.byte	0
 5601 0cb4 1D       		.uleb128 0x1d
 5602 0cb5 38000000 		.4byte	.LVL145
 5603 0cb9 621E0000 		.4byte	0x1e62
 5604 0cbd C80C0000 		.4byte	0xcc8
 5605 0cc1 1A       		.uleb128 0x1a
 5606 0cc2 01       		.uleb128 0x1
 5607 0cc3 50       		.byte	0x50
 5608 0cc4 02       		.uleb128 0x2
 5609 0cc5 77       		.byte	0x77
 5610 0cc6 00       		.sleb128 0
 5611 0cc7 00       		.byte	0
 5612 0cc8 1D       		.uleb128 0x1d
 5613 0cc9 5C000000 		.4byte	.LVL146
 5614 0ccd 401E0000 		.4byte	0x1e40
 5615 0cd1 DC0C0000 		.4byte	0xcdc
 5616 0cd5 1A       		.uleb128 0x1a
 5617 0cd6 01       		.uleb128 0x1
 5618 0cd7 51       		.byte	0x51
 5619 0cd8 02       		.uleb128 0x2
 5620 0cd9 77       		.byte	0x77
 5621 0cda 00       		.sleb128 0
 5622 0cdb 00       		.byte	0
 5623 0cdc 1D       		.uleb128 0x1d
 5624 0cdd 68000000 		.4byte	.LVL148
 5625 0ce1 401E0000 		.4byte	0x1e40
 5626 0ce5 F90C0000 		.4byte	0xcf9
 5627 0ce9 1A       		.uleb128 0x1a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 189


 5628 0cea 01       		.uleb128 0x1
 5629 0ceb 50       		.byte	0x50
 5630 0cec 05       		.uleb128 0x5
 5631 0ced 03       		.byte	0x3
 5632 0cee 14000000 		.4byte	.LANCHOR0+20
 5633 0cf2 1A       		.uleb128 0x1a
 5634 0cf3 01       		.uleb128 0x1
 5635 0cf4 51       		.byte	0x51
 5636 0cf5 02       		.uleb128 0x2
 5637 0cf6 74       		.byte	0x74
 5638 0cf7 18       		.sleb128 24
 5639 0cf8 00       		.byte	0
 5640 0cf9 19       		.uleb128 0x19
 5641 0cfa 74000000 		.4byte	.LVL150
 5642 0cfe 791E0000 		.4byte	0x1e79
 5643 0d02 1A       		.uleb128 0x1a
 5644 0d03 01       		.uleb128 0x1
 5645 0d04 50       		.byte	0x50
 5646 0d05 02       		.uleb128 0x2
 5647 0d06 75       		.byte	0x75
 5648 0d07 00       		.sleb128 0
 5649 0d08 00       		.byte	0
 5650 0d09 00       		.byte	0
 5651 0d0a 21       		.uleb128 0x21
 5652 0d0b D5030000 		.4byte	.LASF122
 5653 0d0f 01       		.byte	0x1
 5654 0d10 0706     		.2byte	0x607
 5655 0d12 00000000 		.4byte	.LFB76
 5656 0d16 4C000000 		.4byte	.LFE76-.LFB76
 5657 0d1a 01       		.uleb128 0x1
 5658 0d1b 9C       		.byte	0x9c
 5659 0d1c 860D0000 		.4byte	0xd86
 5660 0d20 16       		.uleb128 0x16
 5661 0d21 39040000 		.4byte	.LASF81
 5662 0d25 01       		.byte	0x1
 5663 0d26 0906     		.2byte	0x609
 5664 0d28 2A010000 		.4byte	0x12a
 5665 0d2c AF070000 		.4byte	.LLST52
 5666 0d30 1D       		.uleb128 0x1d
 5667 0d31 18000000 		.4byte	.LVL152
 5668 0d35 8D070000 		.4byte	0x78d
 5669 0d39 730D0000 		.4byte	0xd73
 5670 0d3d 1A       		.uleb128 0x1a
 5671 0d3e 01       		.uleb128 0x1
 5672 0d3f 50       		.byte	0x50
 5673 0d40 05       		.uleb128 0x5
 5674 0d41 03       		.byte	0x3
 5675 0d42 00000000 		.4byte	prvIdleTask
 5676 0d46 1A       		.uleb128 0x1a
 5677 0d47 01       		.uleb128 0x1
 5678 0d48 51       		.byte	0x51
 5679 0d49 05       		.uleb128 0x5
 5680 0d4a 03       		.byte	0x3
 5681 0d4b 00000000 		.4byte	.LC0
 5682 0d4f 1A       		.uleb128 0x1a
 5683 0d50 01       		.uleb128 0x1
 5684 0d51 52       		.byte	0x52
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 190


 5685 0d52 02       		.uleb128 0x2
 5686 0d53 08       		.byte	0x8
 5687 0d54 64       		.byte	0x64
 5688 0d55 1A       		.uleb128 0x1a
 5689 0d56 01       		.uleb128 0x1
 5690 0d57 53       		.byte	0x53
 5691 0d58 01       		.uleb128 0x1
 5692 0d59 30       		.byte	0x30
 5693 0d5a 1A       		.uleb128 0x1a
 5694 0d5b 02       		.uleb128 0x2
 5695 0d5c 7D       		.byte	0x7d
 5696 0d5d 00       		.sleb128 0
 5697 0d5e 01       		.uleb128 0x1
 5698 0d5f 30       		.byte	0x30
 5699 0d60 1A       		.uleb128 0x1a
 5700 0d61 02       		.uleb128 0x2
 5701 0d62 7D       		.byte	0x7d
 5702 0d63 04       		.sleb128 4
 5703 0d64 01       		.uleb128 0x1
 5704 0d65 30       		.byte	0x30
 5705 0d66 1A       		.uleb128 0x1a
 5706 0d67 02       		.uleb128 0x2
 5707 0d68 7D       		.byte	0x7d
 5708 0d69 08       		.sleb128 8
 5709 0d6a 01       		.uleb128 0x1
 5710 0d6b 30       		.byte	0x30
 5711 0d6c 1A       		.uleb128 0x1a
 5712 0d6d 02       		.uleb128 0x2
 5713 0d6e 7D       		.byte	0x7d
 5714 0d6f 0C       		.sleb128 12
 5715 0d70 01       		.uleb128 0x1
 5716 0d71 30       		.byte	0x30
 5717 0d72 00       		.byte	0
 5718 0d73 18       		.uleb128 0x18
 5719 0d74 20000000 		.4byte	.LVL153
 5720 0d78 6E1E0000 		.4byte	0x1e6e
 5721 0d7c 18       		.uleb128 0x18
 5722 0d7d 38000000 		.4byte	.LVL154
 5723 0d81 841E0000 		.4byte	0x1e84
 5724 0d85 00       		.byte	0
 5725 0d86 21       		.uleb128 0x21
 5726 0d87 FB080000 		.4byte	.LASF123
 5727 0d8b 01       		.byte	0x1
 5728 0d8c 5606     		.2byte	0x656
 5729 0d8e 00000000 		.4byte	.LFB77
 5730 0d92 18000000 		.4byte	.LFE77-.LFB77
 5731 0d96 01       		.uleb128 0x1
 5732 0d97 9C       		.byte	0x9c
 5733 0d98 AF0D0000 		.4byte	0xdaf
 5734 0d9c 18       		.uleb128 0x18
 5735 0d9d 06000000 		.4byte	.LVL155
 5736 0da1 6E1E0000 		.4byte	0x1e6e
 5737 0da5 18       		.uleb128 0x18
 5738 0da6 12000000 		.4byte	.LVL156
 5739 0daa 8F1E0000 		.4byte	0x1e8f
 5740 0dae 00       		.byte	0
 5741 0daf 22       		.uleb128 0x22
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 191


 5742 0db0 160B0000 		.4byte	.LASF161
 5743 0db4 01       		.byte	0x1
 5744 0db5 6106     		.2byte	0x661
 5745 0db7 00000000 		.4byte	.LFB78
 5746 0dbb 14000000 		.4byte	.LFE78-.LFB78
 5747 0dbf 01       		.uleb128 0x1
 5748 0dc0 9C       		.byte	0x9c
 5749 0dc1 20       		.uleb128 0x20
 5750 0dc2 CB050000 		.4byte	.LASF124
 5751 0dc6 01       		.byte	0x1
 5752 0dc7 E406     		.2byte	0x6e4
 5753 0dc9 40010000 		.4byte	0x140
 5754 0dcd 00000000 		.4byte	.LFB80
 5755 0dd1 0C000000 		.4byte	.LFE80-.LFB80
 5756 0dd5 01       		.uleb128 0x1
 5757 0dd6 9C       		.byte	0x9c
 5758 0dd7 EA0D0000 		.4byte	0xdea
 5759 0ddb 1C       		.uleb128 0x1c
 5760 0ddc 3E0E0000 		.4byte	.LASF125
 5761 0de0 01       		.byte	0x1
 5762 0de1 E606     		.2byte	0x6e6
 5763 0de3 40010000 		.4byte	0x140
 5764 0de7 01       		.uleb128 0x1
 5765 0de8 50       		.byte	0x50
 5766 0de9 00       		.byte	0
 5767 0dea 20       		.uleb128 0x20
 5768 0deb 70020000 		.4byte	.LASF126
 5769 0def 01       		.byte	0x1
 5770 0df0 F306     		.2byte	0x6f3
 5771 0df2 40010000 		.4byte	0x140
 5772 0df6 00000000 		.4byte	.LFB81
 5773 0dfa 0C000000 		.4byte	.LFE81-.LFB81
 5774 0dfe 01       		.uleb128 0x1
 5775 0dff 9C       		.byte	0x9c
 5776 0e00 200E0000 		.4byte	0xe20
 5777 0e04 1C       		.uleb128 0x1c
 5778 0e05 39040000 		.4byte	.LASF81
 5779 0e09 01       		.byte	0x1
 5780 0e0a F506     		.2byte	0x6f5
 5781 0e0c 40010000 		.4byte	0x140
 5782 0e10 01       		.uleb128 0x1
 5783 0e11 50       		.byte	0x50
 5784 0e12 23       		.uleb128 0x23
 5785 0e13 3D0A0000 		.4byte	.LASF121
 5786 0e17 01       		.byte	0x1
 5787 0e18 F606     		.2byte	0x6f6
 5788 0e1a 35010000 		.4byte	0x135
 5789 0e1e 00       		.byte	0
 5790 0e1f 00       		.byte	0
 5791 0e20 24       		.uleb128 0x24
 5792 0e21 540C0000 		.4byte	.LASF170
 5793 0e25 01       		.byte	0x1
 5794 0e26 1207     		.2byte	0x712
 5795 0e28 35010000 		.4byte	0x135
 5796 0e2c 00000000 		.4byte	.LFB82
 5797 0e30 0C000000 		.4byte	.LFE82-.LFB82
 5798 0e34 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 192


 5799 0e35 9C       		.byte	0x9c
 5800 0e36 20       		.uleb128 0x20
 5801 0e37 DB020000 		.4byte	.LASF127
 5802 0e3b 01       		.byte	0x1
 5803 0e3c 9307     		.2byte	0x793
 5804 0e3e 2A010000 		.4byte	0x12a
 5805 0e42 00000000 		.4byte	.LFB83
 5806 0e46 04010000 		.4byte	.LFE83-.LFB83
 5807 0e4a 01       		.uleb128 0x1
 5808 0e4b 9C       		.byte	0x9c
 5809 0e4c F60E0000 		.4byte	0xef6
 5810 0e50 16       		.uleb128 0x16
 5811 0e51 49050000 		.4byte	.LASF82
 5812 0e55 01       		.byte	0x1
 5813 0e56 9507     		.2byte	0x795
 5814 0e58 F0040000 		.4byte	0x4f0
 5815 0e5c C2070000 		.4byte	.LLST53
 5816 0e60 16       		.uleb128 0x16
 5817 0e61 E30C0000 		.4byte	.LASF28
 5818 0e65 01       		.byte	0x1
 5819 0e66 9607     		.2byte	0x796
 5820 0e68 40010000 		.4byte	0x140
 5821 0e6c E0070000 		.4byte	.LLST54
 5822 0e70 16       		.uleb128 0x16
 5823 0e71 31020000 		.4byte	.LASF128
 5824 0e75 01       		.byte	0x1
 5825 0e76 9707     		.2byte	0x797
 5826 0e78 2A010000 		.4byte	0x12a
 5827 0e7c F3070000 		.4byte	.LLST55
 5828 0e80 25       		.uleb128 0x25
 5829 0e81 00000000 		.4byte	.Ldebug_ranges0+0
 5830 0e85 16       		.uleb128 0x16
 5831 0e86 41040000 		.4byte	.LASF129
 5832 0e8a 01       		.byte	0x1
 5833 0e8b A607     		.2byte	0x7a6
 5834 0e8d 88070000 		.4byte	0x788
 5835 0e91 4B080000 		.4byte	.LLST56
 5836 0e95 1B       		.uleb128 0x1b
 5837 0e96 24000000 		.4byte	.LBB9
 5838 0e9a 1A000000 		.4byte	.LBE9-.LBB9
 5839 0e9e BC0E0000 		.4byte	0xebc
 5840 0ea2 16       		.uleb128 0x16
 5841 0ea3 300C0000 		.4byte	.LASF130
 5842 0ea7 01       		.byte	0x1
 5843 0ea8 AA07     		.2byte	0x7aa
 5844 0eaa 250A0000 		.4byte	0xa25
 5845 0eae 69080000 		.4byte	.LLST57
 5846 0eb2 18       		.uleb128 0x18
 5847 0eb3 3E000000 		.4byte	.LVL165
 5848 0eb7 C9040000 		.4byte	0x4c9
 5849 0ebb 00       		.byte	0
 5850 0ebc 1D       		.uleb128 0x1d
 5851 0ebd 86000000 		.4byte	.LVL172
 5852 0ec1 621E0000 		.4byte	0x1e62
 5853 0ec5 D00E0000 		.4byte	0xed0
 5854 0ec9 1A       		.uleb128 0x1a
 5855 0eca 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 193


 5856 0ecb 50       		.byte	0x50
 5857 0ecc 02       		.uleb128 0x2
 5858 0ecd 76       		.byte	0x76
 5859 0ece 00       		.sleb128 0
 5860 0ecf 00       		.byte	0
 5861 0ed0 1D       		.uleb128 0x1d
 5862 0ed1 92000000 		.4byte	.LVL173
 5863 0ed5 621E0000 		.4byte	0x1e62
 5864 0ed9 E40E0000 		.4byte	0xee4
 5865 0edd 1A       		.uleb128 0x1a
 5866 0ede 01       		.uleb128 0x1
 5867 0edf 50       		.byte	0x50
 5868 0ee0 02       		.uleb128 0x2
 5869 0ee1 74       		.byte	0x74
 5870 0ee2 18       		.sleb128 24
 5871 0ee3 00       		.byte	0
 5872 0ee4 19       		.uleb128 0x19
 5873 0ee5 B8000000 		.4byte	.LVL174
 5874 0ee9 401E0000 		.4byte	0x1e40
 5875 0eed 1A       		.uleb128 0x1a
 5876 0eee 01       		.uleb128 0x1
 5877 0eef 51       		.byte	0x51
 5878 0ef0 02       		.uleb128 0x2
 5879 0ef1 76       		.byte	0x76
 5880 0ef2 00       		.sleb128 0
 5881 0ef3 00       		.byte	0
 5882 0ef4 00       		.byte	0
 5883 0ef5 00       		.byte	0
 5884 0ef6 20       		.uleb128 0x20
 5885 0ef7 1B090000 		.4byte	.LASF131
 5886 0efb 01       		.byte	0x1
 5887 0efc 8706     		.2byte	0x687
 5888 0efe 2A010000 		.4byte	0x12a
 5889 0f02 00000000 		.4byte	.LFB79
 5890 0f06 CC000000 		.4byte	.LFE79-.LFB79
 5891 0f0a 01       		.uleb128 0x1
 5892 0f0b 9C       		.byte	0x9c
 5893 0f0c 910F0000 		.4byte	0xf91
 5894 0f10 16       		.uleb128 0x16
 5895 0f11 49050000 		.4byte	.LASF82
 5896 0f15 01       		.byte	0x1
 5897 0f16 8906     		.2byte	0x689
 5898 0f18 F0040000 		.4byte	0x4f0
 5899 0f1c 8B080000 		.4byte	.LLST58
 5900 0f20 16       		.uleb128 0x16
 5901 0f21 23010000 		.4byte	.LASF132
 5902 0f25 01       		.byte	0x1
 5903 0f26 8A06     		.2byte	0x68a
 5904 0f28 2A010000 		.4byte	0x12a
 5905 0f2c 9E080000 		.4byte	.LLST59
 5906 0f30 18       		.uleb128 0x18
 5907 0f31 06000000 		.4byte	.LVL182
 5908 0f35 351E0000 		.4byte	0x1e35
 5909 0f39 1D       		.uleb128 0x1d
 5910 0f3a 34000000 		.4byte	.LVL184
 5911 0f3e 621E0000 		.4byte	0x1e62
 5912 0f42 4D0F0000 		.4byte	0xf4d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 194


 5913 0f46 1A       		.uleb128 0x1a
 5914 0f47 01       		.uleb128 0x1
 5915 0f48 50       		.byte	0x50
 5916 0f49 02       		.uleb128 0x2
 5917 0f4a 75       		.byte	0x75
 5918 0f4b 18       		.sleb128 24
 5919 0f4c 00       		.byte	0
 5920 0f4d 1D       		.uleb128 0x1d
 5921 0f4e 3C000000 		.4byte	.LVL185
 5922 0f52 621E0000 		.4byte	0x1e62
 5923 0f56 610F0000 		.4byte	0xf61
 5924 0f5a 1A       		.uleb128 0x1a
 5925 0f5b 01       		.uleb128 0x1
 5926 0f5c 50       		.byte	0x50
 5927 0f5d 02       		.uleb128 0x2
 5928 0f5e 76       		.byte	0x76
 5929 0f5f 00       		.sleb128 0
 5930 0f60 00       		.byte	0
 5931 0f61 1D       		.uleb128 0x1d
 5932 0f62 60000000 		.4byte	.LVL186
 5933 0f66 401E0000 		.4byte	0x1e40
 5934 0f6a 750F0000 		.4byte	0xf75
 5935 0f6e 1A       		.uleb128 0x1a
 5936 0f6f 01       		.uleb128 0x1
 5937 0f70 51       		.byte	0x51
 5938 0f71 02       		.uleb128 0x2
 5939 0f72 76       		.byte	0x76
 5940 0f73 00       		.sleb128 0
 5941 0f74 00       		.byte	0
 5942 0f75 18       		.uleb128 0x18
 5943 0f76 88000000 		.4byte	.LVL188
 5944 0f7a 360E0000 		.4byte	0xe36
 5945 0f7e 18       		.uleb128 0x18
 5946 0f7f B6000000 		.4byte	.LVL190
 5947 0f83 571E0000 		.4byte	0x1e57
 5948 0f87 18       		.uleb128 0x18
 5949 0f88 C4000000 		.4byte	.LVL193
 5950 0f8c 4C1E0000 		.4byte	0x1e4c
 5951 0f90 00       		.byte	0
 5952 0f91 21       		.uleb128 0x21
 5953 0f92 40080000 		.4byte	.LASF133
 5954 0f96 01       		.byte	0x1
 5955 0f97 3A03     		.2byte	0x33a
 5956 0f99 00000000 		.4byte	.LFB66
 5957 0f9d 80000000 		.4byte	.LFE66-.LFB66
 5958 0fa1 01       		.uleb128 0x1
 5959 0fa2 9C       		.byte	0x9c
 5960 0fa3 46100000 		.4byte	0x1046
 5961 0fa7 15       		.uleb128 0x15
 5962 0fa8 88070000 		.4byte	.LASF134
 5963 0fac 01       		.byte	0x1
 5964 0fad 3A03     		.2byte	0x33a
 5965 0faf 4C100000 		.4byte	0x104c
 5966 0fb3 E0080000 		.4byte	.LLST60
 5967 0fb7 15       		.uleb128 0x15
 5968 0fb8 B8000000 		.4byte	.LASF135
 5969 0fbc 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 195


 5970 0fbd 3A03     		.2byte	0x33a
 5971 0fbf 88070000 		.4byte	0x788
 5972 0fc3 0C090000 		.4byte	.LLST61
 5973 0fc7 16       		.uleb128 0x16
 5974 0fc8 17010000 		.4byte	.LASF99
 5975 0fcc 01       		.byte	0x1
 5976 0fcd 3C03     		.2byte	0x33c
 5977 0fcf 40010000 		.4byte	0x140
 5978 0fd3 38090000 		.4byte	.LLST62
 5979 0fd7 16       		.uleb128 0x16
 5980 0fd8 23010000 		.4byte	.LASF132
 5981 0fdc 01       		.byte	0x1
 5982 0fdd 3D03     		.2byte	0x33d
 5983 0fdf 2A010000 		.4byte	0x12a
 5984 0fe3 4B090000 		.4byte	.LLST63
 5985 0fe7 16       		.uleb128 0x16
 5986 0fe8 540A0000 		.4byte	.LASF136
 5987 0fec 01       		.byte	0x1
 5988 0fed 3D03     		.2byte	0x33d
 5989 0fef 2A010000 		.4byte	0x12a
 5990 0ff3 5E090000 		.4byte	.LLST64
 5991 0ff7 26       		.uleb128 0x26
 5992 0ff8 18000000 		.4byte	.Ldebug_ranges0+0x18
 5993 0ffc 2A100000 		.4byte	0x102a
 5994 1000 16       		.uleb128 0x16
 5995 1001 41040000 		.4byte	.LASF129
 5996 1005 01       		.byte	0x1
 5997 1006 4703     		.2byte	0x347
 5998 1008 88070000 		.4byte	0x788
 5999 100c 7D090000 		.4byte	.LLST65
 6000 1010 18       		.uleb128 0x18
 6001 1011 4E000000 		.4byte	.LVL202
 6002 1015 621E0000 		.4byte	0x1e62
 6003 1019 19       		.uleb128 0x19
 6004 101a 70000000 		.4byte	.LVL203
 6005 101e 4F070000 		.4byte	0x74f
 6006 1022 1A       		.uleb128 0x1a
 6007 1023 01       		.uleb128 0x1
 6008 1024 50       		.byte	0x50
 6009 1025 02       		.uleb128 0x2
 6010 1026 74       		.byte	0x74
 6011 1027 00       		.sleb128 0
 6012 1028 00       		.byte	0
 6013 1029 00       		.byte	0
 6014 102a 18       		.uleb128 0x18
 6015 102b 0A000000 		.4byte	.LVL197
 6016 102f AF0D0000 		.4byte	0xdaf
 6017 1033 18       		.uleb128 0x18
 6018 1034 74000000 		.4byte	.LVL204
 6019 1038 F60E0000 		.4byte	0xef6
 6020 103c 18       		.uleb128 0x18
 6021 103d 7A000000 		.4byte	.LVL205
 6022 1041 571E0000 		.4byte	0x1e57
 6023 1045 00       		.byte	0
 6024 1046 06       		.uleb128 0x6
 6025 1047 04       		.byte	0x4
 6026 1048 40010000 		.4byte	0x140
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 196


 6027 104c 07       		.uleb128 0x7
 6028 104d 46100000 		.4byte	0x1046
 6029 1051 21       		.uleb128 0x21
 6030 1052 DA000000 		.4byte	.LASF137
 6031 1056 01       		.byte	0x1
 6032 1057 9A03     		.2byte	0x39a
 6033 1059 00000000 		.4byte	.LFB67
 6034 105d 54000000 		.4byte	.LFE67-.LFB67
 6035 1061 01       		.uleb128 0x1
 6036 1062 9C       		.byte	0x9c
 6037 1063 D0100000 		.4byte	0x10d0
 6038 1067 15       		.uleb128 0x15
 6039 1068 0D0D0000 		.4byte	.LASF138
 6040 106c 01       		.byte	0x1
 6041 106d 9A03     		.2byte	0x39a
 6042 106f 88070000 		.4byte	0x788
 6043 1073 90090000 		.4byte	.LLST66
 6044 1077 16       		.uleb128 0x16
 6045 1078 17010000 		.4byte	.LASF99
 6046 107c 01       		.byte	0x1
 6047 107d 9C03     		.2byte	0x39c
 6048 107f 40010000 		.4byte	0x140
 6049 1083 D5090000 		.4byte	.LLST67
 6050 1087 16       		.uleb128 0x16
 6051 1088 23010000 		.4byte	.LASF132
 6052 108c 01       		.byte	0x1
 6053 108d 9D03     		.2byte	0x39d
 6054 108f 2A010000 		.4byte	0x12a
 6055 1093 E8090000 		.4byte	.LLST68
 6056 1097 18       		.uleb128 0x18
 6057 1098 0A000000 		.4byte	.LVL209
 6058 109c AF0D0000 		.4byte	0xdaf
 6059 10a0 18       		.uleb128 0x18
 6060 10a1 1C000000 		.4byte	.LVL211
 6061 10a5 621E0000 		.4byte	0x1e62
 6062 10a9 1D       		.uleb128 0x1d
 6063 10aa 3E000000 		.4byte	.LVL212
 6064 10ae 4F070000 		.4byte	0x74f
 6065 10b2 BD100000 		.4byte	0x10bd
 6066 10b6 1A       		.uleb128 0x1a
 6067 10b7 01       		.uleb128 0x1
 6068 10b8 50       		.byte	0x50
 6069 10b9 02       		.uleb128 0x2
 6070 10ba 74       		.byte	0x74
 6071 10bb 00       		.sleb128 0
 6072 10bc 00       		.byte	0
 6073 10bd 18       		.uleb128 0x18
 6074 10be 42000000 		.4byte	.LVL213
 6075 10c2 F60E0000 		.4byte	0xef6
 6076 10c6 18       		.uleb128 0x18
 6077 10c7 4C000000 		.4byte	.LVL216
 6078 10cb 571E0000 		.4byte	0x1e57
 6079 10cf 00       		.byte	0
 6080 10d0 17       		.uleb128 0x17
 6081 10d1 6A0A0000 		.4byte	.LASF139
 6082 10d5 01       		.byte	0x1
 6083 10d6 D60B     		.2byte	0xbd6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 197


 6084 10d8 00000000 		.4byte	.LFB95
 6085 10dc 54000000 		.4byte	.LFE95-.LFB95
 6086 10e0 01       		.uleb128 0x1
 6087 10e1 9C       		.byte	0x9c
 6088 10e2 67110000 		.4byte	0x1167
 6089 10e6 27       		.uleb128 0x27
 6090 10e7 02000000 		.4byte	.LBB14
 6091 10eb 4C000000 		.4byte	.LBE14-.LBB14
 6092 10ef 16       		.uleb128 0x16
 6093 10f0 6D010000 		.4byte	.LASF140
 6094 10f4 01       		.byte	0x1
 6095 10f5 DA0B     		.2byte	0xbda
 6096 10f7 2A010000 		.4byte	0x12a
 6097 10fb 1E0A0000 		.4byte	.LLST69
 6098 10ff 1B       		.uleb128 0x1b
 6099 1100 14000000 		.4byte	.LBB15
 6100 1104 30000000 		.4byte	.LBE15-.LBB15
 6101 1108 53110000 		.4byte	0x1153
 6102 110c 16       		.uleb128 0x16
 6103 110d 49050000 		.4byte	.LASF82
 6104 1111 01       		.byte	0x1
 6105 1112 E80B     		.2byte	0xbe8
 6106 1114 F0040000 		.4byte	0x4f0
 6107 1118 380A0000 		.4byte	.LLST70
 6108 111c 18       		.uleb128 0x18
 6109 111d 18000000 		.4byte	.LVL220
 6110 1121 351E0000 		.4byte	0x1e35
 6111 1125 1D       		.uleb128 0x1d
 6112 1126 26000000 		.4byte	.LVL223
 6113 112a 621E0000 		.4byte	0x1e62
 6114 112e 39110000 		.4byte	0x1139
 6115 1132 1A       		.uleb128 0x1a
 6116 1133 01       		.uleb128 0x1
 6117 1134 50       		.byte	0x50
 6118 1135 02       		.uleb128 0x2
 6119 1136 75       		.byte	0x75
 6120 1137 04       		.sleb128 4
 6121 1138 00       		.byte	0
 6122 1139 18       		.uleb128 0x18
 6123 113a 3E000000 		.4byte	.LVL224
 6124 113e 4C1E0000 		.4byte	0x1e4c
 6125 1142 19       		.uleb128 0x19
 6126 1143 44000000 		.4byte	.LVL225
 6127 1147 F6040000 		.4byte	0x4f6
 6128 114b 1A       		.uleb128 0x1a
 6129 114c 01       		.uleb128 0x1
 6130 114d 50       		.byte	0x50
 6131 114e 02       		.uleb128 0x2
 6132 114f 75       		.byte	0x75
 6133 1150 00       		.sleb128 0
 6134 1151 00       		.byte	0
 6135 1152 00       		.byte	0
 6136 1153 18       		.uleb128 0x18
 6137 1154 08000000 		.4byte	.LVL217
 6138 1158 AF0D0000 		.4byte	0xdaf
 6139 115c 18       		.uleb128 0x18
 6140 115d 12000000 		.4byte	.LVL219
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 198


 6141 1161 F60E0000 		.4byte	0xef6
 6142 1165 00       		.byte	0
 6143 1166 00       		.byte	0
 6144 1167 28       		.uleb128 0x28
 6145 1168 17060000 		.4byte	.LASF141
 6146 116c 01       		.byte	0x1
 6147 116d 820A     		.2byte	0xa82
 6148 116f 00000000 		.4byte	.LFB92
 6149 1173 08000000 		.4byte	.LFE92-.LFB92
 6150 1177 01       		.uleb128 0x1
 6151 1178 9C       		.byte	0x9c
 6152 1179 97110000 		.4byte	0x1197
 6153 117d 15       		.uleb128 0x15
 6154 117e D2040000 		.4byte	.LASF101
 6155 1182 01       		.byte	0x1
 6156 1183 820A     		.2byte	0xa82
 6157 1185 B0000000 		.4byte	0xb0
 6158 1189 4B0A0000 		.4byte	.LLST71
 6159 118d 18       		.uleb128 0x18
 6160 118e 06000000 		.4byte	.LVL228
 6161 1192 D0100000 		.4byte	0x10d0
 6162 1196 00       		.byte	0
 6163 1197 21       		.uleb128 0x21
 6164 1198 23060000 		.4byte	.LASF142
 6165 119c 01       		.byte	0x1
 6166 119d 9B08     		.2byte	0x89b
 6167 119f 00000000 		.4byte	.LFB84
 6168 11a3 A8000000 		.4byte	.LFE84-.LFB84
 6169 11a7 01       		.uleb128 0x1
 6170 11a8 9C       		.byte	0x9c
 6171 11a9 49120000 		.4byte	0x1249
 6172 11ad 1B       		.uleb128 0x1b
 6173 11ae 1C000000 		.4byte	.LBB16
 6174 11b2 36000000 		.4byte	.LBE16-.LBB16
 6175 11b6 E5110000 		.4byte	0x11e5
 6176 11ba 16       		.uleb128 0x16
 6177 11bb C50E0000 		.4byte	.LASF143
 6178 11bf 01       		.byte	0x1
 6179 11c0 C408     		.2byte	0x8c4
 6180 11c2 54120000 		.4byte	0x1254
 6181 11c6 6C0A0000 		.4byte	.LLST72
 6182 11ca 29       		.uleb128 0x29
 6183 11cb DC080000 		.4byte	.LASF144
 6184 11cf 01       		.byte	0x1
 6185 11d0 C408     		.2byte	0x8c4
 6186 11d2 4F120000 		.4byte	0x124f
 6187 11d6 A5CB96AD 		.sleb128 -1515870811
 6187      7A
 6188 11db 18       		.uleb128 0x18
 6189 11dc 52000000 		.4byte	.LVL231
 6190 11e0 9A1E0000 		.4byte	0x1e9a
 6191 11e4 00       		.byte	0
 6192 11e5 27       		.uleb128 0x27
 6193 11e6 52000000 		.4byte	.LBB17
 6194 11ea 56000000 		.4byte	.LBE17-.LBB17
 6195 11ee 16       		.uleb128 0x16
 6196 11ef B6070000 		.4byte	.LASF145
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 199


 6197 11f3 01       		.byte	0x1
 6198 11f4 C808     		.2byte	0x8c8
 6199 11f6 35010000 		.4byte	0x135
 6200 11fa 7F0A0000 		.4byte	.LLST73
 6201 11fe 2A       		.uleb128 0x2a
 6202 11ff FC030000 		.4byte	0x3fc
 6203 1203 58000000 		.4byte	.LBB18
 6204 1207 06000000 		.4byte	.LBE18-.LBB18
 6205 120b 01       		.byte	0x1
 6206 120c C808     		.2byte	0x8c8
 6207 120e 2D120000 		.4byte	0x122d
 6208 1212 2B       		.uleb128 0x2b
 6209 1213 0C040000 		.4byte	0x40c
 6210 1217 920A0000 		.4byte	.LLST74
 6211 121b 27       		.uleb128 0x27
 6212 121c 58000000 		.4byte	.LBB19
 6213 1220 06000000 		.4byte	.LBE19-.LBB19
 6214 1224 2C       		.uleb128 0x2c
 6215 1225 17040000 		.4byte	0x417
 6216 1229 01       		.uleb128 0x1
 6217 122a 53       		.byte	0x53
 6218 122b 00       		.byte	0
 6219 122c 00       		.byte	0
 6220 122d 27       		.uleb128 0x27
 6221 122e 62000000 		.4byte	.LBB20
 6222 1232 46000000 		.4byte	.LBE20-.LBB20
 6223 1236 16       		.uleb128 0x16
 6224 1237 1E050000 		.4byte	.LASF146
 6225 123b 01       		.byte	0x1
 6226 123c C808     		.2byte	0x8c8
 6227 123e 59120000 		.4byte	0x1259
 6228 1242 A50A0000 		.4byte	.LLST75
 6229 1246 00       		.byte	0
 6230 1247 00       		.byte	0
 6231 1248 00       		.byte	0
 6232 1249 06       		.uleb128 0x6
 6233 124a 04       		.byte	0x4
 6234 124b 4F120000 		.4byte	0x124f
 6235 124f 07       		.uleb128 0x7
 6236 1250 E5000000 		.4byte	0xe5
 6237 1254 07       		.uleb128 0x7
 6238 1255 49120000 		.4byte	0x1249
 6239 1259 07       		.uleb128 0x7
 6240 125a 250A0000 		.4byte	0xa25
 6241 125e 21       		.uleb128 0x21
 6242 125f 20000000 		.4byte	.LASF147
 6243 1263 01       		.byte	0x1
 6244 1264 0405     		.2byte	0x504
 6245 1266 00000000 		.4byte	.LFB72
 6246 126a A0000000 		.4byte	.LFE72-.LFB72
 6247 126e 01       		.uleb128 0x1
 6248 126f 9C       		.byte	0x9c
 6249 1270 16130000 		.4byte	0x1316
 6250 1274 15       		.uleb128 0x15
 6251 1275 ED060000 		.4byte	.LASF148
 6252 1279 01       		.byte	0x1
 6253 127a 0405     		.2byte	0x504
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 200


 6254 127c 29020000 		.4byte	0x229
 6255 1280 C20A0000 		.4byte	.LLST76
 6256 1284 16       		.uleb128 0x16
 6257 1285 49050000 		.4byte	.LASF82
 6258 1289 01       		.byte	0x1
 6259 128a 0605     		.2byte	0x506
 6260 128c F0040000 		.4byte	0x4f0
 6261 1290 E00A0000 		.4byte	.LLST77
 6262 1294 18       		.uleb128 0x18
 6263 1295 08000000 		.4byte	.LVL237
 6264 1299 351E0000 		.4byte	0x1e35
 6265 129d 1D       		.uleb128 0x1d
 6266 129e 18000000 		.4byte	.LVL239
 6267 12a2 621E0000 		.4byte	0x1e62
 6268 12a6 B1120000 		.4byte	0x12b1
 6269 12aa 1A       		.uleb128 0x1a
 6270 12ab 01       		.uleb128 0x1
 6271 12ac 50       		.byte	0x50
 6272 12ad 02       		.uleb128 0x2
 6273 12ae 76       		.byte	0x76
 6274 12af 00       		.sleb128 0
 6275 12b0 00       		.byte	0
 6276 12b1 1D       		.uleb128 0x1d
 6277 12b2 48000000 		.4byte	.LVL240
 6278 12b6 621E0000 		.4byte	0x1e62
 6279 12ba C5120000 		.4byte	0x12c5
 6280 12be 1A       		.uleb128 0x1a
 6281 12bf 01       		.uleb128 0x1
 6282 12c0 50       		.byte	0x50
 6283 12c1 02       		.uleb128 0x2
 6284 12c2 74       		.byte	0x74
 6285 12c3 18       		.sleb128 24
 6286 12c4 00       		.byte	0
 6287 12c5 1D       		.uleb128 0x1d
 6288 12c6 52000000 		.4byte	.LVL241
 6289 12ca 401E0000 		.4byte	0x1e40
 6290 12ce DF120000 		.4byte	0x12df
 6291 12d2 1A       		.uleb128 0x1a
 6292 12d3 01       		.uleb128 0x1
 6293 12d4 50       		.byte	0x50
 6294 12d5 02       		.uleb128 0x2
 6295 12d6 75       		.byte	0x75
 6296 12d7 00       		.sleb128 0
 6297 12d8 1A       		.uleb128 0x1a
 6298 12d9 01       		.uleb128 0x1
 6299 12da 51       		.byte	0x51
 6300 12db 02       		.uleb128 0x2
 6301 12dc 76       		.byte	0x76
 6302 12dd 00       		.sleb128 0
 6303 12de 00       		.byte	0
 6304 12df 18       		.uleb128 0x18
 6305 12e0 56000000 		.4byte	.LVL242
 6306 12e4 4C1E0000 		.4byte	0x1e4c
 6307 12e8 18       		.uleb128 0x18
 6308 12e9 68000000 		.4byte	.LVL243
 6309 12ed 571E0000 		.4byte	0x1e57
 6310 12f1 18       		.uleb128 0x18
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 201


 6311 12f2 84000000 		.4byte	.LVL246
 6312 12f6 97110000 		.4byte	0x1197
 6313 12fa 18       		.uleb128 0x18
 6314 12fb 92000000 		.4byte	.LVL248
 6315 12ff 351E0000 		.4byte	0x1e35
 6316 1303 18       		.uleb128 0x18
 6317 1304 96000000 		.4byte	.LVL249
 6318 1308 C9040000 		.4byte	0x4c9
 6319 130c 18       		.uleb128 0x18
 6320 130d 9A000000 		.4byte	.LVL250
 6321 1311 4C1E0000 		.4byte	0x1e4c
 6322 1315 00       		.byte	0
 6323 1316 21       		.uleb128 0x21
 6324 1317 F6030000 		.4byte	.LASF149
 6325 131b 01       		.byte	0x1
 6326 131c D608     		.2byte	0x8d6
 6327 131e 00000000 		.4byte	.LFB85
 6328 1322 5C000000 		.4byte	.LFE85-.LFB85
 6329 1326 01       		.uleb128 0x1
 6330 1327 9C       		.byte	0x9c
 6331 1328 98130000 		.4byte	0x1398
 6332 132c 15       		.uleb128 0x15
 6333 132d 14000000 		.4byte	.LASF150
 6334 1331 01       		.byte	0x1
 6335 1332 D608     		.2byte	0x8d6
 6336 1334 59120000 		.4byte	0x1259
 6337 1338 F30A0000 		.4byte	.LLST78
 6338 133c 15       		.uleb128 0x15
 6339 133d D0010000 		.4byte	.LASF151
 6340 1341 01       		.byte	0x1
 6341 1342 D608     		.2byte	0x8d6
 6342 1344 88070000 		.4byte	0x788
 6343 1348 140B0000 		.4byte	.LLST79
 6344 134c 16       		.uleb128 0x16
 6345 134d 17010000 		.4byte	.LASF99
 6346 1351 01       		.byte	0x1
 6347 1352 D808     		.2byte	0x8d8
 6348 1354 40010000 		.4byte	0x140
 6349 1358 400B0000 		.4byte	.LLST80
 6350 135c 1D       		.uleb128 0x1d
 6351 135d 10000000 		.4byte	.LVL254
 6352 1361 1E1E0000 		.4byte	0x1e1e
 6353 1365 71130000 		.4byte	0x1371
 6354 1369 1A       		.uleb128 0x1a
 6355 136a 01       		.uleb128 0x1
 6356 136b 50       		.byte	0x50
 6357 136c 03       		.uleb128 0x3
 6358 136d F3       		.byte	0xf3
 6359 136e 01       		.uleb128 0x1
 6360 136f 50       		.byte	0x50
 6361 1370 00       		.byte	0
 6362 1371 18       		.uleb128 0x18
 6363 1372 1A000000 		.4byte	.LVL255
 6364 1376 621E0000 		.4byte	0x1e62
 6365 137a 1D       		.uleb128 0x1d
 6366 137b 46000000 		.4byte	.LVL256
 6367 137f 401E0000 		.4byte	0x1e40
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 202


 6368 1383 8E130000 		.4byte	0x138e
 6369 1387 1A       		.uleb128 0x1a
 6370 1388 01       		.uleb128 0x1
 6371 1389 50       		.byte	0x50
 6372 138a 02       		.uleb128 0x2
 6373 138b 74       		.byte	0x74
 6374 138c 00       		.sleb128 0
 6375 138d 00       		.byte	0
 6376 138e 18       		.uleb128 0x18
 6377 138f 54000000 		.4byte	.LVL260
 6378 1393 4F070000 		.4byte	0x74f
 6379 1397 00       		.byte	0
 6380 1398 21       		.uleb128 0x21
 6381 1399 61040000 		.4byte	.LASF152
 6382 139d 01       		.byte	0x1
 6383 139e 1109     		.2byte	0x911
 6384 13a0 00000000 		.4byte	.LFB86
 6385 13a4 64000000 		.4byte	.LFE86-.LFB86
 6386 13a8 01       		.uleb128 0x1
 6387 13a9 9C       		.byte	0x9c
 6388 13aa 2A140000 		.4byte	0x142a
 6389 13ae 15       		.uleb128 0x15
 6390 13af 14000000 		.4byte	.LASF150
 6391 13b3 01       		.byte	0x1
 6392 13b4 1109     		.2byte	0x911
 6393 13b6 250A0000 		.4byte	0xa25
 6394 13ba 630B0000 		.4byte	.LLST81
 6395 13be 15       		.uleb128 0x15
 6396 13bf E30C0000 		.4byte	.LASF28
 6397 13c3 01       		.byte	0x1
 6398 13c4 1109     		.2byte	0x911
 6399 13c6 88070000 		.4byte	0x788
 6400 13ca 840B0000 		.4byte	.LLST82
 6401 13ce 15       		.uleb128 0x15
 6402 13cf D0010000 		.4byte	.LASF151
 6403 13d3 01       		.byte	0x1
 6404 13d4 1109     		.2byte	0x911
 6405 13d6 88070000 		.4byte	0x788
 6406 13da A50B0000 		.4byte	.LLST83
 6407 13de 16       		.uleb128 0x16
 6408 13df 17010000 		.4byte	.LASF99
 6409 13e3 01       		.byte	0x1
 6410 13e4 1309     		.2byte	0x913
 6411 13e6 40010000 		.4byte	0x140
 6412 13ea D10B0000 		.4byte	.LLST84
 6413 13ee 1D       		.uleb128 0x1d
 6414 13ef 1A000000 		.4byte	.LVL264
 6415 13f3 401E0000 		.4byte	0x1e40
 6416 13f7 03140000 		.4byte	0x1403
 6417 13fb 1A       		.uleb128 0x1a
 6418 13fc 01       		.uleb128 0x1
 6419 13fd 50       		.byte	0x50
 6420 13fe 03       		.uleb128 0x3
 6421 13ff F3       		.byte	0xf3
 6422 1400 01       		.uleb128 0x1
 6423 1401 50       		.byte	0x50
 6424 1402 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 203


 6425 1403 18       		.uleb128 0x18
 6426 1404 24000000 		.4byte	.LVL265
 6427 1408 621E0000 		.4byte	0x1e62
 6428 140c 1D       		.uleb128 0x1d
 6429 140d 50000000 		.4byte	.LVL266
 6430 1411 401E0000 		.4byte	0x1e40
 6431 1415 20140000 		.4byte	0x1420
 6432 1419 1A       		.uleb128 0x1a
 6433 141a 01       		.uleb128 0x1
 6434 141b 50       		.byte	0x50
 6435 141c 02       		.uleb128 0x2
 6436 141d 74       		.byte	0x74
 6437 141e 00       		.sleb128 0
 6438 141f 00       		.byte	0
 6439 1420 18       		.uleb128 0x18
 6440 1421 5E000000 		.4byte	.LVL270
 6441 1425 4F070000 		.4byte	0x74f
 6442 1429 00       		.byte	0
 6443 142a 20       		.uleb128 0x20
 6444 142b 830B0000 		.4byte	.LASF153
 6445 142f 01       		.byte	0x1
 6446 1430 A109     		.2byte	0x9a1
 6447 1432 2A010000 		.4byte	0x12a
 6448 1436 00000000 		.4byte	.LFB87
 6449 143a 74000000 		.4byte	.LFE87-.LFB87
 6450 143e 01       		.uleb128 0x1
 6451 143f 9C       		.byte	0x9c
 6452 1440 CA140000 		.4byte	0x14ca
 6453 1444 15       		.uleb128 0x15
 6454 1445 14000000 		.4byte	.LASF150
 6455 1449 01       		.byte	0x1
 6456 144a A109     		.2byte	0x9a1
 6457 144c D5140000 		.4byte	0x14d5
 6458 1450 F40B0000 		.4byte	.LLST85
 6459 1454 16       		.uleb128 0x16
 6460 1455 C4080000 		.4byte	.LASF154
 6461 1459 01       		.byte	0x1
 6462 145a A309     		.2byte	0x9a3
 6463 145c F0040000 		.4byte	0x4f0
 6464 1460 150C0000 		.4byte	.LLST86
 6465 1464 16       		.uleb128 0x16
 6466 1465 39040000 		.4byte	.LASF81
 6467 1469 01       		.byte	0x1
 6468 146a A409     		.2byte	0x9a4
 6469 146c 2A010000 		.4byte	0x12a
 6470 1470 280C0000 		.4byte	.LLST87
 6471 1474 1D       		.uleb128 0x1d
 6472 1475 10000000 		.4byte	.LVL275
 6473 1479 621E0000 		.4byte	0x1e62
 6474 147d 88140000 		.4byte	0x1488
 6475 1481 1A       		.uleb128 0x1a
 6476 1482 01       		.uleb128 0x1
 6477 1483 50       		.byte	0x50
 6478 1484 02       		.uleb128 0x2
 6479 1485 75       		.byte	0x75
 6480 1486 00       		.sleb128 0
 6481 1487 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 204


 6482 1488 1D       		.uleb128 0x1d
 6483 1489 20000000 		.4byte	.LVL276
 6484 148d 621E0000 		.4byte	0x1e62
 6485 1491 9C140000 		.4byte	0x149c
 6486 1495 1A       		.uleb128 0x1a
 6487 1496 01       		.uleb128 0x1
 6488 1497 50       		.byte	0x50
 6489 1498 02       		.uleb128 0x2
 6490 1499 75       		.byte	0x75
 6491 149a 00       		.sleb128 0
 6492 149b 00       		.byte	0
 6493 149c 1D       		.uleb128 0x1d
 6494 149d 44000000 		.4byte	.LVL277
 6495 14a1 401E0000 		.4byte	0x1e40
 6496 14a5 B0140000 		.4byte	0x14b0
 6497 14a9 1A       		.uleb128 0x1a
 6498 14aa 01       		.uleb128 0x1
 6499 14ab 51       		.byte	0x51
 6500 14ac 02       		.uleb128 0x2
 6501 14ad 75       		.byte	0x75
 6502 14ae 00       		.sleb128 0
 6503 14af 00       		.byte	0
 6504 14b0 19       		.uleb128 0x19
 6505 14b1 4E000000 		.4byte	.LVL278
 6506 14b5 401E0000 		.4byte	0x1e40
 6507 14b9 1A       		.uleb128 0x1a
 6508 14ba 01       		.uleb128 0x1
 6509 14bb 50       		.byte	0x50
 6510 14bc 05       		.uleb128 0x5
 6511 14bd 03       		.byte	0x3
 6512 14be 14000000 		.4byte	.LANCHOR0+20
 6513 14c2 1A       		.uleb128 0x1a
 6514 14c3 01       		.uleb128 0x1
 6515 14c4 51       		.byte	0x51
 6516 14c5 02       		.uleb128 0x2
 6517 14c6 75       		.byte	0x75
 6518 14c7 00       		.sleb128 0
 6519 14c8 00       		.byte	0
 6520 14c9 00       		.byte	0
 6521 14ca 06       		.uleb128 0x6
 6522 14cb 04       		.byte	0x4
 6523 14cc D0140000 		.4byte	0x14d0
 6524 14d0 07       		.uleb128 0x7
 6525 14d1 1E020000 		.4byte	0x21e
 6526 14d5 07       		.uleb128 0x7
 6527 14d6 CA140000 		.4byte	0x14ca
 6528 14da 20       		.uleb128 0x20
 6529 14db 9A0E0000 		.4byte	.LASF155
 6530 14df 01       		.byte	0x1
 6531 14e0 E509     		.2byte	0x9e5
 6532 14e2 2A010000 		.4byte	0x12a
 6533 14e6 00000000 		.4byte	.LFB88
 6534 14ea 58000000 		.4byte	.LFE88-.LFB88
 6535 14ee 01       		.uleb128 0x1
 6536 14ef 9C       		.byte	0x9c
 6537 14f0 6E150000 		.4byte	0x156e
 6538 14f4 15       		.uleb128 0x15
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 205


 6539 14f5 130C0000 		.4byte	.LASF156
 6540 14f9 01       		.byte	0x1
 6541 14fa E509     		.2byte	0x9e5
 6542 14fc 18020000 		.4byte	0x218
 6543 1500 470C0000 		.4byte	.LLST88
 6544 1504 15       		.uleb128 0x15
 6545 1505 E30C0000 		.4byte	.LASF28
 6546 1509 01       		.byte	0x1
 6547 150a E509     		.2byte	0x9e5
 6548 150c 88070000 		.4byte	0x788
 6549 1510 680C0000 		.4byte	.LLST89
 6550 1514 16       		.uleb128 0x16
 6551 1515 C4080000 		.4byte	.LASF154
 6552 1519 01       		.byte	0x1
 6553 151a E709     		.2byte	0x9e7
 6554 151c F0040000 		.4byte	0x4f0
 6555 1520 890C0000 		.4byte	.LLST90
 6556 1524 16       		.uleb128 0x16
 6557 1525 39040000 		.4byte	.LASF81
 6558 1529 01       		.byte	0x1
 6559 152a E809     		.2byte	0x9e8
 6560 152c 2A010000 		.4byte	0x12a
 6561 1530 9C0C0000 		.4byte	.LLST91
 6562 1534 1D       		.uleb128 0x1d
 6563 1535 0E000000 		.4byte	.LVL286
 6564 1539 621E0000 		.4byte	0x1e62
 6565 153d 49150000 		.4byte	0x1549
 6566 1541 1A       		.uleb128 0x1a
 6567 1542 01       		.uleb128 0x1
 6568 1543 50       		.byte	0x50
 6569 1544 03       		.uleb128 0x3
 6570 1545 F3       		.byte	0xf3
 6571 1546 01       		.uleb128 0x1
 6572 1547 50       		.byte	0x50
 6573 1548 00       		.byte	0
 6574 1549 1D       		.uleb128 0x1d
 6575 154a 16000000 		.4byte	.LVL287
 6576 154e 621E0000 		.4byte	0x1e62
 6577 1552 5D150000 		.4byte	0x155d
 6578 1556 1A       		.uleb128 0x1a
 6579 1557 01       		.uleb128 0x1
 6580 1558 50       		.byte	0x50
 6581 1559 02       		.uleb128 0x2
 6582 155a 76       		.byte	0x76
 6583 155b 00       		.sleb128 0
 6584 155c 00       		.byte	0
 6585 155d 19       		.uleb128 0x19
 6586 155e 3C000000 		.4byte	.LVL288
 6587 1562 401E0000 		.4byte	0x1e40
 6588 1566 1A       		.uleb128 0x1a
 6589 1567 01       		.uleb128 0x1
 6590 1568 51       		.byte	0x51
 6591 1569 02       		.uleb128 0x2
 6592 156a 76       		.byte	0x76
 6593 156b 00       		.sleb128 0
 6594 156c 00       		.byte	0
 6595 156d 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 206


 6596 156e 21       		.uleb128 0x21
 6597 156f 5E0E0000 		.4byte	.LASF157
 6598 1573 01       		.byte	0x1
 6599 1574 120A     		.2byte	0xa12
 6600 1576 00000000 		.4byte	.LFB89
 6601 157a 14000000 		.4byte	.LFE89-.LFB89
 6602 157e 01       		.uleb128 0x1
 6603 157f 9C       		.byte	0x9c
 6604 1580 93150000 		.4byte	0x1593
 6605 1584 1E       		.uleb128 0x1e
 6606 1585 33010000 		.4byte	.LASF158
 6607 1589 01       		.byte	0x1
 6608 158a 120A     		.2byte	0xa12
 6609 158c 99150000 		.4byte	0x1599
 6610 1590 01       		.uleb128 0x1
 6611 1591 50       		.byte	0x50
 6612 1592 00       		.byte	0
 6613 1593 06       		.uleb128 0x6
 6614 1594 04       		.byte	0x4
 6615 1595 C5020000 		.4byte	0x2c5
 6616 1599 07       		.uleb128 0x7
 6617 159a 93150000 		.4byte	0x1593
 6618 159e 20       		.uleb128 0x20
 6619 159f F10B0000 		.4byte	.LASF159
 6620 15a3 01       		.byte	0x1
 6621 15a4 1A0A     		.2byte	0xa1a
 6622 15a6 2A010000 		.4byte	0x12a
 6623 15aa 00000000 		.4byte	.LFB90
 6624 15ae 58000000 		.4byte	.LFE90-.LFB90
 6625 15b2 01       		.uleb128 0x1
 6626 15b3 9C       		.byte	0x9c
 6627 15b4 29160000 		.4byte	0x1629
 6628 15b8 15       		.uleb128 0x15
 6629 15b9 33010000 		.4byte	.LASF158
 6630 15bd 01       		.byte	0x1
 6631 15be 1A0A     		.2byte	0xa1a
 6632 15c0 99150000 		.4byte	0x1599
 6633 15c4 BB0C0000 		.4byte	.LLST92
 6634 15c8 15       		.uleb128 0x15
 6635 15c9 6B0D0000 		.4byte	.LASF160
 6636 15cd 01       		.byte	0x1
 6637 15ce 1A0A     		.2byte	0xa1a
 6638 15d0 4C100000 		.4byte	0x104c
 6639 15d4 320D0000 		.4byte	.LLST93
 6640 15d8 16       		.uleb128 0x16
 6641 15d9 39040000 		.4byte	.LASF81
 6642 15dd 01       		.byte	0x1
 6643 15de 1C0A     		.2byte	0xa1c
 6644 15e0 2A010000 		.4byte	0x12a
 6645 15e4 5E0D0000 		.4byte	.LLST94
 6646 15e8 1B       		.uleb128 0x1b
 6647 15e9 0A000000 		.4byte	.LBB21
 6648 15ed 42000000 		.4byte	.LBE21-.LBB21
 6649 15f1 16160000 		.4byte	0x1616
 6650 15f5 16       		.uleb128 0x16
 6651 15f6 41040000 		.4byte	.LASF129
 6652 15fa 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 207


 6653 15fb 240A     		.2byte	0xa24
 6654 15fd 88070000 		.4byte	0x788
 6655 1601 880D0000 		.4byte	.LLST95
 6656 1605 19       		.uleb128 0x19
 6657 1606 3E000000 		.4byte	.LVL298
 6658 160a 6E150000 		.4byte	0x156e
 6659 160e 1A       		.uleb128 0x1a
 6660 160f 01       		.uleb128 0x1
 6661 1610 50       		.byte	0x50
 6662 1611 02       		.uleb128 0x2
 6663 1612 74       		.byte	0x74
 6664 1613 00       		.sleb128 0
 6665 1614 00       		.byte	0
 6666 1615 00       		.byte	0
 6667 1616 18       		.uleb128 0x18
 6668 1617 0A000000 		.4byte	.LVL295
 6669 161b 351E0000 		.4byte	0x1e35
 6670 161f 18       		.uleb128 0x18
 6671 1620 50000000 		.4byte	.LVL306
 6672 1624 4C1E0000 		.4byte	0x1e4c
 6673 1628 00       		.byte	0
 6674 1629 22       		.uleb128 0x22
 6675 162a A9010000 		.4byte	.LASF162
 6676 162e 01       		.byte	0x1
 6677 162f 4B0A     		.2byte	0xa4b
 6678 1631 00000000 		.4byte	.LFB91
 6679 1635 10000000 		.4byte	.LFE91-.LFB91
 6680 1639 01       		.uleb128 0x1
 6681 163a 9C       		.byte	0x9c
 6682 163b 20       		.uleb128 0x20
 6683 163c 220E0000 		.4byte	.LASF163
 6684 1640 01       		.byte	0x1
 6685 1641 D30C     		.2byte	0xcd3
 6686 1643 35010000 		.4byte	0x135
 6687 1647 00000000 		.4byte	.LFB99
 6688 164b 18000000 		.4byte	.LFE99-.LFB99
 6689 164f 01       		.uleb128 0x1
 6690 1650 9C       		.byte	0x9c
 6691 1651 9D160000 		.4byte	0x169d
 6692 1655 15       		.uleb128 0x15
 6693 1656 8A0A0000 		.4byte	.LASF85
 6694 165a 01       		.byte	0x1
 6695 165b D30C     		.2byte	0xcd3
 6696 165d 29020000 		.4byte	0x229
 6697 1661 A60D0000 		.4byte	.LLST96
 6698 1665 16       		.uleb128 0x16
 6699 1666 49050000 		.4byte	.LASF82
 6700 166a 01       		.byte	0x1
 6701 166b D50C     		.2byte	0xcd5
 6702 166d F0040000 		.4byte	0x4f0
 6703 1671 B90D0000 		.4byte	.LLST97
 6704 1675 16       		.uleb128 0x16
 6705 1676 F7020000 		.4byte	.LASF164
 6706 167a 01       		.byte	0x1
 6707 167b D60C     		.2byte	0xcd6
 6708 167d 4B010000 		.4byte	0x14b
 6709 1681 CC0D0000 		.4byte	.LLST98
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 208


 6710 1685 1C       		.uleb128 0x1c
 6711 1686 8C050000 		.4byte	.LASF109
 6712 168a 01       		.byte	0x1
 6713 168b D70C     		.2byte	0xcd7
 6714 168d 35010000 		.4byte	0x135
 6715 1691 01       		.uleb128 0x1
 6716 1692 50       		.byte	0x50
 6717 1693 18       		.uleb128 0x18
 6718 1694 12000000 		.4byte	.LVL310
 6719 1698 83040000 		.4byte	0x483
 6720 169c 00       		.byte	0
 6721 169d 20       		.uleb128 0x20
 6722 169e FC060000 		.4byte	.LASF165
 6723 16a2 01       		.byte	0x1
 6724 16a3 2D0D     		.2byte	0xd2d
 6725 16a5 29020000 		.4byte	0x229
 6726 16a9 00000000 		.4byte	.LFB102
 6727 16ad 0C000000 		.4byte	.LFE102-.LFB102
 6728 16b1 01       		.uleb128 0x1
 6729 16b2 9C       		.byte	0x9c
 6730 16b3 C6160000 		.4byte	0x16c6
 6731 16b7 1C       		.uleb128 0x1c
 6732 16b8 39040000 		.4byte	.LASF81
 6733 16bc 01       		.byte	0x1
 6734 16bd 2F0D     		.2byte	0xd2f
 6735 16bf 29020000 		.4byte	0x229
 6736 16c3 01       		.uleb128 0x1
 6737 16c4 50       		.byte	0x50
 6738 16c5 00       		.byte	0
 6739 16c6 21       		.uleb128 0x21
 6740 16c7 7A010000 		.4byte	.LASF166
 6741 16cb 01       		.byte	0x1
 6742 16cc 5A0D     		.2byte	0xd5a
 6743 16ce 00000000 		.4byte	.LFB103
 6744 16d2 B4000000 		.4byte	.LFE103-.LFB103
 6745 16d6 01       		.uleb128 0x1
 6746 16d7 9C       		.byte	0x9c
 6747 16d8 21170000 		.4byte	0x1721
 6748 16dc 15       		.uleb128 0x15
 6749 16dd 41060000 		.4byte	.LASF167
 6750 16e1 01       		.byte	0x1
 6751 16e2 5A0D     		.2byte	0xd5a
 6752 16e4 6E040000 		.4byte	0x46e
 6753 16e8 E00D0000 		.4byte	.LLST99
 6754 16ec 16       		.uleb128 0x16
 6755 16ed 49050000 		.4byte	.LASF82
 6756 16f1 01       		.byte	0x1
 6757 16f2 5C0D     		.2byte	0xd5c
 6758 16f4 91060000 		.4byte	0x691
 6759 16f8 E00D0000 		.4byte	.LLST99
 6760 16fc 1D       		.uleb128 0x1d
 6761 16fd 4C000000 		.4byte	.LVL314
 6762 1701 621E0000 		.4byte	0x1e62
 6763 1705 10170000 		.4byte	0x1710
 6764 1709 1A       		.uleb128 0x1a
 6765 170a 01       		.uleb128 0x1
 6766 170b 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 209


 6767 170c 02       		.uleb128 0x2
 6768 170d 74       		.byte	0x74
 6769 170e 00       		.sleb128 0
 6770 170f 00       		.byte	0
 6771 1710 19       		.uleb128 0x19
 6772 1711 9A000000 		.4byte	.LVL315
 6773 1715 401E0000 		.4byte	0x1e40
 6774 1719 1A       		.uleb128 0x1a
 6775 171a 01       		.uleb128 0x1
 6776 171b 51       		.byte	0x51
 6777 171c 02       		.uleb128 0x2
 6778 171d 74       		.byte	0x74
 6779 171e 00       		.sleb128 0
 6780 171f 00       		.byte	0
 6781 1720 00       		.byte	0
 6782 1721 20       		.uleb128 0x20
 6783 1722 FF0D0000 		.4byte	.LASF168
 6784 1726 01       		.byte	0x1
 6785 1727 9C0D     		.2byte	0xd9c
 6786 1729 2A010000 		.4byte	0x12a
 6787 172d 00000000 		.4byte	.LFB104
 6788 1731 88000000 		.4byte	.LFE104-.LFB104
 6789 1735 01       		.uleb128 0x1
 6790 1736 9C       		.byte	0x9c
 6791 1737 90170000 		.4byte	0x1790
 6792 173b 15       		.uleb128 0x15
 6793 173c 41060000 		.4byte	.LASF167
 6794 1740 01       		.byte	0x1
 6795 1741 9C0D     		.2byte	0xd9c
 6796 1743 6E040000 		.4byte	0x46e
 6797 1747 1F0E0000 		.4byte	.LLST101
 6798 174b 16       		.uleb128 0x16
 6799 174c 49050000 		.4byte	.LASF82
 6800 1750 01       		.byte	0x1
 6801 1751 9E0D     		.2byte	0xd9e
 6802 1753 91060000 		.4byte	0x691
 6803 1757 870E0000 		.4byte	.LLST102
 6804 175b 16       		.uleb128 0x16
 6805 175c 39040000 		.4byte	.LASF81
 6806 1760 01       		.byte	0x1
 6807 1761 9F0D     		.2byte	0xd9f
 6808 1763 2A010000 		.4byte	0x12a
 6809 1767 EF0E0000 		.4byte	.LLST103
 6810 176b 1D       		.uleb128 0x1d
 6811 176c 22000000 		.4byte	.LVL320
 6812 1770 621E0000 		.4byte	0x1e62
 6813 1774 7F170000 		.4byte	0x177f
 6814 1778 1A       		.uleb128 0x1a
 6815 1779 01       		.uleb128 0x1
 6816 177a 50       		.byte	0x50
 6817 177b 02       		.uleb128 0x2
 6818 177c 75       		.byte	0x75
 6819 177d 00       		.sleb128 0
 6820 177e 00       		.byte	0
 6821 177f 19       		.uleb128 0x19
 6822 1780 72000000 		.4byte	.LVL322
 6823 1784 401E0000 		.4byte	0x1e40
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 210


 6824 1788 1A       		.uleb128 0x1a
 6825 1789 01       		.uleb128 0x1
 6826 178a 51       		.byte	0x51
 6827 178b 02       		.uleb128 0x2
 6828 178c 75       		.byte	0x75
 6829 178d 00       		.sleb128 0
 6830 178e 00       		.byte	0
 6831 178f 00       		.byte	0
 6832 1790 20       		.uleb128 0x20
 6833 1791 6C000000 		.4byte	.LASF169
 6834 1795 01       		.byte	0x1
 6835 1796 1C0F     		.2byte	0xf1c
 6836 1798 40010000 		.4byte	0x140
 6837 179c 00000000 		.4byte	.LFB105
 6838 17a0 20000000 		.4byte	.LFE105-.LFB105
 6839 17a4 01       		.uleb128 0x1
 6840 17a5 9C       		.byte	0x9c
 6841 17a6 B9170000 		.4byte	0x17b9
 6842 17aa 1C       		.uleb128 0x1c
 6843 17ab 8C050000 		.4byte	.LASF109
 6844 17af 01       		.byte	0x1
 6845 17b0 1E0F     		.2byte	0xf1e
 6846 17b2 40010000 		.4byte	0x140
 6847 17b6 01       		.uleb128 0x1
 6848 17b7 50       		.byte	0x50
 6849 17b8 00       		.byte	0
 6850 17b9 24       		.uleb128 0x24
 6851 17ba 9C0B0000 		.4byte	.LASF171
 6852 17be 01       		.byte	0x1
 6853 17bf 2C0F     		.2byte	0xf2c
 6854 17c1 B0000000 		.4byte	0xb0
 6855 17c5 00000000 		.4byte	.LFB106
 6856 17c9 20000000 		.4byte	.LFE106-.LFB106
 6857 17cd 01       		.uleb128 0x1
 6858 17ce 9C       		.byte	0x9c
 6859 17cf 20       		.uleb128 0x20
 6860 17d0 EE0D0000 		.4byte	.LASF172
 6861 17d4 01       		.byte	0x1
 6862 17d5 3D0F     		.2byte	0xf3d
 6863 17d7 E5000000 		.4byte	0xe5
 6864 17db 00000000 		.4byte	.LFB107
 6865 17df B4000000 		.4byte	.LFE107-.LFB107
 6866 17e3 01       		.uleb128 0x1
 6867 17e4 9C       		.byte	0x9c
 6868 17e5 80180000 		.4byte	0x1880
 6869 17e9 15       		.uleb128 0x15
 6870 17ea F2010000 		.4byte	.LASF173
 6871 17ee 01       		.byte	0x1
 6872 17ef 3D0F     		.2byte	0xf3d
 6873 17f1 2A010000 		.4byte	0x12a
 6874 17f5 3D0F0000 		.4byte	.LLST104
 6875 17f9 15       		.uleb128 0x15
 6876 17fa D0010000 		.4byte	.LASF151
 6877 17fe 01       		.byte	0x1
 6878 17ff 3D0F     		.2byte	0xf3d
 6879 1801 40010000 		.4byte	0x140
 6880 1805 690F0000 		.4byte	.LLST105
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 211


 6881 1809 16       		.uleb128 0x16
 6882 180a 17010000 		.4byte	.LASF99
 6883 180e 01       		.byte	0x1
 6884 180f 3F0F     		.2byte	0xf3f
 6885 1811 40010000 		.4byte	0x140
 6886 1815 950F0000 		.4byte	.LLST106
 6887 1819 16       		.uleb128 0x16
 6888 181a DB0D0000 		.4byte	.LASF174
 6889 181e 01       		.byte	0x1
 6890 181f 400F     		.2byte	0xf40
 6891 1821 E5000000 		.4byte	0xe5
 6892 1825 B80F0000 		.4byte	.LLST107
 6893 1829 18       		.uleb128 0x18
 6894 182a 0A000000 		.4byte	.LVL331
 6895 182e 351E0000 		.4byte	0x1e35
 6896 1832 18       		.uleb128 0x18
 6897 1833 2E000000 		.4byte	.LVL332
 6898 1837 621E0000 		.4byte	0x1e62
 6899 183b 1D       		.uleb128 0x1d
 6900 183c 5C000000 		.4byte	.LVL333
 6901 1840 401E0000 		.4byte	0x1e40
 6902 1844 52180000 		.4byte	0x1852
 6903 1848 1A       		.uleb128 0x1a
 6904 1849 01       		.uleb128 0x1
 6905 184a 50       		.byte	0x50
 6906 184b 05       		.uleb128 0x5
 6907 184c 03       		.byte	0x3
 6908 184d 00000000 		.4byte	.LANCHOR0
 6909 1851 00       		.byte	0
 6910 1852 18       		.uleb128 0x18
 6911 1853 6A000000 		.4byte	.LVL336
 6912 1857 4F070000 		.4byte	0x74f
 6913 185b 18       		.uleb128 0x18
 6914 185c 6E000000 		.4byte	.LVL337
 6915 1860 571E0000 		.4byte	0x1e57
 6916 1864 18       		.uleb128 0x18
 6917 1865 72000000 		.4byte	.LVL338
 6918 1869 4C1E0000 		.4byte	0x1e4c
 6919 186d 18       		.uleb128 0x18
 6920 186e 76000000 		.4byte	.LVL339
 6921 1872 351E0000 		.4byte	0x1e35
 6922 1876 18       		.uleb128 0x18
 6923 1877 AA000000 		.4byte	.LVL341
 6924 187b 4C1E0000 		.4byte	0x1e4c
 6925 187f 00       		.byte	0
 6926 1880 20       		.uleb128 0x20
 6927 1881 CB0D0000 		.4byte	.LASF175
 6928 1885 01       		.byte	0x1
 6929 1886 AE0F     		.2byte	0xfae
 6930 1888 2A010000 		.4byte	0x12a
 6931 188c 00000000 		.4byte	.LFB108
 6932 1890 D4000000 		.4byte	.LFE108-.LFB108
 6933 1894 01       		.uleb128 0x1
 6934 1895 9C       		.byte	0x9c
 6935 1896 51190000 		.4byte	0x1951
 6936 189a 15       		.uleb128 0x15
 6937 189b 5E050000 		.4byte	.LASF176
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 212


 6938 189f 01       		.byte	0x1
 6939 18a0 AE0F     		.2byte	0xfae
 6940 18a2 E5000000 		.4byte	0xe5
 6941 18a6 D60F0000 		.4byte	.LLST108
 6942 18aa 15       		.uleb128 0x15
 6943 18ab 730E0000 		.4byte	.LASF177
 6944 18af 01       		.byte	0x1
 6945 18b0 AE0F     		.2byte	0xfae
 6946 18b2 E5000000 		.4byte	0xe5
 6947 18b6 02100000 		.4byte	.LLST109
 6948 18ba 15       		.uleb128 0x15
 6949 18bb C4070000 		.4byte	.LASF178
 6950 18bf 01       		.byte	0x1
 6951 18c0 AE0F     		.2byte	0xfae
 6952 18c2 51190000 		.4byte	0x1951
 6953 18c6 47100000 		.4byte	.LLST110
 6954 18ca 15       		.uleb128 0x15
 6955 18cb D0010000 		.4byte	.LASF151
 6956 18cf 01       		.byte	0x1
 6957 18d0 AE0F     		.2byte	0xfae
 6958 18d2 40010000 		.4byte	0x140
 6959 18d6 73100000 		.4byte	.LLST111
 6960 18da 16       		.uleb128 0x16
 6961 18db 17010000 		.4byte	.LASF99
 6962 18df 01       		.byte	0x1
 6963 18e0 B00F     		.2byte	0xfb0
 6964 18e2 40010000 		.4byte	0x140
 6965 18e6 9F100000 		.4byte	.LLST112
 6966 18ea 16       		.uleb128 0x16
 6967 18eb 39040000 		.4byte	.LASF81
 6968 18ef 01       		.byte	0x1
 6969 18f0 B10F     		.2byte	0xfb1
 6970 18f2 2A010000 		.4byte	0x12a
 6971 18f6 C2100000 		.4byte	.LLST113
 6972 18fa 18       		.uleb128 0x18
 6973 18fb 0E000000 		.4byte	.LVL344
 6974 18ff 351E0000 		.4byte	0x1e35
 6975 1903 18       		.uleb128 0x18
 6976 1904 44000000 		.4byte	.LVL345
 6977 1908 621E0000 		.4byte	0x1e62
 6978 190c 1D       		.uleb128 0x1d
 6979 190d 72000000 		.4byte	.LVL346
 6980 1911 401E0000 		.4byte	0x1e40
 6981 1915 23190000 		.4byte	0x1923
 6982 1919 1A       		.uleb128 0x1a
 6983 191a 01       		.uleb128 0x1
 6984 191b 50       		.byte	0x50
 6985 191c 05       		.uleb128 0x5
 6986 191d 03       		.byte	0x3
 6987 191e 00000000 		.4byte	.LANCHOR0
 6988 1922 00       		.byte	0
 6989 1923 18       		.uleb128 0x18
 6990 1924 80000000 		.4byte	.LVL349
 6991 1928 4F070000 		.4byte	0x74f
 6992 192c 18       		.uleb128 0x18
 6993 192d 84000000 		.4byte	.LVL350
 6994 1931 571E0000 		.4byte	0x1e57
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 213


 6995 1935 18       		.uleb128 0x18
 6996 1936 88000000 		.4byte	.LVL351
 6997 193a 4C1E0000 		.4byte	0x1e4c
 6998 193e 18       		.uleb128 0x18
 6999 193f 8C000000 		.4byte	.LVL352
 7000 1943 351E0000 		.4byte	0x1e35
 7001 1947 18       		.uleb128 0x18
 7002 1948 CC000000 		.4byte	.LVL357
 7003 194c 4C1E0000 		.4byte	0x1e4c
 7004 1950 00       		.byte	0
 7005 1951 06       		.uleb128 0x6
 7006 1952 04       		.byte	0x4
 7007 1953 E5000000 		.4byte	0xe5
 7008 1957 20       		.uleb128 0x20
 7009 1958 B20C0000 		.4byte	.LASF179
 7010 195c 01       		.byte	0x1
 7011 195d 2B10     		.2byte	0x102b
 7012 195f 2A010000 		.4byte	0x12a
 7013 1963 00000000 		.4byte	.LFB109
 7014 1967 A8000000 		.4byte	.LFE109-.LFB109
 7015 196b 01       		.uleb128 0x1
 7016 196c 9C       		.byte	0x9c
 7017 196d 251A0000 		.4byte	0x1a25
 7018 1971 15       		.uleb128 0x15
 7019 1972 B7040000 		.4byte	.LASF180
 7020 1976 01       		.byte	0x1
 7021 1977 2B10     		.2byte	0x102b
 7022 1979 29020000 		.4byte	0x229
 7023 197d EC100000 		.4byte	.LLST114
 7024 1981 15       		.uleb128 0x15
 7025 1982 64000000 		.4byte	.LASF181
 7026 1986 01       		.byte	0x1
 7027 1987 2B10     		.2byte	0x102b
 7028 1989 E5000000 		.4byte	0xe5
 7029 198d 18110000 		.4byte	.LLST115
 7030 1991 15       		.uleb128 0x15
 7031 1992 1B020000 		.4byte	.LASF182
 7032 1996 01       		.byte	0x1
 7033 1997 2B10     		.2byte	0x102b
 7034 1999 95020000 		.4byte	0x295
 7035 199d 5D110000 		.4byte	.LLST116
 7036 19a1 15       		.uleb128 0x15
 7037 19a2 3C030000 		.4byte	.LASF183
 7038 19a6 01       		.byte	0x1
 7039 19a7 2B10     		.2byte	0x102b
 7040 19a9 51190000 		.4byte	0x1951
 7041 19ad 7E110000 		.4byte	.LLST117
 7042 19b1 16       		.uleb128 0x16
 7043 19b2 49050000 		.4byte	.LASF82
 7044 19b6 01       		.byte	0x1
 7045 19b7 2D10     		.2byte	0x102d
 7046 19b9 F0040000 		.4byte	0x4f0
 7047 19bd AA110000 		.4byte	.LLST118
 7048 19c1 16       		.uleb128 0x16
 7049 19c2 96020000 		.4byte	.LASF184
 7050 19c6 01       		.byte	0x1
 7051 19c7 2E10     		.2byte	0x102e
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 214


 7052 19c9 36030000 		.4byte	0x336
 7053 19cd D6110000 		.4byte	.LLST119
 7054 19d1 16       		.uleb128 0x16
 7055 19d2 39040000 		.4byte	.LASF81
 7056 19d6 01       		.byte	0x1
 7057 19d7 2F10     		.2byte	0x102f
 7058 19d9 2A010000 		.4byte	0x12a
 7059 19dd E9110000 		.4byte	.LLST120
 7060 19e1 18       		.uleb128 0x18
 7061 19e2 0E000000 		.4byte	.LVL361
 7062 19e6 351E0000 		.4byte	0x1e35
 7063 19ea 1D       		.uleb128 0x1d
 7064 19eb 64000000 		.4byte	.LVL366
 7065 19ef 621E0000 		.4byte	0x1e62
 7066 19f3 FE190000 		.4byte	0x19fe
 7067 19f7 1A       		.uleb128 0x1a
 7068 19f8 01       		.uleb128 0x1
 7069 19f9 50       		.byte	0x50
 7070 19fa 02       		.uleb128 0x2
 7071 19fb 77       		.byte	0x77
 7072 19fc 00       		.sleb128 0
 7073 19fd 00       		.byte	0
 7074 19fe 1D       		.uleb128 0x1d
 7075 19ff 8A000000 		.4byte	.LVL368
 7076 1a03 401E0000 		.4byte	0x1e40
 7077 1a07 121A0000 		.4byte	0x1a12
 7078 1a0b 1A       		.uleb128 0x1a
 7079 1a0c 01       		.uleb128 0x1
 7080 1a0d 51       		.byte	0x51
 7081 1a0e 02       		.uleb128 0x2
 7082 1a0f 77       		.byte	0x77
 7083 1a10 00       		.sleb128 0
 7084 1a11 00       		.byte	0
 7085 1a12 18       		.uleb128 0x18
 7086 1a13 9A000000 		.4byte	.LVL369
 7087 1a17 571E0000 		.4byte	0x1e57
 7088 1a1b 18       		.uleb128 0x18
 7089 1a1c 9E000000 		.4byte	.LVL370
 7090 1a20 4C1E0000 		.4byte	0x1e4c
 7091 1a24 00       		.byte	0
 7092 1a25 20       		.uleb128 0x20
 7093 1a26 9E000000 		.4byte	.LASF185
 7094 1a2a 01       		.byte	0x1
 7095 1a2b 9510     		.2byte	0x1095
 7096 1a2d 2A010000 		.4byte	0x12a
 7097 1a31 00000000 		.4byte	.LFB110
 7098 1a35 D4000000 		.4byte	.LFE110-.LFB110
 7099 1a39 01       		.uleb128 0x1
 7100 1a3a 9C       		.byte	0x9c
 7101 1a3b 2E1B0000 		.4byte	0x1b2e
 7102 1a3f 15       		.uleb128 0x15
 7103 1a40 B7040000 		.4byte	.LASF180
 7104 1a44 01       		.byte	0x1
 7105 1a45 9510     		.2byte	0x1095
 7106 1a47 29020000 		.4byte	0x229
 7107 1a4b 13120000 		.4byte	.LLST121
 7108 1a4f 15       		.uleb128 0x15
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 215


 7109 1a50 64000000 		.4byte	.LASF181
 7110 1a54 01       		.byte	0x1
 7111 1a55 9510     		.2byte	0x1095
 7112 1a57 E5000000 		.4byte	0xe5
 7113 1a5b 3F120000 		.4byte	.LLST122
 7114 1a5f 15       		.uleb128 0x15
 7115 1a60 1B020000 		.4byte	.LASF182
 7116 1a64 01       		.byte	0x1
 7117 1a65 9510     		.2byte	0x1095
 7118 1a67 95020000 		.4byte	0x295
 7119 1a6b 6B120000 		.4byte	.LLST123
 7120 1a6f 15       		.uleb128 0x15
 7121 1a70 3C030000 		.4byte	.LASF183
 7122 1a74 01       		.byte	0x1
 7123 1a75 9510     		.2byte	0x1095
 7124 1a77 51190000 		.4byte	0x1951
 7125 1a7b 8C120000 		.4byte	.LLST124
 7126 1a7f 15       		.uleb128 0x15
 7127 1a80 DF040000 		.4byte	.LASF186
 7128 1a84 01       		.byte	0x1
 7129 1a85 9510     		.2byte	0x1095
 7130 1a87 2E1B0000 		.4byte	0x1b2e
 7131 1a8b D1120000 		.4byte	.LLST125
 7132 1a8f 16       		.uleb128 0x16
 7133 1a90 49050000 		.4byte	.LASF82
 7134 1a94 01       		.byte	0x1
 7135 1a95 9710     		.2byte	0x1097
 7136 1a97 F0040000 		.4byte	0x4f0
 7137 1a9b F1120000 		.4byte	.LLST126
 7138 1a9f 16       		.uleb128 0x16
 7139 1aa0 96020000 		.4byte	.LASF184
 7140 1aa4 01       		.byte	0x1
 7141 1aa5 9810     		.2byte	0x1098
 7142 1aa7 36030000 		.4byte	0x336
 7143 1aab 1D130000 		.4byte	.LLST127
 7144 1aaf 16       		.uleb128 0x16
 7145 1ab0 39040000 		.4byte	.LASF81
 7146 1ab4 01       		.byte	0x1
 7147 1ab5 9910     		.2byte	0x1099
 7148 1ab7 2A010000 		.4byte	0x12a
 7149 1abb 30130000 		.4byte	.LLST128
 7150 1abf 16       		.uleb128 0x16
 7151 1ac0 3D0A0000 		.4byte	.LASF121
 7152 1ac4 01       		.byte	0x1
 7153 1ac5 9A10     		.2byte	0x109a
 7154 1ac7 35010000 		.4byte	0x135
 7155 1acb 5A130000 		.4byte	.LLST129
 7156 1acf 18       		.uleb128 0x18
 7157 1ad0 10000000 		.4byte	.LVL374
 7158 1ad4 6E1E0000 		.4byte	0x1e6e
 7159 1ad8 1D       		.uleb128 0x1d
 7160 1ad9 76000000 		.4byte	.LVL381
 7161 1add 621E0000 		.4byte	0x1e62
 7162 1ae1 EC1A0000 		.4byte	0x1aec
 7163 1ae5 1A       		.uleb128 0x1a
 7164 1ae6 01       		.uleb128 0x1
 7165 1ae7 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 216


 7166 1ae8 02       		.uleb128 0x2
 7167 1ae9 76       		.byte	0x76
 7168 1aea 00       		.sleb128 0
 7169 1aeb 00       		.byte	0
 7170 1aec 1D       		.uleb128 0x1d
 7171 1aed 9A000000 		.4byte	.LVL382
 7172 1af1 401E0000 		.4byte	0x1e40
 7173 1af5 001B0000 		.4byte	0x1b00
 7174 1af9 1A       		.uleb128 0x1a
 7175 1afa 01       		.uleb128 0x1
 7176 1afb 51       		.byte	0x51
 7177 1afc 02       		.uleb128 0x2
 7178 1afd 76       		.byte	0x76
 7179 1afe 00       		.sleb128 0
 7180 1aff 00       		.byte	0
 7181 1b00 1D       		.uleb128 0x1d
 7182 1b01 A6000000 		.4byte	.LVL385
 7183 1b05 401E0000 		.4byte	0x1e40
 7184 1b09 1D1B0000 		.4byte	0x1b1d
 7185 1b0d 1A       		.uleb128 0x1a
 7186 1b0e 01       		.uleb128 0x1
 7187 1b0f 50       		.byte	0x50
 7188 1b10 05       		.uleb128 0x5
 7189 1b11 03       		.byte	0x3
 7190 1b12 14000000 		.4byte	.LANCHOR0+20
 7191 1b16 1A       		.uleb128 0x1a
 7192 1b17 01       		.uleb128 0x1
 7193 1b18 51       		.byte	0x51
 7194 1b19 02       		.uleb128 0x2
 7195 1b1a 74       		.byte	0x74
 7196 1b1b 18       		.sleb128 24
 7197 1b1c 00       		.byte	0
 7198 1b1d 19       		.uleb128 0x19
 7199 1b1e C4000000 		.4byte	.LVL386
 7200 1b22 791E0000 		.4byte	0x1e79
 7201 1b26 1A       		.uleb128 0x1a
 7202 1b27 01       		.uleb128 0x1
 7203 1b28 50       		.byte	0x50
 7204 1b29 02       		.uleb128 0x2
 7205 1b2a 77       		.byte	0x77
 7206 1b2b 00       		.sleb128 0
 7207 1b2c 00       		.byte	0
 7208 1b2d 00       		.byte	0
 7209 1b2e 06       		.uleb128 0x6
 7210 1b2f 04       		.byte	0x4
 7211 1b30 2A010000 		.4byte	0x12a
 7212 1b34 21       		.uleb128 0x21
 7213 1b35 AB060000 		.4byte	.LASF187
 7214 1b39 01       		.byte	0x1
 7215 1b3a 0A11     		.2byte	0x110a
 7216 1b3c 00000000 		.4byte	.LFB111
 7217 1b40 88000000 		.4byte	.LFE111-.LFB111
 7218 1b44 01       		.uleb128 0x1
 7219 1b45 9C       		.byte	0x9c
 7220 1b46 F91B0000 		.4byte	0x1bf9
 7221 1b4a 15       		.uleb128 0x15
 7222 1b4b B7040000 		.4byte	.LASF180
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 217


 7223 1b4f 01       		.byte	0x1
 7224 1b50 0A11     		.2byte	0x110a
 7225 1b52 29020000 		.4byte	0x229
 7226 1b56 8E130000 		.4byte	.LLST130
 7227 1b5a 15       		.uleb128 0x15
 7228 1b5b DF040000 		.4byte	.LASF186
 7229 1b5f 01       		.byte	0x1
 7230 1b60 0A11     		.2byte	0x110a
 7231 1b62 2E1B0000 		.4byte	0x1b2e
 7232 1b66 BA130000 		.4byte	.LLST131
 7233 1b6a 16       		.uleb128 0x16
 7234 1b6b 49050000 		.4byte	.LASF82
 7235 1b6f 01       		.byte	0x1
 7236 1b70 0C11     		.2byte	0x110c
 7237 1b72 F0040000 		.4byte	0x4f0
 7238 1b76 E6130000 		.4byte	.LLST132
 7239 1b7a 16       		.uleb128 0x16
 7240 1b7b 96020000 		.4byte	.LASF184
 7241 1b7f 01       		.byte	0x1
 7242 1b80 0D11     		.2byte	0x110d
 7243 1b82 36030000 		.4byte	0x336
 7244 1b86 12140000 		.4byte	.LLST133
 7245 1b8a 16       		.uleb128 0x16
 7246 1b8b 3D0A0000 		.4byte	.LASF121
 7247 1b8f 01       		.byte	0x1
 7248 1b90 0E11     		.2byte	0x110e
 7249 1b92 35010000 		.4byte	0x135
 7250 1b96 25140000 		.4byte	.LLST134
 7251 1b9a 18       		.uleb128 0x18
 7252 1b9b 0A000000 		.4byte	.LVL390
 7253 1b9f 6E1E0000 		.4byte	0x1e6e
 7254 1ba3 1D       		.uleb128 0x1d
 7255 1ba4 32000000 		.4byte	.LVL395
 7256 1ba8 621E0000 		.4byte	0x1e62
 7257 1bac B71B0000 		.4byte	0x1bb7
 7258 1bb0 1A       		.uleb128 0x1a
 7259 1bb1 01       		.uleb128 0x1
 7260 1bb2 50       		.byte	0x50
 7261 1bb3 02       		.uleb128 0x2
 7262 1bb4 77       		.byte	0x77
 7263 1bb5 00       		.sleb128 0
 7264 1bb6 00       		.byte	0
 7265 1bb7 1D       		.uleb128 0x1d
 7266 1bb8 56000000 		.4byte	.LVL396
 7267 1bbc 401E0000 		.4byte	0x1e40
 7268 1bc0 CB1B0000 		.4byte	0x1bcb
 7269 1bc4 1A       		.uleb128 0x1a
 7270 1bc5 01       		.uleb128 0x1
 7271 1bc6 51       		.byte	0x51
 7272 1bc7 02       		.uleb128 0x2
 7273 1bc8 77       		.byte	0x77
 7274 1bc9 00       		.sleb128 0
 7275 1bca 00       		.byte	0
 7276 1bcb 1D       		.uleb128 0x1d
 7277 1bcc 62000000 		.4byte	.LVL399
 7278 1bd0 401E0000 		.4byte	0x1e40
 7279 1bd4 E81B0000 		.4byte	0x1be8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 218


 7280 1bd8 1A       		.uleb128 0x1a
 7281 1bd9 01       		.uleb128 0x1
 7282 1bda 50       		.byte	0x50
 7283 1bdb 05       		.uleb128 0x5
 7284 1bdc 03       		.byte	0x3
 7285 1bdd 14000000 		.4byte	.LANCHOR0+20
 7286 1be1 1A       		.uleb128 0x1a
 7287 1be2 01       		.uleb128 0x1
 7288 1be3 51       		.byte	0x51
 7289 1be4 02       		.uleb128 0x2
 7290 1be5 74       		.byte	0x74
 7291 1be6 18       		.sleb128 24
 7292 1be7 00       		.byte	0
 7293 1be8 19       		.uleb128 0x19
 7294 1be9 7C000000 		.4byte	.LVL400
 7295 1bed 791E0000 		.4byte	0x1e79
 7296 1bf1 1A       		.uleb128 0x1a
 7297 1bf2 01       		.uleb128 0x1
 7298 1bf3 50       		.byte	0x50
 7299 1bf4 02       		.uleb128 0x2
 7300 1bf5 75       		.byte	0x75
 7301 1bf6 00       		.sleb128 0
 7302 1bf7 00       		.byte	0
 7303 1bf8 00       		.byte	0
 7304 1bf9 20       		.uleb128 0x20
 7305 1bfa E5000000 		.4byte	.LASF188
 7306 1bfe 01       		.byte	0x1
 7307 1bff 5C11     		.2byte	0x115c
 7308 1c01 2A010000 		.4byte	0x12a
 7309 1c05 00000000 		.4byte	.LFB112
 7310 1c09 34000000 		.4byte	.LFE112-.LFB112
 7311 1c0d 01       		.uleb128 0x1
 7312 1c0e 9C       		.byte	0x9c
 7313 1c0f 561C0000 		.4byte	0x1c56
 7314 1c13 15       		.uleb128 0x15
 7315 1c14 8A0A0000 		.4byte	.LASF85
 7316 1c18 01       		.byte	0x1
 7317 1c19 5C11     		.2byte	0x115c
 7318 1c1b 29020000 		.4byte	0x229
 7319 1c1f 59140000 		.4byte	.LLST135
 7320 1c23 16       		.uleb128 0x16
 7321 1c24 49050000 		.4byte	.LASF82
 7322 1c28 01       		.byte	0x1
 7323 1c29 5E11     		.2byte	0x115e
 7324 1c2b F0040000 		.4byte	0x4f0
 7325 1c2f 6C140000 		.4byte	.LLST136
 7326 1c33 16       		.uleb128 0x16
 7327 1c34 39040000 		.4byte	.LASF81
 7328 1c38 01       		.byte	0x1
 7329 1c39 5F11     		.2byte	0x115f
 7330 1c3b 2A010000 		.4byte	0x12a
 7331 1c3f 95140000 		.4byte	.LLST137
 7332 1c43 18       		.uleb128 0x18
 7333 1c44 10000000 		.4byte	.LVL405
 7334 1c48 351E0000 		.4byte	0x1e35
 7335 1c4c 18       		.uleb128 0x18
 7336 1c4d 2A000000 		.4byte	.LVL410
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 219


 7337 1c51 4C1E0000 		.4byte	0x1e4c
 7338 1c55 00       		.byte	0
 7339 1c56 0F       		.uleb128 0xf
 7340 1c57 1E020000 		.4byte	0x21e
 7341 1c5b 661C0000 		.4byte	0x1c66
 7342 1c5f 10       		.uleb128 0x10
 7343 1c60 A9000000 		.4byte	0xa9
 7344 1c64 04       		.byte	0x4
 7345 1c65 00       		.byte	0
 7346 1c66 2D       		.uleb128 0x2d
 7347 1c67 420C0000 		.4byte	.LASF189
 7348 1c6b 01       		.byte	0x1
 7349 1c6c D7       		.byte	0xd7
 7350 1c6d 561C0000 		.4byte	0x1c56
 7351 1c71 05       		.uleb128 0x5
 7352 1c72 03       		.byte	0x3
 7353 1c73 30000000 		.4byte	pxReadyTasksLists
 7354 1c77 2D       		.uleb128 0x2d
 7355 1c78 7E0C0000 		.4byte	.LASF190
 7356 1c7c 01       		.byte	0x1
 7357 1c7d D8       		.byte	0xd8
 7358 1c7e 1E020000 		.4byte	0x21e
 7359 1c82 05       		.uleb128 0x5
 7360 1c83 03       		.byte	0x3
 7361 1c84 94000000 		.4byte	xDelayedTaskList1
 7362 1c88 2D       		.uleb128 0x2d
 7363 1c89 900C0000 		.4byte	.LASF191
 7364 1c8d 01       		.byte	0x1
 7365 1c8e D9       		.byte	0xd9
 7366 1c8f 1E020000 		.4byte	0x21e
 7367 1c93 05       		.uleb128 0x5
 7368 1c94 03       		.byte	0x3
 7369 1c95 A8000000 		.4byte	xDelayedTaskList2
 7370 1c99 2D       		.uleb128 0x2d
 7371 1c9a B9050000 		.4byte	.LASF192
 7372 1c9e 01       		.byte	0x1
 7373 1c9f DA       		.byte	0xda
 7374 1ca0 AA1C0000 		.4byte	0x1caa
 7375 1ca4 05       		.uleb128 0x5
 7376 1ca5 03       		.byte	0x3
 7377 1ca6 28000000 		.4byte	pxDelayedTaskList
 7378 1caa 08       		.uleb128 0x8
 7379 1cab 250A0000 		.4byte	0xa25
 7380 1caf 2D       		.uleb128 0x2d
 7381 1cb0 7F060000 		.4byte	.LASF193
 7382 1cb4 01       		.byte	0x1
 7383 1cb5 DB       		.byte	0xdb
 7384 1cb6 AA1C0000 		.4byte	0x1caa
 7385 1cba 05       		.uleb128 0x5
 7386 1cbb 03       		.byte	0x3
 7387 1cbc D0000000 		.4byte	pxOverflowDelayedTaskList
 7388 1cc0 2D       		.uleb128 0x2d
 7389 1cc1 C2060000 		.4byte	.LASF194
 7390 1cc5 01       		.byte	0x1
 7391 1cc6 DC       		.byte	0xdc
 7392 1cc7 1E020000 		.4byte	0x21e
 7393 1ccb 05       		.uleb128 0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 220


 7394 1ccc 03       		.byte	0x3
 7395 1ccd 14000000 		.4byte	xPendingReadyList
 7396 1cd1 2D       		.uleb128 0x2d
 7397 1cd2 D4060000 		.4byte	.LASF195
 7398 1cd6 01       		.byte	0x1
 7399 1cd7 E0       		.byte	0xe0
 7400 1cd8 1E020000 		.4byte	0x21e
 7401 1cdc 05       		.uleb128 0x5
 7402 1cdd 03       		.byte	0x3
 7403 1cde BC000000 		.4byte	xTasksWaitingTermination
 7404 1ce2 2D       		.uleb128 0x2d
 7405 1ce3 08060000 		.4byte	.LASF196
 7406 1ce7 01       		.byte	0x1
 7407 1ce8 E1       		.byte	0xe1
 7408 1ce9 F31C0000 		.4byte	0x1cf3
 7409 1ced 05       		.uleb128 0x5
 7410 1cee 03       		.byte	0x3
 7411 1cef EC000000 		.4byte	uxTasksDeleted
 7412 1cf3 08       		.uleb128 0x8
 7413 1cf4 35010000 		.4byte	0x135
 7414 1cf8 2D       		.uleb128 0x2d
 7415 1cf9 C7000000 		.4byte	.LASF197
 7416 1cfd 01       		.byte	0x1
 7417 1cfe E7       		.byte	0xe7
 7418 1cff 1E020000 		.4byte	0x21e
 7419 1d03 05       		.uleb128 0x5
 7420 1d04 03       		.byte	0x3
 7421 1d05 00000000 		.4byte	xSuspendedTaskList
 7422 1d09 2D       		.uleb128 0x2d
 7423 1d0a 4D000000 		.4byte	.LASF198
 7424 1d0e 01       		.byte	0x1
 7425 1d0f F2       		.byte	0xf2
 7426 1d10 F31C0000 		.4byte	0x1cf3
 7427 1d14 05       		.uleb128 0x5
 7428 1d15 03       		.byte	0x3
 7429 1d16 DC000000 		.4byte	uxCurrentNumberOfTasks
 7430 1d1a 2D       		.uleb128 0x2d
 7431 1d1b D00C0000 		.4byte	.LASF199
 7432 1d1f 01       		.byte	0x1
 7433 1d20 F3       		.byte	0xf3
 7434 1d21 2B1D0000 		.4byte	0x1d2b
 7435 1d25 05       		.uleb128 0x5
 7436 1d26 03       		.byte	0x3
 7437 1d27 D8000000 		.4byte	xTickCount
 7438 1d2b 08       		.uleb128 0x8
 7439 1d2c 40010000 		.4byte	0x140
 7440 1d30 2D       		.uleb128 0x2d
 7441 1d31 75070000 		.4byte	.LASF200
 7442 1d35 01       		.byte	0x1
 7443 1d36 F4       		.byte	0xf4
 7444 1d37 F31C0000 		.4byte	0x1cf3
 7445 1d3b 05       		.uleb128 0x5
 7446 1d3c 03       		.byte	0x3
 7447 1d3d E8000000 		.4byte	uxTopReadyPriority
 7448 1d41 2D       		.uleb128 0x2d
 7449 1d42 E9080000 		.4byte	.LASF201
 7450 1d46 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 221


 7451 1d47 F5       		.byte	0xf5
 7452 1d48 521D0000 		.4byte	0x1d52
 7453 1d4c 05       		.uleb128 0x5
 7454 1d4d 03       		.byte	0x3
 7455 1d4e E0000000 		.4byte	xSchedulerRunning
 7456 1d52 08       		.uleb128 0x8
 7457 1d53 2A010000 		.4byte	0x12a
 7458 1d57 2D       		.uleb128 0x2d
 7459 1d58 CE0E0000 		.4byte	.LASF202
 7460 1d5c 01       		.byte	0x1
 7461 1d5d F6       		.byte	0xf6
 7462 1d5e F31C0000 		.4byte	0x1cf3
 7463 1d62 05       		.uleb128 0x5
 7464 1d63 03       		.byte	0x3
 7465 1d64 F8000000 		.4byte	uxPendedTicks
 7466 1d68 2D       		.uleb128 0x2d
 7467 1d69 86000000 		.4byte	.LASF203
 7468 1d6d 01       		.byte	0x1
 7469 1d6e F7       		.byte	0xf7
 7470 1d6f 521D0000 		.4byte	0x1d52
 7471 1d73 05       		.uleb128 0x5
 7472 1d74 03       		.byte	0x3
 7473 1d75 FC000000 		.4byte	xYieldPending
 7474 1d79 2D       		.uleb128 0x2d
 7475 1d7a A20C0000 		.4byte	.LASF204
 7476 1d7e 01       		.byte	0x1
 7477 1d7f F8       		.byte	0xf8
 7478 1d80 521D0000 		.4byte	0x1d52
 7479 1d84 05       		.uleb128 0x5
 7480 1d85 03       		.byte	0x3
 7481 1d86 F4000000 		.4byte	xNumOfOverflows
 7482 1d8a 2D       		.uleb128 0x2d
 7483 1d8b 230C0000 		.4byte	.LASF205
 7484 1d8f 01       		.byte	0x1
 7485 1d90 F9       		.byte	0xf9
 7486 1d91 35010000 		.4byte	0x135
 7487 1d95 05       		.uleb128 0x5
 7488 1d96 03       		.byte	0x3
 7489 1d97 E4000000 		.4byte	uxTaskNumber
 7490 1d9b 2D       		.uleb128 0x2d
 7491 1d9c DD010000 		.4byte	.LASF206
 7492 1da0 01       		.byte	0x1
 7493 1da1 FA       		.byte	0xfa
 7494 1da2 2B1D0000 		.4byte	0x1d2b
 7495 1da6 05       		.uleb128 0x5
 7496 1da7 03       		.byte	0x3
 7497 1da8 2C000000 		.4byte	xNextTaskUnblockTime
 7498 1dac 1C       		.uleb128 0x1c
 7499 1dad 17040000 		.4byte	.LASF207
 7500 1db1 01       		.byte	0x1
 7501 1db2 0401     		.2byte	0x104
 7502 1db4 F31C0000 		.4byte	0x1cf3
 7503 1db8 05       		.uleb128 0x5
 7504 1db9 03       		.byte	0x3
 7505 1dba F0000000 		.4byte	uxSchedulerSuspended
 7506 1dbe 2E       		.uleb128 0x2e
 7507 1dbf 46010000 		.4byte	.LASF208
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 222


 7508 1dc3 09       		.byte	0x9
 7509 1dc4 5506     		.2byte	0x655
 7510 1dc6 CA1D0000 		.4byte	0x1dca
 7511 1dca 08       		.uleb128 0x8
 7512 1dcb DA000000 		.4byte	0xda
 7513 1dcf 2F       		.uleb128 0x2f
 7514 1dd0 7F050000 		.4byte	.LASF209
 7515 1dd4 01       		.byte	0x1
 7516 1dd5 D4       		.byte	0xd4
 7517 1dd6 E01D0000 		.4byte	0x1de0
 7518 1dda 05       		.uleb128 0x5
 7519 1ddb 03       		.byte	0x3
 7520 1ddc 00000000 		.4byte	pxCurrentTCB
 7521 1de0 08       		.uleb128 0x8
 7522 1de1 F0040000 		.4byte	0x4f0
 7523 1de5 30       		.uleb128 0x30
 7524 1de6 330A0000 		.4byte	.LASF210
 7525 1dea 330A0000 		.4byte	.LASF210
 7526 1dee 0A       		.byte	0xa
 7527 1def AC       		.byte	0xac
 7528 1df0 30       		.uleb128 0x30
 7529 1df1 E9030000 		.4byte	.LASF211
 7530 1df5 E9030000 		.4byte	.LASF211
 7531 1df9 0A       		.byte	0xa
 7532 1dfa AB       		.byte	0xab
 7533 1dfb 30       		.uleb128 0x30
 7534 1dfc EE0C0000 		.4byte	.LASF212
 7535 1e00 EE0C0000 		.4byte	.LASF212
 7536 1e04 0B       		.byte	0xb
 7537 1e05 19       		.byte	0x19
 7538 1e06 31       		.uleb128 0x31
 7539 1e07 57060000 		.4byte	.LASF213
 7540 1e0b 57060000 		.4byte	.LASF213
 7541 1e0f 07       		.byte	0x7
 7542 1e10 8D01     		.2byte	0x18d
 7543 1e12 31       		.uleb128 0x31
 7544 1e13 AD0D0000 		.4byte	.LASF214
 7545 1e17 AD0D0000 		.4byte	.LASF214
 7546 1e1b 07       		.byte	0x7
 7547 1e1c 8201     		.2byte	0x182
 7548 1e1e 31       		.uleb128 0x31
 7549 1e1f 0A0B0000 		.4byte	.LASF215
 7550 1e23 0A0B0000 		.4byte	.LASF215
 7551 1e27 07       		.byte	0x7
 7552 1e28 9A01     		.2byte	0x19a
 7553 1e2a 30       		.uleb128 0x30
 7554 1e2b 1B0D0000 		.4byte	.LASF216
 7555 1e2f 1B0D0000 		.4byte	.LASF216
 7556 1e33 0A       		.byte	0xa
 7557 1e34 90       		.byte	0x90
 7558 1e35 30       		.uleb128 0x30
 7559 1e36 6B0C0000 		.4byte	.LASF217
 7560 1e3a 6B0C0000 		.4byte	.LASF217
 7561 1e3e 02       		.byte	0x2
 7562 1e3f 83       		.byte	0x83
 7563 1e40 31       		.uleb128 0x31
 7564 1e41 2D030000 		.4byte	.LASF218
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 223


 7565 1e45 2D030000 		.4byte	.LASF218
 7566 1e49 07       		.byte	0x7
 7567 1e4a AF01     		.2byte	0x1af
 7568 1e4c 30       		.uleb128 0x30
 7569 1e4d 710B0000 		.4byte	.LASF219
 7570 1e51 710B0000 		.4byte	.LASF219
 7571 1e55 02       		.byte	0x2
 7572 1e56 84       		.byte	0x84
 7573 1e57 30       		.uleb128 0x30
 7574 1e58 C50C0000 		.4byte	.LASF220
 7575 1e5c C50C0000 		.4byte	.LASF220
 7576 1e60 02       		.byte	0x2
 7577 1e61 7A       		.byte	0x7a
 7578 1e62 31       		.uleb128 0x31
 7579 1e63 060C0000 		.4byte	.LASF221
 7580 1e67 060C0000 		.4byte	.LASF221
 7581 1e6b 07       		.byte	0x7
 7582 1e6c BE01     		.2byte	0x1be
 7583 1e6e 30       		.uleb128 0x30
 7584 1e6f 91080000 		.4byte	.LASF222
 7585 1e73 91080000 		.4byte	.LASF222
 7586 1e77 02       		.byte	0x2
 7587 1e78 85       		.byte	0x85
 7588 1e79 30       		.uleb128 0x30
 7589 1e7a 900A0000 		.4byte	.LASF223
 7590 1e7e 900A0000 		.4byte	.LASF223
 7591 1e82 02       		.byte	0x2
 7592 1e83 86       		.byte	0x86
 7593 1e84 30       		.uleb128 0x30
 7594 1e85 21070000 		.4byte	.LASF224
 7595 1e89 21070000 		.4byte	.LASF224
 7596 1e8d 0A       		.byte	0xa
 7597 1e8e B5       		.byte	0xb5
 7598 1e8f 30       		.uleb128 0x30
 7599 1e90 63070000 		.4byte	.LASF225
 7600 1e94 63070000 		.4byte	.LASF225
 7601 1e98 0A       		.byte	0xa
 7602 1e99 BC       		.byte	0xbc
 7603 1e9a 31       		.uleb128 0x31
 7604 1e9b 00050000 		.4byte	.LASF226
 7605 1e9f 00050000 		.4byte	.LASF226
 7606 1ea3 01       		.byte	0x1
 7607 1ea4 A301     		.2byte	0x1a3
 7608 1ea6 00       		.byte	0
 7609              		.section	.debug_abbrev,"",%progbits
 7610              	.Ldebug_abbrev0:
 7611 0000 01       		.uleb128 0x1
 7612 0001 11       		.uleb128 0x11
 7613 0002 01       		.byte	0x1
 7614 0003 25       		.uleb128 0x25
 7615 0004 0E       		.uleb128 0xe
 7616 0005 13       		.uleb128 0x13
 7617 0006 0B       		.uleb128 0xb
 7618 0007 03       		.uleb128 0x3
 7619 0008 0E       		.uleb128 0xe
 7620 0009 1B       		.uleb128 0x1b
 7621 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 224


 7622 000b 55       		.uleb128 0x55
 7623 000c 17       		.uleb128 0x17
 7624 000d 11       		.uleb128 0x11
 7625 000e 01       		.uleb128 0x1
 7626 000f 10       		.uleb128 0x10
 7627 0010 17       		.uleb128 0x17
 7628 0011 00       		.byte	0
 7629 0012 00       		.byte	0
 7630 0013 02       		.uleb128 0x2
 7631 0014 16       		.uleb128 0x16
 7632 0015 00       		.byte	0
 7633 0016 03       		.uleb128 0x3
 7634 0017 0E       		.uleb128 0xe
 7635 0018 3A       		.uleb128 0x3a
 7636 0019 0B       		.uleb128 0xb
 7637 001a 3B       		.uleb128 0x3b
 7638 001b 0B       		.uleb128 0xb
 7639 001c 49       		.uleb128 0x49
 7640 001d 13       		.uleb128 0x13
 7641 001e 00       		.byte	0
 7642 001f 00       		.byte	0
 7643 0020 03       		.uleb128 0x3
 7644 0021 24       		.uleb128 0x24
 7645 0022 00       		.byte	0
 7646 0023 0B       		.uleb128 0xb
 7647 0024 0B       		.uleb128 0xb
 7648 0025 3E       		.uleb128 0x3e
 7649 0026 0B       		.uleb128 0xb
 7650 0027 03       		.uleb128 0x3
 7651 0028 0E       		.uleb128 0xe
 7652 0029 00       		.byte	0
 7653 002a 00       		.byte	0
 7654 002b 04       		.uleb128 0x4
 7655 002c 24       		.uleb128 0x24
 7656 002d 00       		.byte	0
 7657 002e 0B       		.uleb128 0xb
 7658 002f 0B       		.uleb128 0xb
 7659 0030 3E       		.uleb128 0x3e
 7660 0031 0B       		.uleb128 0xb
 7661 0032 03       		.uleb128 0x3
 7662 0033 08       		.uleb128 0x8
 7663 0034 00       		.byte	0
 7664 0035 00       		.byte	0
 7665 0036 05       		.uleb128 0x5
 7666 0037 0F       		.uleb128 0xf
 7667 0038 00       		.byte	0
 7668 0039 0B       		.uleb128 0xb
 7669 003a 0B       		.uleb128 0xb
 7670 003b 00       		.byte	0
 7671 003c 00       		.byte	0
 7672 003d 06       		.uleb128 0x6
 7673 003e 0F       		.uleb128 0xf
 7674 003f 00       		.byte	0
 7675 0040 0B       		.uleb128 0xb
 7676 0041 0B       		.uleb128 0xb
 7677 0042 49       		.uleb128 0x49
 7678 0043 13       		.uleb128 0x13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 225


 7679 0044 00       		.byte	0
 7680 0045 00       		.byte	0
 7681 0046 07       		.uleb128 0x7
 7682 0047 26       		.uleb128 0x26
 7683 0048 00       		.byte	0
 7684 0049 49       		.uleb128 0x49
 7685 004a 13       		.uleb128 0x13
 7686 004b 00       		.byte	0
 7687 004c 00       		.byte	0
 7688 004d 08       		.uleb128 0x8
 7689 004e 35       		.uleb128 0x35
 7690 004f 00       		.byte	0
 7691 0050 49       		.uleb128 0x49
 7692 0051 13       		.uleb128 0x13
 7693 0052 00       		.byte	0
 7694 0053 00       		.byte	0
 7695 0054 09       		.uleb128 0x9
 7696 0055 15       		.uleb128 0x15
 7697 0056 01       		.byte	0x1
 7698 0057 27       		.uleb128 0x27
 7699 0058 19       		.uleb128 0x19
 7700 0059 01       		.uleb128 0x1
 7701 005a 13       		.uleb128 0x13
 7702 005b 00       		.byte	0
 7703 005c 00       		.byte	0
 7704 005d 0A       		.uleb128 0xa
 7705 005e 05       		.uleb128 0x5
 7706 005f 00       		.byte	0
 7707 0060 49       		.uleb128 0x49
 7708 0061 13       		.uleb128 0x13
 7709 0062 00       		.byte	0
 7710 0063 00       		.byte	0
 7711 0064 0B       		.uleb128 0xb
 7712 0065 13       		.uleb128 0x13
 7713 0066 01       		.byte	0x1
 7714 0067 03       		.uleb128 0x3
 7715 0068 0E       		.uleb128 0xe
 7716 0069 0B       		.uleb128 0xb
 7717 006a 0B       		.uleb128 0xb
 7718 006b 3A       		.uleb128 0x3a
 7719 006c 0B       		.uleb128 0xb
 7720 006d 3B       		.uleb128 0x3b
 7721 006e 0B       		.uleb128 0xb
 7722 006f 01       		.uleb128 0x1
 7723 0070 13       		.uleb128 0x13
 7724 0071 00       		.byte	0
 7725 0072 00       		.byte	0
 7726 0073 0C       		.uleb128 0xc
 7727 0074 0D       		.uleb128 0xd
 7728 0075 00       		.byte	0
 7729 0076 03       		.uleb128 0x3
 7730 0077 0E       		.uleb128 0xe
 7731 0078 3A       		.uleb128 0x3a
 7732 0079 0B       		.uleb128 0xb
 7733 007a 3B       		.uleb128 0x3b
 7734 007b 0B       		.uleb128 0xb
 7735 007c 49       		.uleb128 0x49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 226


 7736 007d 13       		.uleb128 0x13
 7737 007e 38       		.uleb128 0x38
 7738 007f 0B       		.uleb128 0xb
 7739 0080 00       		.byte	0
 7740 0081 00       		.byte	0
 7741 0082 0D       		.uleb128 0xd
 7742 0083 04       		.uleb128 0x4
 7743 0084 01       		.byte	0x1
 7744 0085 0B       		.uleb128 0xb
 7745 0086 0B       		.uleb128 0xb
 7746 0087 49       		.uleb128 0x49
 7747 0088 13       		.uleb128 0x13
 7748 0089 3A       		.uleb128 0x3a
 7749 008a 0B       		.uleb128 0xb
 7750 008b 3B       		.uleb128 0x3b
 7751 008c 0B       		.uleb128 0xb
 7752 008d 01       		.uleb128 0x1
 7753 008e 13       		.uleb128 0x13
 7754 008f 00       		.byte	0
 7755 0090 00       		.byte	0
 7756 0091 0E       		.uleb128 0xe
 7757 0092 28       		.uleb128 0x28
 7758 0093 00       		.byte	0
 7759 0094 03       		.uleb128 0x3
 7760 0095 0E       		.uleb128 0xe
 7761 0096 1C       		.uleb128 0x1c
 7762 0097 0B       		.uleb128 0xb
 7763 0098 00       		.byte	0
 7764 0099 00       		.byte	0
 7765 009a 0F       		.uleb128 0xf
 7766 009b 01       		.uleb128 0x1
 7767 009c 01       		.byte	0x1
 7768 009d 49       		.uleb128 0x49
 7769 009e 13       		.uleb128 0x13
 7770 009f 01       		.uleb128 0x1
 7771 00a0 13       		.uleb128 0x13
 7772 00a1 00       		.byte	0
 7773 00a2 00       		.byte	0
 7774 00a3 10       		.uleb128 0x10
 7775 00a4 21       		.uleb128 0x21
 7776 00a5 00       		.byte	0
 7777 00a6 49       		.uleb128 0x49
 7778 00a7 13       		.uleb128 0x13
 7779 00a8 2F       		.uleb128 0x2f
 7780 00a9 0B       		.uleb128 0xb
 7781 00aa 00       		.byte	0
 7782 00ab 00       		.byte	0
 7783 00ac 11       		.uleb128 0x11
 7784 00ad 2E       		.uleb128 0x2e
 7785 00ae 01       		.byte	0x1
 7786 00af 03       		.uleb128 0x3
 7787 00b0 0E       		.uleb128 0xe
 7788 00b1 3A       		.uleb128 0x3a
 7789 00b2 0B       		.uleb128 0xb
 7790 00b3 3B       		.uleb128 0x3b
 7791 00b4 0B       		.uleb128 0xb
 7792 00b5 27       		.uleb128 0x27
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 227


 7793 00b6 19       		.uleb128 0x19
 7794 00b7 49       		.uleb128 0x49
 7795 00b8 13       		.uleb128 0x13
 7796 00b9 20       		.uleb128 0x20
 7797 00ba 0B       		.uleb128 0xb
 7798 00bb 01       		.uleb128 0x1
 7799 00bc 13       		.uleb128 0x13
 7800 00bd 00       		.byte	0
 7801 00be 00       		.byte	0
 7802 00bf 12       		.uleb128 0x12
 7803 00c0 05       		.uleb128 0x5
 7804 00c1 00       		.byte	0
 7805 00c2 03       		.uleb128 0x3
 7806 00c3 0E       		.uleb128 0xe
 7807 00c4 3A       		.uleb128 0x3a
 7808 00c5 0B       		.uleb128 0xb
 7809 00c6 3B       		.uleb128 0x3b
 7810 00c7 0B       		.uleb128 0xb
 7811 00c8 49       		.uleb128 0x49
 7812 00c9 13       		.uleb128 0x13
 7813 00ca 00       		.byte	0
 7814 00cb 00       		.byte	0
 7815 00cc 13       		.uleb128 0x13
 7816 00cd 34       		.uleb128 0x34
 7817 00ce 00       		.byte	0
 7818 00cf 03       		.uleb128 0x3
 7819 00d0 0E       		.uleb128 0xe
 7820 00d1 3A       		.uleb128 0x3a
 7821 00d2 0B       		.uleb128 0xb
 7822 00d3 3B       		.uleb128 0x3b
 7823 00d4 0B       		.uleb128 0xb
 7824 00d5 49       		.uleb128 0x49
 7825 00d6 13       		.uleb128 0x13
 7826 00d7 00       		.byte	0
 7827 00d8 00       		.byte	0
 7828 00d9 14       		.uleb128 0x14
 7829 00da 2E       		.uleb128 0x2e
 7830 00db 01       		.byte	0x1
 7831 00dc 03       		.uleb128 0x3
 7832 00dd 0E       		.uleb128 0xe
 7833 00de 3A       		.uleb128 0x3a
 7834 00df 0B       		.uleb128 0xb
 7835 00e0 3B       		.uleb128 0x3b
 7836 00e1 05       		.uleb128 0x5
 7837 00e2 27       		.uleb128 0x27
 7838 00e3 19       		.uleb128 0x19
 7839 00e4 49       		.uleb128 0x49
 7840 00e5 13       		.uleb128 0x13
 7841 00e6 11       		.uleb128 0x11
 7842 00e7 01       		.uleb128 0x1
 7843 00e8 12       		.uleb128 0x12
 7844 00e9 06       		.uleb128 0x6
 7845 00ea 40       		.uleb128 0x40
 7846 00eb 18       		.uleb128 0x18
 7847 00ec 9742     		.uleb128 0x2117
 7848 00ee 19       		.uleb128 0x19
 7849 00ef 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 228


 7850 00f0 13       		.uleb128 0x13
 7851 00f1 00       		.byte	0
 7852 00f2 00       		.byte	0
 7853 00f3 15       		.uleb128 0x15
 7854 00f4 05       		.uleb128 0x5
 7855 00f5 00       		.byte	0
 7856 00f6 03       		.uleb128 0x3
 7857 00f7 0E       		.uleb128 0xe
 7858 00f8 3A       		.uleb128 0x3a
 7859 00f9 0B       		.uleb128 0xb
 7860 00fa 3B       		.uleb128 0x3b
 7861 00fb 05       		.uleb128 0x5
 7862 00fc 49       		.uleb128 0x49
 7863 00fd 13       		.uleb128 0x13
 7864 00fe 02       		.uleb128 0x2
 7865 00ff 17       		.uleb128 0x17
 7866 0100 00       		.byte	0
 7867 0101 00       		.byte	0
 7868 0102 16       		.uleb128 0x16
 7869 0103 34       		.uleb128 0x34
 7870 0104 00       		.byte	0
 7871 0105 03       		.uleb128 0x3
 7872 0106 0E       		.uleb128 0xe
 7873 0107 3A       		.uleb128 0x3a
 7874 0108 0B       		.uleb128 0xb
 7875 0109 3B       		.uleb128 0x3b
 7876 010a 05       		.uleb128 0x5
 7877 010b 49       		.uleb128 0x49
 7878 010c 13       		.uleb128 0x13
 7879 010d 02       		.uleb128 0x2
 7880 010e 17       		.uleb128 0x17
 7881 010f 00       		.byte	0
 7882 0110 00       		.byte	0
 7883 0111 17       		.uleb128 0x17
 7884 0112 2E       		.uleb128 0x2e
 7885 0113 01       		.byte	0x1
 7886 0114 03       		.uleb128 0x3
 7887 0115 0E       		.uleb128 0xe
 7888 0116 3A       		.uleb128 0x3a
 7889 0117 0B       		.uleb128 0xb
 7890 0118 3B       		.uleb128 0x3b
 7891 0119 05       		.uleb128 0x5
 7892 011a 27       		.uleb128 0x27
 7893 011b 19       		.uleb128 0x19
 7894 011c 11       		.uleb128 0x11
 7895 011d 01       		.uleb128 0x1
 7896 011e 12       		.uleb128 0x12
 7897 011f 06       		.uleb128 0x6
 7898 0120 40       		.uleb128 0x40
 7899 0121 18       		.uleb128 0x18
 7900 0122 9742     		.uleb128 0x2117
 7901 0124 19       		.uleb128 0x19
 7902 0125 01       		.uleb128 0x1
 7903 0126 13       		.uleb128 0x13
 7904 0127 00       		.byte	0
 7905 0128 00       		.byte	0
 7906 0129 18       		.uleb128 0x18
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 229


 7907 012a 898201   		.uleb128 0x4109
 7908 012d 00       		.byte	0
 7909 012e 11       		.uleb128 0x11
 7910 012f 01       		.uleb128 0x1
 7911 0130 31       		.uleb128 0x31
 7912 0131 13       		.uleb128 0x13
 7913 0132 00       		.byte	0
 7914 0133 00       		.byte	0
 7915 0134 19       		.uleb128 0x19
 7916 0135 898201   		.uleb128 0x4109
 7917 0138 01       		.byte	0x1
 7918 0139 11       		.uleb128 0x11
 7919 013a 01       		.uleb128 0x1
 7920 013b 31       		.uleb128 0x31
 7921 013c 13       		.uleb128 0x13
 7922 013d 00       		.byte	0
 7923 013e 00       		.byte	0
 7924 013f 1A       		.uleb128 0x1a
 7925 0140 8A8201   		.uleb128 0x410a
 7926 0143 00       		.byte	0
 7927 0144 02       		.uleb128 0x2
 7928 0145 18       		.uleb128 0x18
 7929 0146 9142     		.uleb128 0x2111
 7930 0148 18       		.uleb128 0x18
 7931 0149 00       		.byte	0
 7932 014a 00       		.byte	0
 7933 014b 1B       		.uleb128 0x1b
 7934 014c 0B       		.uleb128 0xb
 7935 014d 01       		.byte	0x1
 7936 014e 11       		.uleb128 0x11
 7937 014f 01       		.uleb128 0x1
 7938 0150 12       		.uleb128 0x12
 7939 0151 06       		.uleb128 0x6
 7940 0152 01       		.uleb128 0x1
 7941 0153 13       		.uleb128 0x13
 7942 0154 00       		.byte	0
 7943 0155 00       		.byte	0
 7944 0156 1C       		.uleb128 0x1c
 7945 0157 34       		.uleb128 0x34
 7946 0158 00       		.byte	0
 7947 0159 03       		.uleb128 0x3
 7948 015a 0E       		.uleb128 0xe
 7949 015b 3A       		.uleb128 0x3a
 7950 015c 0B       		.uleb128 0xb
 7951 015d 3B       		.uleb128 0x3b
 7952 015e 05       		.uleb128 0x5
 7953 015f 49       		.uleb128 0x49
 7954 0160 13       		.uleb128 0x13
 7955 0161 02       		.uleb128 0x2
 7956 0162 18       		.uleb128 0x18
 7957 0163 00       		.byte	0
 7958 0164 00       		.byte	0
 7959 0165 1D       		.uleb128 0x1d
 7960 0166 898201   		.uleb128 0x4109
 7961 0169 01       		.byte	0x1
 7962 016a 11       		.uleb128 0x11
 7963 016b 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 230


 7964 016c 31       		.uleb128 0x31
 7965 016d 13       		.uleb128 0x13
 7966 016e 01       		.uleb128 0x1
 7967 016f 13       		.uleb128 0x13
 7968 0170 00       		.byte	0
 7969 0171 00       		.byte	0
 7970 0172 1E       		.uleb128 0x1e
 7971 0173 05       		.uleb128 0x5
 7972 0174 00       		.byte	0
 7973 0175 03       		.uleb128 0x3
 7974 0176 0E       		.uleb128 0xe
 7975 0177 3A       		.uleb128 0x3a
 7976 0178 0B       		.uleb128 0xb
 7977 0179 3B       		.uleb128 0x3b
 7978 017a 05       		.uleb128 0x5
 7979 017b 49       		.uleb128 0x49
 7980 017c 13       		.uleb128 0x13
 7981 017d 02       		.uleb128 0x2
 7982 017e 18       		.uleb128 0x18
 7983 017f 00       		.byte	0
 7984 0180 00       		.byte	0
 7985 0181 1F       		.uleb128 0x1f
 7986 0182 34       		.uleb128 0x34
 7987 0183 00       		.byte	0
 7988 0184 03       		.uleb128 0x3
 7989 0185 08       		.uleb128 0x8
 7990 0186 3A       		.uleb128 0x3a
 7991 0187 0B       		.uleb128 0xb
 7992 0188 3B       		.uleb128 0x3b
 7993 0189 05       		.uleb128 0x5
 7994 018a 49       		.uleb128 0x49
 7995 018b 13       		.uleb128 0x13
 7996 018c 02       		.uleb128 0x2
 7997 018d 17       		.uleb128 0x17
 7998 018e 00       		.byte	0
 7999 018f 00       		.byte	0
 8000 0190 20       		.uleb128 0x20
 8001 0191 2E       		.uleb128 0x2e
 8002 0192 01       		.byte	0x1
 8003 0193 3F       		.uleb128 0x3f
 8004 0194 19       		.uleb128 0x19
 8005 0195 03       		.uleb128 0x3
 8006 0196 0E       		.uleb128 0xe
 8007 0197 3A       		.uleb128 0x3a
 8008 0198 0B       		.uleb128 0xb
 8009 0199 3B       		.uleb128 0x3b
 8010 019a 05       		.uleb128 0x5
 8011 019b 27       		.uleb128 0x27
 8012 019c 19       		.uleb128 0x19
 8013 019d 49       		.uleb128 0x49
 8014 019e 13       		.uleb128 0x13
 8015 019f 11       		.uleb128 0x11
 8016 01a0 01       		.uleb128 0x1
 8017 01a1 12       		.uleb128 0x12
 8018 01a2 06       		.uleb128 0x6
 8019 01a3 40       		.uleb128 0x40
 8020 01a4 18       		.uleb128 0x18
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 231


 8021 01a5 9742     		.uleb128 0x2117
 8022 01a7 19       		.uleb128 0x19
 8023 01a8 01       		.uleb128 0x1
 8024 01a9 13       		.uleb128 0x13
 8025 01aa 00       		.byte	0
 8026 01ab 00       		.byte	0
 8027 01ac 21       		.uleb128 0x21
 8028 01ad 2E       		.uleb128 0x2e
 8029 01ae 01       		.byte	0x1
 8030 01af 3F       		.uleb128 0x3f
 8031 01b0 19       		.uleb128 0x19
 8032 01b1 03       		.uleb128 0x3
 8033 01b2 0E       		.uleb128 0xe
 8034 01b3 3A       		.uleb128 0x3a
 8035 01b4 0B       		.uleb128 0xb
 8036 01b5 3B       		.uleb128 0x3b
 8037 01b6 05       		.uleb128 0x5
 8038 01b7 27       		.uleb128 0x27
 8039 01b8 19       		.uleb128 0x19
 8040 01b9 11       		.uleb128 0x11
 8041 01ba 01       		.uleb128 0x1
 8042 01bb 12       		.uleb128 0x12
 8043 01bc 06       		.uleb128 0x6
 8044 01bd 40       		.uleb128 0x40
 8045 01be 18       		.uleb128 0x18
 8046 01bf 9742     		.uleb128 0x2117
 8047 01c1 19       		.uleb128 0x19
 8048 01c2 01       		.uleb128 0x1
 8049 01c3 13       		.uleb128 0x13
 8050 01c4 00       		.byte	0
 8051 01c5 00       		.byte	0
 8052 01c6 22       		.uleb128 0x22
 8053 01c7 2E       		.uleb128 0x2e
 8054 01c8 00       		.byte	0
 8055 01c9 3F       		.uleb128 0x3f
 8056 01ca 19       		.uleb128 0x19
 8057 01cb 03       		.uleb128 0x3
 8058 01cc 0E       		.uleb128 0xe
 8059 01cd 3A       		.uleb128 0x3a
 8060 01ce 0B       		.uleb128 0xb
 8061 01cf 3B       		.uleb128 0x3b
 8062 01d0 05       		.uleb128 0x5
 8063 01d1 27       		.uleb128 0x27
 8064 01d2 19       		.uleb128 0x19
 8065 01d3 11       		.uleb128 0x11
 8066 01d4 01       		.uleb128 0x1
 8067 01d5 12       		.uleb128 0x12
 8068 01d6 06       		.uleb128 0x6
 8069 01d7 40       		.uleb128 0x40
 8070 01d8 18       		.uleb128 0x18
 8071 01d9 9742     		.uleb128 0x2117
 8072 01db 19       		.uleb128 0x19
 8073 01dc 00       		.byte	0
 8074 01dd 00       		.byte	0
 8075 01de 23       		.uleb128 0x23
 8076 01df 34       		.uleb128 0x34
 8077 01e0 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 232


 8078 01e1 03       		.uleb128 0x3
 8079 01e2 0E       		.uleb128 0xe
 8080 01e3 3A       		.uleb128 0x3a
 8081 01e4 0B       		.uleb128 0xb
 8082 01e5 3B       		.uleb128 0x3b
 8083 01e6 05       		.uleb128 0x5
 8084 01e7 49       		.uleb128 0x49
 8085 01e8 13       		.uleb128 0x13
 8086 01e9 1C       		.uleb128 0x1c
 8087 01ea 0B       		.uleb128 0xb
 8088 01eb 00       		.byte	0
 8089 01ec 00       		.byte	0
 8090 01ed 24       		.uleb128 0x24
 8091 01ee 2E       		.uleb128 0x2e
 8092 01ef 00       		.byte	0
 8093 01f0 3F       		.uleb128 0x3f
 8094 01f1 19       		.uleb128 0x19
 8095 01f2 03       		.uleb128 0x3
 8096 01f3 0E       		.uleb128 0xe
 8097 01f4 3A       		.uleb128 0x3a
 8098 01f5 0B       		.uleb128 0xb
 8099 01f6 3B       		.uleb128 0x3b
 8100 01f7 05       		.uleb128 0x5
 8101 01f8 27       		.uleb128 0x27
 8102 01f9 19       		.uleb128 0x19
 8103 01fa 49       		.uleb128 0x49
 8104 01fb 13       		.uleb128 0x13
 8105 01fc 11       		.uleb128 0x11
 8106 01fd 01       		.uleb128 0x1
 8107 01fe 12       		.uleb128 0x12
 8108 01ff 06       		.uleb128 0x6
 8109 0200 40       		.uleb128 0x40
 8110 0201 18       		.uleb128 0x18
 8111 0202 9742     		.uleb128 0x2117
 8112 0204 19       		.uleb128 0x19
 8113 0205 00       		.byte	0
 8114 0206 00       		.byte	0
 8115 0207 25       		.uleb128 0x25
 8116 0208 0B       		.uleb128 0xb
 8117 0209 01       		.byte	0x1
 8118 020a 55       		.uleb128 0x55
 8119 020b 17       		.uleb128 0x17
 8120 020c 00       		.byte	0
 8121 020d 00       		.byte	0
 8122 020e 26       		.uleb128 0x26
 8123 020f 0B       		.uleb128 0xb
 8124 0210 01       		.byte	0x1
 8125 0211 55       		.uleb128 0x55
 8126 0212 17       		.uleb128 0x17
 8127 0213 01       		.uleb128 0x1
 8128 0214 13       		.uleb128 0x13
 8129 0215 00       		.byte	0
 8130 0216 00       		.byte	0
 8131 0217 27       		.uleb128 0x27
 8132 0218 0B       		.uleb128 0xb
 8133 0219 01       		.byte	0x1
 8134 021a 11       		.uleb128 0x11
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 233


 8135 021b 01       		.uleb128 0x1
 8136 021c 12       		.uleb128 0x12
 8137 021d 06       		.uleb128 0x6
 8138 021e 00       		.byte	0
 8139 021f 00       		.byte	0
 8140 0220 28       		.uleb128 0x28
 8141 0221 2E       		.uleb128 0x2e
 8142 0222 01       		.byte	0x1
 8143 0223 03       		.uleb128 0x3
 8144 0224 0E       		.uleb128 0xe
 8145 0225 3A       		.uleb128 0x3a
 8146 0226 0B       		.uleb128 0xb
 8147 0227 3B       		.uleb128 0x3b
 8148 0228 05       		.uleb128 0x5
 8149 0229 27       		.uleb128 0x27
 8150 022a 19       		.uleb128 0x19
 8151 022b 8701     		.uleb128 0x87
 8152 022d 19       		.uleb128 0x19
 8153 022e 11       		.uleb128 0x11
 8154 022f 01       		.uleb128 0x1
 8155 0230 12       		.uleb128 0x12
 8156 0231 06       		.uleb128 0x6
 8157 0232 40       		.uleb128 0x40
 8158 0233 18       		.uleb128 0x18
 8159 0234 9742     		.uleb128 0x2117
 8160 0236 19       		.uleb128 0x19
 8161 0237 01       		.uleb128 0x1
 8162 0238 13       		.uleb128 0x13
 8163 0239 00       		.byte	0
 8164 023a 00       		.byte	0
 8165 023b 29       		.uleb128 0x29
 8166 023c 34       		.uleb128 0x34
 8167 023d 00       		.byte	0
 8168 023e 03       		.uleb128 0x3
 8169 023f 0E       		.uleb128 0xe
 8170 0240 3A       		.uleb128 0x3a
 8171 0241 0B       		.uleb128 0xb
 8172 0242 3B       		.uleb128 0x3b
 8173 0243 05       		.uleb128 0x5
 8174 0244 49       		.uleb128 0x49
 8175 0245 13       		.uleb128 0x13
 8176 0246 1C       		.uleb128 0x1c
 8177 0247 0D       		.uleb128 0xd
 8178 0248 00       		.byte	0
 8179 0249 00       		.byte	0
 8180 024a 2A       		.uleb128 0x2a
 8181 024b 1D       		.uleb128 0x1d
 8182 024c 01       		.byte	0x1
 8183 024d 31       		.uleb128 0x31
 8184 024e 13       		.uleb128 0x13
 8185 024f 11       		.uleb128 0x11
 8186 0250 01       		.uleb128 0x1
 8187 0251 12       		.uleb128 0x12
 8188 0252 06       		.uleb128 0x6
 8189 0253 58       		.uleb128 0x58
 8190 0254 0B       		.uleb128 0xb
 8191 0255 59       		.uleb128 0x59
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 234


 8192 0256 05       		.uleb128 0x5
 8193 0257 01       		.uleb128 0x1
 8194 0258 13       		.uleb128 0x13
 8195 0259 00       		.byte	0
 8196 025a 00       		.byte	0
 8197 025b 2B       		.uleb128 0x2b
 8198 025c 05       		.uleb128 0x5
 8199 025d 00       		.byte	0
 8200 025e 31       		.uleb128 0x31
 8201 025f 13       		.uleb128 0x13
 8202 0260 02       		.uleb128 0x2
 8203 0261 17       		.uleb128 0x17
 8204 0262 00       		.byte	0
 8205 0263 00       		.byte	0
 8206 0264 2C       		.uleb128 0x2c
 8207 0265 34       		.uleb128 0x34
 8208 0266 00       		.byte	0
 8209 0267 31       		.uleb128 0x31
 8210 0268 13       		.uleb128 0x13
 8211 0269 02       		.uleb128 0x2
 8212 026a 18       		.uleb128 0x18
 8213 026b 00       		.byte	0
 8214 026c 00       		.byte	0
 8215 026d 2D       		.uleb128 0x2d
 8216 026e 34       		.uleb128 0x34
 8217 026f 00       		.byte	0
 8218 0270 03       		.uleb128 0x3
 8219 0271 0E       		.uleb128 0xe
 8220 0272 3A       		.uleb128 0x3a
 8221 0273 0B       		.uleb128 0xb
 8222 0274 3B       		.uleb128 0x3b
 8223 0275 0B       		.uleb128 0xb
 8224 0276 49       		.uleb128 0x49
 8225 0277 13       		.uleb128 0x13
 8226 0278 02       		.uleb128 0x2
 8227 0279 18       		.uleb128 0x18
 8228 027a 00       		.byte	0
 8229 027b 00       		.byte	0
 8230 027c 2E       		.uleb128 0x2e
 8231 027d 34       		.uleb128 0x34
 8232 027e 00       		.byte	0
 8233 027f 03       		.uleb128 0x3
 8234 0280 0E       		.uleb128 0xe
 8235 0281 3A       		.uleb128 0x3a
 8236 0282 0B       		.uleb128 0xb
 8237 0283 3B       		.uleb128 0x3b
 8238 0284 05       		.uleb128 0x5
 8239 0285 49       		.uleb128 0x49
 8240 0286 13       		.uleb128 0x13
 8241 0287 3F       		.uleb128 0x3f
 8242 0288 19       		.uleb128 0x19
 8243 0289 3C       		.uleb128 0x3c
 8244 028a 19       		.uleb128 0x19
 8245 028b 00       		.byte	0
 8246 028c 00       		.byte	0
 8247 028d 2F       		.uleb128 0x2f
 8248 028e 34       		.uleb128 0x34
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 235


 8249 028f 00       		.byte	0
 8250 0290 03       		.uleb128 0x3
 8251 0291 0E       		.uleb128 0xe
 8252 0292 3A       		.uleb128 0x3a
 8253 0293 0B       		.uleb128 0xb
 8254 0294 3B       		.uleb128 0x3b
 8255 0295 0B       		.uleb128 0xb
 8256 0296 49       		.uleb128 0x49
 8257 0297 13       		.uleb128 0x13
 8258 0298 3F       		.uleb128 0x3f
 8259 0299 19       		.uleb128 0x19
 8260 029a 02       		.uleb128 0x2
 8261 029b 18       		.uleb128 0x18
 8262 029c 00       		.byte	0
 8263 029d 00       		.byte	0
 8264 029e 30       		.uleb128 0x30
 8265 029f 2E       		.uleb128 0x2e
 8266 02a0 00       		.byte	0
 8267 02a1 3F       		.uleb128 0x3f
 8268 02a2 19       		.uleb128 0x19
 8269 02a3 3C       		.uleb128 0x3c
 8270 02a4 19       		.uleb128 0x19
 8271 02a5 6E       		.uleb128 0x6e
 8272 02a6 0E       		.uleb128 0xe
 8273 02a7 03       		.uleb128 0x3
 8274 02a8 0E       		.uleb128 0xe
 8275 02a9 3A       		.uleb128 0x3a
 8276 02aa 0B       		.uleb128 0xb
 8277 02ab 3B       		.uleb128 0x3b
 8278 02ac 0B       		.uleb128 0xb
 8279 02ad 00       		.byte	0
 8280 02ae 00       		.byte	0
 8281 02af 31       		.uleb128 0x31
 8282 02b0 2E       		.uleb128 0x2e
 8283 02b1 00       		.byte	0
 8284 02b2 3F       		.uleb128 0x3f
 8285 02b3 19       		.uleb128 0x19
 8286 02b4 3C       		.uleb128 0x3c
 8287 02b5 19       		.uleb128 0x19
 8288 02b6 6E       		.uleb128 0x6e
 8289 02b7 0E       		.uleb128 0xe
 8290 02b8 03       		.uleb128 0x3
 8291 02b9 0E       		.uleb128 0xe
 8292 02ba 3A       		.uleb128 0x3a
 8293 02bb 0B       		.uleb128 0xb
 8294 02bc 3B       		.uleb128 0x3b
 8295 02bd 05       		.uleb128 0x5
 8296 02be 00       		.byte	0
 8297 02bf 00       		.byte	0
 8298 02c0 00       		.byte	0
 8299              		.section	.debug_loc,"",%progbits
 8300              	.Ldebug_loc0:
 8301              	.LLST0:
 8302 0000 00000000 		.4byte	.LVL0
 8303 0004 20000000 		.4byte	.LVL1
 8304 0008 0100     		.2byte	0x1
 8305 000a 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 236


 8306 000b 20000000 		.4byte	.LVL1
 8307 000f 22000000 		.4byte	.LVL2
 8308 0013 0400     		.2byte	0x4
 8309 0015 F3       		.byte	0xf3
 8310 0016 01       		.uleb128 0x1
 8311 0017 50       		.byte	0x50
 8312 0018 9F       		.byte	0x9f
 8313 0019 22000000 		.4byte	.LVL2
 8314 001d 24000000 		.4byte	.LVL3
 8315 0021 0100     		.2byte	0x1
 8316 0023 50       		.byte	0x50
 8317 0024 24000000 		.4byte	.LVL3
 8318 0028 26000000 		.4byte	.LVL4
 8319 002c 0400     		.2byte	0x4
 8320 002e F3       		.byte	0xf3
 8321 002f 01       		.uleb128 0x1
 8322 0030 50       		.byte	0x50
 8323 0031 9F       		.byte	0x9f
 8324 0032 26000000 		.4byte	.LVL4
 8325 0036 28000000 		.4byte	.LVL5
 8326 003a 0100     		.2byte	0x1
 8327 003c 50       		.byte	0x50
 8328 003d 28000000 		.4byte	.LVL5
 8329 0041 2A000000 		.4byte	.LVL6
 8330 0045 0400     		.2byte	0x4
 8331 0047 F3       		.byte	0xf3
 8332 0048 01       		.uleb128 0x1
 8333 0049 50       		.byte	0x50
 8334 004a 9F       		.byte	0x9f
 8335 004b 2A000000 		.4byte	.LVL6
 8336 004f 2C000000 		.4byte	.LVL7
 8337 0053 0100     		.2byte	0x1
 8338 0055 50       		.byte	0x50
 8339 0056 2C000000 		.4byte	.LVL7
 8340 005a 38000000 		.4byte	.LFE73
 8341 005e 0400     		.2byte	0x4
 8342 0060 F3       		.byte	0xf3
 8343 0061 01       		.uleb128 0x1
 8344 0062 50       		.byte	0x50
 8345 0063 9F       		.byte	0x9f
 8346 0064 00000000 		.4byte	0
 8347 0068 00000000 		.4byte	0
 8348              	.LLST1:
 8349 006c 00000000 		.4byte	.LVL0
 8350 0070 2C000000 		.4byte	.LVL7
 8351 0074 0200     		.2byte	0x2
 8352 0076 30       		.byte	0x30
 8353 0077 9F       		.byte	0x9f
 8354 0078 2C000000 		.4byte	.LVL7
 8355 007c 38000000 		.4byte	.LFE73
 8356 0080 0100     		.2byte	0x1
 8357 0082 50       		.byte	0x50
 8358 0083 00000000 		.4byte	0
 8359 0087 00000000 		.4byte	0
 8360              	.LLST2:
 8361 008b 00000000 		.4byte	.LVL0
 8362 008f 20000000 		.4byte	.LVL1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 237


 8363 0093 0100     		.2byte	0x1
 8364 0095 50       		.byte	0x50
 8365 0096 20000000 		.4byte	.LVL1
 8366 009a 22000000 		.4byte	.LVL2
 8367 009e 0400     		.2byte	0x4
 8368 00a0 F3       		.byte	0xf3
 8369 00a1 01       		.uleb128 0x1
 8370 00a2 50       		.byte	0x50
 8371 00a3 9F       		.byte	0x9f
 8372 00a4 22000000 		.4byte	.LVL2
 8373 00a8 24000000 		.4byte	.LVL3
 8374 00ac 0100     		.2byte	0x1
 8375 00ae 50       		.byte	0x50
 8376 00af 24000000 		.4byte	.LVL3
 8377 00b3 26000000 		.4byte	.LVL4
 8378 00b7 0400     		.2byte	0x4
 8379 00b9 F3       		.byte	0xf3
 8380 00ba 01       		.uleb128 0x1
 8381 00bb 50       		.byte	0x50
 8382 00bc 9F       		.byte	0x9f
 8383 00bd 26000000 		.4byte	.LVL4
 8384 00c1 28000000 		.4byte	.LVL5
 8385 00c5 0100     		.2byte	0x1
 8386 00c7 50       		.byte	0x50
 8387 00c8 28000000 		.4byte	.LVL5
 8388 00cc 2A000000 		.4byte	.LVL6
 8389 00d0 0400     		.2byte	0x4
 8390 00d2 F3       		.byte	0xf3
 8391 00d3 01       		.uleb128 0x1
 8392 00d4 50       		.byte	0x50
 8393 00d5 9F       		.byte	0x9f
 8394 00d6 2A000000 		.4byte	.LVL6
 8395 00da 2C000000 		.4byte	.LVL7
 8396 00de 0100     		.2byte	0x1
 8397 00e0 50       		.byte	0x50
 8398 00e1 2C000000 		.4byte	.LVL7
 8399 00e5 38000000 		.4byte	.LFE73
 8400 00e9 0400     		.2byte	0x4
 8401 00eb F3       		.byte	0xf3
 8402 00ec 01       		.uleb128 0x1
 8403 00ed 50       		.byte	0x50
 8404 00ee 9F       		.byte	0x9f
 8405 00ef 00000000 		.4byte	0
 8406 00f3 00000000 		.4byte	0
 8407              	.LLST3:
 8408 00f7 00000000 		.4byte	.LVL8
 8409 00fb 06000000 		.4byte	.LVL10
 8410 00ff 0100     		.2byte	0x1
 8411 0101 50       		.byte	0x50
 8412 0102 06000000 		.4byte	.LVL10
 8413 0106 12000000 		.4byte	.LVL13
 8414 010a 0100     		.2byte	0x1
 8415 010c 50       		.byte	0x50
 8416 010d 00000000 		.4byte	0
 8417 0111 00000000 		.4byte	0
 8418              	.LLST4:
 8419 0115 00000000 		.4byte	.LVL8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 238


 8420 0119 04000000 		.4byte	.LVL9
 8421 011d 0200     		.2byte	0x2
 8422 011f 30       		.byte	0x30
 8423 0120 9F       		.byte	0x9f
 8424 0121 04000000 		.4byte	.LVL9
 8425 0125 0E000000 		.4byte	.LVL12
 8426 0129 0100     		.2byte	0x1
 8427 012b 53       		.byte	0x53
 8428 012c 0E000000 		.4byte	.LVL12
 8429 0130 14000000 		.4byte	.LFE98
 8430 0134 0500     		.2byte	0x5
 8431 0136 73       		.byte	0x73
 8432 0137 00       		.sleb128 0
 8433 0138 32       		.byte	0x32
 8434 0139 25       		.byte	0x25
 8435 013a 9F       		.byte	0x9f
 8436 013b 00000000 		.4byte	0
 8437 013f 00000000 		.4byte	0
 8438              	.LLST5:
 8439 0143 22000000 		.4byte	.LVL14
 8440 0147 24000000 		.4byte	.LVL15
 8441 014b 0100     		.2byte	0x1
 8442 014d 52       		.byte	0x52
 8443 014e 00000000 		.4byte	0
 8444 0152 00000000 		.4byte	0
 8445              	.LLST6:
 8446 0156 00000000 		.4byte	.LVL16
 8447 015a 06000000 		.4byte	.LVL17
 8448 015e 0100     		.2byte	0x1
 8449 0160 50       		.byte	0x50
 8450 0161 06000000 		.4byte	.LVL17
 8451 0165 12000000 		.4byte	.LFE100
 8452 0169 0100     		.2byte	0x1
 8453 016b 54       		.byte	0x54
 8454 016c 00000000 		.4byte	0
 8455 0170 00000000 		.4byte	0
 8456              	.LLST7:
 8457 0174 00000000 		.4byte	.LVL20
 8458 0178 0A000000 		.4byte	.LVL21
 8459 017c 0100     		.2byte	0x1
 8460 017e 50       		.byte	0x50
 8461 017f 0A000000 		.4byte	.LVL21
 8462 0183 3A000000 		.4byte	.LFE97
 8463 0187 0400     		.2byte	0x4
 8464 0189 F3       		.byte	0xf3
 8465 018a 01       		.uleb128 0x1
 8466 018b 50       		.byte	0x50
 8467 018c 9F       		.byte	0x9f
 8468 018d 00000000 		.4byte	0
 8469 0191 00000000 		.4byte	0
 8470              	.LLST8:
 8471 0195 00000000 		.4byte	.LVL20
 8472 0199 0D000000 		.4byte	.LVL22-1
 8473 019d 0100     		.2byte	0x1
 8474 019f 51       		.byte	0x51
 8475 01a0 0D000000 		.4byte	.LVL22-1
 8476 01a4 10000000 		.4byte	.LVL23
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 239


 8477 01a8 0100     		.2byte	0x1
 8478 01aa 54       		.byte	0x54
 8479 01ab 10000000 		.4byte	.LVL23
 8480 01af 3A000000 		.4byte	.LFE97
 8481 01b3 0400     		.2byte	0x4
 8482 01b5 F3       		.byte	0xf3
 8483 01b6 01       		.uleb128 0x1
 8484 01b7 51       		.byte	0x51
 8485 01b8 9F       		.byte	0x9f
 8486 01b9 00000000 		.4byte	0
 8487 01bd 00000000 		.4byte	0
 8488              	.LLST9:
 8489 01c1 18000000 		.4byte	.LVL24
 8490 01c5 22000000 		.4byte	.LVL25
 8491 01c9 0100     		.2byte	0x1
 8492 01cb 50       		.byte	0x50
 8493 01cc 22000000 		.4byte	.LVL25
 8494 01d0 28000000 		.4byte	.LVL27
 8495 01d4 0100     		.2byte	0x1
 8496 01d6 55       		.byte	0x55
 8497 01d7 2A000000 		.4byte	.LVL28
 8498 01db 3A000000 		.4byte	.LFE97
 8499 01df 0100     		.2byte	0x1
 8500 01e1 55       		.byte	0x55
 8501 01e2 00000000 		.4byte	0
 8502 01e6 00000000 		.4byte	0
 8503              	.LLST10:
 8504 01ea 00000000 		.4byte	.LVL30
 8505 01ee 0A000000 		.4byte	.LVL33
 8506 01f2 0100     		.2byte	0x1
 8507 01f4 50       		.byte	0x50
 8508 01f5 0A000000 		.4byte	.LVL33
 8509 01f9 50000000 		.4byte	.LFE93
 8510 01fd 0100     		.2byte	0x1
 8511 01ff 54       		.byte	0x54
 8512 0200 00000000 		.4byte	0
 8513 0204 00000000 		.4byte	0
 8514              	.LLST11:
 8515 0208 00000000 		.4byte	.LVL30
 8516 020c 35000000 		.4byte	.LVL37-1
 8517 0210 0100     		.2byte	0x1
 8518 0212 51       		.byte	0x51
 8519 0213 35000000 		.4byte	.LVL37-1
 8520 0217 50000000 		.4byte	.LFE93
 8521 021b 0400     		.2byte	0x4
 8522 021d F3       		.byte	0xf3
 8523 021e 01       		.uleb128 0x1
 8524 021f 51       		.byte	0x51
 8525 0220 9F       		.byte	0x9f
 8526 0221 00000000 		.4byte	0
 8527 0225 00000000 		.4byte	0
 8528              	.LLST12:
 8529 0229 00000000 		.4byte	.LVL30
 8530 022d 0A000000 		.4byte	.LVL33
 8531 0231 0100     		.2byte	0x1
 8532 0233 52       		.byte	0x52
 8533 0234 0A000000 		.4byte	.LVL33
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 240


 8534 0238 44000000 		.4byte	.LVL39
 8535 023c 0100     		.2byte	0x1
 8536 023e 55       		.byte	0x55
 8537 023f 00000000 		.4byte	0
 8538 0243 00000000 		.4byte	0
 8539              	.LLST13:
 8540 0247 00000000 		.4byte	.LVL30
 8541 024b 08000000 		.4byte	.LVL32
 8542 024f 0100     		.2byte	0x1
 8543 0251 53       		.byte	0x53
 8544 0252 08000000 		.4byte	.LVL32
 8545 0256 50000000 		.4byte	.LFE93
 8546 025a 0400     		.2byte	0x4
 8547 025c F3       		.byte	0xf3
 8548 025d 01       		.uleb128 0x1
 8549 025e 53       		.byte	0x53
 8550 025f 9F       		.byte	0x9f
 8551 0260 00000000 		.4byte	0
 8552 0264 00000000 		.4byte	0
 8553              	.LLST14:
 8554 0268 06000000 		.4byte	.LVL31
 8555 026c 0A000000 		.4byte	.LVL33
 8556 0270 0200     		.2byte	0x2
 8557 0272 30       		.byte	0x30
 8558 0273 9F       		.byte	0x9f
 8559 0274 0A000000 		.4byte	.LVL33
 8560 0278 1E000000 		.4byte	.LVL35
 8561 027c 0100     		.2byte	0x1
 8562 027e 53       		.byte	0x53
 8563 027f 00000000 		.4byte	0
 8564 0283 00000000 		.4byte	0
 8565              	.LLST15:
 8566 0287 02000000 		.4byte	.LVL40
 8567 028b 06000000 		.4byte	.LVL41
 8568 028f 0200     		.2byte	0x2
 8569 0291 30       		.byte	0x30
 8570 0292 9F       		.byte	0x9f
 8571 0293 06000000 		.4byte	.LVL41
 8572 0297 1C000000 		.4byte	.LVL44
 8573 029b 0100     		.2byte	0x1
 8574 029d 54       		.byte	0x54
 8575 029e 00000000 		.4byte	0
 8576 02a2 00000000 		.4byte	0
 8577              	.LLST16:
 8578 02a6 00000000 		.4byte	.LVL50
 8579 02aa 18000000 		.4byte	.LVL51
 8580 02ae 0100     		.2byte	0x1
 8581 02b0 50       		.byte	0x50
 8582 02b1 18000000 		.4byte	.LVL51
 8583 02b5 21000000 		.4byte	.LVL52-1
 8584 02b9 0200     		.2byte	0x2
 8585 02bb 72       		.byte	0x72
 8586 02bc 04       		.sleb128 4
 8587 02bd 21000000 		.4byte	.LVL52-1
 8588 02c1 24000000 		.4byte	.LVL53
 8589 02c5 0400     		.2byte	0x4
 8590 02c7 F3       		.byte	0xf3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 241


 8591 02c8 01       		.uleb128 0x1
 8592 02c9 50       		.byte	0x50
 8593 02ca 9F       		.byte	0x9f
 8594 02cb 24000000 		.4byte	.LVL53
 8595 02cf 2A000000 		.4byte	.LVL54
 8596 02d3 0100     		.2byte	0x1
 8597 02d5 50       		.byte	0x50
 8598 02d6 2A000000 		.4byte	.LVL54
 8599 02da 33000000 		.4byte	.LVL55-1
 8600 02de 0200     		.2byte	0x2
 8601 02e0 72       		.byte	0x72
 8602 02e1 04       		.sleb128 4
 8603 02e2 33000000 		.4byte	.LVL55-1
 8604 02e6 3E000000 		.4byte	.LVL56
 8605 02ea 0100     		.2byte	0x1
 8606 02ec 54       		.byte	0x54
 8607 02ed 3E000000 		.4byte	.LVL56
 8608 02f1 44000000 		.4byte	.LFE96
 8609 02f5 0400     		.2byte	0x4
 8610 02f7 F3       		.byte	0xf3
 8611 02f8 01       		.uleb128 0x1
 8612 02f9 50       		.byte	0x50
 8613 02fa 9F       		.byte	0x9f
 8614 02fb 00000000 		.4byte	0
 8615 02ff 00000000 		.4byte	0
 8616              	.LLST17:
 8617 0303 00000000 		.4byte	.LVL57
 8618 0307 14000000 		.4byte	.LVL59
 8619 030b 0100     		.2byte	0x1
 8620 030d 50       		.byte	0x50
 8621 030e 14000000 		.4byte	.LVL59
 8622 0312 F0000000 		.4byte	.LVL74
 8623 0316 0100     		.2byte	0x1
 8624 0318 58       		.byte	0x58
 8625 0319 F0000000 		.4byte	.LVL74
 8626 031d F4000000 		.4byte	.LFE64
 8627 0321 0400     		.2byte	0x4
 8628 0323 F3       		.byte	0xf3
 8629 0324 01       		.uleb128 0x1
 8630 0325 50       		.byte	0x50
 8631 0326 9F       		.byte	0x9f
 8632 0327 00000000 		.4byte	0
 8633 032b 00000000 		.4byte	0
 8634              	.LLST18:
 8635 032f 00000000 		.4byte	.LVL57
 8636 0333 12000000 		.4byte	.LVL58
 8637 0337 0100     		.2byte	0x1
 8638 0339 51       		.byte	0x51
 8639 033a 12000000 		.4byte	.LVL58
 8640 033e F0000000 		.4byte	.LVL74
 8641 0342 0100     		.2byte	0x1
 8642 0344 5A       		.byte	0x5a
 8643 0345 F0000000 		.4byte	.LVL74
 8644 0349 F4000000 		.4byte	.LFE64
 8645 034d 0400     		.2byte	0x4
 8646 034f F3       		.byte	0xf3
 8647 0350 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 242


 8648 0351 51       		.byte	0x51
 8649 0352 9F       		.byte	0x9f
 8650 0353 00000000 		.4byte	0
 8651 0357 00000000 		.4byte	0
 8652              	.LLST19:
 8653 035b 00000000 		.4byte	.LVL57
 8654 035f 17000000 		.4byte	.LVL60-1
 8655 0363 0100     		.2byte	0x1
 8656 0365 52       		.byte	0x52
 8657 0366 17000000 		.4byte	.LVL60-1
 8658 036a F4000000 		.4byte	.LFE64
 8659 036e 0400     		.2byte	0x4
 8660 0370 F3       		.byte	0xf3
 8661 0371 01       		.uleb128 0x1
 8662 0372 52       		.byte	0x52
 8663 0373 9F       		.byte	0x9f
 8664 0374 00000000 		.4byte	0
 8665 0378 00000000 		.4byte	0
 8666              	.LLST20:
 8667 037c 00000000 		.4byte	.LVL57
 8668 0380 17000000 		.4byte	.LVL60-1
 8669 0384 0100     		.2byte	0x1
 8670 0386 53       		.byte	0x53
 8671 0387 17000000 		.4byte	.LVL60-1
 8672 038b F0000000 		.4byte	.LVL74
 8673 038f 0100     		.2byte	0x1
 8674 0391 59       		.byte	0x59
 8675 0392 F0000000 		.4byte	.LVL74
 8676 0396 F4000000 		.4byte	.LFE64
 8677 039a 0400     		.2byte	0x4
 8678 039c F3       		.byte	0xf3
 8679 039d 01       		.uleb128 0x1
 8680 039e 53       		.byte	0x53
 8681 039f 9F       		.byte	0x9f
 8682 03a0 00000000 		.4byte	0
 8683 03a4 00000000 		.4byte	0
 8684              	.LLST21:
 8685 03a8 00000000 		.4byte	.LVL57
 8686 03ac F0000000 		.4byte	.LVL74
 8687 03b0 0200     		.2byte	0x2
 8688 03b2 91       		.byte	0x91
 8689 03b3 00       		.sleb128 0
 8690 03b4 F0000000 		.4byte	.LVL74
 8691 03b8 F4000000 		.4byte	.LFE64
 8692 03bc 0200     		.2byte	0x2
 8693 03be 7D       		.byte	0x7d
 8694 03bf 00       		.sleb128 0
 8695 03c0 00000000 		.4byte	0
 8696 03c4 00000000 		.4byte	0
 8697              	.LLST22:
 8698 03c8 00000000 		.4byte	.LVL57
 8699 03cc F0000000 		.4byte	.LVL74
 8700 03d0 0200     		.2byte	0x2
 8701 03d2 91       		.byte	0x91
 8702 03d3 04       		.sleb128 4
 8703 03d4 F0000000 		.4byte	.LVL74
 8704 03d8 F4000000 		.4byte	.LFE64
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 243


 8705 03dc 0200     		.2byte	0x2
 8706 03de 7D       		.byte	0x7d
 8707 03df 04       		.sleb128 4
 8708 03e0 00000000 		.4byte	0
 8709 03e4 00000000 		.4byte	0
 8710              	.LLST23:
 8711 03e8 00000000 		.4byte	.LVL57
 8712 03ec F0000000 		.4byte	.LVL74
 8713 03f0 0200     		.2byte	0x2
 8714 03f2 91       		.byte	0x91
 8715 03f3 08       		.sleb128 8
 8716 03f4 F0000000 		.4byte	.LVL74
 8717 03f8 F4000000 		.4byte	.LFE64
 8718 03fc 0200     		.2byte	0x2
 8719 03fe 7D       		.byte	0x7d
 8720 03ff 08       		.sleb128 8
 8721 0400 00000000 		.4byte	0
 8722 0404 00000000 		.4byte	0
 8723              	.LLST24:
 8724 0408 00000000 		.4byte	.LVL57
 8725 040c F0000000 		.4byte	.LVL74
 8726 0410 0200     		.2byte	0x2
 8727 0412 91       		.byte	0x91
 8728 0413 0C       		.sleb128 12
 8729 0414 F0000000 		.4byte	.LVL74
 8730 0418 F4000000 		.4byte	.LFE64
 8731 041c 0200     		.2byte	0x2
 8732 041e 7D       		.byte	0x7d
 8733 041f 0C       		.sleb128 12
 8734 0420 00000000 		.4byte	0
 8735 0424 00000000 		.4byte	0
 8736              	.LLST25:
 8737 0428 BE000000 		.4byte	.LVL68
 8738 042c C6000000 		.4byte	.LVL71
 8739 0430 0200     		.2byte	0x2
 8740 0432 31       		.byte	0x31
 8741 0433 9F       		.byte	0x9f
 8742 0434 CA000000 		.4byte	.LVL72
 8743 0438 F0000000 		.4byte	.LVL74
 8744 043c 0100     		.2byte	0x1
 8745 043e 54       		.byte	0x54
 8746 043f F0000000 		.4byte	.LVL74
 8747 0443 F4000000 		.4byte	.LFE64
 8748 0447 0100     		.2byte	0x1
 8749 0449 50       		.byte	0x50
 8750 044a 00000000 		.4byte	0
 8751 044e 00000000 		.4byte	0
 8752              	.LLST26:
 8753 0452 18000000 		.4byte	.LVL60
 8754 0456 39000000 		.4byte	.LVL63-1
 8755 045a 0100     		.2byte	0x1
 8756 045c 50       		.byte	0x50
 8757 045d 39000000 		.4byte	.LVL63-1
 8758 0461 C4000000 		.4byte	.LVL70
 8759 0465 0100     		.2byte	0x1
 8760 0467 54       		.byte	0x54
 8761 0468 C6000000 		.4byte	.LVL71
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 244


 8762 046c CA000000 		.4byte	.LVL72
 8763 0470 0100     		.2byte	0x1
 8764 0472 50       		.byte	0x50
 8765 0473 00000000 		.4byte	0
 8766 0477 00000000 		.4byte	0
 8767              	.LLST27:
 8768 047b 2A000000 		.4byte	.LVL61
 8769 047f A0000000 		.4byte	.LVL67
 8770 0483 0100     		.2byte	0x1
 8771 0485 55       		.byte	0x55
 8772 0486 00000000 		.4byte	0
 8773 048a 00000000 		.4byte	0
 8774              	.LLST28:
 8775 048e 00000000 		.4byte	.LVL75
 8776 0492 07000000 		.4byte	.LVL76-1
 8777 0496 0100     		.2byte	0x1
 8778 0498 50       		.byte	0x50
 8779 0499 07000000 		.4byte	.LVL76-1
 8780 049d 10000000 		.4byte	.LVL77
 8781 04a1 0100     		.2byte	0x1
 8782 04a3 55       		.byte	0x55
 8783 04a4 00000000 		.4byte	0
 8784 04a8 00000000 		.4byte	0
 8785              	.LLST29:
 8786 04ac 10000000 		.4byte	.LVL77
 8787 04b0 8E000000 		.4byte	.LVL87
 8788 04b4 0100     		.2byte	0x1
 8789 04b6 55       		.byte	0x55
 8790 04b7 00000000 		.4byte	0
 8791 04bb 00000000 		.4byte	0
 8792              	.LLST30:
 8793 04bf 00000000 		.4byte	.LVL88
 8794 04c3 11000000 		.4byte	.LVL90-1
 8795 04c7 0100     		.2byte	0x1
 8796 04c9 50       		.byte	0x50
 8797 04ca 11000000 		.4byte	.LVL90-1
 8798 04ce 42000000 		.4byte	.LVL94
 8799 04d2 0100     		.2byte	0x1
 8800 04d4 54       		.byte	0x54
 8801 04d5 42000000 		.4byte	.LVL94
 8802 04d9 44000000 		.4byte	.LVL95
 8803 04dd 0100     		.2byte	0x1
 8804 04df 50       		.byte	0x50
 8805 04e0 44000000 		.4byte	.LVL95
 8806 04e4 46000000 		.4byte	.LVL96
 8807 04e8 0400     		.2byte	0x4
 8808 04ea F3       		.byte	0xf3
 8809 04eb 01       		.uleb128 0x1
 8810 04ec 50       		.byte	0x50
 8811 04ed 9F       		.byte	0x9f
 8812 04ee 46000000 		.4byte	.LVL96
 8813 04f2 56000000 		.4byte	.LVL101
 8814 04f6 0100     		.2byte	0x1
 8815 04f8 54       		.byte	0x54
 8816 04f9 56000000 		.4byte	.LVL101
 8817 04fd 60000000 		.4byte	.LFE68
 8818 0501 0400     		.2byte	0x4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 245


 8819 0503 F3       		.byte	0xf3
 8820 0504 01       		.uleb128 0x1
 8821 0505 50       		.byte	0x50
 8822 0506 9F       		.byte	0x9f
 8823 0507 00000000 		.4byte	0
 8824 050b 00000000 		.4byte	0
 8825              	.LLST31:
 8826 050f 14000000 		.4byte	.LVL91
 8827 0513 42000000 		.4byte	.LVL94
 8828 0517 0100     		.2byte	0x1
 8829 0519 55       		.byte	0x55
 8830 051a 46000000 		.4byte	.LVL96
 8831 051e 56000000 		.4byte	.LVL101
 8832 0522 0100     		.2byte	0x1
 8833 0524 55       		.byte	0x55
 8834 0525 00000000 		.4byte	0
 8835 0529 00000000 		.4byte	0
 8836              	.LLST32:
 8837 052d 02000000 		.4byte	.LVL89
 8838 0531 11000000 		.4byte	.LVL90-1
 8839 0535 0100     		.2byte	0x1
 8840 0537 50       		.byte	0x50
 8841 0538 11000000 		.4byte	.LVL90-1
 8842 053c 42000000 		.4byte	.LVL94
 8843 0540 0100     		.2byte	0x1
 8844 0542 54       		.byte	0x54
 8845 0543 42000000 		.4byte	.LVL94
 8846 0547 44000000 		.4byte	.LVL95
 8847 054b 0100     		.2byte	0x1
 8848 054d 50       		.byte	0x50
 8849 054e 44000000 		.4byte	.LVL95
 8850 0552 46000000 		.4byte	.LVL96
 8851 0556 0400     		.2byte	0x4
 8852 0558 F3       		.byte	0xf3
 8853 0559 01       		.uleb128 0x1
 8854 055a 50       		.byte	0x50
 8855 055b 9F       		.byte	0x9f
 8856 055c 46000000 		.4byte	.LVL96
 8857 0560 56000000 		.4byte	.LVL101
 8858 0564 0100     		.2byte	0x1
 8859 0566 54       		.byte	0x54
 8860 0567 56000000 		.4byte	.LVL101
 8861 056b 60000000 		.4byte	.LFE68
 8862 056f 0400     		.2byte	0x4
 8863 0571 F3       		.byte	0xf3
 8864 0572 01       		.uleb128 0x1
 8865 0573 50       		.byte	0x50
 8866 0574 9F       		.byte	0x9f
 8867 0575 00000000 		.4byte	0
 8868 0579 00000000 		.4byte	0
 8869              	.LLST33:
 8870 057d 00000000 		.4byte	.LVL102
 8871 0581 07000000 		.4byte	.LVL103-1
 8872 0585 0100     		.2byte	0x1
 8873 0587 50       		.byte	0x50
 8874 0588 07000000 		.4byte	.LVL103-1
 8875 058c 10000000 		.4byte	.LVL104
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 246


 8876 0590 0100     		.2byte	0x1
 8877 0592 54       		.byte	0x54
 8878 0593 00000000 		.4byte	0
 8879 0597 00000000 		.4byte	0
 8880              	.LLST34:
 8881 059b 10000000 		.4byte	.LVL104
 8882 059f 12000000 		.4byte	.LVL105
 8883 05a3 0100     		.2byte	0x1
 8884 05a5 54       		.byte	0x54
 8885 05a6 00000000 		.4byte	0
 8886 05aa 00000000 		.4byte	0
 8887              	.LLST35:
 8888 05ae 12000000 		.4byte	.LVL105
 8889 05b2 1A000000 		.4byte	.LVL107
 8890 05b6 0100     		.2byte	0x1
 8891 05b8 54       		.byte	0x54
 8892 05b9 1A000000 		.4byte	.LVL107
 8893 05bd 20000000 		.4byte	.LFE69
 8894 05c1 0100     		.2byte	0x1
 8895 05c3 50       		.byte	0x50
 8896 05c4 00000000 		.4byte	0
 8897 05c8 00000000 		.4byte	0
 8898              	.LLST36:
 8899 05cc 00000000 		.4byte	.LVL108
 8900 05d0 07000000 		.4byte	.LVL109-1
 8901 05d4 0100     		.2byte	0x1
 8902 05d6 50       		.byte	0x50
 8903 05d7 07000000 		.4byte	.LVL109-1
 8904 05db 10000000 		.4byte	.LVL110
 8905 05df 0100     		.2byte	0x1
 8906 05e1 54       		.byte	0x54
 8907 05e2 00000000 		.4byte	0
 8908 05e6 00000000 		.4byte	0
 8909              	.LLST37:
 8910 05ea 10000000 		.4byte	.LVL110
 8911 05ee 12000000 		.4byte	.LVL111
 8912 05f2 0100     		.2byte	0x1
 8913 05f4 54       		.byte	0x54
 8914 05f5 00000000 		.4byte	0
 8915 05f9 00000000 		.4byte	0
 8916              	.LLST38:
 8917 05fd 12000000 		.4byte	.LVL111
 8918 0601 1A000000 		.4byte	.LVL113
 8919 0605 0100     		.2byte	0x1
 8920 0607 54       		.byte	0x54
 8921 0608 1A000000 		.4byte	.LVL113
 8922 060c 20000000 		.4byte	.LFE70
 8923 0610 0100     		.2byte	0x1
 8924 0612 50       		.byte	0x50
 8925 0613 00000000 		.4byte	0
 8926 0617 00000000 		.4byte	0
 8927              	.LLST39:
 8928 061b 08000000 		.4byte	.LVL109
 8929 061f 15000000 		.4byte	.LVL112-1
 8930 0623 0100     		.2byte	0x1
 8931 0625 50       		.byte	0x50
 8932 0626 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 247


 8933 062a 00000000 		.4byte	0
 8934              	.LLST40:
 8935 062e 00000000 		.4byte	.LVL114
 8936 0632 0F000000 		.4byte	.LVL117-1
 8937 0636 0100     		.2byte	0x1
 8938 0638 50       		.byte	0x50
 8939 0639 0F000000 		.4byte	.LVL117-1
 8940 063d 18000000 		.4byte	.LVL118
 8941 0641 0100     		.2byte	0x1
 8942 0643 54       		.byte	0x54
 8943 0644 00000000 		.4byte	0
 8944 0648 00000000 		.4byte	0
 8945              	.LLST41:
 8946 064c 00000000 		.4byte	.LVL114
 8947 0650 0C000000 		.4byte	.LVL116
 8948 0654 0100     		.2byte	0x1
 8949 0656 51       		.byte	0x51
 8950 0657 0C000000 		.4byte	.LVL116
 8951 065b 66000000 		.4byte	.LVL123
 8952 065f 0100     		.2byte	0x1
 8953 0661 55       		.byte	0x55
 8954 0662 66000000 		.4byte	.LVL123
 8955 0666 87000000 		.4byte	.LVL124-1
 8956 066a 0300     		.2byte	0x3
 8957 066c 74       		.byte	0x74
 8958 066d C000     		.sleb128 64
 8959 066f 00000000 		.4byte	0
 8960 0673 00000000 		.4byte	0
 8961              	.LLST42:
 8962 0677 18000000 		.4byte	.LVL118
 8963 067b CE000000 		.4byte	.LVL129
 8964 067f 0100     		.2byte	0x1
 8965 0681 54       		.byte	0x54
 8966 0682 00000000 		.4byte	0
 8967 0686 00000000 		.4byte	0
 8968              	.LLST43:
 8969 068a 1A000000 		.4byte	.LVL119
 8970 068e 5E000000 		.4byte	.LVL122
 8971 0692 0100     		.2byte	0x1
 8972 0694 53       		.byte	0x53
 8973 0695 00000000 		.4byte	0
 8974 0699 00000000 		.4byte	0
 8975              	.LLST44:
 8976 069d 54000000 		.4byte	.LVL121
 8977 06a1 90000000 		.4byte	.LVL125
 8978 06a5 0100     		.2byte	0x1
 8979 06a7 56       		.byte	0x56
 8980 06a8 00000000 		.4byte	0
 8981 06ac 00000000 		.4byte	0
 8982              	.LLST45:
 8983 06b0 06000000 		.4byte	.LVL115
 8984 06b4 52000000 		.4byte	.LVL120
 8985 06b8 0200     		.2byte	0x2
 8986 06ba 30       		.byte	0x30
 8987 06bb 9F       		.byte	0x9f
 8988 06bc 52000000 		.4byte	.LVL120
 8989 06c0 C8000000 		.4byte	.LVL127
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 248


 8990 06c4 0100     		.2byte	0x1
 8991 06c6 57       		.byte	0x57
 8992 06c7 00000000 		.4byte	0
 8993 06cb 00000000 		.4byte	0
 8994              	.LLST46:
 8995 06cf 00000000 		.4byte	.LVL130
 8996 06d3 13000000 		.4byte	.LVL131-1
 8997 06d7 0100     		.2byte	0x1
 8998 06d9 50       		.byte	0x50
 8999 06da 13000000 		.4byte	.LVL131-1
 9000 06de 62000000 		.4byte	.LVL137
 9001 06e2 0100     		.2byte	0x1
 9002 06e4 54       		.byte	0x54
 9003 06e5 62000000 		.4byte	.LVL137
 9004 06e9 68000000 		.4byte	.LFE74
 9005 06ed 0100     		.2byte	0x1
 9006 06ef 50       		.byte	0x50
 9007 06f0 00000000 		.4byte	0
 9008 06f4 00000000 		.4byte	0
 9009              	.LLST48:
 9010 06f8 00000000 		.4byte	.LVL138
 9011 06fc 07000000 		.4byte	.LVL140-1
 9012 0700 0100     		.2byte	0x1
 9013 0702 50       		.byte	0x50
 9014 0703 07000000 		.4byte	.LVL140-1
 9015 0707 78000000 		.4byte	.LVL151
 9016 070b 0100     		.2byte	0x1
 9017 070d 54       		.byte	0x54
 9018 070e 78000000 		.4byte	.LVL151
 9019 0712 80000000 		.4byte	.LFE75
 9020 0716 0400     		.2byte	0x4
 9021 0718 F3       		.byte	0xf3
 9022 0719 01       		.uleb128 0x1
 9023 071a 50       		.byte	0x50
 9024 071b 9F       		.byte	0x9f
 9025 071c 00000000 		.4byte	0
 9026 0720 00000000 		.4byte	0
 9027              	.LLST49:
 9028 0724 04000000 		.4byte	.LVL139
 9029 0728 30000000 		.4byte	.LVL144
 9030 072c 0200     		.2byte	0x2
 9031 072e 30       		.byte	0x30
 9032 072f 9F       		.byte	0x9f
 9033 0730 30000000 		.4byte	.LVL144
 9034 0734 5E000000 		.4byte	.LVL147
 9035 0738 0100     		.2byte	0x1
 9036 073a 56       		.byte	0x56
 9037 073b 5E000000 		.4byte	.LVL147
 9038 073f 6E000000 		.4byte	.LVL149
 9039 0743 0200     		.2byte	0x2
 9040 0745 30       		.byte	0x30
 9041 0746 9F       		.byte	0x9f
 9042 0747 6E000000 		.4byte	.LVL149
 9043 074b 78000000 		.4byte	.LVL151
 9044 074f 0100     		.2byte	0x1
 9045 0751 56       		.byte	0x56
 9046 0752 78000000 		.4byte	.LVL151
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 249


 9047 0756 80000000 		.4byte	.LFE75
 9048 075a 0100     		.2byte	0x1
 9049 075c 50       		.byte	0x50
 9050 075d 00000000 		.4byte	0
 9051 0761 00000000 		.4byte	0
 9052              	.LLST50:
 9053 0765 04000000 		.4byte	.LVL139
 9054 0769 07000000 		.4byte	.LVL140-1
 9055 076d 0100     		.2byte	0x1
 9056 076f 50       		.byte	0x50
 9057 0770 07000000 		.4byte	.LVL140-1
 9058 0774 78000000 		.4byte	.LVL151
 9059 0778 0100     		.2byte	0x1
 9060 077a 54       		.byte	0x54
 9061 077b 78000000 		.4byte	.LVL151
 9062 077f 80000000 		.4byte	.LFE75
 9063 0783 0400     		.2byte	0x4
 9064 0785 F3       		.byte	0xf3
 9065 0786 01       		.uleb128 0x1
 9066 0787 50       		.byte	0x50
 9067 0788 9F       		.byte	0x9f
 9068 0789 00000000 		.4byte	0
 9069 078d 00000000 		.4byte	0
 9070              	.LLST51:
 9071 0791 0A000000 		.4byte	.LVL141
 9072 0795 0C000000 		.4byte	.LVL142
 9073 0799 0100     		.2byte	0x1
 9074 079b 50       		.byte	0x50
 9075 079c 0C000000 		.4byte	.LVL142
 9076 07a0 78000000 		.4byte	.LVL151
 9077 07a4 0100     		.2byte	0x1
 9078 07a6 55       		.byte	0x55
 9079 07a7 00000000 		.4byte	0
 9080 07ab 00000000 		.4byte	0
 9081              	.LLST52:
 9082 07af 18000000 		.4byte	.LVL152
 9083 07b3 1F000000 		.4byte	.LVL153-1
 9084 07b7 0100     		.2byte	0x1
 9085 07b9 50       		.byte	0x50
 9086 07ba 00000000 		.4byte	0
 9087 07be 00000000 		.4byte	0
 9088              	.LLST53:
 9089 07c2 4A000000 		.4byte	.LVL166
 9090 07c6 4E000000 		.4byte	.LVL168
 9091 07ca 0100     		.2byte	0x1
 9092 07cc 54       		.byte	0x54
 9093 07cd 72000000 		.4byte	.LVL170
 9094 07d1 C6000000 		.4byte	.LVL175
 9095 07d5 0100     		.2byte	0x1
 9096 07d7 54       		.byte	0x54
 9097 07d8 00000000 		.4byte	0
 9098 07dc 00000000 		.4byte	0
 9099              	.LLST54:
 9100 07e0 74000000 		.4byte	.LVL171
 9101 07e4 85000000 		.4byte	.LVL172-1
 9102 07e8 0100     		.2byte	0x1
 9103 07ea 53       		.byte	0x53
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 250


 9104 07eb 00000000 		.4byte	0
 9105 07ef 00000000 		.4byte	0
 9106              	.LLST55:
 9107 07f3 04000000 		.4byte	.LVL160
 9108 07f7 4A000000 		.4byte	.LVL166
 9109 07fb 0200     		.2byte	0x2
 9110 07fd 30       		.byte	0x30
 9111 07fe 9F       		.byte	0x9f
 9112 07ff 4A000000 		.4byte	.LVL166
 9113 0803 4C000000 		.4byte	.LVL167
 9114 0807 0100     		.2byte	0x1
 9115 0809 57       		.byte	0x57
 9116 080a 4E000000 		.4byte	.LVL168
 9117 080e 50000000 		.4byte	.LVL169
 9118 0812 0200     		.2byte	0x2
 9119 0814 30       		.byte	0x30
 9120 0815 9F       		.byte	0x9f
 9121 0816 50000000 		.4byte	.LVL169
 9122 081a DE000000 		.4byte	.LVL176
 9123 081e 0100     		.2byte	0x1
 9124 0820 57       		.byte	0x57
 9125 0821 DE000000 		.4byte	.LVL176
 9126 0825 EE000000 		.4byte	.LVL177
 9127 0829 0200     		.2byte	0x2
 9128 082b 30       		.byte	0x30
 9129 082c 9F       		.byte	0x9f
 9130 082d EE000000 		.4byte	.LVL177
 9131 0831 00010000 		.4byte	.LVL180
 9132 0835 0100     		.2byte	0x1
 9133 0837 57       		.byte	0x57
 9134 0838 00010000 		.4byte	.LVL180
 9135 083c 04010000 		.4byte	.LFE83
 9136 0840 0100     		.2byte	0x1
 9137 0842 50       		.byte	0x50
 9138 0843 00000000 		.4byte	0
 9139 0847 00000000 		.4byte	0
 9140              	.LLST56:
 9141 084b 1E000000 		.4byte	.LVL161
 9142 084f DE000000 		.4byte	.LVL176
 9143 0853 0100     		.2byte	0x1
 9144 0855 58       		.byte	0x58
 9145 0856 EE000000 		.4byte	.LVL177
 9146 085a F0000000 		.4byte	.LVL178
 9147 085e 0100     		.2byte	0x1
 9148 0860 58       		.byte	0x58
 9149 0861 00000000 		.4byte	0
 9150 0865 00000000 		.4byte	0
 9151              	.LLST57:
 9152 0869 26000000 		.4byte	.LVL162
 9153 086d 34000000 		.4byte	.LVL163
 9154 0871 0100     		.2byte	0x1
 9155 0873 52       		.byte	0x52
 9156 0874 34000000 		.4byte	.LVL163
 9157 0878 3A000000 		.4byte	.LVL164
 9158 087c 0500     		.2byte	0x5
 9159 087e 03       		.byte	0x3
 9160 087f D0000000 		.4byte	pxOverflowDelayedTaskList
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 251


 9161 0883 00000000 		.4byte	0
 9162 0887 00000000 		.4byte	0
 9163              	.LLST58:
 9164 088b 2C000000 		.4byte	.LVL183
 9165 088f 72000000 		.4byte	.LVL187
 9166 0893 0100     		.2byte	0x1
 9167 0895 55       		.byte	0x55
 9168 0896 00000000 		.4byte	0
 9169 089a 00000000 		.4byte	0
 9170              	.LLST59:
 9171 089e 02000000 		.4byte	.LVL181
 9172 08a2 B2000000 		.4byte	.LVL189
 9173 08a6 0200     		.2byte	0x2
 9174 08a8 30       		.byte	0x30
 9175 08a9 9F       		.byte	0x9f
 9176 08aa B2000000 		.4byte	.LVL189
 9177 08ae BA000000 		.4byte	.LVL191
 9178 08b2 0200     		.2byte	0x2
 9179 08b4 31       		.byte	0x31
 9180 08b5 9F       		.byte	0x9f
 9181 08b6 BA000000 		.4byte	.LVL191
 9182 08ba C0000000 		.4byte	.LVL192
 9183 08be 0200     		.2byte	0x2
 9184 08c0 30       		.byte	0x30
 9185 08c1 9F       		.byte	0x9f
 9186 08c2 C0000000 		.4byte	.LVL192
 9187 08c6 C8000000 		.4byte	.LVL194
 9188 08ca 0100     		.2byte	0x1
 9189 08cc 54       		.byte	0x54
 9190 08cd C8000000 		.4byte	.LVL194
 9191 08d1 CC000000 		.4byte	.LFE79
 9192 08d5 0100     		.2byte	0x1
 9193 08d7 50       		.byte	0x50
 9194 08d8 00000000 		.4byte	0
 9195 08dc 00000000 		.4byte	0
 9196              	.LLST60:
 9197 08e0 00000000 		.4byte	.LVL195
 9198 08e4 09000000 		.4byte	.LVL197-1
 9199 08e8 0100     		.2byte	0x1
 9200 08ea 50       		.byte	0x50
 9201 08eb 09000000 		.4byte	.LVL197-1
 9202 08ef 7C000000 		.4byte	.LVL206
 9203 08f3 0100     		.2byte	0x1
 9204 08f5 55       		.byte	0x55
 9205 08f6 7C000000 		.4byte	.LVL206
 9206 08fa 80000000 		.4byte	.LFE66
 9207 08fe 0400     		.2byte	0x4
 9208 0900 F3       		.byte	0xf3
 9209 0901 01       		.uleb128 0x1
 9210 0902 50       		.byte	0x50
 9211 0903 9F       		.byte	0x9f
 9212 0904 00000000 		.4byte	0
 9213 0908 00000000 		.4byte	0
 9214              	.LLST61:
 9215 090c 00000000 		.4byte	.LVL195
 9216 0910 09000000 		.4byte	.LVL197-1
 9217 0914 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 252


 9218 0916 51       		.byte	0x51
 9219 0917 09000000 		.4byte	.LVL197-1
 9220 091b 14000000 		.4byte	.LVL199
 9221 091f 0100     		.2byte	0x1
 9222 0921 54       		.byte	0x54
 9223 0922 14000000 		.4byte	.LVL199
 9224 0926 80000000 		.4byte	.LFE66
 9225 092a 0400     		.2byte	0x4
 9226 092c F3       		.byte	0xf3
 9227 092d 01       		.uleb128 0x1
 9228 092e 51       		.byte	0x51
 9229 092f 9F       		.byte	0x9f
 9230 0930 00000000 		.4byte	0
 9231 0934 00000000 		.4byte	0
 9232              	.LLST62:
 9233 0938 14000000 		.4byte	.LVL199
 9234 093c 7C000000 		.4byte	.LVL206
 9235 0940 0100     		.2byte	0x1
 9236 0942 54       		.byte	0x54
 9237 0943 00000000 		.4byte	0
 9238 0947 00000000 		.4byte	0
 9239              	.LLST63:
 9240 094b 74000000 		.4byte	.LVL204
 9241 094f 79000000 		.4byte	.LVL205-1
 9242 0953 0100     		.2byte	0x1
 9243 0955 50       		.byte	0x50
 9244 0956 00000000 		.4byte	0
 9245 095a 00000000 		.4byte	0
 9246              	.LLST64:
 9247 095e 06000000 		.4byte	.LVL196
 9248 0962 3E000000 		.4byte	.LVL200
 9249 0966 0200     		.2byte	0x2
 9250 0968 30       		.byte	0x30
 9251 0969 9F       		.byte	0x9f
 9252 096a 3E000000 		.4byte	.LVL200
 9253 096e 44000000 		.4byte	.LVL201
 9254 0972 0100     		.2byte	0x1
 9255 0974 53       		.byte	0x53
 9256 0975 00000000 		.4byte	0
 9257 0979 00000000 		.4byte	0
 9258              	.LLST65:
 9259 097d 10000000 		.4byte	.LVL198
 9260 0981 4D000000 		.4byte	.LVL202-1
 9261 0985 0100     		.2byte	0x1
 9262 0987 52       		.byte	0x52
 9263 0988 00000000 		.4byte	0
 9264 098c 00000000 		.4byte	0
 9265              	.LLST66:
 9266 0990 00000000 		.4byte	.LVL207
 9267 0994 09000000 		.4byte	.LVL209-1
 9268 0998 0100     		.2byte	0x1
 9269 099a 50       		.byte	0x50
 9270 099b 09000000 		.4byte	.LVL209-1
 9271 099f 12000000 		.4byte	.LVL210
 9272 09a3 0100     		.2byte	0x1
 9273 09a5 54       		.byte	0x54
 9274 09a6 12000000 		.4byte	.LVL210
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 253


 9275 09aa 44000000 		.4byte	.LVL214
 9276 09ae 0400     		.2byte	0x4
 9277 09b0 F3       		.byte	0xf3
 9278 09b1 01       		.uleb128 0x1
 9279 09b2 50       		.byte	0x50
 9280 09b3 9F       		.byte	0x9f
 9281 09b4 44000000 		.4byte	.LVL214
 9282 09b8 46000000 		.4byte	.LVL215
 9283 09bc 0100     		.2byte	0x1
 9284 09be 50       		.byte	0x50
 9285 09bf 46000000 		.4byte	.LVL215
 9286 09c3 54000000 		.4byte	.LFE67
 9287 09c7 0400     		.2byte	0x4
 9288 09c9 F3       		.byte	0xf3
 9289 09ca 01       		.uleb128 0x1
 9290 09cb 50       		.byte	0x50
 9291 09cc 9F       		.byte	0x9f
 9292 09cd 00000000 		.4byte	0
 9293 09d1 00000000 		.4byte	0
 9294              	.LLST67:
 9295 09d5 12000000 		.4byte	.LVL210
 9296 09d9 44000000 		.4byte	.LVL214
 9297 09dd 0100     		.2byte	0x1
 9298 09df 54       		.byte	0x54
 9299 09e0 00000000 		.4byte	0
 9300 09e4 00000000 		.4byte	0
 9301              	.LLST68:
 9302 09e8 02000000 		.4byte	.LVL208
 9303 09ec 42000000 		.4byte	.LVL213
 9304 09f0 0200     		.2byte	0x2
 9305 09f2 30       		.byte	0x30
 9306 09f3 9F       		.byte	0x9f
 9307 09f4 42000000 		.4byte	.LVL213
 9308 09f8 44000000 		.4byte	.LVL214
 9309 09fc 0100     		.2byte	0x1
 9310 09fe 50       		.byte	0x50
 9311 09ff 44000000 		.4byte	.LVL214
 9312 0a03 46000000 		.4byte	.LVL215
 9313 0a07 0200     		.2byte	0x2
 9314 0a09 30       		.byte	0x30
 9315 0a0a 9F       		.byte	0x9f
 9316 0a0b 46000000 		.4byte	.LVL215
 9317 0a0f 4B000000 		.4byte	.LVL216-1
 9318 0a13 0100     		.2byte	0x1
 9319 0a15 50       		.byte	0x50
 9320 0a16 00000000 		.4byte	0
 9321 0a1a 00000000 		.4byte	0
 9322              	.LLST69:
 9323 0a1e 0E000000 		.4byte	.LVL218
 9324 0a22 1A000000 		.4byte	.LVL221
 9325 0a26 0800     		.2byte	0x8
 9326 0a28 74       		.byte	0x74
 9327 0a29 00       		.sleb128 0
 9328 0a2a 30       		.byte	0x30
 9329 0a2b 29       		.byte	0x29
 9330 0a2c 08       		.byte	0x8
 9331 0a2d FF       		.byte	0xff
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 254


 9332 0a2e 1A       		.byte	0x1a
 9333 0a2f 9F       		.byte	0x9f
 9334 0a30 00000000 		.4byte	0
 9335 0a34 00000000 		.4byte	0
 9336              	.LLST70:
 9337 0a38 20000000 		.4byte	.LVL222
 9338 0a3c 44000000 		.4byte	.LVL225
 9339 0a40 0100     		.2byte	0x1
 9340 0a42 55       		.byte	0x55
 9341 0a43 00000000 		.4byte	0
 9342 0a47 00000000 		.4byte	0
 9343              	.LLST71:
 9344 0a4b 00000000 		.4byte	.LVL226
 9345 0a4f 02000000 		.4byte	.LVL227
 9346 0a53 0100     		.2byte	0x1
 9347 0a55 50       		.byte	0x50
 9348 0a56 02000000 		.4byte	.LVL227
 9349 0a5a 08000000 		.4byte	.LFE92
 9350 0a5e 0400     		.2byte	0x4
 9351 0a60 F3       		.byte	0xf3
 9352 0a61 01       		.uleb128 0x1
 9353 0a62 50       		.byte	0x50
 9354 0a63 9F       		.byte	0x9f
 9355 0a64 00000000 		.4byte	0
 9356 0a68 00000000 		.4byte	0
 9357              	.LLST72:
 9358 0a6c 22000000 		.4byte	.LVL229
 9359 0a70 3C000000 		.4byte	.LVL230
 9360 0a74 0100     		.2byte	0x1
 9361 0a76 53       		.byte	0x53
 9362 0a77 00000000 		.4byte	0
 9363 0a7b 00000000 		.4byte	0
 9364              	.LLST73:
 9365 0a7f 62000000 		.4byte	.LVL234
 9366 0a83 94000000 		.4byte	.LVL235
 9367 0a87 0100     		.2byte	0x1
 9368 0a89 53       		.byte	0x53
 9369 0a8a 00000000 		.4byte	0
 9370 0a8e 00000000 		.4byte	0
 9371              	.LLST74:
 9372 0a92 58000000 		.4byte	.LVL232
 9373 0a96 5C000000 		.4byte	.LVL233
 9374 0a9a 0100     		.2byte	0x1
 9375 0a9c 53       		.byte	0x53
 9376 0a9d 00000000 		.4byte	0
 9377 0aa1 00000000 		.4byte	0
 9378              	.LLST75:
 9379 0aa5 62000000 		.4byte	.LVL234
 9380 0aa9 94000000 		.4byte	.LVL235
 9381 0aad 0B00     		.2byte	0xb
 9382 0aaf 73       		.byte	0x73
 9383 0ab0 00       		.sleb128 0
 9384 0ab1 44       		.byte	0x44
 9385 0ab2 1E       		.byte	0x1e
 9386 0ab3 03       		.byte	0x3
 9387 0ab4 30000000 		.4byte	pxReadyTasksLists
 9388 0ab8 22       		.byte	0x22
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 255


 9389 0ab9 9F       		.byte	0x9f
 9390 0aba 00000000 		.4byte	0
 9391 0abe 00000000 		.4byte	0
 9392              	.LLST76:
 9393 0ac2 00000000 		.4byte	.LVL236
 9394 0ac6 07000000 		.4byte	.LVL237-1
 9395 0aca 0100     		.2byte	0x1
 9396 0acc 50       		.byte	0x50
 9397 0acd 07000000 		.4byte	.LVL237-1
 9398 0ad1 10000000 		.4byte	.LVL238
 9399 0ad5 0100     		.2byte	0x1
 9400 0ad7 54       		.byte	0x54
 9401 0ad8 00000000 		.4byte	0
 9402 0adc 00000000 		.4byte	0
 9403              	.LLST77:
 9404 0ae0 10000000 		.4byte	.LVL238
 9405 0ae4 9C000000 		.4byte	.LVL251
 9406 0ae8 0100     		.2byte	0x1
 9407 0aea 54       		.byte	0x54
 9408 0aeb 00000000 		.4byte	0
 9409 0aef 00000000 		.4byte	0
 9410              	.LLST78:
 9411 0af3 00000000 		.4byte	.LVL252
 9412 0af7 0F000000 		.4byte	.LVL254-1
 9413 0afb 0100     		.2byte	0x1
 9414 0afd 50       		.byte	0x50
 9415 0afe 0F000000 		.4byte	.LVL254-1
 9416 0b02 5C000000 		.4byte	.LFE85
 9417 0b06 0400     		.2byte	0x4
 9418 0b08 F3       		.byte	0xf3
 9419 0b09 01       		.uleb128 0x1
 9420 0b0a 50       		.byte	0x50
 9421 0b0b 9F       		.byte	0x9f
 9422 0b0c 00000000 		.4byte	0
 9423 0b10 00000000 		.4byte	0
 9424              	.LLST79:
 9425 0b14 00000000 		.4byte	.LVL252
 9426 0b18 0A000000 		.4byte	.LVL253
 9427 0b1c 0100     		.2byte	0x1
 9428 0b1e 51       		.byte	0x51
 9429 0b1f 0A000000 		.4byte	.LVL253
 9430 0b23 56000000 		.4byte	.LVL261
 9431 0b27 0100     		.2byte	0x1
 9432 0b29 55       		.byte	0x55
 9433 0b2a 56000000 		.4byte	.LVL261
 9434 0b2e 5C000000 		.4byte	.LFE85
 9435 0b32 0400     		.2byte	0x4
 9436 0b34 F3       		.byte	0xf3
 9437 0b35 01       		.uleb128 0x1
 9438 0b36 51       		.byte	0x51
 9439 0b37 9F       		.byte	0x9f
 9440 0b38 00000000 		.4byte	0
 9441 0b3c 00000000 		.4byte	0
 9442              	.LLST80:
 9443 0b40 4E000000 		.4byte	.LVL258
 9444 0b44 50000000 		.4byte	.LVL259
 9445 0b48 0600     		.2byte	0x6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 256


 9446 0b4a 75       		.byte	0x75
 9447 0b4b 00       		.sleb128 0
 9448 0b4c 70       		.byte	0x70
 9449 0b4d 00       		.sleb128 0
 9450 0b4e 22       		.byte	0x22
 9451 0b4f 9F       		.byte	0x9f
 9452 0b50 50000000 		.4byte	.LVL259
 9453 0b54 53000000 		.4byte	.LVL260-1
 9454 0b58 0100     		.2byte	0x1
 9455 0b5a 50       		.byte	0x50
 9456 0b5b 00000000 		.4byte	0
 9457 0b5f 00000000 		.4byte	0
 9458              	.LLST81:
 9459 0b63 00000000 		.4byte	.LVL262
 9460 0b67 19000000 		.4byte	.LVL264-1
 9461 0b6b 0100     		.2byte	0x1
 9462 0b6d 50       		.byte	0x50
 9463 0b6e 19000000 		.4byte	.LVL264-1
 9464 0b72 64000000 		.4byte	.LFE86
 9465 0b76 0400     		.2byte	0x4
 9466 0b78 F3       		.byte	0xf3
 9467 0b79 01       		.uleb128 0x1
 9468 0b7a 50       		.byte	0x50
 9469 0b7b 9F       		.byte	0x9f
 9470 0b7c 00000000 		.4byte	0
 9471 0b80 00000000 		.4byte	0
 9472              	.LLST82:
 9473 0b84 00000000 		.4byte	.LVL262
 9474 0b88 0E000000 		.4byte	.LVL263
 9475 0b8c 0100     		.2byte	0x1
 9476 0b8e 51       		.byte	0x51
 9477 0b8f 0E000000 		.4byte	.LVL263
 9478 0b93 64000000 		.4byte	.LFE86
 9479 0b97 0400     		.2byte	0x4
 9480 0b99 F3       		.byte	0xf3
 9481 0b9a 01       		.uleb128 0x1
 9482 0b9b 51       		.byte	0x51
 9483 0b9c 9F       		.byte	0x9f
 9484 0b9d 00000000 		.4byte	0
 9485 0ba1 00000000 		.4byte	0
 9486              	.LLST83:
 9487 0ba5 00000000 		.4byte	.LVL262
 9488 0ba9 19000000 		.4byte	.LVL264-1
 9489 0bad 0100     		.2byte	0x1
 9490 0baf 52       		.byte	0x52
 9491 0bb0 19000000 		.4byte	.LVL264-1
 9492 0bb4 60000000 		.4byte	.LVL271
 9493 0bb8 0100     		.2byte	0x1
 9494 0bba 55       		.byte	0x55
 9495 0bbb 60000000 		.4byte	.LVL271
 9496 0bbf 64000000 		.4byte	.LFE86
 9497 0bc3 0400     		.2byte	0x4
 9498 0bc5 F3       		.byte	0xf3
 9499 0bc6 01       		.uleb128 0x1
 9500 0bc7 52       		.byte	0x52
 9501 0bc8 9F       		.byte	0x9f
 9502 0bc9 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 257


 9503 0bcd 00000000 		.4byte	0
 9504              	.LLST84:
 9505 0bd1 58000000 		.4byte	.LVL268
 9506 0bd5 5A000000 		.4byte	.LVL269
 9507 0bd9 0600     		.2byte	0x6
 9508 0bdb 75       		.byte	0x75
 9509 0bdc 00       		.sleb128 0
 9510 0bdd 70       		.byte	0x70
 9511 0bde 00       		.sleb128 0
 9512 0bdf 22       		.byte	0x22
 9513 0be0 9F       		.byte	0x9f
 9514 0be1 5A000000 		.4byte	.LVL269
 9515 0be5 5D000000 		.4byte	.LVL270-1
 9516 0be9 0100     		.2byte	0x1
 9517 0beb 50       		.byte	0x50
 9518 0bec 00000000 		.4byte	0
 9519 0bf0 00000000 		.4byte	0
 9520              	.LLST85:
 9521 0bf4 00000000 		.4byte	.LVL272
 9522 0bf8 0C000000 		.4byte	.LVL274
 9523 0bfc 0100     		.2byte	0x1
 9524 0bfe 50       		.byte	0x50
 9525 0bff 0C000000 		.4byte	.LVL274
 9526 0c03 74000000 		.4byte	.LFE87
 9527 0c07 0400     		.2byte	0x4
 9528 0c09 F3       		.byte	0xf3
 9529 0c0a 01       		.uleb128 0x1
 9530 0c0b 50       		.byte	0x50
 9531 0c0c 9F       		.byte	0x9f
 9532 0c0d 00000000 		.4byte	0
 9533 0c11 00000000 		.4byte	0
 9534              	.LLST86:
 9535 0c15 06000000 		.4byte	.LVL273
 9536 0c19 6A000000 		.4byte	.LVL282
 9537 0c1d 0100     		.2byte	0x1
 9538 0c1f 54       		.byte	0x54
 9539 0c20 00000000 		.4byte	0
 9540 0c24 00000000 		.4byte	0
 9541              	.LLST87:
 9542 0c28 5C000000 		.4byte	.LVL279
 9543 0c2c 66000000 		.4byte	.LVL280
 9544 0c30 0200     		.2byte	0x2
 9545 0c32 31       		.byte	0x31
 9546 0c33 9F       		.byte	0x9f
 9547 0c34 68000000 		.4byte	.LVL281
 9548 0c38 74000000 		.4byte	.LFE87
 9549 0c3c 0100     		.2byte	0x1
 9550 0c3e 50       		.byte	0x50
 9551 0c3f 00000000 		.4byte	0
 9552 0c43 00000000 		.4byte	0
 9553              	.LLST88:
 9554 0c47 00000000 		.4byte	.LVL283
 9555 0c4b 0D000000 		.4byte	.LVL286-1
 9556 0c4f 0100     		.2byte	0x1
 9557 0c51 50       		.byte	0x50
 9558 0c52 0D000000 		.4byte	.LVL286-1
 9559 0c56 58000000 		.4byte	.LFE88
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 258


 9560 0c5a 0400     		.2byte	0x4
 9561 0c5c F3       		.byte	0xf3
 9562 0c5d 01       		.uleb128 0x1
 9563 0c5e 50       		.byte	0x50
 9564 0c5f 9F       		.byte	0x9f
 9565 0c60 00000000 		.4byte	0
 9566 0c64 00000000 		.4byte	0
 9567              	.LLST89:
 9568 0c68 00000000 		.4byte	.LVL283
 9569 0c6c 06000000 		.4byte	.LVL284
 9570 0c70 0100     		.2byte	0x1
 9571 0c72 51       		.byte	0x51
 9572 0c73 06000000 		.4byte	.LVL284
 9573 0c77 58000000 		.4byte	.LFE88
 9574 0c7b 0400     		.2byte	0x4
 9575 0c7d F3       		.byte	0xf3
 9576 0c7e 01       		.uleb128 0x1
 9577 0c7f 51       		.byte	0x51
 9578 0c80 9F       		.byte	0x9f
 9579 0c81 00000000 		.4byte	0
 9580 0c85 00000000 		.4byte	0
 9581              	.LLST90:
 9582 0c89 0A000000 		.4byte	.LVL285
 9583 0c8d 54000000 		.4byte	.LVL292
 9584 0c91 0100     		.2byte	0x1
 9585 0c93 55       		.byte	0x55
 9586 0c94 00000000 		.4byte	0
 9587 0c98 00000000 		.4byte	0
 9588              	.LLST91:
 9589 0c9c 48000000 		.4byte	.LVL289
 9590 0ca0 50000000 		.4byte	.LVL290
 9591 0ca4 0200     		.2byte	0x2
 9592 0ca6 31       		.byte	0x31
 9593 0ca7 9F       		.byte	0x9f
 9594 0ca8 52000000 		.4byte	.LVL291
 9595 0cac 58000000 		.4byte	.LFE88
 9596 0cb0 0100     		.2byte	0x1
 9597 0cb2 50       		.byte	0x50
 9598 0cb3 00000000 		.4byte	0
 9599 0cb7 00000000 		.4byte	0
 9600              	.LLST92:
 9601 0cbb 00000000 		.4byte	.LVL294
 9602 0cbf 09000000 		.4byte	.LVL295-1
 9603 0cc3 0100     		.2byte	0x1
 9604 0cc5 50       		.byte	0x50
 9605 0cc6 09000000 		.4byte	.LVL295-1
 9606 0cca 40000000 		.4byte	.LVL299
 9607 0cce 0100     		.2byte	0x1
 9608 0cd0 54       		.byte	0x54
 9609 0cd1 40000000 		.4byte	.LVL299
 9610 0cd5 42000000 		.4byte	.LVL300
 9611 0cd9 0400     		.2byte	0x4
 9612 0cdb F3       		.byte	0xf3
 9613 0cdc 01       		.uleb128 0x1
 9614 0cdd 50       		.byte	0x50
 9615 0cde 9F       		.byte	0x9f
 9616 0cdf 42000000 		.4byte	.LVL300
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 259


 9617 0ce3 44000000 		.4byte	.LVL301
 9618 0ce7 0100     		.2byte	0x1
 9619 0ce9 54       		.byte	0x54
 9620 0cea 44000000 		.4byte	.LVL301
 9621 0cee 46000000 		.4byte	.LVL302
 9622 0cf2 0400     		.2byte	0x4
 9623 0cf4 F3       		.byte	0xf3
 9624 0cf5 01       		.uleb128 0x1
 9625 0cf6 50       		.byte	0x50
 9626 0cf7 9F       		.byte	0x9f
 9627 0cf8 46000000 		.4byte	.LVL302
 9628 0cfc 48000000 		.4byte	.LVL303
 9629 0d00 0100     		.2byte	0x1
 9630 0d02 54       		.byte	0x54
 9631 0d03 48000000 		.4byte	.LVL303
 9632 0d07 4A000000 		.4byte	.LVL304
 9633 0d0b 0400     		.2byte	0x4
 9634 0d0d F3       		.byte	0xf3
 9635 0d0e 01       		.uleb128 0x1
 9636 0d0f 50       		.byte	0x50
 9637 0d10 9F       		.byte	0x9f
 9638 0d11 4A000000 		.4byte	.LVL304
 9639 0d15 4C000000 		.4byte	.LVL305
 9640 0d19 0100     		.2byte	0x1
 9641 0d1b 54       		.byte	0x54
 9642 0d1c 4C000000 		.4byte	.LVL305
 9643 0d20 58000000 		.4byte	.LFE90
 9644 0d24 0400     		.2byte	0x4
 9645 0d26 F3       		.byte	0xf3
 9646 0d27 01       		.uleb128 0x1
 9647 0d28 50       		.byte	0x50
 9648 0d29 9F       		.byte	0x9f
 9649 0d2a 00000000 		.4byte	0
 9650 0d2e 00000000 		.4byte	0
 9651              	.LLST93:
 9652 0d32 00000000 		.4byte	.LVL294
 9653 0d36 09000000 		.4byte	.LVL295-1
 9654 0d3a 0100     		.2byte	0x1
 9655 0d3c 51       		.byte	0x51
 9656 0d3d 09000000 		.4byte	.LVL295-1
 9657 0d41 54000000 		.4byte	.LVL307
 9658 0d45 0100     		.2byte	0x1
 9659 0d47 55       		.byte	0x55
 9660 0d48 54000000 		.4byte	.LVL307
 9661 0d4c 58000000 		.4byte	.LFE90
 9662 0d50 0400     		.2byte	0x4
 9663 0d52 F3       		.byte	0xf3
 9664 0d53 01       		.uleb128 0x1
 9665 0d54 51       		.byte	0x51
 9666 0d55 9F       		.byte	0x9f
 9667 0d56 00000000 		.4byte	0
 9668 0d5a 00000000 		.4byte	0
 9669              	.LLST94:
 9670 0d5e 3E000000 		.4byte	.LVL298
 9671 0d62 42000000 		.4byte	.LVL300
 9672 0d66 0200     		.2byte	0x2
 9673 0d68 30       		.byte	0x30
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 260


 9674 0d69 9F       		.byte	0x9f
 9675 0d6a 4C000000 		.4byte	.LVL305
 9676 0d6e 54000000 		.4byte	.LVL307
 9677 0d72 0100     		.2byte	0x1
 9678 0d74 54       		.byte	0x54
 9679 0d75 54000000 		.4byte	.LVL307
 9680 0d79 58000000 		.4byte	.LFE90
 9681 0d7d 0100     		.2byte	0x1
 9682 0d7f 50       		.byte	0x50
 9683 0d80 00000000 		.4byte	0
 9684 0d84 00000000 		.4byte	0
 9685              	.LLST95:
 9686 0d88 10000000 		.4byte	.LVL296
 9687 0d8c 34000000 		.4byte	.LVL297
 9688 0d90 0100     		.2byte	0x1
 9689 0d92 52       		.byte	0x52
 9690 0d93 42000000 		.4byte	.LVL300
 9691 0d97 4C000000 		.4byte	.LVL305
 9692 0d9b 0100     		.2byte	0x1
 9693 0d9d 52       		.byte	0x52
 9694 0d9e 00000000 		.4byte	0
 9695 0da2 00000000 		.4byte	0
 9696              	.LLST96:
 9697 0da6 00000000 		.4byte	.LVL308
 9698 0daa 0C000000 		.4byte	.LVL309
 9699 0dae 0100     		.2byte	0x1
 9700 0db0 50       		.byte	0x50
 9701 0db1 00000000 		.4byte	0
 9702 0db5 00000000 		.4byte	0
 9703              	.LLST97:
 9704 0db9 0C000000 		.4byte	.LVL309
 9705 0dbd 11000000 		.4byte	.LVL310-1
 9706 0dc1 0100     		.2byte	0x1
 9707 0dc3 53       		.byte	0x53
 9708 0dc4 00000000 		.4byte	0
 9709 0dc8 00000000 		.4byte	0
 9710              	.LLST98:
 9711 0dcc 0C000000 		.4byte	.LVL309
 9712 0dd0 11000000 		.4byte	.LVL310-1
 9713 0dd4 0200     		.2byte	0x2
 9714 0dd6 73       		.byte	0x73
 9715 0dd7 30       		.sleb128 48
 9716 0dd8 00000000 		.4byte	0
 9717 0ddc 00000000 		.4byte	0
 9718              	.LLST99:
 9719 0de0 00000000 		.4byte	.LVL312
 9720 0de4 2C000000 		.4byte	.LVL313
 9721 0de8 0100     		.2byte	0x1
 9722 0dea 50       		.byte	0x50
 9723 0deb 2C000000 		.4byte	.LVL313
 9724 0def 4B000000 		.4byte	.LVL314-1
 9725 0df3 0100     		.2byte	0x1
 9726 0df5 52       		.byte	0x52
 9727 0df6 4B000000 		.4byte	.LVL314-1
 9728 0dfa 9C000000 		.4byte	.LVL316
 9729 0dfe 0100     		.2byte	0x1
 9730 0e00 55       		.byte	0x55
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 261


 9731 0e01 9C000000 		.4byte	.LVL316
 9732 0e05 A8000000 		.4byte	.LVL317
 9733 0e09 0100     		.2byte	0x1
 9734 0e0b 52       		.byte	0x52
 9735 0e0c A8000000 		.4byte	.LVL317
 9736 0e10 B4000000 		.4byte	.LFE103
 9737 0e14 0100     		.2byte	0x1
 9738 0e16 50       		.byte	0x50
 9739 0e17 00000000 		.4byte	0
 9740 0e1b 00000000 		.4byte	0
 9741              	.LLST101:
 9742 0e1f 00000000 		.4byte	.LVL318
 9743 0e23 10000000 		.4byte	.LVL319
 9744 0e27 0100     		.2byte	0x1
 9745 0e29 50       		.byte	0x50
 9746 0e2a 10000000 		.4byte	.LVL319
 9747 0e2e 21000000 		.4byte	.LVL320-1
 9748 0e32 0100     		.2byte	0x1
 9749 0e34 53       		.byte	0x53
 9750 0e35 21000000 		.4byte	.LVL320-1
 9751 0e39 52000000 		.4byte	.LVL321
 9752 0e3d 0100     		.2byte	0x1
 9753 0e3f 54       		.byte	0x54
 9754 0e40 52000000 		.4byte	.LVL321
 9755 0e44 76000000 		.4byte	.LVL323
 9756 0e48 0300     		.2byte	0x3
 9757 0e4a 75       		.byte	0x75
 9758 0e4b 7C       		.sleb128 -4
 9759 0e4c 9F       		.byte	0x9f
 9760 0e4d 76000000 		.4byte	.LVL323
 9761 0e51 78000000 		.4byte	.LVL324
 9762 0e55 0100     		.2byte	0x1
 9763 0e57 50       		.byte	0x50
 9764 0e58 78000000 		.4byte	.LVL324
 9765 0e5c 7A000000 		.4byte	.LVL325
 9766 0e60 0400     		.2byte	0x4
 9767 0e62 F3       		.byte	0xf3
 9768 0e63 01       		.uleb128 0x1
 9769 0e64 50       		.byte	0x50
 9770 0e65 9F       		.byte	0x9f
 9771 0e66 7A000000 		.4byte	.LVL325
 9772 0e6a 82000000 		.4byte	.LVL328
 9773 0e6e 0100     		.2byte	0x1
 9774 0e70 53       		.byte	0x53
 9775 0e71 82000000 		.4byte	.LVL328
 9776 0e75 88000000 		.4byte	.LFE104
 9777 0e79 0400     		.2byte	0x4
 9778 0e7b F3       		.byte	0xf3
 9779 0e7c 01       		.uleb128 0x1
 9780 0e7d 50       		.byte	0x50
 9781 0e7e 9F       		.byte	0x9f
 9782 0e7f 00000000 		.4byte	0
 9783 0e83 00000000 		.4byte	0
 9784              	.LLST102:
 9785 0e87 00000000 		.4byte	.LVL318
 9786 0e8b 10000000 		.4byte	.LVL319
 9787 0e8f 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 262


 9788 0e91 50       		.byte	0x50
 9789 0e92 10000000 		.4byte	.LVL319
 9790 0e96 21000000 		.4byte	.LVL320-1
 9791 0e9a 0100     		.2byte	0x1
 9792 0e9c 53       		.byte	0x53
 9793 0e9d 21000000 		.4byte	.LVL320-1
 9794 0ea1 52000000 		.4byte	.LVL321
 9795 0ea5 0100     		.2byte	0x1
 9796 0ea7 54       		.byte	0x54
 9797 0ea8 52000000 		.4byte	.LVL321
 9798 0eac 76000000 		.4byte	.LVL323
 9799 0eb0 0300     		.2byte	0x3
 9800 0eb2 75       		.byte	0x75
 9801 0eb3 7C       		.sleb128 -4
 9802 0eb4 9F       		.byte	0x9f
 9803 0eb5 76000000 		.4byte	.LVL323
 9804 0eb9 78000000 		.4byte	.LVL324
 9805 0ebd 0100     		.2byte	0x1
 9806 0ebf 50       		.byte	0x50
 9807 0ec0 78000000 		.4byte	.LVL324
 9808 0ec4 7A000000 		.4byte	.LVL325
 9809 0ec8 0400     		.2byte	0x4
 9810 0eca F3       		.byte	0xf3
 9811 0ecb 01       		.uleb128 0x1
 9812 0ecc 50       		.byte	0x50
 9813 0ecd 9F       		.byte	0x9f
 9814 0ece 7A000000 		.4byte	.LVL325
 9815 0ed2 82000000 		.4byte	.LVL328
 9816 0ed6 0100     		.2byte	0x1
 9817 0ed8 53       		.byte	0x53
 9818 0ed9 82000000 		.4byte	.LVL328
 9819 0edd 88000000 		.4byte	.LFE104
 9820 0ee1 0400     		.2byte	0x4
 9821 0ee3 F3       		.byte	0xf3
 9822 0ee4 01       		.uleb128 0x1
 9823 0ee5 50       		.byte	0x50
 9824 0ee6 9F       		.byte	0x9f
 9825 0ee7 00000000 		.4byte	0
 9826 0eeb 00000000 		.4byte	0
 9827              	.LLST103:
 9828 0eef 00000000 		.4byte	.LVL318
 9829 0ef3 72000000 		.4byte	.LVL322
 9830 0ef7 0200     		.2byte	0x2
 9831 0ef9 30       		.byte	0x30
 9832 0efa 9F       		.byte	0x9f
 9833 0efb 72000000 		.4byte	.LVL322
 9834 0eff 76000000 		.4byte	.LVL323
 9835 0f03 0200     		.2byte	0x2
 9836 0f05 31       		.byte	0x31
 9837 0f06 9F       		.byte	0x9f
 9838 0f07 76000000 		.4byte	.LVL323
 9839 0f0b 78000000 		.4byte	.LVL324
 9840 0f0f 0200     		.2byte	0x2
 9841 0f11 30       		.byte	0x30
 9842 0f12 9F       		.byte	0x9f
 9843 0f13 78000000 		.4byte	.LVL324
 9844 0f17 7A000000 		.4byte	.LVL325
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 263


 9845 0f1b 0100     		.2byte	0x1
 9846 0f1d 50       		.byte	0x50
 9847 0f1e 7A000000 		.4byte	.LVL325
 9848 0f22 80000000 		.4byte	.LVL327
 9849 0f26 0200     		.2byte	0x2
 9850 0f28 30       		.byte	0x30
 9851 0f29 9F       		.byte	0x9f
 9852 0f2a 80000000 		.4byte	.LVL327
 9853 0f2e 88000000 		.4byte	.LFE104
 9854 0f32 0100     		.2byte	0x1
 9855 0f34 50       		.byte	0x50
 9856 0f35 00000000 		.4byte	0
 9857 0f39 00000000 		.4byte	0
 9858              	.LLST104:
 9859 0f3d 00000000 		.4byte	.LVL330
 9860 0f41 09000000 		.4byte	.LVL331-1
 9861 0f45 0100     		.2byte	0x1
 9862 0f47 50       		.byte	0x50
 9863 0f48 09000000 		.4byte	.LVL331-1
 9864 0f4c AE000000 		.4byte	.LVL342
 9865 0f50 0100     		.2byte	0x1
 9866 0f52 55       		.byte	0x55
 9867 0f53 AE000000 		.4byte	.LVL342
 9868 0f57 B4000000 		.4byte	.LFE107
 9869 0f5b 0400     		.2byte	0x4
 9870 0f5d F3       		.byte	0xf3
 9871 0f5e 01       		.uleb128 0x1
 9872 0f5f 50       		.byte	0x50
 9873 0f60 9F       		.byte	0x9f
 9874 0f61 00000000 		.4byte	0
 9875 0f65 00000000 		.4byte	0
 9876              	.LLST105:
 9877 0f69 00000000 		.4byte	.LVL330
 9878 0f6d 09000000 		.4byte	.LVL331-1
 9879 0f71 0100     		.2byte	0x1
 9880 0f73 51       		.byte	0x51
 9881 0f74 09000000 		.4byte	.LVL331-1
 9882 0f78 7E000000 		.4byte	.LVL340
 9883 0f7c 0100     		.2byte	0x1
 9884 0f7e 54       		.byte	0x54
 9885 0f7f 7E000000 		.4byte	.LVL340
 9886 0f83 B4000000 		.4byte	.LFE107
 9887 0f87 0400     		.2byte	0x4
 9888 0f89 F3       		.byte	0xf3
 9889 0f8a 01       		.uleb128 0x1
 9890 0f8b 51       		.byte	0x51
 9891 0f8c 9F       		.byte	0x9f
 9892 0f8d 00000000 		.4byte	0
 9893 0f91 00000000 		.4byte	0
 9894              	.LLST106:
 9895 0f95 64000000 		.4byte	.LVL334
 9896 0f99 66000000 		.4byte	.LVL335
 9897 0f9d 0600     		.2byte	0x6
 9898 0f9f 74       		.byte	0x74
 9899 0fa0 00       		.sleb128 0
 9900 0fa1 70       		.byte	0x70
 9901 0fa2 00       		.sleb128 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 264


 9902 0fa3 22       		.byte	0x22
 9903 0fa4 9F       		.byte	0x9f
 9904 0fa5 66000000 		.4byte	.LVL335
 9905 0fa9 69000000 		.4byte	.LVL336-1
 9906 0fad 0100     		.2byte	0x1
 9907 0faf 50       		.byte	0x50
 9908 0fb0 00000000 		.4byte	0
 9909 0fb4 00000000 		.4byte	0
 9910              	.LLST107:
 9911 0fb8 7E000000 		.4byte	.LVL340
 9912 0fbc AE000000 		.4byte	.LVL342
 9913 0fc0 0100     		.2byte	0x1
 9914 0fc2 54       		.byte	0x54
 9915 0fc3 AE000000 		.4byte	.LVL342
 9916 0fc7 B4000000 		.4byte	.LFE107
 9917 0fcb 0100     		.2byte	0x1
 9918 0fcd 50       		.byte	0x50
 9919 0fce 00000000 		.4byte	0
 9920 0fd2 00000000 		.4byte	0
 9921              	.LLST108:
 9922 0fd6 00000000 		.4byte	.LVL343
 9923 0fda 0D000000 		.4byte	.LVL344-1
 9924 0fde 0100     		.2byte	0x1
 9925 0fe0 50       		.byte	0x50
 9926 0fe1 0D000000 		.4byte	.LVL344-1
 9927 0fe5 D0000000 		.4byte	.LVL358
 9928 0fe9 0100     		.2byte	0x1
 9929 0feb 57       		.byte	0x57
 9930 0fec D0000000 		.4byte	.LVL358
 9931 0ff0 D4000000 		.4byte	.LFE108
 9932 0ff4 0400     		.2byte	0x4
 9933 0ff6 F3       		.byte	0xf3
 9934 0ff7 01       		.uleb128 0x1
 9935 0ff8 50       		.byte	0x50
 9936 0ff9 9F       		.byte	0x9f
 9937 0ffa 00000000 		.4byte	0
 9938 0ffe 00000000 		.4byte	0
 9939              	.LLST109:
 9940 1002 00000000 		.4byte	.LVL343
 9941 1006 0D000000 		.4byte	.LVL344-1
 9942 100a 0100     		.2byte	0x1
 9943 100c 51       		.byte	0x51
 9944 100d 0D000000 		.4byte	.LVL344-1
 9945 1011 B8000000 		.4byte	.LVL354
 9946 1015 0100     		.2byte	0x1
 9947 1017 54       		.byte	0x54
 9948 1018 B8000000 		.4byte	.LVL354
 9949 101c BA000000 		.4byte	.LVL355
 9950 1020 0400     		.2byte	0x4
 9951 1022 F3       		.byte	0xf3
 9952 1023 01       		.uleb128 0x1
 9953 1024 51       		.byte	0x51
 9954 1025 9F       		.byte	0x9f
 9955 1026 BA000000 		.4byte	.LVL355
 9956 102a BC000000 		.4byte	.LVL356
 9957 102e 0100     		.2byte	0x1
 9958 1030 54       		.byte	0x54
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 265


 9959 1031 BC000000 		.4byte	.LVL356
 9960 1035 D4000000 		.4byte	.LFE108
 9961 1039 0400     		.2byte	0x4
 9962 103b F3       		.byte	0xf3
 9963 103c 01       		.uleb128 0x1
 9964 103d 51       		.byte	0x51
 9965 103e 9F       		.byte	0x9f
 9966 103f 00000000 		.4byte	0
 9967 1043 00000000 		.4byte	0
 9968              	.LLST110:
 9969 1047 00000000 		.4byte	.LVL343
 9970 104b 0D000000 		.4byte	.LVL344-1
 9971 104f 0100     		.2byte	0x1
 9972 1051 52       		.byte	0x52
 9973 1052 0D000000 		.4byte	.LVL344-1
 9974 1056 D0000000 		.4byte	.LVL358
 9975 105a 0100     		.2byte	0x1
 9976 105c 55       		.byte	0x55
 9977 105d D0000000 		.4byte	.LVL358
 9978 1061 D4000000 		.4byte	.LFE108
 9979 1065 0400     		.2byte	0x4
 9980 1067 F3       		.byte	0xf3
 9981 1068 01       		.uleb128 0x1
 9982 1069 52       		.byte	0x52
 9983 106a 9F       		.byte	0x9f
 9984 106b 00000000 		.4byte	0
 9985 106f 00000000 		.4byte	0
 9986              	.LLST111:
 9987 1073 00000000 		.4byte	.LVL343
 9988 1077 0D000000 		.4byte	.LVL344-1
 9989 107b 0100     		.2byte	0x1
 9990 107d 53       		.byte	0x53
 9991 107e 0D000000 		.4byte	.LVL344-1
 9992 1082 D0000000 		.4byte	.LVL358
 9993 1086 0100     		.2byte	0x1
 9994 1088 56       		.byte	0x56
 9995 1089 D0000000 		.4byte	.LVL358
 9996 108d D4000000 		.4byte	.LFE108
 9997 1091 0400     		.2byte	0x4
 9998 1093 F3       		.byte	0xf3
 9999 1094 01       		.uleb128 0x1
 10000 1095 53       		.byte	0x53
 10001 1096 9F       		.byte	0x9f
 10002 1097 00000000 		.4byte	0
 10003 109b 00000000 		.4byte	0
 10004              	.LLST112:
 10005 109f 7A000000 		.4byte	.LVL347
 10006 10a3 7C000000 		.4byte	.LVL348
 10007 10a7 0600     		.2byte	0x6
 10008 10a9 76       		.byte	0x76
 10009 10aa 00       		.sleb128 0
 10010 10ab 70       		.byte	0x70
 10011 10ac 00       		.sleb128 0
 10012 10ad 22       		.byte	0x22
 10013 10ae 9F       		.byte	0x9f
 10014 10af 7C000000 		.4byte	.LVL348
 10015 10b3 7F000000 		.4byte	.LVL349-1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 266


 10016 10b7 0100     		.2byte	0x1
 10017 10b9 50       		.byte	0x50
 10018 10ba 00000000 		.4byte	0
 10019 10be 00000000 		.4byte	0
 10020              	.LLST113:
 10021 10c2 B6000000 		.4byte	.LVL353
 10022 10c6 BA000000 		.4byte	.LVL355
 10023 10ca 0200     		.2byte	0x2
 10024 10cc 31       		.byte	0x31
 10025 10cd 9F       		.byte	0x9f
 10026 10ce BC000000 		.4byte	.LVL356
 10027 10d2 D0000000 		.4byte	.LVL358
 10028 10d6 0100     		.2byte	0x1
 10029 10d8 54       		.byte	0x54
 10030 10d9 D0000000 		.4byte	.LVL358
 10031 10dd D4000000 		.4byte	.LFE108
 10032 10e1 0100     		.2byte	0x1
 10033 10e3 50       		.byte	0x50
 10034 10e4 00000000 		.4byte	0
 10035 10e8 00000000 		.4byte	0
 10036              	.LLST114:
 10037 10ec 00000000 		.4byte	.LVL359
 10038 10f0 0D000000 		.4byte	.LVL361-1
 10039 10f4 0100     		.2byte	0x1
 10040 10f6 50       		.byte	0x50
 10041 10f7 0D000000 		.4byte	.LVL361-1
 10042 10fb A2000000 		.4byte	.LVL371
 10043 10ff 0100     		.2byte	0x1
 10044 1101 54       		.byte	0x54
 10045 1102 A2000000 		.4byte	.LVL371
 10046 1106 A8000000 		.4byte	.LFE109
 10047 110a 0400     		.2byte	0x4
 10048 110c F3       		.byte	0xf3
 10049 110d 01       		.uleb128 0x1
 10050 110e 50       		.byte	0x50
 10051 110f 9F       		.byte	0x9f
 10052 1110 00000000 		.4byte	0
 10053 1114 00000000 		.4byte	0
 10054              	.LLST115:
 10055 1118 00000000 		.4byte	.LVL359
 10056 111c 0D000000 		.4byte	.LVL361-1
 10057 1120 0100     		.2byte	0x1
 10058 1122 51       		.byte	0x51
 10059 1123 0D000000 		.4byte	.LVL361-1
 10060 1127 32000000 		.4byte	.LVL363
 10061 112b 0100     		.2byte	0x1
 10062 112d 57       		.byte	0x57
 10063 112e 32000000 		.4byte	.LVL363
 10064 1132 38000000 		.4byte	.LVL364
 10065 1136 0400     		.2byte	0x4
 10066 1138 F3       		.byte	0xf3
 10067 1139 01       		.uleb128 0x1
 10068 113a 51       		.byte	0x51
 10069 113b 9F       		.byte	0x9f
 10070 113c 38000000 		.4byte	.LVL364
 10071 1140 58000000 		.4byte	.LVL365
 10072 1144 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 267


 10073 1146 57       		.byte	0x57
 10074 1147 58000000 		.4byte	.LVL365
 10075 114b A8000000 		.4byte	.LFE109
 10076 114f 0400     		.2byte	0x4
 10077 1151 F3       		.byte	0xf3
 10078 1152 01       		.uleb128 0x1
 10079 1153 51       		.byte	0x51
 10080 1154 9F       		.byte	0x9f
 10081 1155 00000000 		.4byte	0
 10082 1159 00000000 		.4byte	0
 10083              	.LLST116:
 10084 115d 00000000 		.4byte	.LVL359
 10085 1161 0D000000 		.4byte	.LVL361-1
 10086 1165 0100     		.2byte	0x1
 10087 1167 52       		.byte	0x52
 10088 1168 0D000000 		.4byte	.LVL361-1
 10089 116c A8000000 		.4byte	.LFE109
 10090 1170 0400     		.2byte	0x4
 10091 1172 F3       		.byte	0xf3
 10092 1173 01       		.uleb128 0x1
 10093 1174 52       		.byte	0x52
 10094 1175 9F       		.byte	0x9f
 10095 1176 00000000 		.4byte	0
 10096 117a 00000000 		.4byte	0
 10097              	.LLST117:
 10098 117e 00000000 		.4byte	.LVL359
 10099 1182 0D000000 		.4byte	.LVL361-1
 10100 1186 0100     		.2byte	0x1
 10101 1188 53       		.byte	0x53
 10102 1189 0D000000 		.4byte	.LVL361-1
 10103 118d 6E000000 		.4byte	.LVL367
 10104 1191 0100     		.2byte	0x1
 10105 1193 56       		.byte	0x56
 10106 1194 6E000000 		.4byte	.LVL367
 10107 1198 A8000000 		.4byte	.LFE109
 10108 119c 0400     		.2byte	0x4
 10109 119e F3       		.byte	0xf3
 10110 119f 01       		.uleb128 0x1
 10111 11a0 53       		.byte	0x53
 10112 11a1 9F       		.byte	0x9f
 10113 11a2 00000000 		.4byte	0
 10114 11a6 00000000 		.4byte	0
 10115              	.LLST118:
 10116 11aa 0A000000 		.4byte	.LVL360
 10117 11ae 0D000000 		.4byte	.LVL361-1
 10118 11b2 0100     		.2byte	0x1
 10119 11b4 50       		.byte	0x50
 10120 11b5 0D000000 		.4byte	.LVL361-1
 10121 11b9 A2000000 		.4byte	.LVL371
 10122 11bd 0100     		.2byte	0x1
 10123 11bf 54       		.byte	0x54
 10124 11c0 A2000000 		.4byte	.LVL371
 10125 11c4 A8000000 		.4byte	.LFE109
 10126 11c8 0400     		.2byte	0x4
 10127 11ca F3       		.byte	0xf3
 10128 11cb 01       		.uleb128 0x1
 10129 11cc 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 268


 10130 11cd 9F       		.byte	0x9f
 10131 11ce 00000000 		.4byte	0
 10132 11d2 00000000 		.4byte	0
 10133              	.LLST119:
 10134 11d6 1A000000 		.4byte	.LVL362
 10135 11da 63000000 		.4byte	.LVL366-1
 10136 11de 0100     		.2byte	0x1
 10137 11e0 53       		.byte	0x53
 10138 11e1 00000000 		.4byte	0
 10139 11e5 00000000 		.4byte	0
 10140              	.LLST120:
 10141 11e9 0A000000 		.4byte	.LVL360
 10142 11ed 58000000 		.4byte	.LVL365
 10143 11f1 0200     		.2byte	0x2
 10144 11f3 31       		.byte	0x31
 10145 11f4 9F       		.byte	0x9f
 10146 11f5 58000000 		.4byte	.LVL365
 10147 11f9 A2000000 		.4byte	.LVL371
 10148 11fd 0100     		.2byte	0x1
 10149 11ff 55       		.byte	0x55
 10150 1200 A2000000 		.4byte	.LVL371
 10151 1204 A8000000 		.4byte	.LFE109
 10152 1208 0100     		.2byte	0x1
 10153 120a 50       		.byte	0x50
 10154 120b 00000000 		.4byte	0
 10155 120f 00000000 		.4byte	0
 10156              	.LLST121:
 10157 1213 00000000 		.4byte	.LVL372
 10158 1217 0F000000 		.4byte	.LVL374-1
 10159 121b 0100     		.2byte	0x1
 10160 121d 50       		.byte	0x50
 10161 121e 0F000000 		.4byte	.LVL374-1
 10162 1222 CA000000 		.4byte	.LVL387
 10163 1226 0100     		.2byte	0x1
 10164 1228 54       		.byte	0x54
 10165 1229 CA000000 		.4byte	.LVL387
 10166 122d D4000000 		.4byte	.LFE110
 10167 1231 0400     		.2byte	0x4
 10168 1233 F3       		.byte	0xf3
 10169 1234 01       		.uleb128 0x1
 10170 1235 50       		.byte	0x50
 10171 1236 9F       		.byte	0x9f
 10172 1237 00000000 		.4byte	0
 10173 123b 00000000 		.4byte	0
 10174              	.LLST122:
 10175 123f 00000000 		.4byte	.LVL372
 10176 1243 0F000000 		.4byte	.LVL374-1
 10177 1247 0100     		.2byte	0x1
 10178 1249 51       		.byte	0x51
 10179 124a 0F000000 		.4byte	.LVL374-1
 10180 124e CA000000 		.4byte	.LVL387
 10181 1252 0100     		.2byte	0x1
 10182 1254 58       		.byte	0x58
 10183 1255 CA000000 		.4byte	.LVL387
 10184 1259 D4000000 		.4byte	.LFE110
 10185 125d 0400     		.2byte	0x4
 10186 125f F3       		.byte	0xf3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 269


 10187 1260 01       		.uleb128 0x1
 10188 1261 51       		.byte	0x51
 10189 1262 9F       		.byte	0x9f
 10190 1263 00000000 		.4byte	0
 10191 1267 00000000 		.4byte	0
 10192              	.LLST123:
 10193 126b 00000000 		.4byte	.LVL372
 10194 126f 0F000000 		.4byte	.LVL374-1
 10195 1273 0100     		.2byte	0x1
 10196 1275 52       		.byte	0x52
 10197 1276 0F000000 		.4byte	.LVL374-1
 10198 127a D4000000 		.4byte	.LFE110
 10199 127e 0400     		.2byte	0x4
 10200 1280 F3       		.byte	0xf3
 10201 1281 01       		.uleb128 0x1
 10202 1282 52       		.byte	0x52
 10203 1283 9F       		.byte	0x9f
 10204 1284 00000000 		.4byte	0
 10205 1288 00000000 		.4byte	0
 10206              	.LLST124:
 10207 128c 00000000 		.4byte	.LVL372
 10208 1290 0F000000 		.4byte	.LVL374-1
 10209 1294 0100     		.2byte	0x1
 10210 1296 53       		.byte	0x53
 10211 1297 0F000000 		.4byte	.LVL374-1
 10212 129b 70000000 		.4byte	.LVL379
 10213 129f 0100     		.2byte	0x1
 10214 12a1 56       		.byte	0x56
 10215 12a2 70000000 		.4byte	.LVL379
 10216 12a6 9C000000 		.4byte	.LVL383
 10217 12aa 0400     		.2byte	0x4
 10218 12ac F3       		.byte	0xf3
 10219 12ad 01       		.uleb128 0x1
 10220 12ae 53       		.byte	0x53
 10221 12af 9F       		.byte	0x9f
 10222 12b0 9C000000 		.4byte	.LVL383
 10223 12b4 A6000000 		.4byte	.LVL385
 10224 12b8 0100     		.2byte	0x1
 10225 12ba 56       		.byte	0x56
 10226 12bb A6000000 		.4byte	.LVL385
 10227 12bf D4000000 		.4byte	.LFE110
 10228 12c3 0400     		.2byte	0x4
 10229 12c5 F3       		.byte	0xf3
 10230 12c6 01       		.uleb128 0x1
 10231 12c7 53       		.byte	0x53
 10232 12c8 9F       		.byte	0x9f
 10233 12c9 00000000 		.4byte	0
 10234 12cd 00000000 		.4byte	0
 10235              	.LLST125:
 10236 12d1 00000000 		.4byte	.LVL372
 10237 12d5 CA000000 		.4byte	.LVL387
 10238 12d9 0200     		.2byte	0x2
 10239 12db 91       		.byte	0x91
 10240 12dc 00       		.sleb128 0
 10241 12dd CA000000 		.4byte	.LVL387
 10242 12e1 D4000000 		.4byte	.LFE110
 10243 12e5 0200     		.2byte	0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 270


 10244 12e7 7D       		.byte	0x7d
 10245 12e8 00       		.sleb128 0
 10246 12e9 00000000 		.4byte	0
 10247 12ed 00000000 		.4byte	0
 10248              	.LLST126:
 10249 12f1 0C000000 		.4byte	.LVL373
 10250 12f5 0F000000 		.4byte	.LVL374-1
 10251 12f9 0100     		.2byte	0x1
 10252 12fb 50       		.byte	0x50
 10253 12fc 0F000000 		.4byte	.LVL374-1
 10254 1300 CA000000 		.4byte	.LVL387
 10255 1304 0100     		.2byte	0x1
 10256 1306 54       		.byte	0x54
 10257 1307 CA000000 		.4byte	.LVL387
 10258 130b D4000000 		.4byte	.LFE110
 10259 130f 0400     		.2byte	0x4
 10260 1311 F3       		.byte	0xf3
 10261 1312 01       		.uleb128 0x1
 10262 1313 50       		.byte	0x50
 10263 1314 9F       		.byte	0x9f
 10264 1315 00000000 		.4byte	0
 10265 1319 00000000 		.4byte	0
 10266              	.LLST127:
 10267 131d 1E000000 		.4byte	.LVL376
 10268 1321 68000000 		.4byte	.LVL378
 10269 1325 0100     		.2byte	0x1
 10270 1327 53       		.byte	0x53
 10271 1328 00000000 		.4byte	0
 10272 132c 00000000 		.4byte	0
 10273              	.LLST128:
 10274 1330 0C000000 		.4byte	.LVL373
 10275 1334 62000000 		.4byte	.LVL377
 10276 1338 0200     		.2byte	0x2
 10277 133a 31       		.byte	0x31
 10278 133b 9F       		.byte	0x9f
 10279 133c 62000000 		.4byte	.LVL377
 10280 1340 CA000000 		.4byte	.LVL387
 10281 1344 0100     		.2byte	0x1
 10282 1346 55       		.byte	0x55
 10283 1347 CA000000 		.4byte	.LVL387
 10284 134b D4000000 		.4byte	.LFE110
 10285 134f 0100     		.2byte	0x1
 10286 1351 50       		.byte	0x50
 10287 1352 00000000 		.4byte	0
 10288 1356 00000000 		.4byte	0
 10289              	.LLST129:
 10290 135a 12000000 		.4byte	.LVL375
 10291 135e 72000000 		.4byte	.LVL380
 10292 1362 0100     		.2byte	0x1
 10293 1364 50       		.byte	0x50
 10294 1365 72000000 		.4byte	.LVL380
 10295 1369 9C000000 		.4byte	.LVL383
 10296 136d 0100     		.2byte	0x1
 10297 136f 57       		.byte	0x57
 10298 1370 9C000000 		.4byte	.LVL383
 10299 1374 A2000000 		.4byte	.LVL384
 10300 1378 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 271


 10301 137a 50       		.byte	0x50
 10302 137b A2000000 		.4byte	.LVL384
 10303 137f CA000000 		.4byte	.LVL387
 10304 1383 0100     		.2byte	0x1
 10305 1385 57       		.byte	0x57
 10306 1386 00000000 		.4byte	0
 10307 138a 00000000 		.4byte	0
 10308              	.LLST130:
 10309 138e 00000000 		.4byte	.LVL388
 10310 1392 09000000 		.4byte	.LVL390-1
 10311 1396 0100     		.2byte	0x1
 10312 1398 50       		.byte	0x50
 10313 1399 09000000 		.4byte	.LVL390-1
 10314 139d 7E000000 		.4byte	.LVL401
 10315 13a1 0100     		.2byte	0x1
 10316 13a3 54       		.byte	0x54
 10317 13a4 7E000000 		.4byte	.LVL401
 10318 13a8 88000000 		.4byte	.LFE111
 10319 13ac 0400     		.2byte	0x4
 10320 13ae F3       		.byte	0xf3
 10321 13af 01       		.uleb128 0x1
 10322 13b0 50       		.byte	0x50
 10323 13b1 9F       		.byte	0x9f
 10324 13b2 00000000 		.4byte	0
 10325 13b6 00000000 		.4byte	0
 10326              	.LLST131:
 10327 13ba 00000000 		.4byte	.LVL388
 10328 13be 09000000 		.4byte	.LVL390-1
 10329 13c2 0100     		.2byte	0x1
 10330 13c4 51       		.byte	0x51
 10331 13c5 09000000 		.4byte	.LVL390-1
 10332 13c9 7E000000 		.4byte	.LVL401
 10333 13cd 0100     		.2byte	0x1
 10334 13cf 56       		.byte	0x56
 10335 13d0 7E000000 		.4byte	.LVL401
 10336 13d4 88000000 		.4byte	.LFE111
 10337 13d8 0400     		.2byte	0x4
 10338 13da F3       		.byte	0xf3
 10339 13db 01       		.uleb128 0x1
 10340 13dc 51       		.byte	0x51
 10341 13dd 9F       		.byte	0x9f
 10342 13de 00000000 		.4byte	0
 10343 13e2 00000000 		.4byte	0
 10344              	.LLST132:
 10345 13e6 06000000 		.4byte	.LVL389
 10346 13ea 09000000 		.4byte	.LVL390-1
 10347 13ee 0100     		.2byte	0x1
 10348 13f0 50       		.byte	0x50
 10349 13f1 09000000 		.4byte	.LVL390-1
 10350 13f5 7E000000 		.4byte	.LVL401
 10351 13f9 0100     		.2byte	0x1
 10352 13fb 54       		.byte	0x54
 10353 13fc 7E000000 		.4byte	.LVL401
 10354 1400 88000000 		.4byte	.LFE111
 10355 1404 0400     		.2byte	0x4
 10356 1406 F3       		.byte	0xf3
 10357 1407 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 272


 10358 1408 50       		.byte	0x50
 10359 1409 9F       		.byte	0x9f
 10360 140a 00000000 		.4byte	0
 10361 140e 00000000 		.4byte	0
 10362              	.LLST133:
 10363 1412 12000000 		.4byte	.LVL392
 10364 1416 24000000 		.4byte	.LVL393
 10365 141a 0100     		.2byte	0x1
 10366 141c 53       		.byte	0x53
 10367 141d 00000000 		.4byte	0
 10368 1421 00000000 		.4byte	0
 10369              	.LLST134:
 10370 1425 0C000000 		.4byte	.LVL391
 10371 1429 2E000000 		.4byte	.LVL394
 10372 142d 0100     		.2byte	0x1
 10373 142f 50       		.byte	0x50
 10374 1430 2E000000 		.4byte	.LVL394
 10375 1434 58000000 		.4byte	.LVL397
 10376 1438 0100     		.2byte	0x1
 10377 143a 55       		.byte	0x55
 10378 143b 58000000 		.4byte	.LVL397
 10379 143f 5E000000 		.4byte	.LVL398
 10380 1443 0100     		.2byte	0x1
 10381 1445 50       		.byte	0x50
 10382 1446 5E000000 		.4byte	.LVL398
 10383 144a 7E000000 		.4byte	.LVL401
 10384 144e 0100     		.2byte	0x1
 10385 1450 55       		.byte	0x55
 10386 1451 00000000 		.4byte	0
 10387 1455 00000000 		.4byte	0
 10388              	.LLST135:
 10389 1459 00000000 		.4byte	.LVL402
 10390 145d 0C000000 		.4byte	.LVL404
 10391 1461 0100     		.2byte	0x1
 10392 1463 50       		.byte	0x50
 10393 1464 00000000 		.4byte	0
 10394 1468 00000000 		.4byte	0
 10395              	.LLST136:
 10396 146c 02000000 		.4byte	.LVL403
 10397 1470 0C000000 		.4byte	.LVL404
 10398 1474 0100     		.2byte	0x1
 10399 1476 50       		.byte	0x50
 10400 1477 0C000000 		.4byte	.LVL404
 10401 147b 22000000 		.4byte	.LVL407
 10402 147f 0100     		.2byte	0x1
 10403 1481 54       		.byte	0x54
 10404 1482 24000000 		.4byte	.LVL408
 10405 1486 26000000 		.4byte	.LVL409
 10406 148a 0100     		.2byte	0x1
 10407 148c 54       		.byte	0x54
 10408 148d 00000000 		.4byte	0
 10409 1491 00000000 		.4byte	0
 10410              	.LLST137:
 10411 1495 20000000 		.4byte	.LVL406
 10412 1499 24000000 		.4byte	.LVL408
 10413 149d 0200     		.2byte	0x2
 10414 149f 31       		.byte	0x31
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 273


 10415 14a0 9F       		.byte	0x9f
 10416 14a1 26000000 		.4byte	.LVL409
 10417 14a5 2E000000 		.4byte	.LVL411
 10418 14a9 0100     		.2byte	0x1
 10419 14ab 54       		.byte	0x54
 10420 14ac 2E000000 		.4byte	.LVL411
 10421 14b0 34000000 		.4byte	.LFE112
 10422 14b4 0100     		.2byte	0x1
 10423 14b6 50       		.byte	0x50
 10424 14b7 00000000 		.4byte	0
 10425 14bb 00000000 		.4byte	0
 10426              		.section	.debug_aranges,"",%progbits
 10427 0000 9C010000 		.4byte	0x19c
 10428 0004 0200     		.2byte	0x2
 10429 0006 00000000 		.4byte	.Ldebug_info0
 10430 000a 04       		.byte	0x4
 10431 000b 00       		.byte	0
 10432 000c 0000     		.2byte	0
 10433 000e 0000     		.2byte	0
 10434 0010 00000000 		.4byte	.LFB73
 10435 0014 38000000 		.4byte	.LFE73-.LFB73
 10436 0018 00000000 		.4byte	.LFB98
 10437 001c 14000000 		.4byte	.LFE98-.LFB98
 10438 0020 00000000 		.4byte	.LFB101
 10439 0024 2C000000 		.4byte	.LFE101-.LFB101
 10440 0028 00000000 		.4byte	.LFB100
 10441 002c 12000000 		.4byte	.LFE100-.LFB100
 10442 0030 00000000 		.4byte	.LFB97
 10443 0034 3A000000 		.4byte	.LFE97-.LFB97
 10444 0038 00000000 		.4byte	.LFB93
 10445 003c 50000000 		.4byte	.LFE93-.LFB93
 10446 0040 00000000 		.4byte	.LFB94
 10447 0044 58000000 		.4byte	.LFE94-.LFB94
 10448 0048 00000000 		.4byte	.LFB96
 10449 004c 44000000 		.4byte	.LFE96-.LFB96
 10450 0050 00000000 		.4byte	.LFB64
 10451 0054 F4000000 		.4byte	.LFE64-.LFB64
 10452 0058 00000000 		.4byte	.LFB65
 10453 005c 94000000 		.4byte	.LFE65-.LFB65
 10454 0060 00000000 		.4byte	.LFB68
 10455 0064 60000000 		.4byte	.LFE68-.LFB68
 10456 0068 00000000 		.4byte	.LFB69
 10457 006c 20000000 		.4byte	.LFE69-.LFB69
 10458 0070 00000000 		.4byte	.LFB70
 10459 0074 20000000 		.4byte	.LFE70-.LFB70
 10460 0078 00000000 		.4byte	.LFB71
 10461 007c D8000000 		.4byte	.LFE71-.LFB71
 10462 0080 00000000 		.4byte	.LFB74
 10463 0084 68000000 		.4byte	.LFE74-.LFB74
 10464 0088 00000000 		.4byte	.LFB75
 10465 008c 80000000 		.4byte	.LFE75-.LFB75
 10466 0090 00000000 		.4byte	.LFB76
 10467 0094 4C000000 		.4byte	.LFE76-.LFB76
 10468 0098 00000000 		.4byte	.LFB77
 10469 009c 18000000 		.4byte	.LFE77-.LFB77
 10470 00a0 00000000 		.4byte	.LFB78
 10471 00a4 14000000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 274


 10472 00a8 00000000 		.4byte	.LFB80
 10473 00ac 0C000000 		.4byte	.LFE80-.LFB80
 10474 00b0 00000000 		.4byte	.LFB81
 10475 00b4 0C000000 		.4byte	.LFE81-.LFB81
 10476 00b8 00000000 		.4byte	.LFB82
 10477 00bc 0C000000 		.4byte	.LFE82-.LFB82
 10478 00c0 00000000 		.4byte	.LFB83
 10479 00c4 04010000 		.4byte	.LFE83-.LFB83
 10480 00c8 00000000 		.4byte	.LFB79
 10481 00cc CC000000 		.4byte	.LFE79-.LFB79
 10482 00d0 00000000 		.4byte	.LFB66
 10483 00d4 80000000 		.4byte	.LFE66-.LFB66
 10484 00d8 00000000 		.4byte	.LFB67
 10485 00dc 54000000 		.4byte	.LFE67-.LFB67
 10486 00e0 00000000 		.4byte	.LFB95
 10487 00e4 54000000 		.4byte	.LFE95-.LFB95
 10488 00e8 00000000 		.4byte	.LFB92
 10489 00ec 08000000 		.4byte	.LFE92-.LFB92
 10490 00f0 00000000 		.4byte	.LFB84
 10491 00f4 A8000000 		.4byte	.LFE84-.LFB84
 10492 00f8 00000000 		.4byte	.LFB72
 10493 00fc A0000000 		.4byte	.LFE72-.LFB72
 10494 0100 00000000 		.4byte	.LFB85
 10495 0104 5C000000 		.4byte	.LFE85-.LFB85
 10496 0108 00000000 		.4byte	.LFB86
 10497 010c 64000000 		.4byte	.LFE86-.LFB86
 10498 0110 00000000 		.4byte	.LFB87
 10499 0114 74000000 		.4byte	.LFE87-.LFB87
 10500 0118 00000000 		.4byte	.LFB88
 10501 011c 58000000 		.4byte	.LFE88-.LFB88
 10502 0120 00000000 		.4byte	.LFB89
 10503 0124 14000000 		.4byte	.LFE89-.LFB89
 10504 0128 00000000 		.4byte	.LFB90
 10505 012c 58000000 		.4byte	.LFE90-.LFB90
 10506 0130 00000000 		.4byte	.LFB91
 10507 0134 10000000 		.4byte	.LFE91-.LFB91
 10508 0138 00000000 		.4byte	.LFB99
 10509 013c 18000000 		.4byte	.LFE99-.LFB99
 10510 0140 00000000 		.4byte	.LFB102
 10511 0144 0C000000 		.4byte	.LFE102-.LFB102
 10512 0148 00000000 		.4byte	.LFB103
 10513 014c B4000000 		.4byte	.LFE103-.LFB103
 10514 0150 00000000 		.4byte	.LFB104
 10515 0154 88000000 		.4byte	.LFE104-.LFB104
 10516 0158 00000000 		.4byte	.LFB105
 10517 015c 20000000 		.4byte	.LFE105-.LFB105
 10518 0160 00000000 		.4byte	.LFB106
 10519 0164 20000000 		.4byte	.LFE106-.LFB106
 10520 0168 00000000 		.4byte	.LFB107
 10521 016c B4000000 		.4byte	.LFE107-.LFB107
 10522 0170 00000000 		.4byte	.LFB108
 10523 0174 D4000000 		.4byte	.LFE108-.LFB108
 10524 0178 00000000 		.4byte	.LFB109
 10525 017c A8000000 		.4byte	.LFE109-.LFB109
 10526 0180 00000000 		.4byte	.LFB110
 10527 0184 D4000000 		.4byte	.LFE110-.LFB110
 10528 0188 00000000 		.4byte	.LFB111
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 275


 10529 018c 88000000 		.4byte	.LFE111-.LFB111
 10530 0190 00000000 		.4byte	.LFB112
 10531 0194 34000000 		.4byte	.LFE112-.LFB112
 10532 0198 00000000 		.4byte	0
 10533 019c 00000000 		.4byte	0
 10534              		.section	.debug_ranges,"",%progbits
 10535              	.Ldebug_ranges0:
 10536 0000 1A000000 		.4byte	.LBB8
 10537 0004 46000000 		.4byte	.LBE8
 10538 0008 4A000000 		.4byte	.LBB10
 10539 000c C6000000 		.4byte	.LBE10
 10540 0010 00000000 		.4byte	0
 10541 0014 00000000 		.4byte	0
 10542 0018 0A000000 		.4byte	.LBB11
 10543 001c 20000000 		.4byte	.LBE11
 10544 0020 24000000 		.4byte	.LBB12
 10545 0024 2C000000 		.4byte	.LBE12
 10546 0028 34000000 		.4byte	.LBB13
 10547 002c 70000000 		.4byte	.LBE13
 10548 0030 00000000 		.4byte	0
 10549 0034 00000000 		.4byte	0
 10550 0038 00000000 		.4byte	.LFB73
 10551 003c 38000000 		.4byte	.LFE73
 10552 0040 00000000 		.4byte	.LFB98
 10553 0044 14000000 		.4byte	.LFE98
 10554 0048 00000000 		.4byte	.LFB101
 10555 004c 2C000000 		.4byte	.LFE101
 10556 0050 00000000 		.4byte	.LFB100
 10557 0054 12000000 		.4byte	.LFE100
 10558 0058 00000000 		.4byte	.LFB97
 10559 005c 3A000000 		.4byte	.LFE97
 10560 0060 00000000 		.4byte	.LFB93
 10561 0064 50000000 		.4byte	.LFE93
 10562 0068 00000000 		.4byte	.LFB94
 10563 006c 58000000 		.4byte	.LFE94
 10564 0070 00000000 		.4byte	.LFB96
 10565 0074 44000000 		.4byte	.LFE96
 10566 0078 00000000 		.4byte	.LFB64
 10567 007c F4000000 		.4byte	.LFE64
 10568 0080 00000000 		.4byte	.LFB65
 10569 0084 94000000 		.4byte	.LFE65
 10570 0088 00000000 		.4byte	.LFB68
 10571 008c 60000000 		.4byte	.LFE68
 10572 0090 00000000 		.4byte	.LFB69
 10573 0094 20000000 		.4byte	.LFE69
 10574 0098 00000000 		.4byte	.LFB70
 10575 009c 20000000 		.4byte	.LFE70
 10576 00a0 00000000 		.4byte	.LFB71
 10577 00a4 D8000000 		.4byte	.LFE71
 10578 00a8 00000000 		.4byte	.LFB74
 10579 00ac 68000000 		.4byte	.LFE74
 10580 00b0 00000000 		.4byte	.LFB75
 10581 00b4 80000000 		.4byte	.LFE75
 10582 00b8 00000000 		.4byte	.LFB76
 10583 00bc 4C000000 		.4byte	.LFE76
 10584 00c0 00000000 		.4byte	.LFB77
 10585 00c4 18000000 		.4byte	.LFE77
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 276


 10586 00c8 00000000 		.4byte	.LFB78
 10587 00cc 14000000 		.4byte	.LFE78
 10588 00d0 00000000 		.4byte	.LFB80
 10589 00d4 0C000000 		.4byte	.LFE80
 10590 00d8 00000000 		.4byte	.LFB81
 10591 00dc 0C000000 		.4byte	.LFE81
 10592 00e0 00000000 		.4byte	.LFB82
 10593 00e4 0C000000 		.4byte	.LFE82
 10594 00e8 00000000 		.4byte	.LFB83
 10595 00ec 04010000 		.4byte	.LFE83
 10596 00f0 00000000 		.4byte	.LFB79
 10597 00f4 CC000000 		.4byte	.LFE79
 10598 00f8 00000000 		.4byte	.LFB66
 10599 00fc 80000000 		.4byte	.LFE66
 10600 0100 00000000 		.4byte	.LFB67
 10601 0104 54000000 		.4byte	.LFE67
 10602 0108 00000000 		.4byte	.LFB95
 10603 010c 54000000 		.4byte	.LFE95
 10604 0110 00000000 		.4byte	.LFB92
 10605 0114 08000000 		.4byte	.LFE92
 10606 0118 00000000 		.4byte	.LFB84
 10607 011c A8000000 		.4byte	.LFE84
 10608 0120 00000000 		.4byte	.LFB72
 10609 0124 A0000000 		.4byte	.LFE72
 10610 0128 00000000 		.4byte	.LFB85
 10611 012c 5C000000 		.4byte	.LFE85
 10612 0130 00000000 		.4byte	.LFB86
 10613 0134 64000000 		.4byte	.LFE86
 10614 0138 00000000 		.4byte	.LFB87
 10615 013c 74000000 		.4byte	.LFE87
 10616 0140 00000000 		.4byte	.LFB88
 10617 0144 58000000 		.4byte	.LFE88
 10618 0148 00000000 		.4byte	.LFB89
 10619 014c 14000000 		.4byte	.LFE89
 10620 0150 00000000 		.4byte	.LFB90
 10621 0154 58000000 		.4byte	.LFE90
 10622 0158 00000000 		.4byte	.LFB91
 10623 015c 10000000 		.4byte	.LFE91
 10624 0160 00000000 		.4byte	.LFB99
 10625 0164 18000000 		.4byte	.LFE99
 10626 0168 00000000 		.4byte	.LFB102
 10627 016c 0C000000 		.4byte	.LFE102
 10628 0170 00000000 		.4byte	.LFB103
 10629 0174 B4000000 		.4byte	.LFE103
 10630 0178 00000000 		.4byte	.LFB104
 10631 017c 88000000 		.4byte	.LFE104
 10632 0180 00000000 		.4byte	.LFB105
 10633 0184 20000000 		.4byte	.LFE105
 10634 0188 00000000 		.4byte	.LFB106
 10635 018c 20000000 		.4byte	.LFE106
 10636 0190 00000000 		.4byte	.LFB107
 10637 0194 B4000000 		.4byte	.LFE107
 10638 0198 00000000 		.4byte	.LFB108
 10639 019c D4000000 		.4byte	.LFE108
 10640 01a0 00000000 		.4byte	.LFB109
 10641 01a4 A8000000 		.4byte	.LFE109
 10642 01a8 00000000 		.4byte	.LFB110
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 277


 10643 01ac D4000000 		.4byte	.LFE110
 10644 01b0 00000000 		.4byte	.LFB111
 10645 01b4 88000000 		.4byte	.LFE111
 10646 01b8 00000000 		.4byte	.LFB112
 10647 01bc 34000000 		.4byte	.LFE112
 10648 01c0 00000000 		.4byte	0
 10649 01c4 00000000 		.4byte	0
 10650              		.section	.debug_line,"",%progbits
 10651              	.Ldebug_line0:
 10652 0000 F4090000 		.section	.debug_str,"MS",%progbits,1
 10652      02008102 
 10652      00000201 
 10652      FB0E0D00 
 10652      01010101 
 10653              	.LASF46:
 10654 0000 65537573 		.ascii	"eSuspended\000"
 10654      70656E64 
 10654      656400
 10655              	.LASF232:
 10656 000b 75635265 		.ascii	"ucReturn\000"
 10656      7475726E 
 10656      00
 10657              	.LASF150:
 10658 0014 70784576 		.ascii	"pxEventList\000"
 10658      656E744C 
 10658      69737400 
 10659              	.LASF147:
 10660 0020 76546173 		.ascii	"vTaskSuspend\000"
 10660      6B537573 
 10660      70656E64 
 10660      00
 10661              	.LASF4:
 10662 002d 73697A65 		.ascii	"size_t\000"
 10662      5F7400
 10663              	.LASF36:
 10664 0034 4D696E69 		.ascii	"MiniListItem_t\000"
 10664      4C697374 
 10664      4974656D 
 10664      5F7400
 10665              	.LASF58:
 10666 0043 54696D65 		.ascii	"TimeOut_t\000"
 10666      4F75745F 
 10666      7400
 10667              	.LASF198:
 10668 004d 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 10668      7272656E 
 10668      744E756D 
 10668      6265724F 
 10668      66546173 
 10669              	.LASF181:
 10670 0064 756C5661 		.ascii	"ulValue\000"
 10670      6C756500 
 10671              	.LASF169:
 10672 006c 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 10672      736B5265 
 10672      73657445 
 10672      76656E74 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 278


 10672      4974656D 
 10673              	.LASF203:
 10674 0086 78596965 		.ascii	"xYieldPending\000"
 10674      6C645065 
 10674      6E64696E 
 10674      6700
 10675              	.LASF5:
 10676 0094 5F5F7569 		.ascii	"__uint8_t\000"
 10676      6E74385F 
 10676      7400
 10677              	.LASF185:
 10678 009e 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 10678      6B47656E 
 10678      65726963 
 10678      4E6F7469 
 10678      66794672 
 10679              	.LASF135:
 10680 00b8 7854696D 		.ascii	"xTimeIncrement\000"
 10680      65496E63 
 10680      72656D65 
 10680      6E7400
 10681              	.LASF197:
 10682 00c7 78537573 		.ascii	"xSuspendedTaskList\000"
 10682      70656E64 
 10682      65645461 
 10682      736B4C69 
 10682      737400
 10683              	.LASF137:
 10684 00da 76546173 		.ascii	"vTaskDelay\000"
 10684      6B44656C 
 10684      617900
 10685              	.LASF188:
 10686 00e5 78546173 		.ascii	"xTaskNotifyStateClear\000"
 10686      6B4E6F74 
 10686      69667953 
 10686      74617465 
 10686      436C6561 
 10687              	.LASF45:
 10688 00fb 65426C6F 		.ascii	"eBlocked\000"
 10688      636B6564 
 10688      00
 10689              	.LASF104:
 10690 0104 78546173 		.ascii	"xTaskGenericCreate\000"
 10690      6B47656E 
 10690      65726963 
 10690      43726561 
 10690      746500
 10691              	.LASF99:
 10692 0117 7854696D 		.ascii	"xTimeToWake\000"
 10692      65546F57 
 10692      616B6500 
 10693              	.LASF132:
 10694 0123 78416C72 		.ascii	"xAlreadyYielded\000"
 10694      65616479 
 10694      5969656C 
 10694      64656400 
 10695              	.LASF158:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 279


 10696 0133 70785469 		.ascii	"pxTimeOut\000"
 10696      6D654F75 
 10696      7400
 10697              	.LASF40:
 10698 013d 784C6973 		.ascii	"xListEnd\000"
 10698      74456E64 
 10698      00
 10699              	.LASF208:
 10700 0146 49544D5F 		.ascii	"ITM_RxBuffer\000"
 10700      52784275 
 10700      66666572 
 10700      00
 10701              	.LASF55:
 10702 0153 7854494D 		.ascii	"xTIME_OUT\000"
 10702      455F4F55 
 10702      5400
 10703              	.LASF35:
 10704 015d 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 10704      495F4C49 
 10704      53545F49 
 10704      54454D00 
 10705              	.LASF140:
 10706 016d 784C6973 		.ascii	"xListIsEmpty\000"
 10706      74497345 
 10706      6D707479 
 10706      00
 10707              	.LASF166:
 10708 017a 76546173 		.ascii	"vTaskPriorityInherit\000"
 10708      6B507269 
 10708      6F726974 
 10708      79496E68 
 10708      65726974 
 10709              	.LASF1:
 10710 018f 6C6F6E67 		.ascii	"long long int\000"
 10710      206C6F6E 
 10710      6720696E 
 10710      7400
 10711              	.LASF3:
 10712 019d 7369676E 		.ascii	"signed char\000"
 10712      65642063 
 10712      68617200 
 10713              	.LASF162:
 10714 01a9 76546173 		.ascii	"vTaskMissedYield\000"
 10714      6B4D6973 
 10714      73656459 
 10714      69656C64 
 10714      00
 10715              	.LASF116:
 10716 01ba 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 10716      696F7269 
 10716      74795573 
 10716      65644F6E 
 10716      456E7472 
 10717              	.LASF151:
 10718 01d0 78546963 		.ascii	"xTicksToWait\000"
 10718      6B73546F 
 10718      57616974 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 280


 10718      00
 10719              	.LASF206:
 10720 01dd 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 10720      74546173 
 10720      6B556E62 
 10720      6C6F636B 
 10720      54696D65 
 10721              	.LASF173:
 10722 01f2 78436C65 		.ascii	"xClearCountOnExit\000"
 10722      6172436F 
 10722      756E744F 
 10722      6E457869 
 10722      7400
 10723              	.LASF14:
 10724 0204 6C6F6E67 		.ascii	"long long unsigned int\000"
 10724      206C6F6E 
 10724      6720756E 
 10724      7369676E 
 10724      65642069 
 10725              	.LASF182:
 10726 021b 65416374 		.ascii	"eAction\000"
 10726      696F6E00 
 10727              	.LASF60:
 10728 0223 70764261 		.ascii	"pvBaseAddress\000"
 10728      73654164 
 10728      64726573 
 10728      7300
 10729              	.LASF128:
 10730 0231 78537769 		.ascii	"xSwitchRequired\000"
 10730      74636852 
 10730      65717569 
 10730      72656400 
 10731              	.LASF11:
 10732 0241 6C6F6E67 		.ascii	"long int\000"
 10732      20696E74 
 10732      00
 10733              	.LASF68:
 10734 024a 74736B54 		.ascii	"tskTaskControlBlock\000"
 10734      61736B43 
 10734      6F6E7472 
 10734      6F6C426C 
 10734      6F636B00 
 10735              	.LASF93:
 10736 025e 70784E65 		.ascii	"pxNewTCB\000"
 10736      77544342 
 10736      00
 10737              	.LASF50:
 10738 0267 65536574 		.ascii	"eSetBits\000"
 10738      42697473 
 10738      00
 10739              	.LASF126:
 10740 0270 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 10740      6B476574 
 10740      5469636B 
 10740      436F756E 
 10740      7446726F 
 10741              	.LASF42:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 281


 10742 0289 5461736B 		.ascii	"TaskHandle_t\000"
 10742      48616E64 
 10742      6C655F74 
 10742      00
 10743              	.LASF184:
 10744 0296 654F7269 		.ascii	"eOriginalNotifyState\000"
 10744      67696E61 
 10744      6C4E6F74 
 10744      69667953 
 10744      74617465 
 10745              	.LASF90:
 10746 02ab 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 10746      6C6C6F63 
 10746      61746554 
 10746      4342416E 
 10746      64537461 
 10747              	.LASF49:
 10748 02c2 654E6F41 		.ascii	"eNoAction\000"
 10748      6374696F 
 10748      6E00
 10749              	.LASF63:
 10750 02cc 4D656D6F 		.ascii	"MemoryRegion_t\000"
 10750      72795265 
 10750      67696F6E 
 10750      5F7400
 10751              	.LASF127:
 10752 02db 78546173 		.ascii	"xTaskIncrementTick\000"
 10752      6B496E63 
 10752      72656D65 
 10752      6E745469 
 10752      636B00
 10753              	.LASF18:
 10754 02ee 75696E74 		.ascii	"uint16_t\000"
 10754      31365F74 
 10754      00
 10755              	.LASF164:
 10756 02f7 70756345 		.ascii	"pucEndOfStack\000"
 10756      6E644F66 
 10756      53746163 
 10756      6B00
 10757              	.LASF25:
 10758 0305 42617365 		.ascii	"BaseType_t\000"
 10758      54797065 
 10758      5F7400
 10759              	.LASF65:
 10760 0310 65576169 		.ascii	"eWaitingNotification\000"
 10760      74696E67 
 10760      4E6F7469 
 10760      66696361 
 10760      74696F6E 
 10761              	.LASF106:
 10762 0325 65526574 		.ascii	"eReturn\000"
 10762      75726E00 
 10763              	.LASF218:
 10764 032d 764C6973 		.ascii	"vListInsertEnd\000"
 10764      74496E73 
 10764      65727445 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 282


 10764      6E6400
 10765              	.LASF183:
 10766 033c 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 10766      72657669 
 10766      6F75734E 
 10766      6F746966 
 10766      69636174 
 10767              	.LASF107:
 10768 0359 70785374 		.ascii	"pxStateList\000"
 10768      6174654C 
 10768      69737400 
 10769              	.LASF88:
 10770 0365 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 10770      65736574 
 10770      4E657874 
 10770      5461736B 
 10770      556E626C 
 10771              	.LASF91:
 10772 0381 75735374 		.ascii	"usStackDepth\000"
 10772      61636B44 
 10772      65707468 
 10772      00
 10773              	.LASF92:
 10774 038e 70757853 		.ascii	"puxStackBuffer\000"
 10774      7461636B 
 10774      42756666 
 10774      657200
 10775              	.LASF64:
 10776 039d 654E6F74 		.ascii	"eNotWaitingNotification\000"
 10776      57616974 
 10776      696E674E 
 10776      6F746966 
 10776      69636174 
 10777              	.LASF113:
 10778 03b5 76546173 		.ascii	"vTaskPrioritySet\000"
 10778      6B507269 
 10778      6F726974 
 10778      79536574 
 10778      00
 10779              	.LASF56:
 10780 03c6 784F7665 		.ascii	"xOverflowCount\000"
 10780      72666C6F 
 10780      77436F75 
 10780      6E7400
 10781              	.LASF122:
 10782 03d5 76546173 		.ascii	"vTaskStartScheduler\000"
 10782      6B537461 
 10782      72745363 
 10782      68656475 
 10782      6C657200 
 10783              	.LASF211:
 10784 03e9 7076506F 		.ascii	"pvPortMalloc\000"
 10784      72744D61 
 10784      6C6C6F63 
 10784      00
 10785              	.LASF149:
 10786 03f6 76546173 		.ascii	"vTaskPlaceOnEventList\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 283


 10786      6B506C61 
 10786      63654F6E 
 10786      4576656E 
 10786      744C6973 
 10787              	.LASF12:
 10788 040c 5F5F7569 		.ascii	"__uint32_t\000"
 10788      6E743332 
 10788      5F7400
 10789              	.LASF207:
 10790 0417 75785363 		.ascii	"uxSchedulerSuspended\000"
 10790      68656475 
 10790      6C657253 
 10790      75737065 
 10790      6E646564 
 10791              	.LASF0:
 10792 042c 756E7369 		.ascii	"unsigned int\000"
 10792      676E6564 
 10792      20696E74 
 10792      00
 10793              	.LASF81:
 10794 0439 78526574 		.ascii	"xReturn\000"
 10794      75726E00 
 10795              	.LASF129:
 10796 0441 78436F6E 		.ascii	"xConstTickCount\000"
 10796      73745469 
 10796      636B436F 
 10796      756E7400 
 10797              	.LASF57:
 10798 0451 7854696D 		.ascii	"xTimeOnEntering\000"
 10798      654F6E45 
 10798      6E746572 
 10798      696E6700 
 10799              	.LASF152:
 10800 0461 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 10800      6B506C61 
 10800      63654F6E 
 10800      556E6F72 
 10800      64657265 
 10801              	.LASF102:
 10802 0480 70784372 		.ascii	"pxCreatedTask\000"
 10802      65617465 
 10802      64546173 
 10802      6B00
 10803              	.LASF38:
 10804 048e 75784E75 		.ascii	"uxNumberOfItems\000"
 10804      6D626572 
 10804      4F664974 
 10804      656D7300 
 10805              	.LASF13:
 10806 049e 6C6F6E67 		.ascii	"long unsigned int\000"
 10806      20756E73 
 10806      69676E65 
 10806      6420696E 
 10806      7400
 10807              	.LASF44:
 10808 04b0 65526561 		.ascii	"eReady\000"
 10808      647900
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 284


 10809              	.LASF180:
 10810 04b7 78546173 		.ascii	"xTaskToNotify\000"
 10810      6B546F4E 
 10810      6F746966 
 10810      7900
 10811              	.LASF69:
 10812 04c5 7078546F 		.ascii	"pxTopOfStack\000"
 10812      704F6653 
 10812      7461636B 
 10812      00
 10813              	.LASF101:
 10814 04d2 70765061 		.ascii	"pvParameters\000"
 10814      72616D65 
 10814      74657273 
 10814      00
 10815              	.LASF186:
 10816 04df 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 10816      67686572 
 10816      5072696F 
 10816      72697479 
 10816      5461736B 
 10817              	.LASF79:
 10818 04f9 74736B54 		.ascii	"tskTCB\000"
 10818      434200
 10819              	.LASF226:
 10820 0500 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 10820      6C696361 
 10820      74696F6E 
 10820      53746163 
 10820      6B4F7665 
 10821              	.LASF146:
 10822 051e 7078436F 		.ascii	"pxConstList\000"
 10822      6E73744C 
 10822      69737400 
 10823              	.LASF9:
 10824 052a 73686F72 		.ascii	"short unsigned int\000"
 10824      7420756E 
 10824      7369676E 
 10824      65642069 
 10824      6E7400
 10825              	.LASF24:
 10826 053d 53746163 		.ascii	"StackType_t\000"
 10826      6B547970 
 10826      655F7400 
 10827              	.LASF82:
 10828 0549 70785443 		.ascii	"pxTCB\000"
 10828      4200
 10829              	.LASF117:
 10830 054f 78596965 		.ascii	"xYieldRequired\000"
 10830      6C645265 
 10830      71756972 
 10830      656400
 10831              	.LASF176:
 10832 055e 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 10832      7473546F 
 10832      436C6561 
 10832      724F6E45 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 285


 10832      6E747279 
 10833              	.LASF118:
 10834 0573 76546173 		.ascii	"vTaskResume\000"
 10834      6B526573 
 10834      756D6500 
 10835              	.LASF209:
 10836 057f 70784375 		.ascii	"pxCurrentTCB\000"
 10836      7272656E 
 10836      74544342 
 10836      00
 10837              	.LASF109:
 10838 058c 75785265 		.ascii	"uxReturn\000"
 10838      7475726E 
 10838      00
 10839              	.LASF97:
 10840 0595 70727649 		.ascii	"prvInitialiseTaskLists\000"
 10840      6E697469 
 10840      616C6973 
 10840      65546173 
 10840      6B4C6973 
 10841              	.LASF62:
 10842 05ac 756C5061 		.ascii	"ulParameters\000"
 10842      72616D65 
 10842      74657273 
 10842      00
 10843              	.LASF192:
 10844 05b9 70784465 		.ascii	"pxDelayedTaskList\000"
 10844      6C617965 
 10844      64546173 
 10844      6B4C6973 
 10844      7400
 10845              	.LASF124:
 10846 05cb 78546173 		.ascii	"xTaskGetTickCount\000"
 10846      6B476574 
 10846      5469636B 
 10846      436F756E 
 10846      7400
 10847              	.LASF7:
 10848 05dd 73686F72 		.ascii	"short int\000"
 10848      7420696E 
 10848      7400
 10849              	.LASF41:
 10850 05e7 4C697374 		.ascii	"List_t\000"
 10850      5F7400
 10851              	.LASF86:
 10852 05ee 70756353 		.ascii	"pucStackByte\000"
 10852      7461636B 
 10852      42797465 
 10852      00
 10853              	.LASF89:
 10854 05fb 70727644 		.ascii	"prvDeleteTCB\000"
 10854      656C6574 
 10854      65544342 
 10854      00
 10855              	.LASF196:
 10856 0608 75785461 		.ascii	"uxTasksDeleted\000"
 10856      736B7344 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 286


 10856      656C6574 
 10856      656400
 10857              	.LASF141:
 10858 0617 70727649 		.ascii	"prvIdleTask\000"
 10858      646C6554 
 10858      61736B00 
 10859              	.LASF142:
 10860 0623 76546173 		.ascii	"vTaskSwitchContext\000"
 10860      6B537769 
 10860      74636843 
 10860      6F6E7465 
 10860      787400
 10861              	.LASF51:
 10862 0636 65496E63 		.ascii	"eIncrement\000"
 10862      72656D65 
 10862      6E7400
 10863              	.LASF167:
 10864 0641 70784D75 		.ascii	"pxMutexHolder\000"
 10864      74657848 
 10864      6F6C6465 
 10864      7200
 10865              	.LASF73:
 10866 064f 70785374 		.ascii	"pxStack\000"
 10866      61636B00 
 10867              	.LASF213:
 10868 0657 764C6973 		.ascii	"vListInitialiseItem\000"
 10868      74496E69 
 10868      7469616C 
 10868      69736549 
 10868      74656D00 
 10869              	.LASF228:
 10870 066b 2E2E5C46 		.ascii	"..\\FreeRTOS\\tasks.c\000"
 10870      72656552 
 10870      544F535C 
 10870      7461736B 
 10870      732E6300 
 10871              	.LASF193:
 10872 067f 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 10872      6572666C 
 10872      6F774465 
 10872      6C617965 
 10872      64546173 
 10873              	.LASF15:
 10874 0699 73697A65 		.ascii	"sizetype\000"
 10874      74797065 
 10874      00
 10875              	.LASF96:
 10876 06a2 78526567 		.ascii	"xRegions\000"
 10876      696F6E73 
 10876      00
 10877              	.LASF187:
 10878 06ab 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 10878      6B4E6F74 
 10878      69667947 
 10878      69766546 
 10878      726F6D49 
 10879              	.LASF194:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 287


 10880 06c2 7850656E 		.ascii	"xPendingReadyList\000"
 10880      64696E67 
 10880      52656164 
 10880      794C6973 
 10880      7400
 10881              	.LASF195:
 10882 06d4 78546173 		.ascii	"xTasksWaitingTermination\000"
 10882      6B735761 
 10882      6974696E 
 10882      67546572 
 10882      6D696E61 
 10883              	.LASF148:
 10884 06ed 78546173 		.ascii	"xTaskToSuspend\000"
 10884      6B546F53 
 10884      75737065 
 10884      6E6400
 10885              	.LASF165:
 10886 06fc 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 10886      6B476574 
 10886      43757272 
 10886      656E7454 
 10886      61736B48 
 10887              	.LASF100:
 10888 0716 70785461 		.ascii	"pxTaskCode\000"
 10888      736B436F 
 10888      646500
 10889              	.LASF224:
 10890 0721 78506F72 		.ascii	"xPortStartScheduler\000"
 10890      74537461 
 10890      72745363 
 10890      68656475 
 10890      6C657200 
 10891              	.LASF71:
 10892 0735 78457665 		.ascii	"xEventListItem\000"
 10892      6E744C69 
 10892      73744974 
 10892      656D00
 10893              	.LASF87:
 10894 0744 756C436F 		.ascii	"ulCount\000"
 10894      756E7400 
 10895              	.LASF52:
 10896 074c 65536574 		.ascii	"eSetValueWithOverwrite\000"
 10896      56616C75 
 10896      65576974 
 10896      684F7665 
 10896      72777269 
 10897              	.LASF225:
 10898 0763 76506F72 		.ascii	"vPortEndScheduler\000"
 10898      74456E64 
 10898      53636865 
 10898      64756C65 
 10898      7200
 10899              	.LASF200:
 10900 0775 7578546F 		.ascii	"uxTopReadyPriority\000"
 10900      70526561 
 10900      64795072 
 10900      696F7269 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 288


 10900      747900
 10901              	.LASF134:
 10902 0788 70785072 		.ascii	"pxPreviousWakeTime\000"
 10902      6576696F 
 10902      75735761 
 10902      6B655469 
 10902      6D6500
 10903              	.LASF61:
 10904 079b 756C4C65 		.ascii	"ulLengthInBytes\000"
 10904      6E677468 
 10904      496E4279 
 10904      74657300 
 10905              	.LASF33:
 10906 07ab 4C697374 		.ascii	"ListItem_t\000"
 10906      4974656D 
 10906      5F7400
 10907              	.LASF145:
 10908 07b6 7578546F 		.ascii	"uxTopPriority\000"
 10908      70507269 
 10908      6F726974 
 10908      7900
 10909              	.LASF178:
 10910 07c4 70756C4E 		.ascii	"pulNotificationValue\000"
 10910      6F746966 
 10910      69636174 
 10910      696F6E56 
 10910      616C7565 
 10911              	.LASF30:
 10912 07d9 70785072 		.ascii	"pxPrevious\000"
 10912      6576696F 
 10912      757300
 10913              	.LASF103:
 10914 07e4 78546173 		.ascii	"xTaskToDelete\000"
 10914      6B546F44 
 10914      656C6574 
 10914      6500
 10915              	.LASF114:
 10916 07f2 75784E65 		.ascii	"uxNewPriority\000"
 10916      77507269 
 10916      6F726974 
 10916      7900
 10917              	.LASF21:
 10918 0800 666C6F61 		.ascii	"float\000"
 10918      7400
 10919              	.LASF39:
 10920 0806 7078496E 		.ascii	"pxIndex\000"
 10920      64657800 
 10921              	.LASF32:
 10922 080e 7076436F 		.ascii	"pvContainer\000"
 10922      6E746169 
 10922      6E657200 
 10923              	.LASF47:
 10924 081a 6544656C 		.ascii	"eDeleted\000"
 10924      65746564 
 10924      00
 10925              	.LASF105:
 10926 0823 65546173 		.ascii	"eTaskGetState\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 289


 10926      6B476574 
 10926      53746174 
 10926      6500
 10927              	.LASF59:
 10928 0831 784D454D 		.ascii	"xMEMORY_REGION\000"
 10928      4F52595F 
 10928      52454749 
 10928      4F4E00
 10929              	.LASF133:
 10930 0840 76546173 		.ascii	"vTaskDelayUntil\000"
 10930      6B44656C 
 10930      6179556E 
 10930      74696C00 
 10931              	.LASF84:
 10932 0850 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 10932      61736B43 
 10932      6865636B 
 10932      46726565 
 10932      53746163 
 10933              	.LASF19:
 10934 086b 696E7433 		.ascii	"int32_t\000"
 10934      325F7400 
 10935              	.LASF6:
 10936 0873 756E7369 		.ascii	"unsigned char\000"
 10936      676E6564 
 10936      20636861 
 10936      7200
 10937              	.LASF77:
 10938 0881 756C4E6F 		.ascii	"ulNotifiedValue\000"
 10938      74696669 
 10938      65645661 
 10938      6C756500 
 10939              	.LASF222:
 10940 0891 756C506F 		.ascii	"ulPortSetInterruptMask\000"
 10940      72745365 
 10940      74496E74 
 10940      65727275 
 10940      70744D61 
 10941              	.LASF115:
 10942 08a8 75784375 		.ascii	"uxCurrentBasePriority\000"
 10942      7272656E 
 10942      74426173 
 10942      65507269 
 10942      6F726974 
 10943              	.LASF80:
 10944 08be 5443425F 		.ascii	"TCB_t\000"
 10944      7400
 10945              	.LASF154:
 10946 08c4 7078556E 		.ascii	"pxUnblockedTCB\000"
 10946      626C6F63 
 10946      6B656454 
 10946      434200
 10947              	.LASF231:
 10948 08d3 756C4269 		.ascii	"ulBitmap\000"
 10948      746D6170 
 10948      00
 10949              	.LASF144:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 290


 10950 08dc 756C4368 		.ascii	"ulCheckValue\000"
 10950      65636B56 
 10950      616C7565 
 10950      00
 10951              	.LASF201:
 10952 08e9 78536368 		.ascii	"xSchedulerRunning\000"
 10952      6564756C 
 10952      65725275 
 10952      6E6E696E 
 10952      6700
 10953              	.LASF123:
 10954 08fb 76546173 		.ascii	"vTaskEndScheduler\000"
 10954      6B456E64 
 10954      53636865 
 10954      64756C65 
 10954      7200
 10955              	.LASF119:
 10956 090d 78546173 		.ascii	"xTaskToResume\000"
 10956      6B546F52 
 10956      6573756D 
 10956      6500
 10957              	.LASF131:
 10958 091b 78546173 		.ascii	"xTaskResumeAll\000"
 10958      6B526573 
 10958      756D6541 
 10958      6C6C00
 10959              	.LASF23:
 10960 092a 5461736B 		.ascii	"TaskFunction_t\000"
 10960      46756E63 
 10960      74696F6E 
 10960      5F7400
 10961              	.LASF37:
 10962 0939 784C4953 		.ascii	"xLIST\000"
 10962      5400
 10963              	.LASF110:
 10964 093f 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 10964      736B5072 
 10964      696F7269 
 10964      74794765 
 10964      7446726F 
 10965              	.LASF227:
 10966 0958 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 10966      43313120 
 10966      352E342E 
 10966      31203230 
 10966      31363036 
 10967 098b 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 10967      20726576 
 10967      6973696F 
 10967      6E203233 
 10967      37373135 
 10968 09be 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 10968      66756E63 
 10968      74696F6E 
 10968      2D736563 
 10968      74696F6E 
 10969              	.LASF70:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 291


 10970 09e6 7847656E 		.ascii	"xGenericListItem\000"
 10970      65726963 
 10970      4C697374 
 10970      4974656D 
 10970      00
 10971              	.LASF75:
 10972 09f7 75784261 		.ascii	"uxBasePriority\000"
 10972      73655072 
 10972      696F7269 
 10972      747900
 10973              	.LASF120:
 10974 0a06 78546173 		.ascii	"xTaskResumeFromISR\000"
 10974      6B526573 
 10974      756D6546 
 10974      726F6D49 
 10974      535200
 10975              	.LASF94:
 10976 0a19 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 10976      6E697469 
 10976      616C6973 
 10976      65544342 
 10976      56617269 
 10977              	.LASF210:
 10978 0a33 76506F72 		.ascii	"vPortFree\000"
 10978      74467265 
 10978      6500
 10979              	.LASF121:
 10980 0a3d 75785361 		.ascii	"uxSavedInterruptStatus\000"
 10980      76656449 
 10980      6E746572 
 10980      72757074 
 10980      53746174 
 10981              	.LASF136:
 10982 0a54 7853686F 		.ascii	"xShouldDelay\000"
 10982      756C6444 
 10982      656C6179 
 10982      00
 10983              	.LASF43:
 10984 0a61 6552756E 		.ascii	"eRunning\000"
 10984      6E696E67 
 10984      00
 10985              	.LASF139:
 10986 0a6a 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 10986      6865636B 
 10986      5461736B 
 10986      73576169 
 10986      74696E67 
 10987              	.LASF85:
 10988 0a8a 78546173 		.ascii	"xTask\000"
 10988      6B00
 10989              	.LASF223:
 10990 0a90 76506F72 		.ascii	"vPortClearInterruptMask\000"
 10990      74436C65 
 10990      6172496E 
 10990      74657272 
 10990      7570744D 
 10991              	.LASF229:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 292


 10992 0aa8 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_Simple_S"
 10992      536F435F 
 10992      43726561 
 10992      746F725C 
 10992      43593843 
 10993 0ad8 44525F52 		.ascii	"DR_Receiver\\CY8CKIT-059_Simple_SDR_Receiver.cydsn\000"
 10993      65636569 
 10993      7665725C 
 10993      43593843 
 10993      4B49542D 
 10994              	.LASF215:
 10995 0b0a 764C6973 		.ascii	"vListInsert\000"
 10995      74496E73 
 10995      65727400 
 10996              	.LASF161:
 10997 0b16 76546173 		.ascii	"vTaskSuspendAll\000"
 10997      6B537573 
 10997      70656E64 
 10997      416C6C00 
 10998              	.LASF76:
 10999 0b26 75784D75 		.ascii	"uxMutexesHeld\000"
 10999      74657865 
 10999      7348656C 
 10999      6400
 11000              	.LASF2:
 11001 0b34 6C6F6E67 		.ascii	"long double\000"
 11001      20646F75 
 11001      626C6500 
 11002              	.LASF98:
 11003 0b40 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11003      64644375 
 11003      7272656E 
 11003      74546173 
 11003      6B546F44 
 11004              	.LASF16:
 11005 0b5f 63686172 		.ascii	"char\000"
 11005      00
 11006              	.LASF78:
 11007 0b64 654E6F74 		.ascii	"eNotifyState\000"
 11007      69667953 
 11007      74617465 
 11007      00
 11008              	.LASF219:
 11009 0b71 76506F72 		.ascii	"vPortExitCritical\000"
 11009      74457869 
 11009      74437269 
 11009      74696361 
 11009      6C00
 11010              	.LASF153:
 11011 0b83 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11011      6B52656D 
 11011      6F766546 
 11011      726F6D45 
 11011      76656E74 
 11012              	.LASF171:
 11013 0b9c 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11013      736B496E 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 293


 11013      6372656D 
 11013      656E744D 
 11013      75746578 
 11014              	.LASF8:
 11015 0bba 5F5F7569 		.ascii	"__uint16_t\000"
 11015      6E743136 
 11015      5F7400
 11016              	.LASF112:
 11017 0bc5 76546173 		.ascii	"vTaskDelete\000"
 11017      6B44656C 
 11017      65746500 
 11018              	.LASF111:
 11019 0bd1 75785361 		.ascii	"uxSavedInterruptState\000"
 11019      76656449 
 11019      6E746572 
 11019      72757074 
 11019      53746174 
 11020              	.LASF10:
 11021 0be7 5F5F696E 		.ascii	"__int32_t\000"
 11021      7433325F 
 11021      7400
 11022              	.LASF159:
 11023 0bf1 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11023      6B436865 
 11023      636B466F 
 11023      7254696D 
 11023      654F7574 
 11024              	.LASF221:
 11025 0c06 75784C69 		.ascii	"uxListRemove\000"
 11025      73745265 
 11025      6D6F7665 
 11025      00
 11026              	.LASF156:
 11027 0c13 70784576 		.ascii	"pxEventListItem\000"
 11027      656E744C 
 11027      69737449 
 11027      74656D00 
 11028              	.LASF205:
 11029 0c23 75785461 		.ascii	"uxTaskNumber\000"
 11029      736B4E75 
 11029      6D626572 
 11029      00
 11030              	.LASF130:
 11031 0c30 70785465 		.ascii	"pxTemp\000"
 11031      6D7000
 11032              	.LASF34:
 11033 0c37 784C4953 		.ascii	"xLIST_ITEM\000"
 11033      545F4954 
 11033      454D00
 11034              	.LASF189:
 11035 0c42 70785265 		.ascii	"pxReadyTasksLists\000"
 11035      61647954 
 11035      61736B73 
 11035      4C697374 
 11035      7300
 11036              	.LASF170:
 11037 0c54 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 294


 11037      736B4765 
 11037      744E756D 
 11037      6265724F 
 11037      66546173 
 11038              	.LASF217:
 11039 0c6b 76506F72 		.ascii	"vPortEnterCritical\000"
 11039      74456E74 
 11039      65724372 
 11039      69746963 
 11039      616C00
 11040              	.LASF190:
 11041 0c7e 7844656C 		.ascii	"xDelayedTaskList1\000"
 11041      61796564 
 11041      5461736B 
 11041      4C697374 
 11041      3100
 11042              	.LASF191:
 11043 0c90 7844656C 		.ascii	"xDelayedTaskList2\000"
 11043      61796564 
 11043      5461736B 
 11043      4C697374 
 11043      3200
 11044              	.LASF204:
 11045 0ca2 784E756D 		.ascii	"xNumOfOverflows\000"
 11045      4F664F76 
 11045      6572666C 
 11045      6F777300 
 11046              	.LASF179:
 11047 0cb2 78546173 		.ascii	"xTaskGenericNotify\000"
 11047      6B47656E 
 11047      65726963 
 11047      4E6F7469 
 11047      667900
 11048              	.LASF220:
 11049 0cc5 76506F72 		.ascii	"vPortYield\000"
 11049      74596965 
 11049      6C6400
 11050              	.LASF199:
 11051 0cd0 78546963 		.ascii	"xTickCount\000"
 11051      6B436F75 
 11051      6E7400
 11052              	.LASF31:
 11053 0cdb 70764F77 		.ascii	"pvOwner\000"
 11053      6E657200 
 11054              	.LASF28:
 11055 0ce3 78497465 		.ascii	"xItemValue\000"
 11055      6D56616C 
 11055      756500
 11056              	.LASF212:
 11057 0cee 6D656D73 		.ascii	"memset\000"
 11057      657400
 11058              	.LASF230:
 11059 0cf5 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 11059      7274436F 
 11059      756E744C 
 11059      65616469 
 11059      6E675A65 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 295


 11060              	.LASF138:
 11061 0d0d 78546963 		.ascii	"xTicksToDelay\000"
 11061      6B73546F 
 11061      44656C61 
 11061      7900
 11062              	.LASF216:
 11063 0d1b 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11063      7274496E 
 11063      69746961 
 11063      6C697365 
 11063      53746163 
 11064              	.LASF67:
 11065 0d31 654E6F74 		.ascii	"eNotifyValue\000"
 11065      69667956 
 11065      616C7565 
 11065      00
 11066              	.LASF53:
 11067 0d3e 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11067      56616C75 
 11067      65576974 
 11067      686F7574 
 11067      4F766572 
 11068              	.LASF74:
 11069 0d58 70635461 		.ascii	"pcTaskName\000"
 11069      736B4E61 
 11069      6D6500
 11070              	.LASF17:
 11071 0d63 75696E74 		.ascii	"uint8_t\000"
 11071      385F7400 
 11072              	.LASF160:
 11073 0d6b 70785469 		.ascii	"pxTicksToWait\000"
 11073      636B7354 
 11073      6F576169 
 11073      7400
 11074              	.LASF83:
 11075 0d79 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11075      61736B49 
 11075      73546173 
 11075      6B537573 
 11075      70656E64 
 11076              	.LASF27:
 11077 0d90 5469636B 		.ascii	"TickType_t\000"
 11077      54797065 
 11077      5F7400
 11078              	.LASF29:
 11079 0d9b 70784E65 		.ascii	"pxNext\000"
 11079      787400
 11080              	.LASF48:
 11081 0da2 65546173 		.ascii	"eTaskState\000"
 11081      6B537461 
 11081      746500
 11082              	.LASF214:
 11083 0dad 764C6973 		.ascii	"vListInitialise\000"
 11083      74496E69 
 11083      7469616C 
 11083      69736500 
 11084              	.LASF54:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 296


 11085 0dbd 654E6F74 		.ascii	"eNotifyAction\000"
 11085      69667941 
 11085      6374696F 
 11085      6E00
 11086              	.LASF175:
 11087 0dcb 78546173 		.ascii	"xTaskNotifyWait\000"
 11087      6B4E6F74 
 11087      69667957 
 11087      61697400 
 11088              	.LASF174:
 11089 0ddb 756C5265 		.ascii	"ulReturn\000"
 11089      7475726E 
 11089      00
 11090              	.LASF66:
 11091 0de4 654E6F74 		.ascii	"eNotified\000"
 11091      69666965 
 11091      6400
 11092              	.LASF172:
 11093 0dee 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11093      736B4E6F 
 11093      74696679 
 11093      54616B65 
 11093      00
 11094              	.LASF168:
 11095 0dff 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11095      6B507269 
 11095      6F726974 
 11095      79446973 
 11095      696E6865 
 11096              	.LASF72:
 11097 0e17 75785072 		.ascii	"uxPriority\000"
 11097      696F7269 
 11097      747900
 11098              	.LASF163:
 11099 0e22 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11099      736B4765 
 11099      74537461 
 11099      636B4869 
 11099      67685761 
 11100              	.LASF125:
 11101 0e3e 78546963 		.ascii	"xTicks\000"
 11101      6B7300
 11102              	.LASF95:
 11103 0e45 70634E61 		.ascii	"pcName\000"
 11103      6D6500
 11104              	.LASF108:
 11105 0e4c 75785461 		.ascii	"uxTaskPriorityGet\000"
 11105      736B5072 
 11105      696F7269 
 11105      74794765 
 11105      7400
 11106              	.LASF157:
 11107 0e5e 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11107      6B536574 
 11107      54696D65 
 11107      4F757453 
 11107      74617465 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccIMtbmV.s 			page 297


 11108              	.LASF177:
 11109 0e73 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11109      7473546F 
 11109      436C6561 
 11109      724F6E45 
 11109      78697400 
 11110              	.LASF26:
 11111 0e87 55426173 		.ascii	"UBaseType_t\000"
 11111      65547970 
 11111      655F7400 
 11112              	.LASF22:
 11113 0e93 646F7562 		.ascii	"double\000"
 11113      6C6500
 11114              	.LASF155:
 11115 0e9a 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11115      6B52656D 
 11115      6F766546 
 11115      726F6D55 
 11115      6E6F7264 
 11116              	.LASF20:
 11117 0ebc 75696E74 		.ascii	"uint32_t\000"
 11117      33325F74 
 11117      00
 11118              	.LASF143:
 11119 0ec5 70756C53 		.ascii	"pulStack\000"
 11119      7461636B 
 11119      00
 11120              	.LASF202:
 11121 0ece 75785065 		.ascii	"uxPendedTicks\000"
 11121      6E646564 
 11121      5469636B 
 11121      7300
 11122              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
