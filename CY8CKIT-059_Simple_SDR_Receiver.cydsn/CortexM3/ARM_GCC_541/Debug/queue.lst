ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvIsQueueFull,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvIsQueueFull, %function
  24              	prvIsQueueFull:
  25              	.LFB85:
  26              		.file 1 "..\\FreeRTOS\\queue.c"
   1:..\FreeRTOS/queue.c **** /*
   2:..\FreeRTOS/queue.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:..\FreeRTOS/queue.c ****     All rights reserved
   4:..\FreeRTOS/queue.c **** 
   5:..\FreeRTOS/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS/queue.c **** 
   7:..\FreeRTOS/queue.c ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS/queue.c **** 
   9:..\FreeRTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS/queue.c **** 
  13:..\FreeRTOS/queue.c ****     ***************************************************************************
  14:..\FreeRTOS/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS/queue.c ****     ***************************************************************************
  19:..\FreeRTOS/queue.c **** 
  20:..\FreeRTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS/queue.c ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS/queue.c **** 
  25:..\FreeRTOS/queue.c ****     ***************************************************************************
  26:..\FreeRTOS/queue.c ****      *                                                                       *
  27:..\FreeRTOS/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS/queue.c ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS/queue.c ****      *                                                                       *
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 2


  32:..\FreeRTOS/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\FreeRTOS/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS/queue.c ****      *                                                                       *
  37:..\FreeRTOS/queue.c ****     ***************************************************************************
  38:..\FreeRTOS/queue.c **** 
  39:..\FreeRTOS/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS/queue.c ****     defined configASSERT()?
  42:..\FreeRTOS/queue.c **** 
  43:..\FreeRTOS/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS/queue.c ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS/queue.c ****     participating in the support forum.
  46:..\FreeRTOS/queue.c **** 
  47:..\FreeRTOS/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS/queue.c **** 
  52:..\FreeRTOS/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS/queue.c **** 
  56:..\FreeRTOS/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS/queue.c **** 
  59:..\FreeRTOS/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\FreeRTOS/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\FreeRTOS/queue.c **** 
  63:..\FreeRTOS/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS/queue.c ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS/queue.c **** 
  67:..\FreeRTOS/queue.c ****     1 tab == 4 spaces!
  68:..\FreeRTOS/queue.c **** */
  69:..\FreeRTOS/queue.c **** 
  70:..\FreeRTOS/queue.c **** #include <stdlib.h>
  71:..\FreeRTOS/queue.c **** #include <string.h>
  72:..\FreeRTOS/queue.c **** 
  73:..\FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:..\FreeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:..\FreeRTOS/queue.c **** task.h is included from an application file. */
  76:..\FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:..\FreeRTOS/queue.c **** 
  78:..\FreeRTOS/queue.c **** #include "FreeRTOS.h"
  79:..\FreeRTOS/queue.c **** #include "task.h"
  80:..\FreeRTOS/queue.c **** #include "queue.h"
  81:..\FreeRTOS/queue.c **** 
  82:..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:..\FreeRTOS/queue.c **** 	#include "croutine.h"
  84:..\FreeRTOS/queue.c **** #endif
  85:..\FreeRTOS/queue.c **** 
  86:..\FreeRTOS/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:..\FreeRTOS/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:..\FreeRTOS/queue.c **** header files above, but not in this file, in order to generate the correct
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 3


  89:..\FreeRTOS/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:..\FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:..\FreeRTOS/queue.c **** 
  92:..\FreeRTOS/queue.c **** 
  93:..\FreeRTOS/queue.c **** /* Constants used with the xRxLock and xTxLock structure members. */
  94:..\FreeRTOS/queue.c **** #define queueUNLOCKED					( ( BaseType_t ) -1 )
  95:..\FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( BaseType_t ) 0 )
  96:..\FreeRTOS/queue.c **** 
  97:..\FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:..\FreeRTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:..\FreeRTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:..\FreeRTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:..\FreeRTOS/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:..\FreeRTOS/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:..\FreeRTOS/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:..\FreeRTOS/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:..\FreeRTOS/queue.c **** against the coding standard (although an exception to the standard has been
 106:..\FreeRTOS/queue.c **** permitted where the dual use also significantly changes the type of the
 107:..\FreeRTOS/queue.c **** structure member). */
 108:..\FreeRTOS/queue.c **** #define pxMutexHolder					pcTail
 109:..\FreeRTOS/queue.c **** #define uxQueueType						pcHead
 110:..\FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:..\FreeRTOS/queue.c **** 
 112:..\FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:..\FreeRTOS/queue.c **** zero. */
 114:..\FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:..\FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:..\FreeRTOS/queue.c **** 
 117:..\FreeRTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:..\FreeRTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:..\FreeRTOS/queue.c **** 	performed just because a higher priority task has been woken. */
 120:..\FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:..\FreeRTOS/queue.c **** #else
 122:..\FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:..\FreeRTOS/queue.c **** #endif
 124:..\FreeRTOS/queue.c **** 
 125:..\FreeRTOS/queue.c **** /*
 126:..\FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
 127:..\FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:..\FreeRTOS/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:..\FreeRTOS/queue.c ****  */
 130:..\FreeRTOS/queue.c **** typedef struct QueueDefinition
 131:..\FreeRTOS/queue.c **** {
 132:..\FreeRTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:..\FreeRTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:..\FreeRTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:..\FreeRTOS/queue.c **** 
 136:..\FreeRTOS/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:..\FreeRTOS/queue.c **** 	{
 138:..\FreeRTOS/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:..\FreeRTOS/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:..\FreeRTOS/queue.c **** 	} u;
 141:..\FreeRTOS/queue.c **** 
 142:..\FreeRTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:..\FreeRTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:..\FreeRTOS/queue.c **** 
 145:..\FreeRTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 4


 146:..\FreeRTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:..\FreeRTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:..\FreeRTOS/queue.c **** 
 149:..\FreeRTOS/queue.c **** 	volatile BaseType_t xRxLock;	/*< Stores the number of items received from the queue (removed from 
 150:..\FreeRTOS/queue.c **** 	volatile BaseType_t xTxLock;	/*< Stores the number of items transmitted to the queue (added to the
 151:..\FreeRTOS/queue.c **** 
 152:..\FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 153:..\FreeRTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 154:..\FreeRTOS/queue.c **** 		uint8_t ucQueueType;
 155:..\FreeRTOS/queue.c **** 	#endif
 156:..\FreeRTOS/queue.c **** 
 157:..\FreeRTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 158:..\FreeRTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 159:..\FreeRTOS/queue.c **** 	#endif
 160:..\FreeRTOS/queue.c **** 
 161:..\FreeRTOS/queue.c **** } xQUEUE;
 162:..\FreeRTOS/queue.c **** 
 163:..\FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 164:..\FreeRTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 165:..\FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 166:..\FreeRTOS/queue.c **** 
 167:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 168:..\FreeRTOS/queue.c **** 
 169:..\FreeRTOS/queue.c **** /*
 170:..\FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 171:..\FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 172:..\FreeRTOS/queue.c ****  */
 173:..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 174:..\FreeRTOS/queue.c **** 
 175:..\FreeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 176:..\FreeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 177:..\FreeRTOS/queue.c **** 	more user friendly. */
 178:..\FreeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 179:..\FreeRTOS/queue.c **** 	{
 180:..\FreeRTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 181:..\FreeRTOS/queue.c **** 		QueueHandle_t xHandle;
 182:..\FreeRTOS/queue.c **** 	} xQueueRegistryItem;
 183:..\FreeRTOS/queue.c **** 
 184:..\FreeRTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 185:..\FreeRTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 186:..\FreeRTOS/queue.c **** 	debuggers. */
 187:..\FreeRTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 188:..\FreeRTOS/queue.c **** 
 189:..\FreeRTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 190:..\FreeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 191:..\FreeRTOS/queue.c **** 	array position being vacant. */
 192:..\FreeRTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 193:..\FreeRTOS/queue.c **** 
 194:..\FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 195:..\FreeRTOS/queue.c **** 
 196:..\FreeRTOS/queue.c **** /*
 197:..\FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 198:..\FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 199:..\FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 200:..\FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 201:..\FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 202:..\FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 5


 203:..\FreeRTOS/queue.c ****  */
 204:..\FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 205:..\FreeRTOS/queue.c **** 
 206:..\FreeRTOS/queue.c **** /*
 207:..\FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 208:..\FreeRTOS/queue.c ****  *
 209:..\FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 210:..\FreeRTOS/queue.c ****  */
 211:..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 212:..\FreeRTOS/queue.c **** 
 213:..\FreeRTOS/queue.c **** /*
 214:..\FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 215:..\FreeRTOS/queue.c ****  *
 216:..\FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 217:..\FreeRTOS/queue.c ****  */
 218:..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 219:..\FreeRTOS/queue.c **** 
 220:..\FreeRTOS/queue.c **** /*
 221:..\FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 222:..\FreeRTOS/queue.c ****  * back of the queue.
 223:..\FreeRTOS/queue.c ****  */
 224:..\FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 225:..\FreeRTOS/queue.c **** 
 226:..\FreeRTOS/queue.c **** /*
 227:..\FreeRTOS/queue.c ****  * Copies an item out of a queue.
 228:..\FreeRTOS/queue.c ****  */
 229:..\FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 230:..\FreeRTOS/queue.c **** 
 231:..\FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 232:..\FreeRTOS/queue.c **** 	/*
 233:..\FreeRTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 234:..\FreeRTOS/queue.c **** 	 * the queue set that the queue contains data.
 235:..\FreeRTOS/queue.c **** 	 */
 236:..\FreeRTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 237:..\FreeRTOS/queue.c **** #endif
 238:..\FreeRTOS/queue.c **** 
 239:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 240:..\FreeRTOS/queue.c **** 
 241:..\FreeRTOS/queue.c **** /*
 242:..\FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 243:..\FreeRTOS/queue.c ****  * accessing the queue event lists.
 244:..\FreeRTOS/queue.c ****  */
 245:..\FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 246:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();									\
 247:..\FreeRTOS/queue.c **** 	{														\
 248:..\FreeRTOS/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 249:..\FreeRTOS/queue.c **** 		{													\
 250:..\FreeRTOS/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 251:..\FreeRTOS/queue.c **** 		}													\
 252:..\FreeRTOS/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 253:..\FreeRTOS/queue.c **** 		{													\
 254:..\FreeRTOS/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 255:..\FreeRTOS/queue.c **** 		}													\
 256:..\FreeRTOS/queue.c **** 	}														\
 257:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL()
 258:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 259:..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 6


 260:..\FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 261:..\FreeRTOS/queue.c **** {
 262:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 263:..\FreeRTOS/queue.c **** 
 264:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 265:..\FreeRTOS/queue.c **** 
 266:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 267:..\FreeRTOS/queue.c **** 	{
 268:..\FreeRTOS/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 269:..\FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 270:..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 271:..\FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 272:..\FreeRTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 273:..\FreeRTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 274:..\FreeRTOS/queue.c **** 
 275:..\FreeRTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 276:..\FreeRTOS/queue.c **** 		{
 277:..\FreeRTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 278:..\FreeRTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 279:..\FreeRTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 280:..\FreeRTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 281:..\FreeRTOS/queue.c **** 			it will be possible to write to it. */
 282:..\FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 283:..\FreeRTOS/queue.c **** 			{
 284:..\FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 285:..\FreeRTOS/queue.c **** 				{
 286:..\FreeRTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 287:..\FreeRTOS/queue.c **** 				}
 288:..\FreeRTOS/queue.c **** 				else
 289:..\FreeRTOS/queue.c **** 				{
 290:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 291:..\FreeRTOS/queue.c **** 				}
 292:..\FreeRTOS/queue.c **** 			}
 293:..\FreeRTOS/queue.c **** 			else
 294:..\FreeRTOS/queue.c **** 			{
 295:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 296:..\FreeRTOS/queue.c **** 			}
 297:..\FreeRTOS/queue.c **** 		}
 298:..\FreeRTOS/queue.c **** 		else
 299:..\FreeRTOS/queue.c **** 		{
 300:..\FreeRTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 301:..\FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 302:..\FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 303:..\FreeRTOS/queue.c **** 		}
 304:..\FreeRTOS/queue.c **** 	}
 305:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 306:..\FreeRTOS/queue.c **** 
 307:..\FreeRTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 308:..\FreeRTOS/queue.c **** 	versions. */
 309:..\FreeRTOS/queue.c **** 	return pdPASS;
 310:..\FreeRTOS/queue.c **** }
 311:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 312:..\FreeRTOS/queue.c **** 
 313:..\FreeRTOS/queue.c **** QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, c
 314:..\FreeRTOS/queue.c **** {
 315:..\FreeRTOS/queue.c **** Queue_t *pxNewQueue;
 316:..\FreeRTOS/queue.c **** size_t xQueueSizeInBytes;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 7


 317:..\FreeRTOS/queue.c **** QueueHandle_t xReturn = NULL;
 318:..\FreeRTOS/queue.c **** 
 319:..\FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 320:..\FreeRTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 321:..\FreeRTOS/queue.c **** 	( void ) ucQueueType;
 322:..\FreeRTOS/queue.c **** 
 323:..\FreeRTOS/queue.c **** 	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 324:..\FreeRTOS/queue.c **** 
 325:..\FreeRTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 326:..\FreeRTOS/queue.c **** 	{
 327:..\FreeRTOS/queue.c **** 		/* There is not going to be a queue storage area. */
 328:..\FreeRTOS/queue.c **** 		xQueueSizeInBytes = ( size_t ) 0;
 329:..\FreeRTOS/queue.c **** 	}
 330:..\FreeRTOS/queue.c **** 	else
 331:..\FreeRTOS/queue.c **** 	{
 332:..\FreeRTOS/queue.c **** 		/* The queue is one byte longer than asked for to make wrap checking
 333:..\FreeRTOS/queue.c **** 		easier/faster. */
 334:..\FreeRTOS/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA 
 335:..\FreeRTOS/queue.c **** 	}
 336:..\FreeRTOS/queue.c **** 
 337:..\FreeRTOS/queue.c **** 	/* Allocate the new queue structure and storage area. */
 338:..\FreeRTOS/queue.c **** 	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 339:..\FreeRTOS/queue.c **** 
 340:..\FreeRTOS/queue.c **** 	if( pxNewQueue != NULL )
 341:..\FreeRTOS/queue.c **** 	{
 342:..\FreeRTOS/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 343:..\FreeRTOS/queue.c **** 		{
 344:..\FreeRTOS/queue.c **** 			/* No RAM was allocated for the queue storage area, but PC head
 345:..\FreeRTOS/queue.c **** 			cannot be set to NULL because NULL is used as a key to say the queue
 346:..\FreeRTOS/queue.c **** 			is used as a mutex.  Therefore just set pcHead to point to the queue
 347:..\FreeRTOS/queue.c **** 			as a benign value that is known to be within the memory map. */
 348:..\FreeRTOS/queue.c **** 			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 349:..\FreeRTOS/queue.c **** 		}
 350:..\FreeRTOS/queue.c **** 		else
 351:..\FreeRTOS/queue.c **** 		{
 352:..\FreeRTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 353:..\FreeRTOS/queue.c **** 			storage area. */
 354:..\FreeRTOS/queue.c **** 			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 355:..\FreeRTOS/queue.c **** 		}
 356:..\FreeRTOS/queue.c **** 
 357:..\FreeRTOS/queue.c **** 		/* Initialise the queue members as described above where the queue type
 358:..\FreeRTOS/queue.c **** 		is defined. */
 359:..\FreeRTOS/queue.c **** 		pxNewQueue->uxLength = uxQueueLength;
 360:..\FreeRTOS/queue.c **** 		pxNewQueue->uxItemSize = uxItemSize;
 361:..\FreeRTOS/queue.c **** 		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 362:..\FreeRTOS/queue.c **** 
 363:..\FreeRTOS/queue.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
 364:..\FreeRTOS/queue.c **** 		{
 365:..\FreeRTOS/queue.c **** 			pxNewQueue->ucQueueType = ucQueueType;
 366:..\FreeRTOS/queue.c **** 		}
 367:..\FreeRTOS/queue.c **** 		#endif /* configUSE_TRACE_FACILITY */
 368:..\FreeRTOS/queue.c **** 
 369:..\FreeRTOS/queue.c **** 		#if( configUSE_QUEUE_SETS == 1 )
 370:..\FreeRTOS/queue.c **** 		{
 371:..\FreeRTOS/queue.c **** 			pxNewQueue->pxQueueSetContainer = NULL;
 372:..\FreeRTOS/queue.c **** 		}
 373:..\FreeRTOS/queue.c **** 		#endif /* configUSE_QUEUE_SETS */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 8


 374:..\FreeRTOS/queue.c **** 
 375:..\FreeRTOS/queue.c **** 		traceQUEUE_CREATE( pxNewQueue );
 376:..\FreeRTOS/queue.c **** 		xReturn = pxNewQueue;
 377:..\FreeRTOS/queue.c **** 	}
 378:..\FreeRTOS/queue.c **** 	else
 379:..\FreeRTOS/queue.c **** 	{
 380:..\FreeRTOS/queue.c **** 		mtCOVERAGE_TEST_MARKER();
 381:..\FreeRTOS/queue.c **** 	}
 382:..\FreeRTOS/queue.c **** 
 383:..\FreeRTOS/queue.c **** 	configASSERT( xReturn );
 384:..\FreeRTOS/queue.c **** 
 385:..\FreeRTOS/queue.c **** 	return xReturn;
 386:..\FreeRTOS/queue.c **** }
 387:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 388:..\FreeRTOS/queue.c **** 
 389:..\FreeRTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 390:..\FreeRTOS/queue.c **** 
 391:..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 392:..\FreeRTOS/queue.c **** 	{
 393:..\FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 394:..\FreeRTOS/queue.c **** 
 395:..\FreeRTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 396:..\FreeRTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 397:..\FreeRTOS/queue.c **** 		( void ) ucQueueType;
 398:..\FreeRTOS/queue.c **** 
 399:..\FreeRTOS/queue.c **** 		/* Allocate the new queue structure. */
 400:..\FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 401:..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 402:..\FreeRTOS/queue.c **** 		{
 403:..\FreeRTOS/queue.c **** 			/* Information required for priority inheritance. */
 404:..\FreeRTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 405:..\FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 406:..\FreeRTOS/queue.c **** 
 407:..\FreeRTOS/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 408:..\FreeRTOS/queue.c **** 			of the queue. */
 409:..\FreeRTOS/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 410:..\FreeRTOS/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 411:..\FreeRTOS/queue.c **** 
 412:..\FreeRTOS/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 413:..\FreeRTOS/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 414:..\FreeRTOS/queue.c **** 			of the mutex. */
 415:..\FreeRTOS/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 416:..\FreeRTOS/queue.c **** 			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 417:..\FreeRTOS/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 418:..\FreeRTOS/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 419:..\FreeRTOS/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 420:..\FreeRTOS/queue.c **** 
 421:..\FreeRTOS/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 422:..\FreeRTOS/queue.c **** 			{
 423:..\FreeRTOS/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 424:..\FreeRTOS/queue.c **** 			}
 425:..\FreeRTOS/queue.c **** 			#endif
 426:..\FreeRTOS/queue.c **** 
 427:..\FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 428:..\FreeRTOS/queue.c **** 			{
 429:..\FreeRTOS/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 430:..\FreeRTOS/queue.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 9


 431:..\FreeRTOS/queue.c **** 			#endif
 432:..\FreeRTOS/queue.c **** 
 433:..\FreeRTOS/queue.c **** 			/* Ensure the event queues start with the correct state. */
 434:..\FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 435:..\FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 436:..\FreeRTOS/queue.c **** 
 437:..\FreeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 438:..\FreeRTOS/queue.c **** 
 439:..\FreeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 440:..\FreeRTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 441:..\FreeRTOS/queue.c **** 		}
 442:..\FreeRTOS/queue.c **** 		else
 443:..\FreeRTOS/queue.c **** 		{
 444:..\FreeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 445:..\FreeRTOS/queue.c **** 		}
 446:..\FreeRTOS/queue.c **** 
 447:..\FreeRTOS/queue.c **** 		return pxNewQueue;
 448:..\FreeRTOS/queue.c **** 	}
 449:..\FreeRTOS/queue.c **** 
 450:..\FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 451:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 452:..\FreeRTOS/queue.c **** 
 453:..\FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 454:..\FreeRTOS/queue.c **** 
 455:..\FreeRTOS/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 456:..\FreeRTOS/queue.c **** 	{
 457:..\FreeRTOS/queue.c **** 	void *pxReturn;
 458:..\FreeRTOS/queue.c **** 
 459:..\FreeRTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 460:..\FreeRTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 461:..\FreeRTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 462:..\FreeRTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 463:..\FreeRTOS/queue.c **** 		following critical section exiting and the function returning. */
 464:..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 465:..\FreeRTOS/queue.c **** 		{
 466:..\FreeRTOS/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 467:..\FreeRTOS/queue.c **** 			{
 468:..\FreeRTOS/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 469:..\FreeRTOS/queue.c **** 			}
 470:..\FreeRTOS/queue.c **** 			else
 471:..\FreeRTOS/queue.c **** 			{
 472:..\FreeRTOS/queue.c **** 				pxReturn = NULL;
 473:..\FreeRTOS/queue.c **** 			}
 474:..\FreeRTOS/queue.c **** 		}
 475:..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 476:..\FreeRTOS/queue.c **** 
 477:..\FreeRTOS/queue.c **** 		return pxReturn;
 478:..\FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 479:..\FreeRTOS/queue.c **** 
 480:..\FreeRTOS/queue.c **** #endif
 481:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 482:..\FreeRTOS/queue.c **** 
 483:..\FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 484:..\FreeRTOS/queue.c **** 
 485:..\FreeRTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 486:..\FreeRTOS/queue.c **** 	{
 487:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 10


 488:..\FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 489:..\FreeRTOS/queue.c **** 
 490:..\FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 491:..\FreeRTOS/queue.c **** 
 492:..\FreeRTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 493:..\FreeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 494:..\FreeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 495:..\FreeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 496:..\FreeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 497:..\FreeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 498:..\FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 499:..\FreeRTOS/queue.c **** 		{
 500:..\FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 501:..\FreeRTOS/queue.c **** 
 502:..\FreeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 503:..\FreeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 504:..\FreeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 505:..\FreeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 506:..\FreeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 507:..\FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 508:..\FreeRTOS/queue.c **** 
 509:..\FreeRTOS/queue.c **** 			/* Have we unwound the call count? */
 510:..\FreeRTOS/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 511:..\FreeRTOS/queue.c **** 			{
 512:..\FreeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 513:..\FreeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
 514:..\FreeRTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 515:..\FreeRTOS/queue.c **** 			}
 516:..\FreeRTOS/queue.c **** 			else
 517:..\FreeRTOS/queue.c **** 			{
 518:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 519:..\FreeRTOS/queue.c **** 			}
 520:..\FreeRTOS/queue.c **** 
 521:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
 522:..\FreeRTOS/queue.c **** 		}
 523:..\FreeRTOS/queue.c **** 		else
 524:..\FreeRTOS/queue.c **** 		{
 525:..\FreeRTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 526:..\FreeRTOS/queue.c **** 			holder. */
 527:..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 528:..\FreeRTOS/queue.c **** 
 529:..\FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 530:..\FreeRTOS/queue.c **** 		}
 531:..\FreeRTOS/queue.c **** 
 532:..\FreeRTOS/queue.c **** 		return xReturn;
 533:..\FreeRTOS/queue.c **** 	}
 534:..\FreeRTOS/queue.c **** 
 535:..\FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 536:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 537:..\FreeRTOS/queue.c **** 
 538:..\FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 539:..\FreeRTOS/queue.c **** 
 540:..\FreeRTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 541:..\FreeRTOS/queue.c **** 	{
 542:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 543:..\FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 544:..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 11


 545:..\FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 546:..\FreeRTOS/queue.c **** 
 547:..\FreeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 548:..\FreeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 549:..\FreeRTOS/queue.c **** 
 550:..\FreeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 551:..\FreeRTOS/queue.c **** 
 552:..\FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 553:..\FreeRTOS/queue.c **** 		{
 554:..\FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 555:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
 556:..\FreeRTOS/queue.c **** 		}
 557:..\FreeRTOS/queue.c **** 		else
 558:..\FreeRTOS/queue.c **** 		{
 559:..\FreeRTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 560:..\FreeRTOS/queue.c **** 
 561:..\FreeRTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 562:..\FreeRTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 563:..\FreeRTOS/queue.c **** 			before reaching here. */
 564:..\FreeRTOS/queue.c **** 			if( xReturn == pdPASS )
 565:..\FreeRTOS/queue.c **** 			{
 566:..\FreeRTOS/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 567:..\FreeRTOS/queue.c **** 			}
 568:..\FreeRTOS/queue.c **** 			else
 569:..\FreeRTOS/queue.c **** 			{
 570:..\FreeRTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 571:..\FreeRTOS/queue.c **** 			}
 572:..\FreeRTOS/queue.c **** 		}
 573:..\FreeRTOS/queue.c **** 
 574:..\FreeRTOS/queue.c **** 		return xReturn;
 575:..\FreeRTOS/queue.c **** 	}
 576:..\FreeRTOS/queue.c **** 
 577:..\FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 578:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 579:..\FreeRTOS/queue.c **** 
 580:..\FreeRTOS/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 581:..\FreeRTOS/queue.c **** 
 582:..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 583:..\FreeRTOS/queue.c **** 	{
 584:..\FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 585:..\FreeRTOS/queue.c **** 
 586:..\FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 587:..\FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 588:..\FreeRTOS/queue.c **** 
 589:..\FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 590:..\FreeRTOS/queue.c **** 
 591:..\FreeRTOS/queue.c **** 		if( xHandle != NULL )
 592:..\FreeRTOS/queue.c **** 		{
 593:..\FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 594:..\FreeRTOS/queue.c **** 
 595:..\FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 596:..\FreeRTOS/queue.c **** 		}
 597:..\FreeRTOS/queue.c **** 		else
 598:..\FreeRTOS/queue.c **** 		{
 599:..\FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 600:..\FreeRTOS/queue.c **** 		}
 601:..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 12


 602:..\FreeRTOS/queue.c **** 		configASSERT( xHandle );
 603:..\FreeRTOS/queue.c **** 		return xHandle;
 604:..\FreeRTOS/queue.c **** 	}
 605:..\FreeRTOS/queue.c **** 
 606:..\FreeRTOS/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 607:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 608:..\FreeRTOS/queue.c **** 
 609:..\FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 610:..\FreeRTOS/queue.c **** {
 611:..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 612:..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 613:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 614:..\FreeRTOS/queue.c **** 
 615:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 616:..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 617:..\FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 618:..\FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 619:..\FreeRTOS/queue.c **** 	{
 620:..\FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 621:..\FreeRTOS/queue.c **** 	}
 622:..\FreeRTOS/queue.c **** 	#endif
 623:..\FreeRTOS/queue.c **** 
 624:..\FreeRTOS/queue.c **** 
 625:..\FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 626:..\FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 627:..\FreeRTOS/queue.c **** 	of execution time efficiency. */
 628:..\FreeRTOS/queue.c **** 	for( ;; )
 629:..\FreeRTOS/queue.c **** 	{
 630:..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 631:..\FreeRTOS/queue.c **** 		{
 632:..\FreeRTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 633:..\FreeRTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 634:..\FreeRTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 635:..\FreeRTOS/queue.c **** 			queue is full. */
 636:..\FreeRTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 637:..\FreeRTOS/queue.c **** 			{
 638:..\FreeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 639:..\FreeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 640:..\FreeRTOS/queue.c **** 
 641:..\FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 642:..\FreeRTOS/queue.c **** 				{
 643:..\FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 644:..\FreeRTOS/queue.c **** 					{
 645:..\FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 646:..\FreeRTOS/queue.c **** 						{
 647:..\FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 648:..\FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 649:..\FreeRTOS/queue.c **** 							unblock. A context switch is required. */
 650:..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 651:..\FreeRTOS/queue.c **** 						}
 652:..\FreeRTOS/queue.c **** 						else
 653:..\FreeRTOS/queue.c **** 						{
 654:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 655:..\FreeRTOS/queue.c **** 						}
 656:..\FreeRTOS/queue.c **** 					}
 657:..\FreeRTOS/queue.c **** 					else
 658:..\FreeRTOS/queue.c **** 					{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 13


 659:..\FreeRTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
 660:..\FreeRTOS/queue.c **** 						queue then unblock it now. */
 661:..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 662:..\FreeRTOS/queue.c **** 						{
 663:..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 664:..\FreeRTOS/queue.c **** 							{
 665:..\FreeRTOS/queue.c **** 								/* The unblocked task has a priority higher than
 666:..\FreeRTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 667:..\FreeRTOS/queue.c **** 								do this from within the critical section - the
 668:..\FreeRTOS/queue.c **** 								kernel takes care of that. */
 669:..\FreeRTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 670:..\FreeRTOS/queue.c **** 							}
 671:..\FreeRTOS/queue.c **** 							else
 672:..\FreeRTOS/queue.c **** 							{
 673:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 674:..\FreeRTOS/queue.c **** 							}
 675:..\FreeRTOS/queue.c **** 						}
 676:..\FreeRTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 677:..\FreeRTOS/queue.c **** 						{
 678:..\FreeRTOS/queue.c **** 							/* This path is a special case that will only get
 679:..\FreeRTOS/queue.c **** 							executed if the task was holding multiple mutexes
 680:..\FreeRTOS/queue.c **** 							and the mutexes were given back in an order that is
 681:..\FreeRTOS/queue.c **** 							different to that in which they were taken. */
 682:..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 683:..\FreeRTOS/queue.c **** 						}
 684:..\FreeRTOS/queue.c **** 						else
 685:..\FreeRTOS/queue.c **** 						{
 686:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 687:..\FreeRTOS/queue.c **** 						}
 688:..\FreeRTOS/queue.c **** 					}
 689:..\FreeRTOS/queue.c **** 				}
 690:..\FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 691:..\FreeRTOS/queue.c **** 				{
 692:..\FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 693:..\FreeRTOS/queue.c **** 					queue then unblock it now. */
 694:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 695:..\FreeRTOS/queue.c **** 					{
 696:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 697:..\FreeRTOS/queue.c **** 						{
 698:..\FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 699:..\FreeRTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 700:..\FreeRTOS/queue.c **** 							this from within the critical section - the kernel
 701:..\FreeRTOS/queue.c **** 							takes care of that. */
 702:..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 703:..\FreeRTOS/queue.c **** 						}
 704:..\FreeRTOS/queue.c **** 						else
 705:..\FreeRTOS/queue.c **** 						{
 706:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 707:..\FreeRTOS/queue.c **** 						}
 708:..\FreeRTOS/queue.c **** 					}
 709:..\FreeRTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 710:..\FreeRTOS/queue.c **** 					{
 711:..\FreeRTOS/queue.c **** 						/* This path is a special case that will only get
 712:..\FreeRTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 713:..\FreeRTOS/queue.c **** 						the mutexes were given back in an order that is
 714:..\FreeRTOS/queue.c **** 						different to that in which they were taken. */
 715:..\FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 14


 716:..\FreeRTOS/queue.c **** 					}
 717:..\FreeRTOS/queue.c **** 					else
 718:..\FreeRTOS/queue.c **** 					{
 719:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 720:..\FreeRTOS/queue.c **** 					}
 721:..\FreeRTOS/queue.c **** 				}
 722:..\FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 723:..\FreeRTOS/queue.c **** 
 724:..\FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 725:..\FreeRTOS/queue.c **** 				return pdPASS;
 726:..\FreeRTOS/queue.c **** 			}
 727:..\FreeRTOS/queue.c **** 			else
 728:..\FreeRTOS/queue.c **** 			{
 729:..\FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 730:..\FreeRTOS/queue.c **** 				{
 731:..\FreeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 732:..\FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 733:..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 734:..\FreeRTOS/queue.c **** 
 735:..\FreeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 736:..\FreeRTOS/queue.c **** 					the function. */
 737:..\FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 738:..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 739:..\FreeRTOS/queue.c **** 				}
 740:..\FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 741:..\FreeRTOS/queue.c **** 				{
 742:..\FreeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 743:..\FreeRTOS/queue.c **** 					configure the timeout structure. */
 744:..\FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 745:..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 746:..\FreeRTOS/queue.c **** 				}
 747:..\FreeRTOS/queue.c **** 				else
 748:..\FreeRTOS/queue.c **** 				{
 749:..\FreeRTOS/queue.c **** 					/* Entry time was already set. */
 750:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 751:..\FreeRTOS/queue.c **** 				}
 752:..\FreeRTOS/queue.c **** 			}
 753:..\FreeRTOS/queue.c **** 		}
 754:..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 755:..\FreeRTOS/queue.c **** 
 756:..\FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 757:..\FreeRTOS/queue.c **** 		now the critical section has been exited. */
 758:..\FreeRTOS/queue.c **** 
 759:..\FreeRTOS/queue.c **** 		vTaskSuspendAll();
 760:..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 761:..\FreeRTOS/queue.c **** 
 762:..\FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 763:..\FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 764:..\FreeRTOS/queue.c **** 		{
 765:..\FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 766:..\FreeRTOS/queue.c **** 			{
 767:..\FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 768:..\FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 769:..\FreeRTOS/queue.c **** 
 770:..\FreeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 771:..\FreeRTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
 772:..\FreeRTOS/queue.c **** 				remove this task from the event	list again - but as the
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 15


 773:..\FreeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 774:..\FreeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 775:..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 776:..\FreeRTOS/queue.c **** 
 777:..\FreeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 778:..\FreeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 779:..\FreeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 780:..\FreeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 781:..\FreeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 782:..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 783:..\FreeRTOS/queue.c **** 				{
 784:..\FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 785:..\FreeRTOS/queue.c **** 				}
 786:..\FreeRTOS/queue.c **** 			}
 787:..\FreeRTOS/queue.c **** 			else
 788:..\FreeRTOS/queue.c **** 			{
 789:..\FreeRTOS/queue.c **** 				/* Try again. */
 790:..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 791:..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 792:..\FreeRTOS/queue.c **** 			}
 793:..\FreeRTOS/queue.c **** 		}
 794:..\FreeRTOS/queue.c **** 		else
 795:..\FreeRTOS/queue.c **** 		{
 796:..\FreeRTOS/queue.c **** 			/* The timeout has expired. */
 797:..\FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 798:..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 799:..\FreeRTOS/queue.c **** 
 800:..\FreeRTOS/queue.c **** 			/* Return to the original privilege level before exiting the
 801:..\FreeRTOS/queue.c **** 			function. */
 802:..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 803:..\FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 804:..\FreeRTOS/queue.c **** 		}
 805:..\FreeRTOS/queue.c **** 	}
 806:..\FreeRTOS/queue.c **** }
 807:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 808:..\FreeRTOS/queue.c **** 
 809:..\FreeRTOS/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 810:..\FreeRTOS/queue.c **** 
 811:..\FreeRTOS/queue.c **** 	BaseType_t xQueueAltGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_
 812:..\FreeRTOS/queue.c **** 	{
 813:..\FreeRTOS/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 814:..\FreeRTOS/queue.c **** 	TimeOut_t xTimeOut;
 815:..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 816:..\FreeRTOS/queue.c **** 
 817:..\FreeRTOS/queue.c **** 		configASSERT( pxQueue );
 818:..\FreeRTOS/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 819:..\FreeRTOS/queue.c **** 
 820:..\FreeRTOS/queue.c **** 		for( ;; )
 821:..\FreeRTOS/queue.c **** 		{
 822:..\FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 823:..\FreeRTOS/queue.c **** 			{
 824:..\FreeRTOS/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 825:..\FreeRTOS/queue.c **** 				the highest priority task wanting to access the queue. */
 826:..\FreeRTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 827:..\FreeRTOS/queue.c **** 				{
 828:..\FreeRTOS/queue.c **** 					traceQUEUE_SEND( pxQueue );
 829:..\FreeRTOS/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 16


 830:..\FreeRTOS/queue.c **** 
 831:..\FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 832:..\FreeRTOS/queue.c **** 					queue then unblock it now. */
 833:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 834:..\FreeRTOS/queue.c **** 					{
 835:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 836:..\FreeRTOS/queue.c **** 						{
 837:..\FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 838:..\FreeRTOS/queue.c **** 							our own so yield immediately. */
 839:..\FreeRTOS/queue.c **** 							portYIELD_WITHIN_API();
 840:..\FreeRTOS/queue.c **** 						}
 841:..\FreeRTOS/queue.c **** 						else
 842:..\FreeRTOS/queue.c **** 						{
 843:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 844:..\FreeRTOS/queue.c **** 						}
 845:..\FreeRTOS/queue.c **** 					}
 846:..\FreeRTOS/queue.c **** 					else
 847:..\FreeRTOS/queue.c **** 					{
 848:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 849:..\FreeRTOS/queue.c **** 					}
 850:..\FreeRTOS/queue.c **** 
 851:..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 852:..\FreeRTOS/queue.c **** 					return pdPASS;
 853:..\FreeRTOS/queue.c **** 				}
 854:..\FreeRTOS/queue.c **** 				else
 855:..\FreeRTOS/queue.c **** 				{
 856:..\FreeRTOS/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 857:..\FreeRTOS/queue.c **** 					{
 858:..\FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 859:..\FreeRTOS/queue.c **** 						return errQUEUE_FULL;
 860:..\FreeRTOS/queue.c **** 					}
 861:..\FreeRTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 862:..\FreeRTOS/queue.c **** 					{
 863:..\FreeRTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 864:..\FreeRTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
 865:..\FreeRTOS/queue.c **** 					}
 866:..\FreeRTOS/queue.c **** 				}
 867:..\FreeRTOS/queue.c **** 			}
 868:..\FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 869:..\FreeRTOS/queue.c **** 
 870:..\FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 871:..\FreeRTOS/queue.c **** 			{
 872:..\FreeRTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 873:..\FreeRTOS/queue.c **** 				{
 874:..\FreeRTOS/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 875:..\FreeRTOS/queue.c **** 					{
 876:..\FreeRTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 877:..\FreeRTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 878:..\FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
 879:..\FreeRTOS/queue.c **** 					}
 880:..\FreeRTOS/queue.c **** 					else
 881:..\FreeRTOS/queue.c **** 					{
 882:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 883:..\FreeRTOS/queue.c **** 					}
 884:..\FreeRTOS/queue.c **** 				}
 885:..\FreeRTOS/queue.c **** 				else
 886:..\FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 17


 887:..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 888:..\FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 889:..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 890:..\FreeRTOS/queue.c **** 				}
 891:..\FreeRTOS/queue.c **** 			}
 892:..\FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
 893:..\FreeRTOS/queue.c **** 		}
 894:..\FreeRTOS/queue.c **** 	}
 895:..\FreeRTOS/queue.c **** 
 896:..\FreeRTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 897:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 898:..\FreeRTOS/queue.c **** 
 899:..\FreeRTOS/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 900:..\FreeRTOS/queue.c **** 
 901:..\FreeRTOS/queue.c **** 	BaseType_t xQueueAltGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicks
 902:..\FreeRTOS/queue.c **** 	{
 903:..\FreeRTOS/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 904:..\FreeRTOS/queue.c **** 	TimeOut_t xTimeOut;
 905:..\FreeRTOS/queue.c **** 	int8_t *pcOriginalReadPosition;
 906:..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 907:..\FreeRTOS/queue.c **** 
 908:..\FreeRTOS/queue.c **** 		configASSERT( pxQueue );
 909:..\FreeRTOS/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 910:..\FreeRTOS/queue.c **** 
 911:..\FreeRTOS/queue.c **** 		for( ;; )
 912:..\FreeRTOS/queue.c **** 		{
 913:..\FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
 914:..\FreeRTOS/queue.c **** 			{
 915:..\FreeRTOS/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 916:..\FreeRTOS/queue.c **** 				{
 917:..\FreeRTOS/queue.c **** 					/* Remember our read position in case we are just peeking. */
 918:..\FreeRTOS/queue.c **** 					pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 919:..\FreeRTOS/queue.c **** 
 920:..\FreeRTOS/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 921:..\FreeRTOS/queue.c **** 
 922:..\FreeRTOS/queue.c **** 					if( xJustPeeking == pdFALSE )
 923:..\FreeRTOS/queue.c **** 					{
 924:..\FreeRTOS/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 925:..\FreeRTOS/queue.c **** 
 926:..\FreeRTOS/queue.c **** 						/* Data is actually being removed (not just peeked). */
 927:..\FreeRTOS/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 928:..\FreeRTOS/queue.c **** 
 929:..\FreeRTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 930:..\FreeRTOS/queue.c **** 						{
 931:..\FreeRTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 932:..\FreeRTOS/queue.c **** 							{
 933:..\FreeRTOS/queue.c **** 								/* Record the information required to implement
 934:..\FreeRTOS/queue.c **** 								priority inheritance should it become necessary. */
 935:..\FreeRTOS/queue.c **** 								pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle();
 936:..\FreeRTOS/queue.c **** 							}
 937:..\FreeRTOS/queue.c **** 							else
 938:..\FreeRTOS/queue.c **** 							{
 939:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 940:..\FreeRTOS/queue.c **** 							}
 941:..\FreeRTOS/queue.c **** 						}
 942:..\FreeRTOS/queue.c **** 						#endif
 943:..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 18


 944:..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 945:..\FreeRTOS/queue.c **** 						{
 946:..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 947:..\FreeRTOS/queue.c **** 							{
 948:..\FreeRTOS/queue.c **** 								portYIELD_WITHIN_API();
 949:..\FreeRTOS/queue.c **** 							}
 950:..\FreeRTOS/queue.c **** 							else
 951:..\FreeRTOS/queue.c **** 							{
 952:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 953:..\FreeRTOS/queue.c **** 							}
 954:..\FreeRTOS/queue.c **** 						}
 955:..\FreeRTOS/queue.c **** 					}
 956:..\FreeRTOS/queue.c **** 					else
 957:..\FreeRTOS/queue.c **** 					{
 958:..\FreeRTOS/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 959:..\FreeRTOS/queue.c **** 
 960:..\FreeRTOS/queue.c **** 						/* The data is not being removed, so reset our read
 961:..\FreeRTOS/queue.c **** 						pointer. */
 962:..\FreeRTOS/queue.c **** 						pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 963:..\FreeRTOS/queue.c **** 
 964:..\FreeRTOS/queue.c **** 						/* The data is being left in the queue, so see if there are
 965:..\FreeRTOS/queue.c **** 						any other tasks waiting for the data. */
 966:..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 967:..\FreeRTOS/queue.c **** 						{
 968:..\FreeRTOS/queue.c **** 							/* Tasks that are removed from the event list will get added to
 969:..\FreeRTOS/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 970:..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 971:..\FreeRTOS/queue.c **** 							{
 972:..\FreeRTOS/queue.c **** 								/* The task waiting has a higher priority than this task. */
 973:..\FreeRTOS/queue.c **** 								portYIELD_WITHIN_API();
 974:..\FreeRTOS/queue.c **** 							}
 975:..\FreeRTOS/queue.c **** 							else
 976:..\FreeRTOS/queue.c **** 							{
 977:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 978:..\FreeRTOS/queue.c **** 							}
 979:..\FreeRTOS/queue.c **** 						}
 980:..\FreeRTOS/queue.c **** 						else
 981:..\FreeRTOS/queue.c **** 						{
 982:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 983:..\FreeRTOS/queue.c **** 						}
 984:..\FreeRTOS/queue.c **** 					}
 985:..\FreeRTOS/queue.c **** 
 986:..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 987:..\FreeRTOS/queue.c **** 					return pdPASS;
 988:..\FreeRTOS/queue.c **** 				}
 989:..\FreeRTOS/queue.c **** 				else
 990:..\FreeRTOS/queue.c **** 				{
 991:..\FreeRTOS/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 992:..\FreeRTOS/queue.c **** 					{
 993:..\FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
 994:..\FreeRTOS/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 995:..\FreeRTOS/queue.c **** 						return errQUEUE_EMPTY;
 996:..\FreeRTOS/queue.c **** 					}
 997:..\FreeRTOS/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 998:..\FreeRTOS/queue.c **** 					{
 999:..\FreeRTOS/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
1000:..\FreeRTOS/queue.c **** 						xEntryTimeSet = pdTRUE;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 19


1001:..\FreeRTOS/queue.c **** 					}
1002:..\FreeRTOS/queue.c **** 				}
1003:..\FreeRTOS/queue.c **** 			}
1004:..\FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
1005:..\FreeRTOS/queue.c **** 
1006:..\FreeRTOS/queue.c **** 			taskENTER_CRITICAL();
1007:..\FreeRTOS/queue.c **** 			{
1008:..\FreeRTOS/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1009:..\FreeRTOS/queue.c **** 				{
1010:..\FreeRTOS/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1011:..\FreeRTOS/queue.c **** 					{
1012:..\FreeRTOS/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1013:..\FreeRTOS/queue.c **** 
1014:..\FreeRTOS/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
1015:..\FreeRTOS/queue.c **** 						{
1016:..\FreeRTOS/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1017:..\FreeRTOS/queue.c **** 							{
1018:..\FreeRTOS/queue.c **** 								taskENTER_CRITICAL();
1019:..\FreeRTOS/queue.c **** 								{
1020:..\FreeRTOS/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1021:..\FreeRTOS/queue.c **** 								}
1022:..\FreeRTOS/queue.c **** 								taskEXIT_CRITICAL();
1023:..\FreeRTOS/queue.c **** 							}
1024:..\FreeRTOS/queue.c **** 							else
1025:..\FreeRTOS/queue.c **** 							{
1026:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1027:..\FreeRTOS/queue.c **** 							}
1028:..\FreeRTOS/queue.c **** 						}
1029:..\FreeRTOS/queue.c **** 						#endif
1030:..\FreeRTOS/queue.c **** 
1031:..\FreeRTOS/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1032:..\FreeRTOS/queue.c **** 						portYIELD_WITHIN_API();
1033:..\FreeRTOS/queue.c **** 					}
1034:..\FreeRTOS/queue.c **** 					else
1035:..\FreeRTOS/queue.c **** 					{
1036:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1037:..\FreeRTOS/queue.c **** 					}
1038:..\FreeRTOS/queue.c **** 				}
1039:..\FreeRTOS/queue.c **** 				else
1040:..\FreeRTOS/queue.c **** 				{
1041:..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1042:..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1043:..\FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1044:..\FreeRTOS/queue.c **** 				}
1045:..\FreeRTOS/queue.c **** 			}
1046:..\FreeRTOS/queue.c **** 			taskEXIT_CRITICAL();
1047:..\FreeRTOS/queue.c **** 		}
1048:..\FreeRTOS/queue.c **** 	}
1049:..\FreeRTOS/queue.c **** 
1050:..\FreeRTOS/queue.c **** 
1051:..\FreeRTOS/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
1052:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1053:..\FreeRTOS/queue.c **** 
1054:..\FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
1055:..\FreeRTOS/queue.c **** {
1056:..\FreeRTOS/queue.c **** BaseType_t xReturn;
1057:..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 20


1058:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1059:..\FreeRTOS/queue.c **** 
1060:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1061:..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1062:..\FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1063:..\FreeRTOS/queue.c **** 
1064:..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1065:..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1066:..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1067:..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1068:..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1069:..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1070:..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1071:..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1072:..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1073:..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1074:..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1075:..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1076:..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1077:..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1078:..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1079:..\FreeRTOS/queue.c **** 
1080:..\FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
1081:..\FreeRTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
1082:..\FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:..\FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:..\FreeRTOS/queue.c **** 	post). */
1085:..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1086:..\FreeRTOS/queue.c **** 	{
1087:..\FreeRTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1088:..\FreeRTOS/queue.c **** 		{
1089:..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1090:..\FreeRTOS/queue.c **** 
1091:..\FreeRTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1092:..\FreeRTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1093:..\FreeRTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
1094:..\FreeRTOS/queue.c **** 			called here even though the disinherit function does not check if
1095:..\FreeRTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1096:..\FreeRTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1097:..\FreeRTOS/queue.c **** 
1098:..\FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1099:..\FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1100:..\FreeRTOS/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
1101:..\FreeRTOS/queue.c **** 			{
1102:..\FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1103:..\FreeRTOS/queue.c **** 				{
1104:..\FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1105:..\FreeRTOS/queue.c **** 					{
1106:..\FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
1107:..\FreeRTOS/queue.c **** 						{
1108:..\FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
1109:..\FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
1110:..\FreeRTOS/queue.c **** 							unblock.  A context switch is required. */
1111:..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1112:..\FreeRTOS/queue.c **** 							{
1113:..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1114:..\FreeRTOS/queue.c **** 							}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 21


1115:..\FreeRTOS/queue.c **** 							else
1116:..\FreeRTOS/queue.c **** 							{
1117:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1118:..\FreeRTOS/queue.c **** 							}
1119:..\FreeRTOS/queue.c **** 						}
1120:..\FreeRTOS/queue.c **** 						else
1121:..\FreeRTOS/queue.c **** 						{
1122:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1123:..\FreeRTOS/queue.c **** 						}
1124:..\FreeRTOS/queue.c **** 					}
1125:..\FreeRTOS/queue.c **** 					else
1126:..\FreeRTOS/queue.c **** 					{
1127:..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1128:..\FreeRTOS/queue.c **** 						{
1129:..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1130:..\FreeRTOS/queue.c **** 							{
1131:..\FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1132:..\FreeRTOS/queue.c **** 								record that a context switch is required. */
1133:..\FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1134:..\FreeRTOS/queue.c **** 								{
1135:..\FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1136:..\FreeRTOS/queue.c **** 								}
1137:..\FreeRTOS/queue.c **** 								else
1138:..\FreeRTOS/queue.c **** 								{
1139:..\FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1140:..\FreeRTOS/queue.c **** 								}
1141:..\FreeRTOS/queue.c **** 							}
1142:..\FreeRTOS/queue.c **** 							else
1143:..\FreeRTOS/queue.c **** 							{
1144:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1145:..\FreeRTOS/queue.c **** 							}
1146:..\FreeRTOS/queue.c **** 						}
1147:..\FreeRTOS/queue.c **** 						else
1148:..\FreeRTOS/queue.c **** 						{
1149:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1150:..\FreeRTOS/queue.c **** 						}
1151:..\FreeRTOS/queue.c **** 					}
1152:..\FreeRTOS/queue.c **** 				}
1153:..\FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1154:..\FreeRTOS/queue.c **** 				{
1155:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1156:..\FreeRTOS/queue.c **** 					{
1157:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1158:..\FreeRTOS/queue.c **** 						{
1159:..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1160:..\FreeRTOS/queue.c **** 							context	switch is required. */
1161:..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1162:..\FreeRTOS/queue.c **** 							{
1163:..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1164:..\FreeRTOS/queue.c **** 							}
1165:..\FreeRTOS/queue.c **** 							else
1166:..\FreeRTOS/queue.c **** 							{
1167:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1168:..\FreeRTOS/queue.c **** 							}
1169:..\FreeRTOS/queue.c **** 						}
1170:..\FreeRTOS/queue.c **** 						else
1171:..\FreeRTOS/queue.c **** 						{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 22


1172:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1173:..\FreeRTOS/queue.c **** 						}
1174:..\FreeRTOS/queue.c **** 					}
1175:..\FreeRTOS/queue.c **** 					else
1176:..\FreeRTOS/queue.c **** 					{
1177:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1178:..\FreeRTOS/queue.c **** 					}
1179:..\FreeRTOS/queue.c **** 				}
1180:..\FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1181:..\FreeRTOS/queue.c **** 			}
1182:..\FreeRTOS/queue.c **** 			else
1183:..\FreeRTOS/queue.c **** 			{
1184:..\FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1185:..\FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1186:..\FreeRTOS/queue.c **** 				++( pxQueue->xTxLock );
1187:..\FreeRTOS/queue.c **** 			}
1188:..\FreeRTOS/queue.c **** 
1189:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1190:..\FreeRTOS/queue.c **** 		}
1191:..\FreeRTOS/queue.c **** 		else
1192:..\FreeRTOS/queue.c **** 		{
1193:..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1194:..\FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1195:..\FreeRTOS/queue.c **** 		}
1196:..\FreeRTOS/queue.c **** 	}
1197:..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1198:..\FreeRTOS/queue.c **** 
1199:..\FreeRTOS/queue.c **** 	return xReturn;
1200:..\FreeRTOS/queue.c **** }
1201:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1202:..\FreeRTOS/queue.c **** 
1203:..\FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1204:..\FreeRTOS/queue.c **** {
1205:..\FreeRTOS/queue.c **** BaseType_t xReturn;
1206:..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1207:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1208:..\FreeRTOS/queue.c **** 
1209:..\FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1210:..\FreeRTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1211:..\FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1212:..\FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1213:..\FreeRTOS/queue.c **** 	post). */
1214:..\FreeRTOS/queue.c **** 
1215:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1216:..\FreeRTOS/queue.c **** 
1217:..\FreeRTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1218:..\FreeRTOS/queue.c **** 	if the item size is not 0. */
1219:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1220:..\FreeRTOS/queue.c **** 
1221:..\FreeRTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1222:..\FreeRTOS/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1223:..\FreeRTOS/queue.c **** 	interrupts, only tasks. */
1224:..\FreeRTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1225:..\FreeRTOS/queue.c **** 
1226:..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1227:..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1228:..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 23


1229:..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1230:..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1231:..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1232:..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1233:..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1234:..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1235:..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1236:..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1237:..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1238:..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1239:..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1240:..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1241:..\FreeRTOS/queue.c **** 
1242:..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1243:..\FreeRTOS/queue.c **** 	{
1244:..\FreeRTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1245:..\FreeRTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1246:..\FreeRTOS/queue.c **** 		space'. */
1247:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
1248:..\FreeRTOS/queue.c **** 		{
1249:..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1250:..\FreeRTOS/queue.c **** 
1251:..\FreeRTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1252:..\FreeRTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1253:..\FreeRTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1254:..\FreeRTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1255:..\FreeRTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1256:..\FreeRTOS/queue.c **** 			messages (semaphores) available. */
1257:..\FreeRTOS/queue.c **** 			++( pxQueue->uxMessagesWaiting );
1258:..\FreeRTOS/queue.c **** 
1259:..\FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1260:..\FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1261:..\FreeRTOS/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
1262:..\FreeRTOS/queue.c **** 			{
1263:..\FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1264:..\FreeRTOS/queue.c **** 				{
1265:..\FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1266:..\FreeRTOS/queue.c **** 					{
1267:..\FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1268:..\FreeRTOS/queue.c **** 						{
1269:..\FreeRTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1270:..\FreeRTOS/queue.c **** 							posting	to the queue set caused a higher priority
1271:..\FreeRTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1272:..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1273:..\FreeRTOS/queue.c **** 							{
1274:..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1275:..\FreeRTOS/queue.c **** 							}
1276:..\FreeRTOS/queue.c **** 							else
1277:..\FreeRTOS/queue.c **** 							{
1278:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1279:..\FreeRTOS/queue.c **** 							}
1280:..\FreeRTOS/queue.c **** 						}
1281:..\FreeRTOS/queue.c **** 						else
1282:..\FreeRTOS/queue.c **** 						{
1283:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1284:..\FreeRTOS/queue.c **** 						}
1285:..\FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 24


1286:..\FreeRTOS/queue.c **** 					else
1287:..\FreeRTOS/queue.c **** 					{
1288:..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1289:..\FreeRTOS/queue.c **** 						{
1290:..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1291:..\FreeRTOS/queue.c **** 							{
1292:..\FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1293:..\FreeRTOS/queue.c **** 								record that a context switch is required. */
1294:..\FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1295:..\FreeRTOS/queue.c **** 								{
1296:..\FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1297:..\FreeRTOS/queue.c **** 								}
1298:..\FreeRTOS/queue.c **** 								else
1299:..\FreeRTOS/queue.c **** 								{
1300:..\FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1301:..\FreeRTOS/queue.c **** 								}
1302:..\FreeRTOS/queue.c **** 							}
1303:..\FreeRTOS/queue.c **** 							else
1304:..\FreeRTOS/queue.c **** 							{
1305:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1306:..\FreeRTOS/queue.c **** 							}
1307:..\FreeRTOS/queue.c **** 						}
1308:..\FreeRTOS/queue.c **** 						else
1309:..\FreeRTOS/queue.c **** 						{
1310:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1311:..\FreeRTOS/queue.c **** 						}
1312:..\FreeRTOS/queue.c **** 					}
1313:..\FreeRTOS/queue.c **** 				}
1314:..\FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1315:..\FreeRTOS/queue.c **** 				{
1316:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1317:..\FreeRTOS/queue.c **** 					{
1318:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1319:..\FreeRTOS/queue.c **** 						{
1320:..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1321:..\FreeRTOS/queue.c **** 							context	switch is required. */
1322:..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1323:..\FreeRTOS/queue.c **** 							{
1324:..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1325:..\FreeRTOS/queue.c **** 							}
1326:..\FreeRTOS/queue.c **** 							else
1327:..\FreeRTOS/queue.c **** 							{
1328:..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1329:..\FreeRTOS/queue.c **** 							}
1330:..\FreeRTOS/queue.c **** 						}
1331:..\FreeRTOS/queue.c **** 						else
1332:..\FreeRTOS/queue.c **** 						{
1333:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1334:..\FreeRTOS/queue.c **** 						}
1335:..\FreeRTOS/queue.c **** 					}
1336:..\FreeRTOS/queue.c **** 					else
1337:..\FreeRTOS/queue.c **** 					{
1338:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1339:..\FreeRTOS/queue.c **** 					}
1340:..\FreeRTOS/queue.c **** 				}
1341:..\FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1342:..\FreeRTOS/queue.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 25


1343:..\FreeRTOS/queue.c **** 			else
1344:..\FreeRTOS/queue.c **** 			{
1345:..\FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1346:..\FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1347:..\FreeRTOS/queue.c **** 				++( pxQueue->xTxLock );
1348:..\FreeRTOS/queue.c **** 			}
1349:..\FreeRTOS/queue.c **** 
1350:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1351:..\FreeRTOS/queue.c **** 		}
1352:..\FreeRTOS/queue.c **** 		else
1353:..\FreeRTOS/queue.c **** 		{
1354:..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1355:..\FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1356:..\FreeRTOS/queue.c **** 		}
1357:..\FreeRTOS/queue.c **** 	}
1358:..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1359:..\FreeRTOS/queue.c **** 
1360:..\FreeRTOS/queue.c **** 	return xReturn;
1361:..\FreeRTOS/queue.c **** }
1362:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1363:..\FreeRTOS/queue.c **** 
1364:..\FreeRTOS/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1365:..\FreeRTOS/queue.c **** {
1366:..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1367:..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1368:..\FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1369:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1370:..\FreeRTOS/queue.c **** 
1371:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1372:..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1373:..\FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1374:..\FreeRTOS/queue.c **** 	{
1375:..\FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1376:..\FreeRTOS/queue.c **** 	}
1377:..\FreeRTOS/queue.c **** 	#endif
1378:..\FreeRTOS/queue.c **** 
1379:..\FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1380:..\FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1381:..\FreeRTOS/queue.c **** 	of execution time efficiency. */
1382:..\FreeRTOS/queue.c **** 
1383:..\FreeRTOS/queue.c **** 	for( ;; )
1384:..\FreeRTOS/queue.c **** 	{
1385:..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1386:..\FreeRTOS/queue.c **** 		{
1387:..\FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1388:..\FreeRTOS/queue.c **** 			must be	the highest priority task wanting to access the queue. */
1389:..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1390:..\FreeRTOS/queue.c **** 			{
1391:..\FreeRTOS/queue.c **** 				/* Remember the read position in case the queue is only being
1392:..\FreeRTOS/queue.c **** 				peeked. */
1393:..\FreeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1394:..\FreeRTOS/queue.c **** 
1395:..\FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1396:..\FreeRTOS/queue.c **** 
1397:..\FreeRTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
1398:..\FreeRTOS/queue.c **** 				{
1399:..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 26


1400:..\FreeRTOS/queue.c **** 
1401:..\FreeRTOS/queue.c **** 					/* Actually removing data, not just peeking. */
1402:..\FreeRTOS/queue.c **** 					--( pxQueue->uxMessagesWaiting );
1403:..\FreeRTOS/queue.c **** 
1404:..\FreeRTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1405:..\FreeRTOS/queue.c **** 					{
1406:..\FreeRTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1407:..\FreeRTOS/queue.c **** 						{
1408:..\FreeRTOS/queue.c **** 							/* Record the information required to implement
1409:..\FreeRTOS/queue.c **** 							priority inheritance should it become necessary. */
1410:..\FreeRTOS/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1411:..\FreeRTOS/queue.c **** 						}
1412:..\FreeRTOS/queue.c **** 						else
1413:..\FreeRTOS/queue.c **** 						{
1414:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1415:..\FreeRTOS/queue.c **** 						}
1416:..\FreeRTOS/queue.c **** 					}
1417:..\FreeRTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1418:..\FreeRTOS/queue.c **** 
1419:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1420:..\FreeRTOS/queue.c **** 					{
1421:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
1422:..\FreeRTOS/queue.c **** 						{
1423:..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1424:..\FreeRTOS/queue.c **** 						}
1425:..\FreeRTOS/queue.c **** 						else
1426:..\FreeRTOS/queue.c **** 						{
1427:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1428:..\FreeRTOS/queue.c **** 						}
1429:..\FreeRTOS/queue.c **** 					}
1430:..\FreeRTOS/queue.c **** 					else
1431:..\FreeRTOS/queue.c **** 					{
1432:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1433:..\FreeRTOS/queue.c **** 					}
1434:..\FreeRTOS/queue.c **** 				}
1435:..\FreeRTOS/queue.c **** 				else
1436:..\FreeRTOS/queue.c **** 				{
1437:..\FreeRTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1438:..\FreeRTOS/queue.c **** 
1439:..\FreeRTOS/queue.c **** 					/* The data is not being removed, so reset the read
1440:..\FreeRTOS/queue.c **** 					pointer. */
1441:..\FreeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1442:..\FreeRTOS/queue.c **** 
1443:..\FreeRTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
1444:..\FreeRTOS/queue.c **** 					any other tasks waiting for the data. */
1445:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1446:..\FreeRTOS/queue.c **** 					{
1447:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1448:..\FreeRTOS/queue.c **** 						{
1449:..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
1450:..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1451:..\FreeRTOS/queue.c **** 						}
1452:..\FreeRTOS/queue.c **** 						else
1453:..\FreeRTOS/queue.c **** 						{
1454:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1455:..\FreeRTOS/queue.c **** 						}
1456:..\FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 27


1457:..\FreeRTOS/queue.c **** 					else
1458:..\FreeRTOS/queue.c **** 					{
1459:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1460:..\FreeRTOS/queue.c **** 					}
1461:..\FreeRTOS/queue.c **** 				}
1462:..\FreeRTOS/queue.c **** 
1463:..\FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1464:..\FreeRTOS/queue.c **** 				return pdPASS;
1465:..\FreeRTOS/queue.c **** 			}
1466:..\FreeRTOS/queue.c **** 			else
1467:..\FreeRTOS/queue.c **** 			{
1468:..\FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1469:..\FreeRTOS/queue.c **** 				{
1470:..\FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1471:..\FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1472:..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1473:..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1474:..\FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1475:..\FreeRTOS/queue.c **** 				}
1476:..\FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1477:..\FreeRTOS/queue.c **** 				{
1478:..\FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1479:..\FreeRTOS/queue.c **** 					configure the timeout structure. */
1480:..\FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1481:..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1482:..\FreeRTOS/queue.c **** 				}
1483:..\FreeRTOS/queue.c **** 				else
1484:..\FreeRTOS/queue.c **** 				{
1485:..\FreeRTOS/queue.c **** 					/* Entry time was already set. */
1486:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1487:..\FreeRTOS/queue.c **** 				}
1488:..\FreeRTOS/queue.c **** 			}
1489:..\FreeRTOS/queue.c **** 		}
1490:..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1491:..\FreeRTOS/queue.c **** 
1492:..\FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1493:..\FreeRTOS/queue.c **** 		now the critical section has been exited. */
1494:..\FreeRTOS/queue.c **** 
1495:..\FreeRTOS/queue.c **** 		vTaskSuspendAll();
1496:..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1497:..\FreeRTOS/queue.c **** 
1498:..\FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1499:..\FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1500:..\FreeRTOS/queue.c **** 		{
1501:..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1502:..\FreeRTOS/queue.c **** 			{
1503:..\FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1504:..\FreeRTOS/queue.c **** 
1505:..\FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1506:..\FreeRTOS/queue.c **** 				{
1507:..\FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1508:..\FreeRTOS/queue.c **** 					{
1509:..\FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
1510:..\FreeRTOS/queue.c **** 						{
1511:..\FreeRTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1512:..\FreeRTOS/queue.c **** 						}
1513:..\FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 28


1514:..\FreeRTOS/queue.c **** 					}
1515:..\FreeRTOS/queue.c **** 					else
1516:..\FreeRTOS/queue.c **** 					{
1517:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1518:..\FreeRTOS/queue.c **** 					}
1519:..\FreeRTOS/queue.c **** 				}
1520:..\FreeRTOS/queue.c **** 				#endif
1521:..\FreeRTOS/queue.c **** 
1522:..\FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1523:..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1524:..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1525:..\FreeRTOS/queue.c **** 				{
1526:..\FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1527:..\FreeRTOS/queue.c **** 				}
1528:..\FreeRTOS/queue.c **** 				else
1529:..\FreeRTOS/queue.c **** 				{
1530:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1531:..\FreeRTOS/queue.c **** 				}
1532:..\FreeRTOS/queue.c **** 			}
1533:..\FreeRTOS/queue.c **** 			else
1534:..\FreeRTOS/queue.c **** 			{
1535:..\FreeRTOS/queue.c **** 				/* Try again. */
1536:..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1537:..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1538:..\FreeRTOS/queue.c **** 			}
1539:..\FreeRTOS/queue.c **** 		}
1540:..\FreeRTOS/queue.c **** 		else
1541:..\FreeRTOS/queue.c **** 		{
1542:..\FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1543:..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1544:..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1545:..\FreeRTOS/queue.c **** 			return errQUEUE_EMPTY;
1546:..\FreeRTOS/queue.c **** 		}
1547:..\FreeRTOS/queue.c **** 	}
1548:..\FreeRTOS/queue.c **** }
1549:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1550:..\FreeRTOS/queue.c **** 
1551:..\FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1552:..\FreeRTOS/queue.c **** {
1553:..\FreeRTOS/queue.c **** BaseType_t xReturn;
1554:..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1555:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1556:..\FreeRTOS/queue.c **** 
1557:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1558:..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1559:..\FreeRTOS/queue.c **** 
1560:..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1561:..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1562:..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1563:..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1564:..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1565:..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1566:..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1567:..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1568:..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1569:..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1570:..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 29


1571:..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1572:..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1573:..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1574:..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1575:..\FreeRTOS/queue.c **** 
1576:..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1577:..\FreeRTOS/queue.c **** 	{
1578:..\FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1579:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1580:..\FreeRTOS/queue.c **** 		{
1581:..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1582:..\FreeRTOS/queue.c **** 
1583:..\FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1584:..\FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1585:..\FreeRTOS/queue.c **** 
1586:..\FreeRTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1587:..\FreeRTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1588:..\FreeRTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1589:..\FreeRTOS/queue.c **** 			locked. */
1590:..\FreeRTOS/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
1591:..\FreeRTOS/queue.c **** 			{
1592:..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1593:..\FreeRTOS/queue.c **** 				{
1594:..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1595:..\FreeRTOS/queue.c **** 					{
1596:..\FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1597:..\FreeRTOS/queue.c **** 						force a context switch. */
1598:..\FreeRTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1599:..\FreeRTOS/queue.c **** 						{
1600:..\FreeRTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1601:..\FreeRTOS/queue.c **** 						}
1602:..\FreeRTOS/queue.c **** 						else
1603:..\FreeRTOS/queue.c **** 						{
1604:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1605:..\FreeRTOS/queue.c **** 						}
1606:..\FreeRTOS/queue.c **** 					}
1607:..\FreeRTOS/queue.c **** 					else
1608:..\FreeRTOS/queue.c **** 					{
1609:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1610:..\FreeRTOS/queue.c **** 					}
1611:..\FreeRTOS/queue.c **** 				}
1612:..\FreeRTOS/queue.c **** 				else
1613:..\FreeRTOS/queue.c **** 				{
1614:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1615:..\FreeRTOS/queue.c **** 				}
1616:..\FreeRTOS/queue.c **** 			}
1617:..\FreeRTOS/queue.c **** 			else
1618:..\FreeRTOS/queue.c **** 			{
1619:..\FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1620:..\FreeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1621:..\FreeRTOS/queue.c **** 				++( pxQueue->xRxLock );
1622:..\FreeRTOS/queue.c **** 			}
1623:..\FreeRTOS/queue.c **** 
1624:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1625:..\FreeRTOS/queue.c **** 		}
1626:..\FreeRTOS/queue.c **** 		else
1627:..\FreeRTOS/queue.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 30


1628:..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1629:..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1630:..\FreeRTOS/queue.c **** 		}
1631:..\FreeRTOS/queue.c **** 	}
1632:..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1633:..\FreeRTOS/queue.c **** 
1634:..\FreeRTOS/queue.c **** 	return xReturn;
1635:..\FreeRTOS/queue.c **** }
1636:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1637:..\FreeRTOS/queue.c **** 
1638:..\FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1639:..\FreeRTOS/queue.c **** {
1640:..\FreeRTOS/queue.c **** BaseType_t xReturn;
1641:..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1642:..\FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1643:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1644:..\FreeRTOS/queue.c **** 
1645:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1646:..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1647:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1648:..\FreeRTOS/queue.c **** 
1649:..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1650:..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1651:..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1652:..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1653:..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1654:..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1655:..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1656:..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1657:..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1658:..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1659:..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1660:..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1661:..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1662:..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1663:..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1664:..\FreeRTOS/queue.c **** 
1665:..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1666:..\FreeRTOS/queue.c **** 	{
1667:..\FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1668:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1669:..\FreeRTOS/queue.c **** 		{
1670:..\FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1671:..\FreeRTOS/queue.c **** 
1672:..\FreeRTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1673:..\FreeRTOS/queue.c **** 			actually being removed from the queue. */
1674:..\FreeRTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1675:..\FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1676:..\FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1677:..\FreeRTOS/queue.c **** 
1678:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1679:..\FreeRTOS/queue.c **** 		}
1680:..\FreeRTOS/queue.c **** 		else
1681:..\FreeRTOS/queue.c **** 		{
1682:..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1683:..\FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1684:..\FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 31


1685:..\FreeRTOS/queue.c **** 	}
1686:..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1687:..\FreeRTOS/queue.c **** 
1688:..\FreeRTOS/queue.c **** 	return xReturn;
1689:..\FreeRTOS/queue.c **** }
1690:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1691:..\FreeRTOS/queue.c **** 
1692:..\FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1693:..\FreeRTOS/queue.c **** {
1694:..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
1695:..\FreeRTOS/queue.c **** 
1696:..\FreeRTOS/queue.c **** 	configASSERT( xQueue );
1697:..\FreeRTOS/queue.c **** 
1698:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1699:..\FreeRTOS/queue.c **** 	{
1700:..\FreeRTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1701:..\FreeRTOS/queue.c **** 	}
1702:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1703:..\FreeRTOS/queue.c **** 
1704:..\FreeRTOS/queue.c **** 	return uxReturn;
1705:..\FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1706:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1707:..\FreeRTOS/queue.c **** 
1708:..\FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1709:..\FreeRTOS/queue.c **** {
1710:..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
1711:..\FreeRTOS/queue.c **** Queue_t *pxQueue;
1712:..\FreeRTOS/queue.c **** 
1713:..\FreeRTOS/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1714:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1715:..\FreeRTOS/queue.c **** 
1716:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1717:..\FreeRTOS/queue.c **** 	{
1718:..\FreeRTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1719:..\FreeRTOS/queue.c **** 	}
1720:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1721:..\FreeRTOS/queue.c **** 
1722:..\FreeRTOS/queue.c **** 	return uxReturn;
1723:..\FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1724:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1725:..\FreeRTOS/queue.c **** 
1726:..\FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1727:..\FreeRTOS/queue.c **** {
1728:..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
1729:..\FreeRTOS/queue.c **** 
1730:..\FreeRTOS/queue.c **** 	configASSERT( xQueue );
1731:..\FreeRTOS/queue.c **** 
1732:..\FreeRTOS/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1733:..\FreeRTOS/queue.c **** 
1734:..\FreeRTOS/queue.c **** 	return uxReturn;
1735:..\FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1736:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1737:..\FreeRTOS/queue.c **** 
1738:..\FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1739:..\FreeRTOS/queue.c **** {
1740:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1741:..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 32


1742:..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1743:..\FreeRTOS/queue.c **** 
1744:..\FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1745:..\FreeRTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1746:..\FreeRTOS/queue.c **** 	{
1747:..\FreeRTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1748:..\FreeRTOS/queue.c **** 	}
1749:..\FreeRTOS/queue.c **** 	#endif
1750:..\FreeRTOS/queue.c **** 	vPortFree( pxQueue );
1751:..\FreeRTOS/queue.c **** }
1752:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1753:..\FreeRTOS/queue.c **** 
1754:..\FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1755:..\FreeRTOS/queue.c **** 
1756:..\FreeRTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1757:..\FreeRTOS/queue.c **** 	{
1758:..\FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1759:..\FreeRTOS/queue.c **** 	}
1760:..\FreeRTOS/queue.c **** 
1761:..\FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1762:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1763:..\FreeRTOS/queue.c **** 
1764:..\FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1765:..\FreeRTOS/queue.c **** 
1766:..\FreeRTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1767:..\FreeRTOS/queue.c **** 	{
1768:..\FreeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1769:..\FreeRTOS/queue.c **** 	}
1770:..\FreeRTOS/queue.c **** 
1771:..\FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1772:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1773:..\FreeRTOS/queue.c **** 
1774:..\FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1775:..\FreeRTOS/queue.c **** 
1776:..\FreeRTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1777:..\FreeRTOS/queue.c **** 	{
1778:..\FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1779:..\FreeRTOS/queue.c **** 	}
1780:..\FreeRTOS/queue.c **** 
1781:..\FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1782:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1783:..\FreeRTOS/queue.c **** 
1784:..\FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1785:..\FreeRTOS/queue.c **** {
1786:..\FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
1787:..\FreeRTOS/queue.c **** 
1788:..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1789:..\FreeRTOS/queue.c **** 	{
1790:..\FreeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1791:..\FreeRTOS/queue.c **** 		{
1792:..\FreeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1793:..\FreeRTOS/queue.c **** 			{
1794:..\FreeRTOS/queue.c **** 				/* The mutex is no longer being held. */
1795:..\FreeRTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1796:..\FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1797:..\FreeRTOS/queue.c **** 			}
1798:..\FreeRTOS/queue.c **** 			else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 33


1799:..\FreeRTOS/queue.c **** 			{
1800:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1801:..\FreeRTOS/queue.c **** 			}
1802:..\FreeRTOS/queue.c **** 		}
1803:..\FreeRTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
1804:..\FreeRTOS/queue.c **** 	}
1805:..\FreeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1806:..\FreeRTOS/queue.c **** 	{
1807:..\FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1808:..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1809:..\FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1810:..\FreeRTOS/queue.c **** 		{
1811:..\FreeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1812:..\FreeRTOS/queue.c **** 		}
1813:..\FreeRTOS/queue.c **** 		else
1814:..\FreeRTOS/queue.c **** 		{
1815:..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1816:..\FreeRTOS/queue.c **** 		}
1817:..\FreeRTOS/queue.c **** 	}
1818:..\FreeRTOS/queue.c **** 	else
1819:..\FreeRTOS/queue.c **** 	{
1820:..\FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1821:..\FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1822:..\FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1823:..\FreeRTOS/queue.c **** 		{
1824:..\FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1825:..\FreeRTOS/queue.c **** 		}
1826:..\FreeRTOS/queue.c **** 		else
1827:..\FreeRTOS/queue.c **** 		{
1828:..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1829:..\FreeRTOS/queue.c **** 		}
1830:..\FreeRTOS/queue.c **** 
1831:..\FreeRTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
1832:..\FreeRTOS/queue.c **** 		{
1833:..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1834:..\FreeRTOS/queue.c **** 			{
1835:..\FreeRTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
1836:..\FreeRTOS/queue.c **** 				one from the recorded number of items in the queue so when
1837:..\FreeRTOS/queue.c **** 				one is added again below the number of recorded items remains
1838:..\FreeRTOS/queue.c **** 				correct. */
1839:..\FreeRTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
1840:..\FreeRTOS/queue.c **** 			}
1841:..\FreeRTOS/queue.c **** 			else
1842:..\FreeRTOS/queue.c **** 			{
1843:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1844:..\FreeRTOS/queue.c **** 			}
1845:..\FreeRTOS/queue.c **** 		}
1846:..\FreeRTOS/queue.c **** 		else
1847:..\FreeRTOS/queue.c **** 		{
1848:..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1849:..\FreeRTOS/queue.c **** 		}
1850:..\FreeRTOS/queue.c **** 	}
1851:..\FreeRTOS/queue.c **** 
1852:..\FreeRTOS/queue.c **** 	++( pxQueue->uxMessagesWaiting );
1853:..\FreeRTOS/queue.c **** 
1854:..\FreeRTOS/queue.c **** 	return xReturn;
1855:..\FreeRTOS/queue.c **** }
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 34


1856:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1857:..\FreeRTOS/queue.c **** 
1858:..\FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1859:..\FreeRTOS/queue.c **** {
1860:..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1861:..\FreeRTOS/queue.c **** 	{
1862:..\FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1863:..\FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1864:..\FreeRTOS/queue.c **** 		{
1865:..\FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1866:..\FreeRTOS/queue.c **** 		}
1867:..\FreeRTOS/queue.c **** 		else
1868:..\FreeRTOS/queue.c **** 		{
1869:..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1870:..\FreeRTOS/queue.c **** 		}
1871:..\FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1872:..\FreeRTOS/queue.c **** 	}
1873:..\FreeRTOS/queue.c **** }
1874:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1875:..\FreeRTOS/queue.c **** 
1876:..\FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1877:..\FreeRTOS/queue.c **** {
1878:..\FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1879:..\FreeRTOS/queue.c **** 
1880:..\FreeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1881:..\FreeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1882:..\FreeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1883:..\FreeRTOS/queue.c **** 	updated. */
1884:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1885:..\FreeRTOS/queue.c **** 	{
1886:..\FreeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1887:..\FreeRTOS/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
1888:..\FreeRTOS/queue.c **** 		{
1889:..\FreeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1890:..\FreeRTOS/queue.c **** 			blocked waiting for data to become available? */
1891:..\FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1892:..\FreeRTOS/queue.c **** 			{
1893:..\FreeRTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1894:..\FreeRTOS/queue.c **** 				{
1895:..\FreeRTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1896:..\FreeRTOS/queue.c **** 					{
1897:..\FreeRTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
1898:..\FreeRTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
1899:..\FreeRTOS/queue.c **** 						A context switch is required. */
1900:..\FreeRTOS/queue.c **** 						vTaskMissedYield();
1901:..\FreeRTOS/queue.c **** 					}
1902:..\FreeRTOS/queue.c **** 					else
1903:..\FreeRTOS/queue.c **** 					{
1904:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1905:..\FreeRTOS/queue.c **** 					}
1906:..\FreeRTOS/queue.c **** 				}
1907:..\FreeRTOS/queue.c **** 				else
1908:..\FreeRTOS/queue.c **** 				{
1909:..\FreeRTOS/queue.c **** 					/* Tasks that are removed from the event list will get added to
1910:..\FreeRTOS/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1911:..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1912:..\FreeRTOS/queue.c **** 					{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 35


1913:..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1914:..\FreeRTOS/queue.c **** 						{
1915:..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1916:..\FreeRTOS/queue.c **** 							context	switch is required. */
1917:..\FreeRTOS/queue.c **** 							vTaskMissedYield();
1918:..\FreeRTOS/queue.c **** 						}
1919:..\FreeRTOS/queue.c **** 						else
1920:..\FreeRTOS/queue.c **** 						{
1921:..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1922:..\FreeRTOS/queue.c **** 						}
1923:..\FreeRTOS/queue.c **** 					}
1924:..\FreeRTOS/queue.c **** 					else
1925:..\FreeRTOS/queue.c **** 					{
1926:..\FreeRTOS/queue.c **** 						break;
1927:..\FreeRTOS/queue.c **** 					}
1928:..\FreeRTOS/queue.c **** 				}
1929:..\FreeRTOS/queue.c **** 			}
1930:..\FreeRTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1931:..\FreeRTOS/queue.c **** 			{
1932:..\FreeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1933:..\FreeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1934:..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1935:..\FreeRTOS/queue.c **** 				{
1936:..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1937:..\FreeRTOS/queue.c **** 					{
1938:..\FreeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that a
1939:..\FreeRTOS/queue.c **** 						context	switch is required. */
1940:..\FreeRTOS/queue.c **** 						vTaskMissedYield();
1941:..\FreeRTOS/queue.c **** 					}
1942:..\FreeRTOS/queue.c **** 					else
1943:..\FreeRTOS/queue.c **** 					{
1944:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1945:..\FreeRTOS/queue.c **** 					}
1946:..\FreeRTOS/queue.c **** 				}
1947:..\FreeRTOS/queue.c **** 				else
1948:..\FreeRTOS/queue.c **** 				{
1949:..\FreeRTOS/queue.c **** 					break;
1950:..\FreeRTOS/queue.c **** 				}
1951:..\FreeRTOS/queue.c **** 			}
1952:..\FreeRTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1953:..\FreeRTOS/queue.c **** 
1954:..\FreeRTOS/queue.c **** 			--( pxQueue->xTxLock );
1955:..\FreeRTOS/queue.c **** 		}
1956:..\FreeRTOS/queue.c **** 
1957:..\FreeRTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
1958:..\FreeRTOS/queue.c **** 	}
1959:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1960:..\FreeRTOS/queue.c **** 
1961:..\FreeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
1962:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1963:..\FreeRTOS/queue.c **** 	{
1964:..\FreeRTOS/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
1965:..\FreeRTOS/queue.c **** 		{
1966:..\FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1967:..\FreeRTOS/queue.c **** 			{
1968:..\FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1969:..\FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 36


1970:..\FreeRTOS/queue.c **** 					vTaskMissedYield();
1971:..\FreeRTOS/queue.c **** 				}
1972:..\FreeRTOS/queue.c **** 				else
1973:..\FreeRTOS/queue.c **** 				{
1974:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1975:..\FreeRTOS/queue.c **** 				}
1976:..\FreeRTOS/queue.c **** 
1977:..\FreeRTOS/queue.c **** 				--( pxQueue->xRxLock );
1978:..\FreeRTOS/queue.c **** 			}
1979:..\FreeRTOS/queue.c **** 			else
1980:..\FreeRTOS/queue.c **** 			{
1981:..\FreeRTOS/queue.c **** 				break;
1982:..\FreeRTOS/queue.c **** 			}
1983:..\FreeRTOS/queue.c **** 		}
1984:..\FreeRTOS/queue.c **** 
1985:..\FreeRTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
1986:..\FreeRTOS/queue.c **** 	}
1987:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1988:..\FreeRTOS/queue.c **** }
1989:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1990:..\FreeRTOS/queue.c **** 
1991:..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1992:..\FreeRTOS/queue.c **** {
1993:..\FreeRTOS/queue.c **** BaseType_t xReturn;
1994:..\FreeRTOS/queue.c **** 
1995:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1996:..\FreeRTOS/queue.c **** 	{
1997:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1998:..\FreeRTOS/queue.c **** 		{
1999:..\FreeRTOS/queue.c **** 			xReturn = pdTRUE;
2000:..\FreeRTOS/queue.c **** 		}
2001:..\FreeRTOS/queue.c **** 		else
2002:..\FreeRTOS/queue.c **** 		{
2003:..\FreeRTOS/queue.c **** 			xReturn = pdFALSE;
2004:..\FreeRTOS/queue.c **** 		}
2005:..\FreeRTOS/queue.c **** 	}
2006:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2007:..\FreeRTOS/queue.c **** 
2008:..\FreeRTOS/queue.c **** 	return xReturn;
2009:..\FreeRTOS/queue.c **** }
2010:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2011:..\FreeRTOS/queue.c **** 
2012:..\FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2013:..\FreeRTOS/queue.c **** {
2014:..\FreeRTOS/queue.c **** BaseType_t xReturn;
2015:..\FreeRTOS/queue.c **** 
2016:..\FreeRTOS/queue.c **** 	configASSERT( xQueue );
2017:..\FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2018:..\FreeRTOS/queue.c **** 	{
2019:..\FreeRTOS/queue.c **** 		xReturn = pdTRUE;
2020:..\FreeRTOS/queue.c **** 	}
2021:..\FreeRTOS/queue.c **** 	else
2022:..\FreeRTOS/queue.c **** 	{
2023:..\FreeRTOS/queue.c **** 		xReturn = pdFALSE;
2024:..\FreeRTOS/queue.c **** 	}
2025:..\FreeRTOS/queue.c **** 
2026:..\FreeRTOS/queue.c **** 	return xReturn;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 37


2027:..\FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2028:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2029:..\FreeRTOS/queue.c **** 
2030:..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2031:..\FreeRTOS/queue.c **** {
  27              		.loc 1 2031 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  36 0002 0446     		mov	r4, r0
2032:..\FreeRTOS/queue.c **** BaseType_t xReturn;
2033:..\FreeRTOS/queue.c **** 
2034:..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
  37              		.loc 1 2034 0
  38 0004 FFF7FEFF 		bl	vPortEnterCritical
  39              	.LVL1:
2035:..\FreeRTOS/queue.c **** 	{
2036:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40              		.loc 1 2036 0
  41 0008 A26B     		ldr	r2, [r4, #56]
  42 000a E36B     		ldr	r3, [r4, #60]
  43 000c 9A42     		cmp	r2, r3
  44 000e 01D1     		bne	.L3
2037:..\FreeRTOS/queue.c **** 		{
2038:..\FreeRTOS/queue.c **** 			xReturn = pdTRUE;
  45              		.loc 1 2038 0
  46 0010 0124     		movs	r4, #1
  47              	.LVL2:
  48 0012 00E0     		b	.L2
  49              	.LVL3:
  50              	.L3:
2039:..\FreeRTOS/queue.c **** 		}
2040:..\FreeRTOS/queue.c **** 		else
2041:..\FreeRTOS/queue.c **** 		{
2042:..\FreeRTOS/queue.c **** 			xReturn = pdFALSE;
  51              		.loc 1 2042 0
  52 0014 0024     		movs	r4, #0
  53              	.LVL4:
  54              	.L2:
2043:..\FreeRTOS/queue.c **** 		}
2044:..\FreeRTOS/queue.c **** 	}
2045:..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
  55              		.loc 1 2045 0
  56 0016 FFF7FEFF 		bl	vPortExitCritical
  57              	.LVL5:
2046:..\FreeRTOS/queue.c **** 
2047:..\FreeRTOS/queue.c **** 	return xReturn;
2048:..\FreeRTOS/queue.c **** }
  58              		.loc 1 2048 0
  59 001a 2046     		mov	r0, r4
  60 001c 10BD     		pop	{r4, pc}
  61              		.cfi_endproc
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 38


  62              	.LFE85:
  63              		.size	prvIsQueueFull, .-prvIsQueueFull
  64 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  65              		.align	2
  66              		.thumb
  67              		.thumb_func
  68              		.type	prvIsQueueEmpty, %function
  69              	prvIsQueueEmpty:
  70              	.LFB83:
1992:..\FreeRTOS/queue.c **** BaseType_t xReturn;
  71              		.loc 1 1992 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              	.LVL6:
  76 0000 10B5     		push	{r4, lr}
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
  80 0002 0446     		mov	r4, r0
1995:..\FreeRTOS/queue.c **** 	{
  81              		.loc 1 1995 0
  82 0004 FFF7FEFF 		bl	vPortEnterCritical
  83              	.LVL7:
1997:..\FreeRTOS/queue.c **** 		{
  84              		.loc 1 1997 0
  85 0008 A36B     		ldr	r3, [r4, #56]
  86 000a 0BB9     		cbnz	r3, .L7
1999:..\FreeRTOS/queue.c **** 		}
  87              		.loc 1 1999 0
  88 000c 0124     		movs	r4, #1
  89              	.LVL8:
  90 000e 00E0     		b	.L6
  91              	.LVL9:
  92              	.L7:
2003:..\FreeRTOS/queue.c **** 		}
  93              		.loc 1 2003 0
  94 0010 0024     		movs	r4, #0
  95              	.LVL10:
  96              	.L6:
2006:..\FreeRTOS/queue.c **** 
  97              		.loc 1 2006 0
  98 0012 FFF7FEFF 		bl	vPortExitCritical
  99              	.LVL11:
2009:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 100              		.loc 1 2009 0
 101 0016 2046     		mov	r0, r4
 102 0018 10BD     		pop	{r4, pc}
 103              		.cfi_endproc
 104              	.LFE83:
 105              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 106 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 107              		.align	2
 108              		.thumb
 109              		.thumb_func
 110              		.type	prvCopyDataToQueue, %function
 111              	prvCopyDataToQueue:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 39


 112              	.LFB80:
1785:..\FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 113              		.loc 1 1785 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL12:
 118 0000 38B5     		push	{r3, r4, r5, lr}
 119              		.cfi_def_cfa_offset 16
 120              		.cfi_offset 3, -16
 121              		.cfi_offset 4, -12
 122              		.cfi_offset 5, -8
 123              		.cfi_offset 14, -4
 124 0002 0446     		mov	r4, r0
 125 0004 1546     		mov	r5, r2
 126              	.LVL13:
1788:..\FreeRTOS/queue.c **** 	{
 127              		.loc 1 1788 0
 128 0006 026C     		ldr	r2, [r0, #64]
 129              	.LVL14:
 130 0008 3AB9     		cbnz	r2, .L10
1792:..\FreeRTOS/queue.c **** 			{
 131              		.loc 1 1792 0
 132 000a 0368     		ldr	r3, [r0]
 133 000c 5BBB     		cbnz	r3, .L14
1795:..\FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 134              		.loc 1 1795 0
 135 000e 4068     		ldr	r0, [r0, #4]
 136              	.LVL15:
 137 0010 FFF7FEFF 		bl	xTaskPriorityDisinherit
 138              	.LVL16:
1796:..\FreeRTOS/queue.c **** 			}
 139              		.loc 1 1796 0
 140 0014 0023     		movs	r3, #0
 141 0016 6360     		str	r3, [r4, #4]
 142 0018 2CE0     		b	.L11
 143              	.LVL17:
 144              	.L10:
1805:..\FreeRTOS/queue.c **** 	{
 145              		.loc 1 1805 0
 146 001a 6DB9     		cbnz	r5, .L12
1807:..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 147              		.loc 1 1807 0
 148 001c 8068     		ldr	r0, [r0, #8]
 149              	.LVL18:
 150 001e FFF7FEFF 		bl	memcpy
 151              	.LVL19:
1808:..\FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 152              		.loc 1 1808 0
 153 0022 A268     		ldr	r2, [r4, #8]
 154 0024 236C     		ldr	r3, [r4, #64]
 155 0026 1344     		add	r3, r3, r2
 156 0028 A360     		str	r3, [r4, #8]
1809:..\FreeRTOS/queue.c **** 		{
 157              		.loc 1 1809 0
 158 002a 6268     		ldr	r2, [r4, #4]
 159 002c 9342     		cmp	r3, r2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 40


 160 002e 1CD3     		bcc	.L15
1811:..\FreeRTOS/queue.c **** 		}
 161              		.loc 1 1811 0
 162 0030 2368     		ldr	r3, [r4]
 163 0032 A360     		str	r3, [r4, #8]
1786:..\FreeRTOS/queue.c **** 
 164              		.loc 1 1786 0
 165 0034 0020     		movs	r0, #0
 166 0036 1DE0     		b	.L11
 167              	.LVL20:
 168              	.L12:
1820:..\FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 169              		.loc 1 1820 0
 170 0038 C068     		ldr	r0, [r0, #12]
 171              	.LVL21:
 172 003a FFF7FEFF 		bl	memcpy
 173              	.LVL22:
1821:..\FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 174              		.loc 1 1821 0
 175 003e 236C     		ldr	r3, [r4, #64]
 176 0040 5B42     		negs	r3, r3
 177 0042 E268     		ldr	r2, [r4, #12]
 178 0044 1A44     		add	r2, r2, r3
 179 0046 E260     		str	r2, [r4, #12]
1822:..\FreeRTOS/queue.c **** 		{
 180              		.loc 1 1822 0
 181 0048 2168     		ldr	r1, [r4]
 182 004a 8A42     		cmp	r2, r1
 183 004c 02D2     		bcs	.L13
1824:..\FreeRTOS/queue.c **** 		}
 184              		.loc 1 1824 0
 185 004e 6268     		ldr	r2, [r4, #4]
 186 0050 1344     		add	r3, r3, r2
 187 0052 E360     		str	r3, [r4, #12]
 188              	.L13:
1831:..\FreeRTOS/queue.c **** 		{
 189              		.loc 1 1831 0
 190 0054 022D     		cmp	r5, #2
 191 0056 0AD1     		bne	.L16
1833:..\FreeRTOS/queue.c **** 			{
 192              		.loc 1 1833 0
 193 0058 A36B     		ldr	r3, [r4, #56]
 194 005a 53B1     		cbz	r3, .L17
1839:..\FreeRTOS/queue.c **** 			}
 195              		.loc 1 1839 0
 196 005c A36B     		ldr	r3, [r4, #56]
 197 005e 013B     		subs	r3, r3, #1
 198 0060 A363     		str	r3, [r4, #56]
1786:..\FreeRTOS/queue.c **** 
 199              		.loc 1 1786 0
 200 0062 0020     		movs	r0, #0
 201 0064 06E0     		b	.L11
 202              	.LVL23:
 203              	.L14:
 204 0066 0020     		movs	r0, #0
 205              	.LVL24:
 206 0068 04E0     		b	.L11
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 41


 207              	.LVL25:
 208              	.L15:
 209 006a 0020     		movs	r0, #0
 210 006c 02E0     		b	.L11
 211              	.L16:
 212 006e 0020     		movs	r0, #0
 213 0070 00E0     		b	.L11
 214              	.L17:
 215 0072 0020     		movs	r0, #0
 216              	.LVL26:
 217              	.L11:
1852:..\FreeRTOS/queue.c **** 
 218              		.loc 1 1852 0
 219 0074 A36B     		ldr	r3, [r4, #56]
 220 0076 0133     		adds	r3, r3, #1
 221 0078 A363     		str	r3, [r4, #56]
1855:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 222              		.loc 1 1855 0
 223 007a 38BD     		pop	{r3, r4, r5, pc}
 224              		.cfi_endproc
 225              	.LFE80:
 226              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 227              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 228              		.align	2
 229              		.thumb
 230              		.thumb_func
 231              		.type	prvCopyDataFromQueue, %function
 232              	prvCopyDataFromQueue:
 233              	.LFB81:
1859:..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 234              		.loc 1 1859 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL27:
1860:..\FreeRTOS/queue.c **** 	{
 239              		.loc 1 1860 0
 240 0000 026C     		ldr	r2, [r0, #64]
 241 0002 72B1     		cbz	r2, .L23
1859:..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 242              		.loc 1 1859 0
 243 0004 10B5     		push	{r4, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 4, -8
 246              		.cfi_offset 14, -4
1862:..\FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 247              		.loc 1 1862 0
 248 0006 C368     		ldr	r3, [r0, #12]
 249 0008 1344     		add	r3, r3, r2
 250 000a C360     		str	r3, [r0, #12]
1863:..\FreeRTOS/queue.c **** 		{
 251              		.loc 1 1863 0
 252 000c 4468     		ldr	r4, [r0, #4]
 253 000e A342     		cmp	r3, r4
 254 0010 01D3     		bcc	.L21
1865:..\FreeRTOS/queue.c **** 		}
 255              		.loc 1 1865 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 42


 256 0012 0368     		ldr	r3, [r0]
 257 0014 C360     		str	r3, [r0, #12]
 258              	.L21:
 259 0016 0C46     		mov	r4, r1
1871:..\FreeRTOS/queue.c **** 	}
 260              		.loc 1 1871 0
 261 0018 C168     		ldr	r1, [r0, #12]
 262              	.LVL28:
 263 001a 2046     		mov	r0, r4
 264              	.LVL29:
 265 001c FFF7FEFF 		bl	memcpy
 266              	.LVL30:
 267 0020 10BD     		pop	{r4, pc}
 268              	.LVL31:
 269              	.L23:
 270              		.cfi_def_cfa_offset 0
 271              		.cfi_restore 4
 272              		.cfi_restore 14
 273 0022 7047     		bx	lr
 274              		.cfi_endproc
 275              	.LFE81:
 276              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 277              		.section	.text.prvUnlockQueue,"ax",%progbits
 278              		.align	2
 279              		.thumb
 280              		.thumb_func
 281              		.type	prvUnlockQueue, %function
 282              	prvUnlockQueue:
 283              	.LFB82:
1877:..\FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 284              		.loc 1 1877 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              	.LVL32:
 289 0000 10B5     		push	{r4, lr}
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
 293 0002 0446     		mov	r4, r0
1884:..\FreeRTOS/queue.c **** 	{
 294              		.loc 1 1884 0
 295 0004 FFF7FEFF 		bl	vPortEnterCritical
 296              	.LVL33:
1887:..\FreeRTOS/queue.c **** 		{
 297              		.loc 1 1887 0
 298 0008 0BE0     		b	.L25
 299              	.L28:
1934:..\FreeRTOS/queue.c **** 				{
 300              		.loc 1 1934 0
 301 000a 636A     		ldr	r3, [r4, #36]
 302 000c 63B1     		cbz	r3, .L26
1936:..\FreeRTOS/queue.c **** 					{
 303              		.loc 1 1936 0
 304 000e 04F12400 		add	r0, r4, #36
 305 0012 FFF7FEFF 		bl	xTaskRemoveFromEventList
 306              	.LVL34:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 43


 307 0016 08B1     		cbz	r0, .L27
1940:..\FreeRTOS/queue.c **** 					}
 308              		.loc 1 1940 0
 309 0018 FFF7FEFF 		bl	vTaskMissedYield
 310              	.LVL35:
 311              	.L27:
1954:..\FreeRTOS/queue.c **** 		}
 312              		.loc 1 1954 0
 313 001c A36C     		ldr	r3, [r4, #72]
 314 001e 013B     		subs	r3, r3, #1
 315 0020 A364     		str	r3, [r4, #72]
 316              	.L25:
1887:..\FreeRTOS/queue.c **** 		{
 317              		.loc 1 1887 0
 318 0022 A36C     		ldr	r3, [r4, #72]
 319 0024 002B     		cmp	r3, #0
 320 0026 F0DC     		bgt	.L28
 321              	.L26:
1957:..\FreeRTOS/queue.c **** 	}
 322              		.loc 1 1957 0
 323 0028 4FF0FF33 		mov	r3, #-1
 324 002c A364     		str	r3, [r4, #72]
1959:..\FreeRTOS/queue.c **** 
 325              		.loc 1 1959 0
 326 002e FFF7FEFF 		bl	vPortExitCritical
 327              	.LVL36:
1962:..\FreeRTOS/queue.c **** 	{
 328              		.loc 1 1962 0
 329 0032 FFF7FEFF 		bl	vPortEnterCritical
 330              	.LVL37:
1964:..\FreeRTOS/queue.c **** 		{
 331              		.loc 1 1964 0
 332 0036 0BE0     		b	.L29
 333              	.L32:
1966:..\FreeRTOS/queue.c **** 			{
 334              		.loc 1 1966 0
 335 0038 2369     		ldr	r3, [r4, #16]
 336 003a 63B1     		cbz	r3, .L30
1968:..\FreeRTOS/queue.c **** 				{
 337              		.loc 1 1968 0
 338 003c 04F11000 		add	r0, r4, #16
 339 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 340              	.LVL38:
 341 0044 08B1     		cbz	r0, .L31
1970:..\FreeRTOS/queue.c **** 				}
 342              		.loc 1 1970 0
 343 0046 FFF7FEFF 		bl	vTaskMissedYield
 344              	.LVL39:
 345              	.L31:
1977:..\FreeRTOS/queue.c **** 			}
 346              		.loc 1 1977 0
 347 004a 636C     		ldr	r3, [r4, #68]
 348 004c 013B     		subs	r3, r3, #1
 349 004e 6364     		str	r3, [r4, #68]
 350              	.L29:
1964:..\FreeRTOS/queue.c **** 		{
 351              		.loc 1 1964 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 44


 352 0050 636C     		ldr	r3, [r4, #68]
 353 0052 002B     		cmp	r3, #0
 354 0054 F0DC     		bgt	.L32
 355              	.L30:
1985:..\FreeRTOS/queue.c **** 	}
 356              		.loc 1 1985 0
 357 0056 4FF0FF33 		mov	r3, #-1
 358 005a 6364     		str	r3, [r4, #68]
1987:..\FreeRTOS/queue.c **** }
 359              		.loc 1 1987 0
 360 005c FFF7FEFF 		bl	vPortExitCritical
 361              	.LVL40:
 362 0060 10BD     		pop	{r4, pc}
 363              		.cfi_endproc
 364              	.LFE82:
 365              		.size	prvUnlockQueue, .-prvUnlockQueue
 366 0062 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 367              		.align	2
 368              		.global	xQueueGenericReset
 369              		.thumb
 370              		.thumb_func
 371              		.type	xQueueGenericReset, %function
 372              	xQueueGenericReset:
 373              	.LFB64:
 261:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 374              		.loc 1 261 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              	.LVL41:
 379 0000 38B5     		push	{r3, r4, r5, lr}
 380              		.cfi_def_cfa_offset 16
 381              		.cfi_offset 3, -16
 382              		.cfi_offset 4, -12
 383              		.cfi_offset 5, -8
 384              		.cfi_offset 14, -4
 385 0002 0446     		mov	r4, r0
 386 0004 0D46     		mov	r5, r1
 387              	.LVL42:
 266:..\FreeRTOS/queue.c **** 	{
 388              		.loc 1 266 0
 389 0006 FFF7FEFF 		bl	vPortEnterCritical
 390              	.LVL43:
 268:..\FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 391              		.loc 1 268 0
 392 000a 2168     		ldr	r1, [r4]
 393 000c E26B     		ldr	r2, [r4, #60]
 394 000e 236C     		ldr	r3, [r4, #64]
 395 0010 03FB0210 		mla	r0, r3, r2, r1
 396 0014 6060     		str	r0, [r4, #4]
 269:..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 397              		.loc 1 269 0
 398 0016 0020     		movs	r0, #0
 399 0018 A063     		str	r0, [r4, #56]
 270:..\FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 400              		.loc 1 270 0
 401 001a A160     		str	r1, [r4, #8]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 45


 271:..\FreeRTOS/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 402              		.loc 1 271 0
 403 001c 013A     		subs	r2, r2, #1
 404 001e 02FB0313 		mla	r3, r2, r3, r1
 405 0022 E360     		str	r3, [r4, #12]
 272:..\FreeRTOS/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 406              		.loc 1 272 0
 407 0024 4FF0FF33 		mov	r3, #-1
 408 0028 6364     		str	r3, [r4, #68]
 273:..\FreeRTOS/queue.c **** 
 409              		.loc 1 273 0
 410 002a A364     		str	r3, [r4, #72]
 275:..\FreeRTOS/queue.c **** 		{
 411              		.loc 1 275 0
 412 002c 55B9     		cbnz	r5, .L35
 282:..\FreeRTOS/queue.c **** 			{
 413              		.loc 1 282 0
 414 002e 2369     		ldr	r3, [r4, #16]
 415 0030 83B1     		cbz	r3, .L36
 284:..\FreeRTOS/queue.c **** 				{
 416              		.loc 1 284 0
 417 0032 04F11000 		add	r0, r4, #16
 418 0036 FFF7FEFF 		bl	xTaskRemoveFromEventList
 419              	.LVL44:
 420 003a 0128     		cmp	r0, #1
 421 003c 0AD1     		bne	.L36
 286:..\FreeRTOS/queue.c **** 				}
 422              		.loc 1 286 0
 423 003e FFF7FEFF 		bl	vPortYield
 424              	.LVL45:
 425 0042 07E0     		b	.L36
 426              	.L35:
 301:..\FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 427              		.loc 1 301 0
 428 0044 04F11000 		add	r0, r4, #16
 429 0048 FFF7FEFF 		bl	vListInitialise
 430              	.LVL46:
 302:..\FreeRTOS/queue.c **** 		}
 431              		.loc 1 302 0
 432 004c 04F12400 		add	r0, r4, #36
 433 0050 FFF7FEFF 		bl	vListInitialise
 434              	.LVL47:
 435              	.L36:
 305:..\FreeRTOS/queue.c **** 
 436              		.loc 1 305 0
 437 0054 FFF7FEFF 		bl	vPortExitCritical
 438              	.LVL48:
 310:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 439              		.loc 1 310 0
 440 0058 0120     		movs	r0, #1
 441 005a 38BD     		pop	{r3, r4, r5, pc}
 442              		.cfi_endproc
 443              	.LFE64:
 444              		.size	xQueueGenericReset, .-xQueueGenericReset
 445              		.section	.text.xQueueGenericCreate,"ax",%progbits
 446              		.align	2
 447              		.global	xQueueGenericCreate
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 46


 448              		.thumb
 449              		.thumb_func
 450              		.type	xQueueGenericCreate, %function
 451              	xQueueGenericCreate:
 452              	.LFB65:
 314:..\FreeRTOS/queue.c **** Queue_t *pxNewQueue;
 453              		.loc 1 314 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              	.LVL49:
 458 0000 70B5     		push	{r4, r5, r6, lr}
 459              		.cfi_def_cfa_offset 16
 460              		.cfi_offset 4, -16
 461              		.cfi_offset 5, -12
 462              		.cfi_offset 6, -8
 463              		.cfi_offset 14, -4
 464 0002 0646     		mov	r6, r0
 465              	.LVL50:
 325:..\FreeRTOS/queue.c **** 	{
 466              		.loc 1 325 0
 467 0004 0D46     		mov	r5, r1
 468 0006 19B1     		cbz	r1, .L43
 334:..\FreeRTOS/queue.c **** 	}
 469              		.loc 1 334 0
 470 0008 00FB01F0 		mul	r0, r0, r1
 471              	.LVL51:
 472 000c 0130     		adds	r0, r0, #1
 473              	.LVL52:
 474 000e 00E0     		b	.L39
 475              	.LVL53:
 476              	.L43:
 328:..\FreeRTOS/queue.c **** 	}
 477              		.loc 1 328 0
 478 0010 0020     		movs	r0, #0
 479              	.LVL54:
 480              	.L39:
 338:..\FreeRTOS/queue.c **** 
 481              		.loc 1 338 0
 482 0012 4C30     		adds	r0, r0, #76
 483              	.LVL55:
 484 0014 FFF7FEFF 		bl	pvPortMalloc
 485              	.LVL56:
 340:..\FreeRTOS/queue.c **** 	{
 486              		.loc 1 340 0
 487 0018 0446     		mov	r4, r0
 488 001a 58B1     		cbz	r0, .L40
 342:..\FreeRTOS/queue.c **** 		{
 489              		.loc 1 342 0
 490 001c 0DB9     		cbnz	r5, .L41
 348:..\FreeRTOS/queue.c **** 		}
 491              		.loc 1 348 0
 492 001e 2060     		str	r0, [r4]
 493 0020 02E0     		b	.L42
 494              	.L41:
 354:..\FreeRTOS/queue.c **** 		}
 495              		.loc 1 354 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 47


 496 0022 00F14C03 		add	r3, r0, #76
 497 0026 0360     		str	r3, [r0]
 498              	.L42:
 359:..\FreeRTOS/queue.c **** 		pxNewQueue->uxItemSize = uxItemSize;
 499              		.loc 1 359 0
 500 0028 E663     		str	r6, [r4, #60]
 360:..\FreeRTOS/queue.c **** 		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 501              		.loc 1 360 0
 502 002a 2564     		str	r5, [r4, #64]
 361:..\FreeRTOS/queue.c **** 
 503              		.loc 1 361 0
 504 002c 0121     		movs	r1, #1
 505 002e 2046     		mov	r0, r4
 506              	.LVL57:
 507 0030 FFF7FEFF 		bl	xQueueGenericReset
 508              	.LVL58:
 509              	.L40:
 386:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 510              		.loc 1 386 0
 511 0034 2046     		mov	r0, r4
 512 0036 70BD     		pop	{r4, r5, r6, pc}
 513              		.cfi_endproc
 514              	.LFE65:
 515              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 516              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 517              		.align	2
 518              		.global	xQueueCreateCountingSemaphore
 519              		.thumb
 520              		.thumb_func
 521              		.type	xQueueCreateCountingSemaphore, %function
 522              	xQueueCreateCountingSemaphore:
 523              	.LFB69:
 583:..\FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 524              		.loc 1 583 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              	.LVL59:
 529 0000 10B5     		push	{r4, lr}
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 4, -8
 532              		.cfi_offset 14, -4
 533 0002 0C46     		mov	r4, r1
 589:..\FreeRTOS/queue.c **** 
 534              		.loc 1 589 0
 535 0004 0222     		movs	r2, #2
 536 0006 0021     		movs	r1, #0
 537              	.LVL60:
 538 0008 FFF7FEFF 		bl	xQueueGenericCreate
 539              	.LVL61:
 591:..\FreeRTOS/queue.c **** 		{
 540              		.loc 1 591 0
 541 000c 0346     		mov	r3, r0
 542 000e 00B1     		cbz	r0, .L46
 593:..\FreeRTOS/queue.c **** 
 543              		.loc 1 593 0
 544 0010 8463     		str	r4, [r0, #56]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 48


 545              	.L46:
 604:..\FreeRTOS/queue.c **** 
 546              		.loc 1 604 0
 547 0012 1846     		mov	r0, r3
 548              	.LVL62:
 549 0014 10BD     		pop	{r4, pc}
 550              		.cfi_endproc
 551              	.LFE69:
 552              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 553 0016 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 554              		.align	2
 555              		.global	xQueueGenericSend
 556              		.thumb
 557              		.thumb_func
 558              		.type	xQueueGenericSend, %function
 559              	xQueueGenericSend:
 560              	.LFB70:
 610:..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 561              		.loc 1 610 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 16
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              	.LVL63:
 566 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 567              		.cfi_def_cfa_offset 20
 568              		.cfi_offset 4, -20
 569              		.cfi_offset 5, -16
 570              		.cfi_offset 6, -12
 571              		.cfi_offset 7, -8
 572              		.cfi_offset 14, -4
 573 0002 85B0     		sub	sp, sp, #20
 574              		.cfi_def_cfa_offset 40
 575 0004 0446     		mov	r4, r0
 576 0006 0F46     		mov	r7, r1
 577 0008 0192     		str	r2, [sp, #4]
 578 000a 1E46     		mov	r6, r3
 579              	.LVL64:
 611:..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 580              		.loc 1 611 0
 581 000c 0025     		movs	r5, #0
 582              	.LVL65:
 583              	.L49:
 630:..\FreeRTOS/queue.c **** 		{
 584              		.loc 1 630 0
 585 000e FFF7FEFF 		bl	vPortEnterCritical
 586              	.LVL66:
 636:..\FreeRTOS/queue.c **** 			{
 587              		.loc 1 636 0
 588 0012 A26B     		ldr	r2, [r4, #56]
 589 0014 E36B     		ldr	r3, [r4, #60]
 590 0016 9A42     		cmp	r2, r3
 591 0018 01D3     		bcc	.L50
 636:..\FreeRTOS/queue.c **** 			{
 592              		.loc 1 636 0 is_stmt 0 discriminator 1
 593 001a 022E     		cmp	r6, #2
 594 001c 16D1     		bne	.L51
 595              	.L50:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 49


 639:..\FreeRTOS/queue.c **** 
 596              		.loc 1 639 0 is_stmt 1
 597 001e 3246     		mov	r2, r6
 598 0020 3946     		mov	r1, r7
 599 0022 2046     		mov	r0, r4
 600 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 601              	.LVL67:
 694:..\FreeRTOS/queue.c **** 					{
 602              		.loc 1 694 0
 603 0028 636A     		ldr	r3, [r4, #36]
 604 002a 43B1     		cbz	r3, .L52
 696:..\FreeRTOS/queue.c **** 						{
 605              		.loc 1 696 0
 606 002c 04F12400 		add	r0, r4, #36
 607              	.LVL68:
 608 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 609              	.LVL69:
 610 0034 0128     		cmp	r0, #1
 611 0036 05D1     		bne	.L53
 702:..\FreeRTOS/queue.c **** 						}
 612              		.loc 1 702 0
 613 0038 FFF7FEFF 		bl	vPortYield
 614              	.LVL70:
 615 003c 02E0     		b	.L53
 616              	.LVL71:
 617              	.L52:
 709:..\FreeRTOS/queue.c **** 					{
 618              		.loc 1 709 0
 619 003e 08B1     		cbz	r0, .L53
 715:..\FreeRTOS/queue.c **** 					}
 620              		.loc 1 715 0
 621 0040 FFF7FEFF 		bl	vPortYield
 622              	.LVL72:
 623              	.L53:
 724:..\FreeRTOS/queue.c **** 				return pdPASS;
 624              		.loc 1 724 0
 625 0044 FFF7FEFF 		bl	vPortExitCritical
 626              	.LVL73:
 725:..\FreeRTOS/queue.c **** 			}
 627              		.loc 1 725 0
 628 0048 0120     		movs	r0, #1
 629 004a 42E0     		b	.L54
 630              	.L51:
 729:..\FreeRTOS/queue.c **** 				{
 631              		.loc 1 729 0
 632 004c 019B     		ldr	r3, [sp, #4]
 633 004e 1BB9     		cbnz	r3, .L55
 733:..\FreeRTOS/queue.c **** 
 634              		.loc 1 733 0
 635 0050 FFF7FEFF 		bl	vPortExitCritical
 636              	.LVL74:
 738:..\FreeRTOS/queue.c **** 				}
 637              		.loc 1 738 0
 638 0054 0020     		movs	r0, #0
 639 0056 3CE0     		b	.L54
 640              	.L55:
 740:..\FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 50


 641              		.loc 1 740 0
 642 0058 1DB9     		cbnz	r5, .L56
 744:..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 643              		.loc 1 744 0
 644 005a 02A8     		add	r0, sp, #8
 645 005c FFF7FEFF 		bl	vTaskSetTimeOutState
 646              	.LVL75:
 745:..\FreeRTOS/queue.c **** 				}
 647              		.loc 1 745 0
 648 0060 0125     		movs	r5, #1
 649              	.LVL76:
 650              	.L56:
 754:..\FreeRTOS/queue.c **** 
 651              		.loc 1 754 0
 652 0062 FFF7FEFF 		bl	vPortExitCritical
 653              	.LVL77:
 759:..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 654              		.loc 1 759 0
 655 0066 FFF7FEFF 		bl	vTaskSuspendAll
 656              	.LVL78:
 760:..\FreeRTOS/queue.c **** 
 657              		.loc 1 760 0
 658 006a FFF7FEFF 		bl	vPortEnterCritical
 659              	.LVL79:
 660 006e 636C     		ldr	r3, [r4, #68]
 661 0070 B3F1FF3F 		cmp	r3, #-1
 662 0074 01D1     		bne	.L57
 760:..\FreeRTOS/queue.c **** 
 663              		.loc 1 760 0 is_stmt 0 discriminator 1
 664 0076 0023     		movs	r3, #0
 665 0078 6364     		str	r3, [r4, #68]
 666              	.L57:
 760:..\FreeRTOS/queue.c **** 
 667              		.loc 1 760 0 discriminator 3
 668 007a A36C     		ldr	r3, [r4, #72]
 669 007c B3F1FF3F 		cmp	r3, #-1
 670 0080 01D1     		bne	.L58
 760:..\FreeRTOS/queue.c **** 
 671              		.loc 1 760 0 discriminator 4
 672 0082 0023     		movs	r3, #0
 673 0084 A364     		str	r3, [r4, #72]
 674              	.L58:
 760:..\FreeRTOS/queue.c **** 
 675              		.loc 1 760 0 discriminator 6
 676 0086 FFF7FEFF 		bl	vPortExitCritical
 677              	.LVL80:
 763:..\FreeRTOS/queue.c **** 		{
 678              		.loc 1 763 0 is_stmt 1 discriminator 6
 679 008a 01A9     		add	r1, sp, #4
 680              	.LVL81:
 681 008c 02A8     		add	r0, sp, #8
 682 008e FFF7FEFF 		bl	xTaskCheckForTimeOut
 683              	.LVL82:
 684 0092 C0B9     		cbnz	r0, .L59
 765:..\FreeRTOS/queue.c **** 			{
 685              		.loc 1 765 0
 686 0094 2046     		mov	r0, r4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 51


 687 0096 FFF7FEFF 		bl	prvIsQueueFull
 688              	.LVL83:
 689 009a 70B1     		cbz	r0, .L60
 768:..\FreeRTOS/queue.c **** 
 690              		.loc 1 768 0
 691 009c 0199     		ldr	r1, [sp, #4]
 692 009e 04F11000 		add	r0, r4, #16
 693 00a2 FFF7FEFF 		bl	vTaskPlaceOnEventList
 694              	.LVL84:
 775:..\FreeRTOS/queue.c **** 
 695              		.loc 1 775 0
 696 00a6 2046     		mov	r0, r4
 697 00a8 FFF7FEFF 		bl	prvUnlockQueue
 698              	.LVL85:
 782:..\FreeRTOS/queue.c **** 				{
 699              		.loc 1 782 0
 700 00ac FFF7FEFF 		bl	xTaskResumeAll
 701              	.LVL86:
 702 00b0 0028     		cmp	r0, #0
 703 00b2 ACD1     		bne	.L49
 784:..\FreeRTOS/queue.c **** 				}
 704              		.loc 1 784 0
 705 00b4 FFF7FEFF 		bl	vPortYield
 706              	.LVL87:
 707 00b8 A9E7     		b	.L49
 708              	.L60:
 790:..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 709              		.loc 1 790 0
 710 00ba 2046     		mov	r0, r4
 711 00bc FFF7FEFF 		bl	prvUnlockQueue
 712              	.LVL88:
 791:..\FreeRTOS/queue.c **** 			}
 713              		.loc 1 791 0
 714 00c0 FFF7FEFF 		bl	xTaskResumeAll
 715              	.LVL89:
 716 00c4 A3E7     		b	.L49
 717              	.L59:
 797:..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 718              		.loc 1 797 0
 719 00c6 2046     		mov	r0, r4
 720 00c8 FFF7FEFF 		bl	prvUnlockQueue
 721              	.LVL90:
 798:..\FreeRTOS/queue.c **** 
 722              		.loc 1 798 0
 723 00cc FFF7FEFF 		bl	xTaskResumeAll
 724              	.LVL91:
 803:..\FreeRTOS/queue.c **** 		}
 725              		.loc 1 803 0
 726 00d0 0020     		movs	r0, #0
 727              	.L54:
 806:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 728              		.loc 1 806 0
 729 00d2 05B0     		add	sp, sp, #20
 730              		.cfi_def_cfa_offset 20
 731              		@ sp needed
 732 00d4 F0BD     		pop	{r4, r5, r6, r7, pc}
 733              		.cfi_endproc
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 52


 734              	.LFE70:
 735              		.size	xQueueGenericSend, .-xQueueGenericSend
 736 00d6 00BF     		.section	.text.xQueueCreateMutex,"ax",%progbits
 737              		.align	2
 738              		.global	xQueueCreateMutex
 739              		.thumb
 740              		.thumb_func
 741              		.type	xQueueCreateMutex, %function
 742              	xQueueCreateMutex:
 743              	.LFB66:
 392:..\FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 744              		.loc 1 392 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              	.LVL92:
 749 0000 38B5     		push	{r3, r4, r5, lr}
 750              		.cfi_def_cfa_offset 16
 751              		.cfi_offset 3, -16
 752              		.cfi_offset 4, -12
 753              		.cfi_offset 5, -8
 754              		.cfi_offset 14, -4
 400:..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 755              		.loc 1 400 0
 756 0002 4C20     		movs	r0, #76
 757              	.LVL93:
 758 0004 FFF7FEFF 		bl	pvPortMalloc
 759              	.LVL94:
 401:..\FreeRTOS/queue.c **** 		{
 760              		.loc 1 401 0
 761 0008 0446     		mov	r4, r0
 762 000a C8B1     		cbz	r0, .L64
 404:..\FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 763              		.loc 1 404 0
 764 000c 0025     		movs	r5, #0
 765 000e 4560     		str	r5, [r0, #4]
 405:..\FreeRTOS/queue.c **** 
 766              		.loc 1 405 0
 767 0010 0560     		str	r5, [r0]
 409:..\FreeRTOS/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 768              		.loc 1 409 0
 769 0012 8560     		str	r5, [r0, #8]
 410:..\FreeRTOS/queue.c **** 
 770              		.loc 1 410 0
 771 0014 C560     		str	r5, [r0, #12]
 415:..\FreeRTOS/queue.c **** 			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 772              		.loc 1 415 0
 773 0016 8563     		str	r5, [r0, #56]
 416:..\FreeRTOS/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 774              		.loc 1 416 0
 775 0018 0123     		movs	r3, #1
 776 001a C363     		str	r3, [r0, #60]
 417:..\FreeRTOS/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 777              		.loc 1 417 0
 778 001c 0564     		str	r5, [r0, #64]
 418:..\FreeRTOS/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 779              		.loc 1 418 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 53


 780 001e 4FF0FF33 		mov	r3, #-1
 781 0022 4364     		str	r3, [r0, #68]
 419:..\FreeRTOS/queue.c **** 
 782              		.loc 1 419 0
 783 0024 8364     		str	r3, [r0, #72]
 434:..\FreeRTOS/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 784              		.loc 1 434 0
 785 0026 1030     		adds	r0, r0, #16
 786              	.LVL95:
 787 0028 FFF7FEFF 		bl	vListInitialise
 788              	.LVL96:
 435:..\FreeRTOS/queue.c **** 
 789              		.loc 1 435 0
 790 002c 04F12400 		add	r0, r4, #36
 791 0030 FFF7FEFF 		bl	vListInitialise
 792              	.LVL97:
 440:..\FreeRTOS/queue.c **** 		}
 793              		.loc 1 440 0
 794 0034 2B46     		mov	r3, r5
 795 0036 2A46     		mov	r2, r5
 796 0038 2946     		mov	r1, r5
 797 003a 2046     		mov	r0, r4
 798 003c FFF7FEFF 		bl	xQueueGenericSend
 799              	.LVL98:
 800              	.L64:
 448:..\FreeRTOS/queue.c **** 
 801              		.loc 1 448 0
 802 0040 2046     		mov	r0, r4
 803 0042 38BD     		pop	{r3, r4, r5, pc}
 804              		.cfi_endproc
 805              	.LFE66:
 806              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 807              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 808              		.align	2
 809              		.global	xQueueGiveMutexRecursive
 810              		.thumb
 811              		.thumb_func
 812              		.type	xQueueGiveMutexRecursive, %function
 813              	xQueueGiveMutexRecursive:
 814              	.LFB67:
 486:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 815              		.loc 1 486 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              	.LVL99:
 820 0000 38B5     		push	{r3, r4, r5, lr}
 821              		.cfi_def_cfa_offset 16
 822              		.cfi_offset 3, -16
 823              		.cfi_offset 4, -12
 824              		.cfi_offset 5, -8
 825              		.cfi_offset 14, -4
 826 0002 0446     		mov	r4, r0
 827              	.LVL100:
 498:..\FreeRTOS/queue.c **** 		{
 828              		.loc 1 498 0
 829 0004 4568     		ldr	r5, [r0, #4]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 54


 830 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 831              	.LVL101:
 832 000a 8542     		cmp	r5, r0
 833 000c 0AD1     		bne	.L68
 507:..\FreeRTOS/queue.c **** 
 834              		.loc 1 507 0
 835 000e E368     		ldr	r3, [r4, #12]
 836 0010 013B     		subs	r3, r3, #1
 837 0012 E360     		str	r3, [r4, #12]
 510:..\FreeRTOS/queue.c **** 			{
 838              		.loc 1 510 0
 839 0014 43B9     		cbnz	r3, .L69
 514:..\FreeRTOS/queue.c **** 			}
 840              		.loc 1 514 0
 841 0016 1A46     		mov	r2, r3
 842 0018 1946     		mov	r1, r3
 843 001a 2046     		mov	r0, r4
 844 001c FFF7FEFF 		bl	xQueueGenericSend
 845              	.LVL102:
 521:..\FreeRTOS/queue.c **** 		}
 846              		.loc 1 521 0
 847 0020 0120     		movs	r0, #1
 848 0022 38BD     		pop	{r3, r4, r5, pc}
 849              	.LVL103:
 850              	.L68:
 527:..\FreeRTOS/queue.c **** 
 851              		.loc 1 527 0
 852 0024 0020     		movs	r0, #0
 853 0026 38BD     		pop	{r3, r4, r5, pc}
 854              	.LVL104:
 855              	.L69:
 521:..\FreeRTOS/queue.c **** 		}
 856              		.loc 1 521 0
 857 0028 0120     		movs	r0, #1
 858              	.LVL105:
 533:..\FreeRTOS/queue.c **** 
 859              		.loc 1 533 0
 860 002a 38BD     		pop	{r3, r4, r5, pc}
 861              		.cfi_endproc
 862              	.LFE67:
 863              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 864              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 865              		.align	2
 866              		.global	xQueueGenericSendFromISR
 867              		.thumb
 868              		.thumb_func
 869              		.type	xQueueGenericSendFromISR, %function
 870              	xQueueGenericSendFromISR:
 871              	.LFB71:
1055:..\FreeRTOS/queue.c **** BaseType_t xReturn;
 872              		.loc 1 1055 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              	.LVL106:
 877 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 878              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 55


 879              		.cfi_offset 4, -24
 880              		.cfi_offset 5, -20
 881              		.cfi_offset 6, -16
 882              		.cfi_offset 7, -12
 883              		.cfi_offset 8, -8
 884              		.cfi_offset 14, -4
 885 0004 0446     		mov	r4, r0
 886 0006 0F46     		mov	r7, r1
 887 0008 9046     		mov	r8, r2
 888 000a 1D46     		mov	r5, r3
 889              	.LVL107:
1085:..\FreeRTOS/queue.c **** 	{
 890              		.loc 1 1085 0
 891 000c FFF7FEFF 		bl	ulPortSetInterruptMask
 892              	.LVL108:
 893 0010 0646     		mov	r6, r0
 894              	.LVL109:
1087:..\FreeRTOS/queue.c **** 		{
 895              		.loc 1 1087 0
 896 0012 A26B     		ldr	r2, [r4, #56]
 897 0014 E36B     		ldr	r3, [r4, #60]
 898 0016 9A42     		cmp	r2, r3
 899 0018 01D3     		bcc	.L72
1087:..\FreeRTOS/queue.c **** 		{
 900              		.loc 1 1087 0 is_stmt 0 discriminator 1
 901 001a 022D     		cmp	r5, #2
 902 001c 1BD1     		bne	.L75
 903              	.L72:
1096:..\FreeRTOS/queue.c **** 
 904              		.loc 1 1096 0 is_stmt 1
 905 001e 2A46     		mov	r2, r5
 906 0020 3946     		mov	r1, r7
 907 0022 2046     		mov	r0, r4
 908              	.LVL110:
 909 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 910              	.LVL111:
1100:..\FreeRTOS/queue.c **** 			{
 911              		.loc 1 1100 0
 912 0028 A36C     		ldr	r3, [r4, #72]
 913 002a B3F1FF3F 		cmp	r3, #-1
 914 002e 0DD1     		bne	.L74
1155:..\FreeRTOS/queue.c **** 					{
 915              		.loc 1 1155 0
 916 0030 636A     		ldr	r3, [r4, #36]
 917 0032 93B1     		cbz	r3, .L76
1157:..\FreeRTOS/queue.c **** 						{
 918              		.loc 1 1157 0
 919 0034 04F12400 		add	r0, r4, #36
 920 0038 FFF7FEFF 		bl	xTaskRemoveFromEventList
 921              	.LVL112:
 922 003c 78B1     		cbz	r0, .L77
1161:..\FreeRTOS/queue.c **** 							{
 923              		.loc 1 1161 0
 924 003e B8F1000F 		cmp	r8, #0
 925 0042 0ED0     		beq	.L78
1163:..\FreeRTOS/queue.c **** 							}
 926              		.loc 1 1163 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 56


 927 0044 0124     		movs	r4, #1
 928              	.LVL113:
 929 0046 C8F80040 		str	r4, [r8]
 930 004a 0BE0     		b	.L73
 931              	.LVL114:
 932              	.L74:
1186:..\FreeRTOS/queue.c **** 			}
 933              		.loc 1 1186 0
 934 004c A36C     		ldr	r3, [r4, #72]
 935 004e 0133     		adds	r3, r3, #1
 936 0050 A364     		str	r3, [r4, #72]
1189:..\FreeRTOS/queue.c **** 		}
 937              		.loc 1 1189 0
 938 0052 0124     		movs	r4, #1
 939              	.LVL115:
 940 0054 06E0     		b	.L73
 941              	.LVL116:
 942              	.L75:
1194:..\FreeRTOS/queue.c **** 		}
 943              		.loc 1 1194 0
 944 0056 0024     		movs	r4, #0
 945              	.LVL117:
 946 0058 04E0     		b	.L73
 947              	.LVL118:
 948              	.L76:
1189:..\FreeRTOS/queue.c **** 		}
 949              		.loc 1 1189 0
 950 005a 0124     		movs	r4, #1
 951              	.LVL119:
 952 005c 02E0     		b	.L73
 953              	.LVL120:
 954              	.L77:
 955 005e 0124     		movs	r4, #1
 956              	.LVL121:
 957 0060 00E0     		b	.L73
 958              	.LVL122:
 959              	.L78:
 960 0062 0124     		movs	r4, #1
 961              	.LVL123:
 962              	.L73:
1197:..\FreeRTOS/queue.c **** 
 963              		.loc 1 1197 0
 964 0064 3046     		mov	r0, r6
 965 0066 FFF7FEFF 		bl	vPortClearInterruptMask
 966              	.LVL124:
1200:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 967              		.loc 1 1200 0
 968 006a 2046     		mov	r0, r4
 969 006c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 970              		.cfi_endproc
 971              	.LFE71:
 972              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 973              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 974              		.align	2
 975              		.global	xQueueGiveFromISR
 976              		.thumb
 977              		.thumb_func
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 57


 978              		.type	xQueueGiveFromISR, %function
 979              	xQueueGiveFromISR:
 980              	.LFB72:
1204:..\FreeRTOS/queue.c **** BaseType_t xReturn;
 981              		.loc 1 1204 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 0
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985              	.LVL125:
 986 0000 70B5     		push	{r4, r5, r6, lr}
 987              		.cfi_def_cfa_offset 16
 988              		.cfi_offset 4, -16
 989              		.cfi_offset 5, -12
 990              		.cfi_offset 6, -8
 991              		.cfi_offset 14, -4
 992 0002 0446     		mov	r4, r0
 993 0004 0E46     		mov	r6, r1
 994              	.LVL126:
1242:..\FreeRTOS/queue.c **** 	{
 995              		.loc 1 1242 0
 996 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 997              	.LVL127:
 998 000a 0546     		mov	r5, r0
 999              	.LVL128:
1247:..\FreeRTOS/queue.c **** 		{
 1000              		.loc 1 1247 0
 1001 000c A26B     		ldr	r2, [r4, #56]
 1002 000e E36B     		ldr	r3, [r4, #60]
 1003 0010 9A42     		cmp	r2, r3
 1004 0012 16D2     		bcs	.L83
1257:..\FreeRTOS/queue.c **** 
 1005              		.loc 1 1257 0
 1006 0014 A36B     		ldr	r3, [r4, #56]
 1007 0016 0133     		adds	r3, r3, #1
 1008 0018 A363     		str	r3, [r4, #56]
1261:..\FreeRTOS/queue.c **** 			{
 1009              		.loc 1 1261 0
 1010 001a A36C     		ldr	r3, [r4, #72]
 1011 001c B3F1FF3F 		cmp	r3, #-1
 1012 0020 0AD1     		bne	.L82
1316:..\FreeRTOS/queue.c **** 					{
 1013              		.loc 1 1316 0
 1014 0022 636A     		ldr	r3, [r4, #36]
 1015 0024 7BB1     		cbz	r3, .L84
1318:..\FreeRTOS/queue.c **** 						{
 1016              		.loc 1 1318 0
 1017 0026 04F12400 		add	r0, r4, #36
 1018              	.LVL129:
 1019 002a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1020              	.LVL130:
 1021 002e 60B1     		cbz	r0, .L85
1322:..\FreeRTOS/queue.c **** 							{
 1022              		.loc 1 1322 0
 1023 0030 6EB1     		cbz	r6, .L86
1324:..\FreeRTOS/queue.c **** 							}
 1024              		.loc 1 1324 0
 1025 0032 0124     		movs	r4, #1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 58


 1026              	.LVL131:
 1027 0034 3460     		str	r4, [r6]
 1028 0036 0BE0     		b	.L81
 1029              	.LVL132:
 1030              	.L82:
1347:..\FreeRTOS/queue.c **** 			}
 1031              		.loc 1 1347 0
 1032 0038 A36C     		ldr	r3, [r4, #72]
 1033 003a 0133     		adds	r3, r3, #1
 1034 003c A364     		str	r3, [r4, #72]
1350:..\FreeRTOS/queue.c **** 		}
 1035              		.loc 1 1350 0
 1036 003e 0124     		movs	r4, #1
 1037              	.LVL133:
 1038 0040 06E0     		b	.L81
 1039              	.LVL134:
 1040              	.L83:
1355:..\FreeRTOS/queue.c **** 		}
 1041              		.loc 1 1355 0
 1042 0042 0024     		movs	r4, #0
 1043              	.LVL135:
 1044 0044 04E0     		b	.L81
 1045              	.LVL136:
 1046              	.L84:
1350:..\FreeRTOS/queue.c **** 		}
 1047              		.loc 1 1350 0
 1048 0046 0124     		movs	r4, #1
 1049              	.LVL137:
 1050 0048 02E0     		b	.L81
 1051              	.LVL138:
 1052              	.L85:
 1053 004a 0124     		movs	r4, #1
 1054              	.LVL139:
 1055 004c 00E0     		b	.L81
 1056              	.LVL140:
 1057              	.L86:
 1058 004e 0124     		movs	r4, #1
 1059              	.LVL141:
 1060              	.L81:
1358:..\FreeRTOS/queue.c **** 
 1061              		.loc 1 1358 0
 1062 0050 2846     		mov	r0, r5
 1063 0052 FFF7FEFF 		bl	vPortClearInterruptMask
 1064              	.LVL142:
1361:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1065              		.loc 1 1361 0
 1066 0056 2046     		mov	r0, r4
 1067 0058 70BD     		pop	{r4, r5, r6, pc}
 1068              		.cfi_endproc
 1069              	.LFE72:
 1070              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1071 005a 00BF     		.section	.text.xQueueGenericReceive,"ax",%progbits
 1072              		.align	2
 1073              		.global	xQueueGenericReceive
 1074              		.thumb
 1075              		.thumb_func
 1076              		.type	xQueueGenericReceive, %function
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 59


 1077              	xQueueGenericReceive:
 1078              	.LFB73:
1365:..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1079              		.loc 1 1365 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 16
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              	.LVL143:
 1084 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1085              		.cfi_def_cfa_offset 20
 1086              		.cfi_offset 4, -20
 1087              		.cfi_offset 5, -16
 1088              		.cfi_offset 6, -12
 1089              		.cfi_offset 7, -8
 1090              		.cfi_offset 14, -4
 1091 0002 85B0     		sub	sp, sp, #20
 1092              		.cfi_def_cfa_offset 40
 1093 0004 0446     		mov	r4, r0
 1094 0006 0F46     		mov	r7, r1
 1095 0008 0192     		str	r2, [sp, #4]
 1096 000a 1E46     		mov	r6, r3
 1097              	.LVL144:
1366:..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 1098              		.loc 1 1366 0
 1099 000c 0025     		movs	r5, #0
 1100              	.LVL145:
 1101              	.L89:
1385:..\FreeRTOS/queue.c **** 		{
 1102              		.loc 1 1385 0
 1103 000e FFF7FEFF 		bl	vPortEnterCritical
 1104              	.LVL146:
1389:..\FreeRTOS/queue.c **** 			{
 1105              		.loc 1 1389 0
 1106 0012 A36B     		ldr	r3, [r4, #56]
 1107 0014 33B3     		cbz	r3, .L90
1393:..\FreeRTOS/queue.c **** 
 1108              		.loc 1 1393 0
 1109 0016 E568     		ldr	r5, [r4, #12]
 1110              	.LVL147:
1395:..\FreeRTOS/queue.c **** 
 1111              		.loc 1 1395 0
 1112 0018 3946     		mov	r1, r7
 1113 001a 2046     		mov	r0, r4
 1114 001c FFF7FEFF 		bl	prvCopyDataFromQueue
 1115              	.LVL148:
1397:..\FreeRTOS/queue.c **** 				{
 1116              		.loc 1 1397 0
 1117 0020 96B9     		cbnz	r6, .L91
1402:..\FreeRTOS/queue.c **** 
 1118              		.loc 1 1402 0
 1119 0022 A36B     		ldr	r3, [r4, #56]
 1120 0024 013B     		subs	r3, r3, #1
 1121 0026 A363     		str	r3, [r4, #56]
1406:..\FreeRTOS/queue.c **** 						{
 1122              		.loc 1 1406 0
 1123 0028 2368     		ldr	r3, [r4]
 1124 002a 13B9     		cbnz	r3, .L92
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 60


1410:..\FreeRTOS/queue.c **** 						}
 1125              		.loc 1 1410 0
 1126 002c FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1127              	.LVL149:
 1128 0030 6060     		str	r0, [r4, #4]
 1129              	.L92:
1419:..\FreeRTOS/queue.c **** 					{
 1130              		.loc 1 1419 0
 1131 0032 2369     		ldr	r3, [r4, #16]
 1132 0034 93B1     		cbz	r3, .L93
1421:..\FreeRTOS/queue.c **** 						{
 1133              		.loc 1 1421 0
 1134 0036 04F11000 		add	r0, r4, #16
 1135 003a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1136              	.LVL150:
 1137 003e 0128     		cmp	r0, #1
 1138 0040 0CD1     		bne	.L93
1423:..\FreeRTOS/queue.c **** 						}
 1139              		.loc 1 1423 0
 1140 0042 FFF7FEFF 		bl	vPortYield
 1141              	.LVL151:
 1142 0046 09E0     		b	.L93
 1143              	.L91:
1441:..\FreeRTOS/queue.c **** 
 1144              		.loc 1 1441 0
 1145 0048 E560     		str	r5, [r4, #12]
1445:..\FreeRTOS/queue.c **** 					{
 1146              		.loc 1 1445 0
 1147 004a 636A     		ldr	r3, [r4, #36]
 1148 004c 33B1     		cbz	r3, .L93
1447:..\FreeRTOS/queue.c **** 						{
 1149              		.loc 1 1447 0
 1150 004e 04F12400 		add	r0, r4, #36
 1151 0052 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1152              	.LVL152:
 1153 0056 08B1     		cbz	r0, .L93
1450:..\FreeRTOS/queue.c **** 						}
 1154              		.loc 1 1450 0
 1155 0058 FFF7FEFF 		bl	vPortYield
 1156              	.LVL153:
 1157              	.L93:
1463:..\FreeRTOS/queue.c **** 				return pdPASS;
 1158              		.loc 1 1463 0
 1159 005c FFF7FEFF 		bl	vPortExitCritical
 1160              	.LVL154:
1464:..\FreeRTOS/queue.c **** 			}
 1161              		.loc 1 1464 0
 1162 0060 0120     		movs	r0, #1
 1163 0062 4BE0     		b	.L94
 1164              	.LVL155:
 1165              	.L90:
1468:..\FreeRTOS/queue.c **** 				{
 1166              		.loc 1 1468 0
 1167 0064 019B     		ldr	r3, [sp, #4]
 1168 0066 1BB9     		cbnz	r3, .L95
1472:..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1169              		.loc 1 1472 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 61


 1170 0068 FFF7FEFF 		bl	vPortExitCritical
 1171              	.LVL156:
1474:..\FreeRTOS/queue.c **** 				}
 1172              		.loc 1 1474 0
 1173 006c 0020     		movs	r0, #0
 1174 006e 45E0     		b	.L94
 1175              	.L95:
1476:..\FreeRTOS/queue.c **** 				{
 1176              		.loc 1 1476 0
 1177 0070 1DB9     		cbnz	r5, .L96
1480:..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1178              		.loc 1 1480 0
 1179 0072 02A8     		add	r0, sp, #8
 1180 0074 FFF7FEFF 		bl	vTaskSetTimeOutState
 1181              	.LVL157:
1481:..\FreeRTOS/queue.c **** 				}
 1182              		.loc 1 1481 0
 1183 0078 0125     		movs	r5, #1
 1184              	.LVL158:
 1185              	.L96:
1490:..\FreeRTOS/queue.c **** 
 1186              		.loc 1 1490 0
 1187 007a FFF7FEFF 		bl	vPortExitCritical
 1188              	.LVL159:
1495:..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1189              		.loc 1 1495 0
 1190 007e FFF7FEFF 		bl	vTaskSuspendAll
 1191              	.LVL160:
1496:..\FreeRTOS/queue.c **** 
 1192              		.loc 1 1496 0
 1193 0082 FFF7FEFF 		bl	vPortEnterCritical
 1194              	.LVL161:
 1195 0086 636C     		ldr	r3, [r4, #68]
 1196 0088 B3F1FF3F 		cmp	r3, #-1
 1197 008c 01D1     		bne	.L97
1496:..\FreeRTOS/queue.c **** 
 1198              		.loc 1 1496 0 is_stmt 0 discriminator 1
 1199 008e 0023     		movs	r3, #0
 1200 0090 6364     		str	r3, [r4, #68]
 1201              	.L97:
1496:..\FreeRTOS/queue.c **** 
 1202              		.loc 1 1496 0 discriminator 3
 1203 0092 A36C     		ldr	r3, [r4, #72]
 1204 0094 B3F1FF3F 		cmp	r3, #-1
 1205 0098 01D1     		bne	.L98
1496:..\FreeRTOS/queue.c **** 
 1206              		.loc 1 1496 0 discriminator 4
 1207 009a 0023     		movs	r3, #0
 1208 009c A364     		str	r3, [r4, #72]
 1209              	.L98:
1496:..\FreeRTOS/queue.c **** 
 1210              		.loc 1 1496 0 discriminator 6
 1211 009e FFF7FEFF 		bl	vPortExitCritical
 1212              	.LVL162:
1499:..\FreeRTOS/queue.c **** 		{
 1213              		.loc 1 1499 0 is_stmt 1 discriminator 6
 1214 00a2 01A9     		add	r1, sp, #4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 62


 1215              	.LVL163:
 1216 00a4 02A8     		add	r0, sp, #8
 1217 00a6 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1218              	.LVL164:
 1219 00aa 08BB     		cbnz	r0, .L99
1501:..\FreeRTOS/queue.c **** 			{
 1220              		.loc 1 1501 0
 1221 00ac 2046     		mov	r0, r4
 1222 00ae FFF7FEFF 		bl	prvIsQueueEmpty
 1223              	.LVL165:
 1224 00b2 B8B1     		cbz	r0, .L100
1507:..\FreeRTOS/queue.c **** 					{
 1225              		.loc 1 1507 0
 1226 00b4 2368     		ldr	r3, [r4]
 1227 00b6 33B9     		cbnz	r3, .L101
1509:..\FreeRTOS/queue.c **** 						{
 1228              		.loc 1 1509 0
 1229 00b8 FFF7FEFF 		bl	vPortEnterCritical
 1230              	.LVL166:
1511:..\FreeRTOS/queue.c **** 						}
 1231              		.loc 1 1511 0
 1232 00bc 6068     		ldr	r0, [r4, #4]
 1233 00be FFF7FEFF 		bl	vTaskPriorityInherit
 1234              	.LVL167:
1513:..\FreeRTOS/queue.c **** 					}
 1235              		.loc 1 1513 0
 1236 00c2 FFF7FEFF 		bl	vPortExitCritical
 1237              	.LVL168:
 1238              	.L101:
1522:..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1239              		.loc 1 1522 0
 1240 00c6 0199     		ldr	r1, [sp, #4]
 1241 00c8 04F12400 		add	r0, r4, #36
 1242 00cc FFF7FEFF 		bl	vTaskPlaceOnEventList
 1243              	.LVL169:
1523:..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1244              		.loc 1 1523 0
 1245 00d0 2046     		mov	r0, r4
 1246 00d2 FFF7FEFF 		bl	prvUnlockQueue
 1247              	.LVL170:
1524:..\FreeRTOS/queue.c **** 				{
 1248              		.loc 1 1524 0
 1249 00d6 FFF7FEFF 		bl	xTaskResumeAll
 1250              	.LVL171:
 1251 00da 0028     		cmp	r0, #0
 1252 00dc 97D1     		bne	.L89
1526:..\FreeRTOS/queue.c **** 				}
 1253              		.loc 1 1526 0
 1254 00de FFF7FEFF 		bl	vPortYield
 1255              	.LVL172:
 1256 00e2 94E7     		b	.L89
 1257              	.L100:
1536:..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1258              		.loc 1 1536 0
 1259 00e4 2046     		mov	r0, r4
 1260 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1261              	.LVL173:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 63


1537:..\FreeRTOS/queue.c **** 			}
 1262              		.loc 1 1537 0
 1263 00ea FFF7FEFF 		bl	xTaskResumeAll
 1264              	.LVL174:
 1265 00ee 8EE7     		b	.L89
 1266              	.L99:
1542:..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1267              		.loc 1 1542 0
 1268 00f0 2046     		mov	r0, r4
 1269 00f2 FFF7FEFF 		bl	prvUnlockQueue
 1270              	.LVL175:
1543:..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
 1271              		.loc 1 1543 0
 1272 00f6 FFF7FEFF 		bl	xTaskResumeAll
 1273              	.LVL176:
1545:..\FreeRTOS/queue.c **** 		}
 1274              		.loc 1 1545 0
 1275 00fa 0020     		movs	r0, #0
 1276              	.LVL177:
 1277              	.L94:
1548:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1278              		.loc 1 1548 0
 1279 00fc 05B0     		add	sp, sp, #20
 1280              		.cfi_def_cfa_offset 20
 1281              		@ sp needed
 1282 00fe F0BD     		pop	{r4, r5, r6, r7, pc}
 1283              		.cfi_endproc
 1284              	.LFE73:
 1285              		.size	xQueueGenericReceive, .-xQueueGenericReceive
 1286              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 1287              		.align	2
 1288              		.global	xQueueTakeMutexRecursive
 1289              		.thumb
 1290              		.thumb_func
 1291              		.type	xQueueTakeMutexRecursive, %function
 1292              	xQueueTakeMutexRecursive:
 1293              	.LFB68:
 541:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 1294              		.loc 1 541 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              	.LVL178:
 1299 0000 70B5     		push	{r4, r5, r6, lr}
 1300              		.cfi_def_cfa_offset 16
 1301              		.cfi_offset 4, -16
 1302              		.cfi_offset 5, -12
 1303              		.cfi_offset 6, -8
 1304              		.cfi_offset 14, -4
 1305 0002 0446     		mov	r4, r0
 1306 0004 0E46     		mov	r6, r1
 1307              	.LVL179:
 552:..\FreeRTOS/queue.c **** 		{
 1308              		.loc 1 552 0
 1309 0006 4568     		ldr	r5, [r0, #4]
 1310 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1311              	.LVL180:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 64


 1312 000c 8542     		cmp	r5, r0
 1313 000e 04D1     		bne	.L105
 554:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
 1314              		.loc 1 554 0
 1315 0010 E368     		ldr	r3, [r4, #12]
 1316 0012 0133     		adds	r3, r3, #1
 1317 0014 E360     		str	r3, [r4, #12]
 1318              	.LVL181:
 555:..\FreeRTOS/queue.c **** 		}
 1319              		.loc 1 555 0
 1320 0016 0120     		movs	r0, #1
 1321 0018 70BD     		pop	{r4, r5, r6, pc}
 1322              	.LVL182:
 1323              	.L105:
 559:..\FreeRTOS/queue.c **** 
 1324              		.loc 1 559 0
 1325 001a 0023     		movs	r3, #0
 1326 001c 3246     		mov	r2, r6
 1327 001e 1946     		mov	r1, r3
 1328 0020 2046     		mov	r0, r4
 1329 0022 FFF7FEFF 		bl	xQueueGenericReceive
 1330              	.LVL183:
 564:..\FreeRTOS/queue.c **** 			{
 1331              		.loc 1 564 0
 1332 0026 0128     		cmp	r0, #1
 1333 0028 02D1     		bne	.L106
 566:..\FreeRTOS/queue.c **** 			}
 1334              		.loc 1 566 0
 1335 002a E368     		ldr	r3, [r4, #12]
 1336 002c 0133     		adds	r3, r3, #1
 1337 002e E360     		str	r3, [r4, #12]
 1338              	.L106:
 575:..\FreeRTOS/queue.c **** 
 1339              		.loc 1 575 0
 1340 0030 70BD     		pop	{r4, r5, r6, pc}
 1341              		.cfi_endproc
 1342              	.LFE68:
 1343              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 1344 0032 00BF     		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1345              		.align	2
 1346              		.global	xQueueReceiveFromISR
 1347              		.thumb
 1348              		.thumb_func
 1349              		.type	xQueueReceiveFromISR, %function
 1350              	xQueueReceiveFromISR:
 1351              	.LFB74:
1552:..\FreeRTOS/queue.c **** BaseType_t xReturn;
 1352              		.loc 1 1552 0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 1356              	.LVL184:
 1357 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1358              		.cfi_def_cfa_offset 24
 1359              		.cfi_offset 3, -24
 1360              		.cfi_offset 4, -20
 1361              		.cfi_offset 5, -16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 65


 1362              		.cfi_offset 6, -12
 1363              		.cfi_offset 7, -8
 1364              		.cfi_offset 14, -4
 1365 0002 0446     		mov	r4, r0
 1366 0004 0E46     		mov	r6, r1
 1367 0006 1746     		mov	r7, r2
 1368              	.LVL185:
1576:..\FreeRTOS/queue.c **** 	{
 1369              		.loc 1 1576 0
 1370 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 1371              	.LVL186:
 1372 000c 0546     		mov	r5, r0
 1373              	.LVL187:
1579:..\FreeRTOS/queue.c **** 		{
 1374              		.loc 1 1579 0
 1375 000e A36B     		ldr	r3, [r4, #56]
 1376 0010 D3B1     		cbz	r3, .L111
1583:..\FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1377              		.loc 1 1583 0
 1378 0012 3146     		mov	r1, r6
 1379 0014 2046     		mov	r0, r4
 1380              	.LVL188:
 1381 0016 FFF7FEFF 		bl	prvCopyDataFromQueue
 1382              	.LVL189:
1584:..\FreeRTOS/queue.c **** 
 1383              		.loc 1 1584 0
 1384 001a A36B     		ldr	r3, [r4, #56]
 1385 001c 013B     		subs	r3, r3, #1
 1386 001e A363     		str	r3, [r4, #56]
1590:..\FreeRTOS/queue.c **** 			{
 1387              		.loc 1 1590 0
 1388 0020 636C     		ldr	r3, [r4, #68]
 1389 0022 B3F1FF3F 		cmp	r3, #-1
 1390 0026 0AD1     		bne	.L110
1592:..\FreeRTOS/queue.c **** 				{
 1391              		.loc 1 1592 0
 1392 0028 2369     		ldr	r3, [r4, #16]
 1393 002a 7BB1     		cbz	r3, .L112
1594:..\FreeRTOS/queue.c **** 					{
 1394              		.loc 1 1594 0
 1395 002c 04F11000 		add	r0, r4, #16
 1396 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1397              	.LVL190:
 1398 0034 60B1     		cbz	r0, .L113
1598:..\FreeRTOS/queue.c **** 						{
 1399              		.loc 1 1598 0
 1400 0036 6FB1     		cbz	r7, .L114
1600:..\FreeRTOS/queue.c **** 						}
 1401              		.loc 1 1600 0
 1402 0038 0124     		movs	r4, #1
 1403              	.LVL191:
 1404 003a 3C60     		str	r4, [r7]
 1405 003c 0BE0     		b	.L109
 1406              	.LVL192:
 1407              	.L110:
1621:..\FreeRTOS/queue.c **** 			}
 1408              		.loc 1 1621 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 66


 1409 003e 636C     		ldr	r3, [r4, #68]
 1410 0040 0133     		adds	r3, r3, #1
 1411 0042 6364     		str	r3, [r4, #68]
1624:..\FreeRTOS/queue.c **** 		}
 1412              		.loc 1 1624 0
 1413 0044 0124     		movs	r4, #1
 1414              	.LVL193:
 1415 0046 06E0     		b	.L109
 1416              	.LVL194:
 1417              	.L111:
1628:..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1418              		.loc 1 1628 0
 1419 0048 0024     		movs	r4, #0
 1420              	.LVL195:
 1421 004a 04E0     		b	.L109
 1422              	.LVL196:
 1423              	.L112:
1624:..\FreeRTOS/queue.c **** 		}
 1424              		.loc 1 1624 0
 1425 004c 0124     		movs	r4, #1
 1426              	.LVL197:
 1427 004e 02E0     		b	.L109
 1428              	.LVL198:
 1429              	.L113:
 1430 0050 0124     		movs	r4, #1
 1431              	.LVL199:
 1432 0052 00E0     		b	.L109
 1433              	.LVL200:
 1434              	.L114:
 1435 0054 0124     		movs	r4, #1
 1436              	.LVL201:
 1437              	.L109:
1632:..\FreeRTOS/queue.c **** 
 1438              		.loc 1 1632 0
 1439 0056 2846     		mov	r0, r5
 1440 0058 FFF7FEFF 		bl	vPortClearInterruptMask
 1441              	.LVL202:
1635:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1442              		.loc 1 1635 0
 1443 005c 2046     		mov	r0, r4
 1444 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1445              		.cfi_endproc
 1446              	.LFE74:
 1447              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 1448              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1449              		.align	2
 1450              		.global	xQueuePeekFromISR
 1451              		.thumb
 1452              		.thumb_func
 1453              		.type	xQueuePeekFromISR, %function
 1454              	xQueuePeekFromISR:
 1455              	.LFB75:
1639:..\FreeRTOS/queue.c **** BaseType_t xReturn;
 1456              		.loc 1 1639 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 67


 1460              	.LVL203:
 1461 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1462              		.cfi_def_cfa_offset 24
 1463              		.cfi_offset 3, -24
 1464              		.cfi_offset 4, -20
 1465              		.cfi_offset 5, -16
 1466              		.cfi_offset 6, -12
 1467              		.cfi_offset 7, -8
 1468              		.cfi_offset 14, -4
 1469 0002 0446     		mov	r4, r0
 1470 0004 0E46     		mov	r6, r1
 1471              	.LVL204:
1665:..\FreeRTOS/queue.c **** 	{
 1472              		.loc 1 1665 0
 1473 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 1474              	.LVL205:
 1475 000a 0546     		mov	r5, r0
 1476              	.LVL206:
1668:..\FreeRTOS/queue.c **** 		{
 1477              		.loc 1 1668 0
 1478 000c A36B     		ldr	r3, [r4, #56]
 1479 000e 3BB1     		cbz	r3, .L118
1674:..\FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1480              		.loc 1 1674 0
 1481 0010 E768     		ldr	r7, [r4, #12]
 1482              	.LVL207:
1675:..\FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1483              		.loc 1 1675 0
 1484 0012 3146     		mov	r1, r6
 1485 0014 2046     		mov	r0, r4
 1486              	.LVL208:
 1487 0016 FFF7FEFF 		bl	prvCopyDataFromQueue
 1488              	.LVL209:
1676:..\FreeRTOS/queue.c **** 
 1489              		.loc 1 1676 0
 1490 001a E760     		str	r7, [r4, #12]
 1491              	.LVL210:
1678:..\FreeRTOS/queue.c **** 		}
 1492              		.loc 1 1678 0
 1493 001c 0124     		movs	r4, #1
 1494              	.LVL211:
 1495 001e 00E0     		b	.L117
 1496              	.LVL212:
 1497              	.L118:
1682:..\FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 1498              		.loc 1 1682 0
 1499 0020 0024     		movs	r4, #0
 1500              	.LVL213:
 1501              	.L117:
1686:..\FreeRTOS/queue.c **** 
 1502              		.loc 1 1686 0
 1503 0022 2846     		mov	r0, r5
 1504 0024 FFF7FEFF 		bl	vPortClearInterruptMask
 1505              	.LVL214:
1689:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1506              		.loc 1 1689 0
 1507 0028 2046     		mov	r0, r4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 68


 1508 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1509              		.cfi_endproc
 1510              	.LFE75:
 1511              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 1512              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 1513              		.align	2
 1514              		.global	uxQueueMessagesWaiting
 1515              		.thumb
 1516              		.thumb_func
 1517              		.type	uxQueueMessagesWaiting, %function
 1518              	uxQueueMessagesWaiting:
 1519              	.LFB76:
1693:..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
 1520              		.loc 1 1693 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 0
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524              	.LVL215:
 1525 0000 10B5     		push	{r4, lr}
 1526              		.cfi_def_cfa_offset 8
 1527              		.cfi_offset 4, -8
 1528              		.cfi_offset 14, -4
 1529 0002 0446     		mov	r4, r0
1698:..\FreeRTOS/queue.c **** 	{
 1530              		.loc 1 1698 0
 1531 0004 FFF7FEFF 		bl	vPortEnterCritical
 1532              	.LVL216:
1700:..\FreeRTOS/queue.c **** 	}
 1533              		.loc 1 1700 0
 1534 0008 A46B     		ldr	r4, [r4, #56]
 1535              	.LVL217:
1702:..\FreeRTOS/queue.c **** 
 1536              		.loc 1 1702 0
 1537 000a FFF7FEFF 		bl	vPortExitCritical
 1538              	.LVL218:
1705:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1539              		.loc 1 1705 0
 1540 000e 2046     		mov	r0, r4
 1541 0010 10BD     		pop	{r4, pc}
 1542              		.cfi_endproc
 1543              	.LFE76:
 1544              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 1545 0012 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 1546              		.align	2
 1547              		.global	uxQueueSpacesAvailable
 1548              		.thumb
 1549              		.thumb_func
 1550              		.type	uxQueueSpacesAvailable, %function
 1551              	uxQueueSpacesAvailable:
 1552              	.LFB77:
1709:..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
 1553              		.loc 1 1709 0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
 1557              	.LVL219:
 1558 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 69


 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 4, -8
 1561              		.cfi_offset 14, -4
 1562 0002 0446     		mov	r4, r0
 1563              	.LVL220:
1716:..\FreeRTOS/queue.c **** 	{
 1564              		.loc 1 1716 0
 1565 0004 FFF7FEFF 		bl	vPortEnterCritical
 1566              	.LVL221:
1718:..\FreeRTOS/queue.c **** 	}
 1567              		.loc 1 1718 0
 1568 0008 E36B     		ldr	r3, [r4, #60]
 1569 000a A46B     		ldr	r4, [r4, #56]
 1570              	.LVL222:
 1571 000c 1C1B     		subs	r4, r3, r4
 1572              	.LVL223:
1720:..\FreeRTOS/queue.c **** 
 1573              		.loc 1 1720 0
 1574 000e FFF7FEFF 		bl	vPortExitCritical
 1575              	.LVL224:
1723:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1576              		.loc 1 1723 0
 1577 0012 2046     		mov	r0, r4
 1578 0014 10BD     		pop	{r4, pc}
 1579              		.cfi_endproc
 1580              	.LFE77:
 1581              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 1582 0016 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 1583              		.align	2
 1584              		.global	uxQueueMessagesWaitingFromISR
 1585              		.thumb
 1586              		.thumb_func
 1587              		.type	uxQueueMessagesWaitingFromISR, %function
 1588              	uxQueueMessagesWaitingFromISR:
 1589              	.LFB78:
1727:..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
 1590              		.loc 1 1727 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595              	.LVL225:
1732:..\FreeRTOS/queue.c **** 
 1596              		.loc 1 1732 0
 1597 0000 806B     		ldr	r0, [r0, #56]
 1598              	.LVL226:
1735:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1599              		.loc 1 1735 0
 1600 0002 7047     		bx	lr
 1601              		.cfi_endproc
 1602              	.LFE78:
 1603              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 1604              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 1605              		.align	2
 1606              		.global	xQueueIsQueueEmptyFromISR
 1607              		.thumb
 1608              		.thumb_func
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 70


 1609              		.type	xQueueIsQueueEmptyFromISR, %function
 1610              	xQueueIsQueueEmptyFromISR:
 1611              	.LFB84:
2013:..\FreeRTOS/queue.c **** BaseType_t xReturn;
 1612              		.loc 1 2013 0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
 1616              		@ link register save eliminated.
 1617              	.LVL227:
2017:..\FreeRTOS/queue.c **** 	{
 1618              		.loc 1 2017 0
 1619 0000 836B     		ldr	r3, [r0, #56]
 1620 0002 0BB9     		cbnz	r3, .L127
2019:..\FreeRTOS/queue.c **** 	}
 1621              		.loc 1 2019 0
 1622 0004 0120     		movs	r0, #1
 1623              	.LVL228:
 1624 0006 7047     		bx	lr
 1625              	.LVL229:
 1626              	.L127:
2023:..\FreeRTOS/queue.c **** 	}
 1627              		.loc 1 2023 0
 1628 0008 0020     		movs	r0, #0
 1629              	.LVL230:
2027:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1630              		.loc 1 2027 0
 1631 000a 7047     		bx	lr
 1632              		.cfi_endproc
 1633              	.LFE84:
 1634              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 1635              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 1636              		.align	2
 1637              		.global	xQueueIsQueueFullFromISR
 1638              		.thumb
 1639              		.thumb_func
 1640              		.type	xQueueIsQueueFullFromISR, %function
 1641              	xQueueIsQueueFullFromISR:
 1642              	.LFB86:
2049:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2050:..\FreeRTOS/queue.c **** 
2051:..\FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2052:..\FreeRTOS/queue.c **** {
 1643              		.loc 1 2052 0
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 0
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 1647              		@ link register save eliminated.
 1648              	.LVL231:
2053:..\FreeRTOS/queue.c **** BaseType_t xReturn;
2054:..\FreeRTOS/queue.c **** 
2055:..\FreeRTOS/queue.c **** 	configASSERT( xQueue );
2056:..\FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 1649              		.loc 1 2056 0
 1650 0000 826B     		ldr	r2, [r0, #56]
 1651 0002 C36B     		ldr	r3, [r0, #60]
 1652 0004 9A42     		cmp	r2, r3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 71


 1653 0006 01D1     		bne	.L130
2057:..\FreeRTOS/queue.c **** 	{
2058:..\FreeRTOS/queue.c **** 		xReturn = pdTRUE;
 1654              		.loc 1 2058 0
 1655 0008 0120     		movs	r0, #1
 1656              	.LVL232:
 1657 000a 7047     		bx	lr
 1658              	.LVL233:
 1659              	.L130:
2059:..\FreeRTOS/queue.c **** 	}
2060:..\FreeRTOS/queue.c **** 	else
2061:..\FreeRTOS/queue.c **** 	{
2062:..\FreeRTOS/queue.c **** 		xReturn = pdFALSE;
 1660              		.loc 1 2062 0
 1661 000c 0020     		movs	r0, #0
 1662              	.LVL234:
2063:..\FreeRTOS/queue.c **** 	}
2064:..\FreeRTOS/queue.c **** 
2065:..\FreeRTOS/queue.c **** 	return xReturn;
2066:..\FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1663              		.loc 1 2066 0
 1664 000e 7047     		bx	lr
 1665              		.cfi_endproc
 1666              	.LFE86:
 1667              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 1668              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 1669              		.align	2
 1670              		.global	vQueueAddToRegistry
 1671              		.thumb
 1672              		.thumb_func
 1673              		.type	vQueueAddToRegistry, %function
 1674              	vQueueAddToRegistry:
 1675              	.LFB87:
2067:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2068:..\FreeRTOS/queue.c **** 
2069:..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:..\FreeRTOS/queue.c **** 
2071:..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2072:..\FreeRTOS/queue.c **** 	{
2073:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
2074:..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:..\FreeRTOS/queue.c **** 
2076:..\FreeRTOS/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2077:..\FreeRTOS/queue.c **** 		is required to prevent an interrupt removing something from the queue
2078:..\FreeRTOS/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2079:..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2080:..\FreeRTOS/queue.c **** 		{
2081:..\FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2082:..\FreeRTOS/queue.c **** 			{
2083:..\FreeRTOS/queue.c **** 				/* The queue is full - do we want to block or just leave without
2084:..\FreeRTOS/queue.c **** 				posting? */
2085:..\FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:..\FreeRTOS/queue.c **** 				{
2087:..\FreeRTOS/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2088:..\FreeRTOS/queue.c **** 					return indicating that we need to block. */
2089:..\FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2090:..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 72


2091:..\FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2092:..\FreeRTOS/queue.c **** 				}
2093:..\FreeRTOS/queue.c **** 				else
2094:..\FreeRTOS/queue.c **** 				{
2095:..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2096:..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2097:..\FreeRTOS/queue.c **** 				}
2098:..\FreeRTOS/queue.c **** 			}
2099:..\FreeRTOS/queue.c **** 		}
2100:..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2101:..\FreeRTOS/queue.c **** 
2102:..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2103:..\FreeRTOS/queue.c **** 		{
2104:..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2105:..\FreeRTOS/queue.c **** 			{
2106:..\FreeRTOS/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2107:..\FreeRTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2108:..\FreeRTOS/queue.c **** 				xReturn = pdPASS;
2109:..\FreeRTOS/queue.c **** 
2110:..\FreeRTOS/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2111:..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2112:..\FreeRTOS/queue.c **** 				{
2113:..\FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2114:..\FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2115:..\FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2116:..\FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2117:..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2118:..\FreeRTOS/queue.c **** 					{
2119:..\FreeRTOS/queue.c **** 						/* The co-routine waiting has a higher priority so record
2120:..\FreeRTOS/queue.c **** 						that a yield might be appropriate. */
2121:..\FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2122:..\FreeRTOS/queue.c **** 					}
2123:..\FreeRTOS/queue.c **** 					else
2124:..\FreeRTOS/queue.c **** 					{
2125:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2126:..\FreeRTOS/queue.c **** 					}
2127:..\FreeRTOS/queue.c **** 				}
2128:..\FreeRTOS/queue.c **** 				else
2129:..\FreeRTOS/queue.c **** 				{
2130:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2131:..\FreeRTOS/queue.c **** 				}
2132:..\FreeRTOS/queue.c **** 			}
2133:..\FreeRTOS/queue.c **** 			else
2134:..\FreeRTOS/queue.c **** 			{
2135:..\FreeRTOS/queue.c **** 				xReturn = errQUEUE_FULL;
2136:..\FreeRTOS/queue.c **** 			}
2137:..\FreeRTOS/queue.c **** 		}
2138:..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2139:..\FreeRTOS/queue.c **** 
2140:..\FreeRTOS/queue.c **** 		return xReturn;
2141:..\FreeRTOS/queue.c **** 	}
2142:..\FreeRTOS/queue.c **** 
2143:..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2144:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2145:..\FreeRTOS/queue.c **** 
2146:..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2147:..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 73


2148:..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2149:..\FreeRTOS/queue.c **** 	{
2150:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
2151:..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2152:..\FreeRTOS/queue.c **** 
2153:..\FreeRTOS/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2154:..\FreeRTOS/queue.c **** 		is required to prevent an interrupt adding something to the queue
2155:..\FreeRTOS/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2156:..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2157:..\FreeRTOS/queue.c **** 		{
2158:..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2159:..\FreeRTOS/queue.c **** 			{
2160:..\FreeRTOS/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2161:..\FreeRTOS/queue.c **** 				leave with nothing? */
2162:..\FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2163:..\FreeRTOS/queue.c **** 				{
2164:..\FreeRTOS/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2165:..\FreeRTOS/queue.c **** 					indicating that we need to block. */
2166:..\FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2167:..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2168:..\FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2169:..\FreeRTOS/queue.c **** 				}
2170:..\FreeRTOS/queue.c **** 				else
2171:..\FreeRTOS/queue.c **** 				{
2172:..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2173:..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2174:..\FreeRTOS/queue.c **** 				}
2175:..\FreeRTOS/queue.c **** 			}
2176:..\FreeRTOS/queue.c **** 			else
2177:..\FreeRTOS/queue.c **** 			{
2178:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2179:..\FreeRTOS/queue.c **** 			}
2180:..\FreeRTOS/queue.c **** 		}
2181:..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2182:..\FreeRTOS/queue.c **** 
2183:..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2184:..\FreeRTOS/queue.c **** 		{
2185:..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2186:..\FreeRTOS/queue.c **** 			{
2187:..\FreeRTOS/queue.c **** 				/* Data is available from the queue. */
2188:..\FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2189:..\FreeRTOS/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2190:..\FreeRTOS/queue.c **** 				{
2191:..\FreeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2192:..\FreeRTOS/queue.c **** 				}
2193:..\FreeRTOS/queue.c **** 				else
2194:..\FreeRTOS/queue.c **** 				{
2195:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2196:..\FreeRTOS/queue.c **** 				}
2197:..\FreeRTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2198:..\FreeRTOS/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2199:..\FreeRTOS/queue.c **** 
2200:..\FreeRTOS/queue.c **** 				xReturn = pdPASS;
2201:..\FreeRTOS/queue.c **** 
2202:..\FreeRTOS/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2203:..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2204:..\FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 74


2205:..\FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2206:..\FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2207:..\FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2208:..\FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2209:..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2210:..\FreeRTOS/queue.c **** 					{
2211:..\FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2212:..\FreeRTOS/queue.c **** 					}
2213:..\FreeRTOS/queue.c **** 					else
2214:..\FreeRTOS/queue.c **** 					{
2215:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2216:..\FreeRTOS/queue.c **** 					}
2217:..\FreeRTOS/queue.c **** 				}
2218:..\FreeRTOS/queue.c **** 				else
2219:..\FreeRTOS/queue.c **** 				{
2220:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2221:..\FreeRTOS/queue.c **** 				}
2222:..\FreeRTOS/queue.c **** 			}
2223:..\FreeRTOS/queue.c **** 			else
2224:..\FreeRTOS/queue.c **** 			{
2225:..\FreeRTOS/queue.c **** 				xReturn = pdFAIL;
2226:..\FreeRTOS/queue.c **** 			}
2227:..\FreeRTOS/queue.c **** 		}
2228:..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2229:..\FreeRTOS/queue.c **** 
2230:..\FreeRTOS/queue.c **** 		return xReturn;
2231:..\FreeRTOS/queue.c **** 	}
2232:..\FreeRTOS/queue.c **** 
2233:..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2234:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2235:..\FreeRTOS/queue.c **** 
2236:..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2237:..\FreeRTOS/queue.c **** 
2238:..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2239:..\FreeRTOS/queue.c **** 	{
2240:..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2241:..\FreeRTOS/queue.c **** 
2242:..\FreeRTOS/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2243:..\FreeRTOS/queue.c **** 		exit without doing anything. */
2244:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2245:..\FreeRTOS/queue.c **** 		{
2246:..\FreeRTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2247:..\FreeRTOS/queue.c **** 
2248:..\FreeRTOS/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2249:..\FreeRTOS/queue.c **** 			co-routine has not already been woken. */
2250:..\FreeRTOS/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2251:..\FreeRTOS/queue.c **** 			{
2252:..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2253:..\FreeRTOS/queue.c **** 				{
2254:..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2255:..\FreeRTOS/queue.c **** 					{
2256:..\FreeRTOS/queue.c **** 						return pdTRUE;
2257:..\FreeRTOS/queue.c **** 					}
2258:..\FreeRTOS/queue.c **** 					else
2259:..\FreeRTOS/queue.c **** 					{
2260:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2261:..\FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 75


2262:..\FreeRTOS/queue.c **** 				}
2263:..\FreeRTOS/queue.c **** 				else
2264:..\FreeRTOS/queue.c **** 				{
2265:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2266:..\FreeRTOS/queue.c **** 				}
2267:..\FreeRTOS/queue.c **** 			}
2268:..\FreeRTOS/queue.c **** 			else
2269:..\FreeRTOS/queue.c **** 			{
2270:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2271:..\FreeRTOS/queue.c **** 			}
2272:..\FreeRTOS/queue.c **** 		}
2273:..\FreeRTOS/queue.c **** 		else
2274:..\FreeRTOS/queue.c **** 		{
2275:..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2276:..\FreeRTOS/queue.c **** 		}
2277:..\FreeRTOS/queue.c **** 
2278:..\FreeRTOS/queue.c **** 		return xCoRoutinePreviouslyWoken;
2279:..\FreeRTOS/queue.c **** 	}
2280:..\FreeRTOS/queue.c **** 
2281:..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2282:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2283:..\FreeRTOS/queue.c **** 
2284:..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2285:..\FreeRTOS/queue.c **** 
2286:..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2287:..\FreeRTOS/queue.c **** 	{
2288:..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
2289:..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2290:..\FreeRTOS/queue.c **** 
2291:..\FreeRTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2292:..\FreeRTOS/queue.c **** 		not then just leave without doing anything. */
2293:..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2294:..\FreeRTOS/queue.c **** 		{
2295:..\FreeRTOS/queue.c **** 			/* Copy the data from the queue. */
2296:..\FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2297:..\FreeRTOS/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2298:..\FreeRTOS/queue.c **** 			{
2299:..\FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2300:..\FreeRTOS/queue.c **** 			}
2301:..\FreeRTOS/queue.c **** 			else
2302:..\FreeRTOS/queue.c **** 			{
2303:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2304:..\FreeRTOS/queue.c **** 			}
2305:..\FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2306:..\FreeRTOS/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2307:..\FreeRTOS/queue.c **** 
2308:..\FreeRTOS/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2309:..\FreeRTOS/queue.c **** 			{
2310:..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2311:..\FreeRTOS/queue.c **** 				{
2312:..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2313:..\FreeRTOS/queue.c **** 					{
2314:..\FreeRTOS/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2315:..\FreeRTOS/queue.c **** 					}
2316:..\FreeRTOS/queue.c **** 					else
2317:..\FreeRTOS/queue.c **** 					{
2318:..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 76


2319:..\FreeRTOS/queue.c **** 					}
2320:..\FreeRTOS/queue.c **** 				}
2321:..\FreeRTOS/queue.c **** 				else
2322:..\FreeRTOS/queue.c **** 				{
2323:..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2324:..\FreeRTOS/queue.c **** 				}
2325:..\FreeRTOS/queue.c **** 			}
2326:..\FreeRTOS/queue.c **** 			else
2327:..\FreeRTOS/queue.c **** 			{
2328:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2329:..\FreeRTOS/queue.c **** 			}
2330:..\FreeRTOS/queue.c **** 
2331:..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
2332:..\FreeRTOS/queue.c **** 		}
2333:..\FreeRTOS/queue.c **** 		else
2334:..\FreeRTOS/queue.c **** 		{
2335:..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
2336:..\FreeRTOS/queue.c **** 		}
2337:..\FreeRTOS/queue.c **** 
2338:..\FreeRTOS/queue.c **** 		return xReturn;
2339:..\FreeRTOS/queue.c **** 	}
2340:..\FreeRTOS/queue.c **** 
2341:..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2342:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2343:..\FreeRTOS/queue.c **** 
2344:..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2345:..\FreeRTOS/queue.c **** 
2346:..\FreeRTOS/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2347:..\FreeRTOS/queue.c **** 	{
 1676              		.loc 1 2347 0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 1680              		@ link register save eliminated.
 1681              	.LVL235:
2348:..\FreeRTOS/queue.c **** 	UBaseType_t ux;
2349:..\FreeRTOS/queue.c **** 
2350:..\FreeRTOS/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2351:..\FreeRTOS/queue.c **** 		a free slot. */
2352:..\FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 1682              		.loc 1 2352 0
 1683 0000 0023     		movs	r3, #0
 1684 0002 0BE0     		b	.L132
 1685              	.LVL236:
 1686              	.L135:
2353:..\FreeRTOS/queue.c **** 		{
2354:..\FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 1687              		.loc 1 2354 0
 1688 0004 074A     		ldr	r2, .L136
 1689 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 1690 000a 32B9     		cbnz	r2, .L133
2355:..\FreeRTOS/queue.c **** 			{
2356:..\FreeRTOS/queue.c **** 				/* Store the information on this queue. */
2357:..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 1691              		.loc 1 2357 0
 1692 000c 054A     		ldr	r2, .L136
 1693 000e 42F83310 		str	r1, [r2, r3, lsl #3]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 77


2358:..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 1694              		.loc 1 2358 0
 1695 0012 02EBC303 		add	r3, r2, r3, lsl #3
 1696              	.LVL237:
 1697 0016 5860     		str	r0, [r3, #4]
2359:..\FreeRTOS/queue.c **** 
2360:..\FreeRTOS/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2361:..\FreeRTOS/queue.c **** 				break;
 1698              		.loc 1 2361 0
 1699 0018 7047     		bx	lr
 1700              	.LVL238:
 1701              	.L133:
2352:..\FreeRTOS/queue.c **** 		{
 1702              		.loc 1 2352 0 discriminator 2
 1703 001a 0133     		adds	r3, r3, #1
 1704              	.LVL239:
 1705              	.L132:
2352:..\FreeRTOS/queue.c **** 		{
 1706              		.loc 1 2352 0 is_stmt 0 discriminator 1
 1707 001c 092B     		cmp	r3, #9
 1708 001e F1D9     		bls	.L135
 1709 0020 7047     		bx	lr
 1710              	.L137:
 1711 0022 00BF     		.align	2
 1712              	.L136:
 1713 0024 00000000 		.word	xQueueRegistry
 1714              		.cfi_endproc
 1715              	.LFE87:
 1716              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 1717              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 1718              		.align	2
 1719              		.global	vQueueUnregisterQueue
 1720              		.thumb
 1721              		.thumb_func
 1722              		.type	vQueueUnregisterQueue, %function
 1723              	vQueueUnregisterQueue:
 1724              	.LFB88:
2362:..\FreeRTOS/queue.c **** 			}
2363:..\FreeRTOS/queue.c **** 			else
2364:..\FreeRTOS/queue.c **** 			{
2365:..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2366:..\FreeRTOS/queue.c **** 			}
2367:..\FreeRTOS/queue.c **** 		}
2368:..\FreeRTOS/queue.c **** 	}
2369:..\FreeRTOS/queue.c **** 
2370:..\FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2371:..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2372:..\FreeRTOS/queue.c **** 
2373:..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2374:..\FreeRTOS/queue.c **** 
2375:..\FreeRTOS/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2376:..\FreeRTOS/queue.c **** 	{
 1725              		.loc 1 2376 0 is_stmt 1
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
 1729              		@ link register save eliminated.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 78


 1730              	.LVL240:
2377:..\FreeRTOS/queue.c **** 	UBaseType_t ux;
2378:..\FreeRTOS/queue.c **** 
2379:..\FreeRTOS/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2380:..\FreeRTOS/queue.c **** 		registry. */
2381:..\FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 1731              		.loc 1 2381 0
 1732 0000 0023     		movs	r3, #0
 1733 0002 0BE0     		b	.L139
 1734              	.LVL241:
 1735              	.L142:
2382:..\FreeRTOS/queue.c **** 		{
2383:..\FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 1736              		.loc 1 2383 0
 1737 0004 074A     		ldr	r2, .L143
 1738 0006 02EBC302 		add	r2, r2, r3, lsl #3
 1739 000a 5268     		ldr	r2, [r2, #4]
 1740 000c 8242     		cmp	r2, r0
 1741 000e 04D1     		bne	.L140
2384:..\FreeRTOS/queue.c **** 			{
2385:..\FreeRTOS/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2386:..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 1742              		.loc 1 2386 0
 1743 0010 0021     		movs	r1, #0
 1744 0012 044A     		ldr	r2, .L143
 1745 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2387:..\FreeRTOS/queue.c **** 				break;
 1746              		.loc 1 2387 0
 1747 0018 7047     		bx	lr
 1748              	.L140:
2381:..\FreeRTOS/queue.c **** 		{
 1749              		.loc 1 2381 0 discriminator 2
 1750 001a 0133     		adds	r3, r3, #1
 1751              	.LVL242:
 1752              	.L139:
2381:..\FreeRTOS/queue.c **** 		{
 1753              		.loc 1 2381 0 is_stmt 0 discriminator 1
 1754 001c 092B     		cmp	r3, #9
 1755 001e F1D9     		bls	.L142
 1756 0020 7047     		bx	lr
 1757              	.L144:
 1758 0022 00BF     		.align	2
 1759              	.L143:
 1760 0024 00000000 		.word	xQueueRegistry
 1761              		.cfi_endproc
 1762              	.LFE88:
 1763              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 1764              		.section	.text.vQueueDelete,"ax",%progbits
 1765              		.align	2
 1766              		.global	vQueueDelete
 1767              		.thumb
 1768              		.thumb_func
 1769              		.type	vQueueDelete, %function
 1770              	vQueueDelete:
 1771              	.LFB79:
1739:..\FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1772              		.loc 1 1739 0 is_stmt 1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 79


 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 0
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 1776              	.LVL243:
 1777 0000 10B5     		push	{r4, lr}
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 4, -8
 1780              		.cfi_offset 14, -4
 1781 0002 0446     		mov	r4, r0
 1782              	.LVL244:
1747:..\FreeRTOS/queue.c **** 	}
 1783              		.loc 1 1747 0
 1784 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 1785              	.LVL245:
1750:..\FreeRTOS/queue.c **** }
 1786              		.loc 1 1750 0
 1787 0008 2046     		mov	r0, r4
 1788 000a FFF7FEFF 		bl	vPortFree
 1789              	.LVL246:
 1790 000e 10BD     		pop	{r4, pc}
 1791              		.cfi_endproc
 1792              	.LFE79:
 1793              		.size	vQueueDelete, .-vQueueDelete
 1794              		.comm	xQueueRegistry,80,4
 1795              		.text
 1796              	.Letext0:
 1797              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1798              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1799              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1800              		.file 5 "..\\FreeRTOS\\portmacro.h"
 1801              		.file 6 "..\\FreeRTOS\\list.h"
 1802              		.file 7 "..\\FreeRTOS\\task.h"
 1803              		.file 8 "..\\FreeRTOS\\queue.h"
 1804              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 1805              		.file 10 "..\\FreeRTOS\\portable.h"
 1806              		.section	.debug_info,"",%progbits
 1807              	.Ldebug_info0:
 1808 0000 6C120000 		.4byte	0x126c
 1809 0004 0400     		.2byte	0x4
 1810 0006 00000000 		.4byte	.Ldebug_abbrev0
 1811 000a 04       		.byte	0x4
 1812 000b 01       		.uleb128 0x1
 1813 000c A1020000 		.4byte	.LASF136
 1814 0010 0C       		.byte	0xc
 1815 0011 88000000 		.4byte	.LASF137
 1816 0015 F5050000 		.4byte	.LASF138
 1817 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1818 001d 00000000 		.4byte	0
 1819 0021 00000000 		.4byte	.Ldebug_line0
 1820 0025 02       		.uleb128 0x2
 1821 0026 3D030000 		.4byte	.LASF3
 1822 002a 02       		.byte	0x2
 1823 002b D8       		.byte	0xd8
 1824 002c 30000000 		.4byte	0x30
 1825 0030 03       		.uleb128 0x3
 1826 0031 04       		.byte	0x4
 1827 0032 07       		.byte	0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 80


 1828 0033 7B000000 		.4byte	.LASF0
 1829 0037 04       		.uleb128 0x4
 1830 0038 04       		.byte	0x4
 1831 0039 05       		.byte	0x5
 1832 003a 696E7400 		.ascii	"int\000"
 1833 003e 03       		.uleb128 0x3
 1834 003f 08       		.byte	0x8
 1835 0040 05       		.byte	0x5
 1836 0041 1C050000 		.4byte	.LASF1
 1837 0045 03       		.uleb128 0x3
 1838 0046 08       		.byte	0x8
 1839 0047 04       		.byte	0x4
 1840 0048 E9050000 		.4byte	.LASF2
 1841 004c 02       		.uleb128 0x2
 1842 004d D2050000 		.4byte	.LASF4
 1843 0051 03       		.byte	0x3
 1844 0052 1B       		.byte	0x1b
 1845 0053 57000000 		.4byte	0x57
 1846 0057 03       		.uleb128 0x3
 1847 0058 01       		.byte	0x1
 1848 0059 06       		.byte	0x6
 1849 005a 86080000 		.4byte	.LASF5
 1850 005e 02       		.uleb128 0x2
 1851 005f 3D070000 		.4byte	.LASF6
 1852 0063 03       		.byte	0x3
 1853 0064 1D       		.byte	0x1d
 1854 0065 69000000 		.4byte	0x69
 1855 0069 03       		.uleb128 0x3
 1856 006a 01       		.byte	0x1
 1857 006b 08       		.byte	0x8
 1858 006c 9D070000 		.4byte	.LASF7
 1859 0070 03       		.uleb128 0x3
 1860 0071 02       		.byte	0x2
 1861 0072 05       		.byte	0x5
 1862 0073 85060000 		.4byte	.LASF8
 1863 0077 03       		.uleb128 0x3
 1864 0078 02       		.byte	0x2
 1865 0079 07       		.byte	0x7
 1866 007a 92080000 		.4byte	.LASF9
 1867 007e 02       		.uleb128 0x2
 1868 007f CE000000 		.4byte	.LASF10
 1869 0083 03       		.byte	0x3
 1870 0084 3F       		.byte	0x3f
 1871 0085 89000000 		.4byte	0x89
 1872 0089 03       		.uleb128 0x3
 1873 008a 04       		.byte	0x4
 1874 008b 05       		.byte	0x5
 1875 008c 9A060000 		.4byte	.LASF11
 1876 0090 02       		.uleb128 0x2
 1877 0091 AB070000 		.4byte	.LASF12
 1878 0095 03       		.byte	0x3
 1879 0096 41       		.byte	0x41
 1880 0097 9B000000 		.4byte	0x9b
 1881 009b 03       		.uleb128 0x3
 1882 009c 04       		.byte	0x4
 1883 009d 07       		.byte	0x7
 1884 009e 71070000 		.4byte	.LASF13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 81


 1885 00a2 03       		.uleb128 0x3
 1886 00a3 08       		.byte	0x8
 1887 00a4 07       		.byte	0x7
 1888 00a5 37020000 		.4byte	.LASF14
 1889 00a9 03       		.uleb128 0x3
 1890 00aa 04       		.byte	0x4
 1891 00ab 07       		.byte	0x7
 1892 00ac 57070000 		.4byte	.LASF15
 1893 00b0 05       		.uleb128 0x5
 1894 00b1 04       		.byte	0x4
 1895 00b2 03       		.uleb128 0x3
 1896 00b3 01       		.byte	0x1
 1897 00b4 08       		.byte	0x8
 1898 00b5 34040000 		.4byte	.LASF16
 1899 00b9 06       		.uleb128 0x6
 1900 00ba 04       		.byte	0x4
 1901 00bb BF000000 		.4byte	0xbf
 1902 00bf 07       		.uleb128 0x7
 1903 00c0 B2000000 		.4byte	0xb2
 1904 00c4 06       		.uleb128 0x6
 1905 00c5 04       		.byte	0x4
 1906 00c6 CA000000 		.4byte	0xca
 1907 00ca 08       		.uleb128 0x8
 1908 00cb 02       		.uleb128 0x2
 1909 00cc EF010000 		.4byte	.LASF17
 1910 00d0 04       		.byte	0x4
 1911 00d1 14       		.byte	0x14
 1912 00d2 4C000000 		.4byte	0x4c
 1913 00d6 02       		.uleb128 0x2
 1914 00d7 DB040000 		.4byte	.LASF18
 1915 00db 04       		.byte	0x4
 1916 00dc 18       		.byte	0x18
 1917 00dd 5E000000 		.4byte	0x5e
 1918 00e1 02       		.uleb128 0x2
 1919 00e2 83070000 		.4byte	.LASF19
 1920 00e6 04       		.byte	0x4
 1921 00e7 2C       		.byte	0x2c
 1922 00e8 7E000000 		.4byte	0x7e
 1923 00ec 02       		.uleb128 0x2
 1924 00ed E6010000 		.4byte	.LASF20
 1925 00f1 04       		.byte	0x4
 1926 00f2 30       		.byte	0x30
 1927 00f3 90000000 		.4byte	0x90
 1928 00f7 03       		.uleb128 0x3
 1929 00f8 04       		.byte	0x4
 1930 00f9 04       		.byte	0x4
 1931 00fa 0C020000 		.4byte	.LASF21
 1932 00fe 03       		.uleb128 0x3
 1933 00ff 08       		.byte	0x8
 1934 0100 04       		.byte	0x4
 1935 0101 B3080000 		.4byte	.LASF22
 1936 0105 02       		.uleb128 0x2
 1937 0106 2A050000 		.4byte	.LASF23
 1938 010a 05       		.byte	0x5
 1939 010b 62       		.byte	0x62
 1940 010c 89000000 		.4byte	0x89
 1941 0110 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 82


 1942 0111 53040000 		.4byte	.LASF24
 1943 0115 05       		.byte	0x5
 1944 0116 63       		.byte	0x63
 1945 0117 9B000000 		.4byte	0x9b
 1946 011b 02       		.uleb128 0x2
 1947 011c C7050000 		.4byte	.LASF25
 1948 0120 05       		.byte	0x5
 1949 0121 69       		.byte	0x69
 1950 0122 EC000000 		.4byte	0xec
 1951 0126 09       		.uleb128 0x9
 1952 0127 D8000000 		.4byte	.LASF32
 1953 012b 14       		.byte	0x14
 1954 012c 06       		.byte	0x6
 1955 012d B5       		.byte	0xb5
 1956 012e 6F010000 		.4byte	0x16f
 1957 0132 0A       		.uleb128 0xa
 1958 0133 8F060000 		.4byte	.LASF26
 1959 0137 06       		.byte	0x6
 1960 0138 B8       		.byte	0xb8
 1961 0139 1B010000 		.4byte	0x11b
 1962 013d 00       		.byte	0
 1963 013e 0A       		.uleb128 0xa
 1964 013f 60050000 		.4byte	.LASF27
 1965 0143 06       		.byte	0x6
 1966 0144 B9       		.byte	0xb9
 1967 0145 6F010000 		.4byte	0x16f
 1968 0149 04       		.byte	0x4
 1969 014a 0A       		.uleb128 0xa
 1970 014b 67020000 		.4byte	.LASF28
 1971 014f 06       		.byte	0x6
 1972 0150 BA       		.byte	0xba
 1973 0151 6F010000 		.4byte	0x16f
 1974 0155 08       		.byte	0x8
 1975 0156 0A       		.uleb128 0xa
 1976 0157 00080000 		.4byte	.LASF29
 1977 015b 06       		.byte	0x6
 1978 015c BB       		.byte	0xbb
 1979 015d B0000000 		.4byte	0xb0
 1980 0161 0C       		.byte	0xc
 1981 0162 0A       		.uleb128 0xa
 1982 0163 70060000 		.4byte	.LASF30
 1983 0167 06       		.byte	0x6
 1984 0168 BC       		.byte	0xbc
 1985 0169 B0000000 		.4byte	0xb0
 1986 016d 10       		.byte	0x10
 1987 016e 00       		.byte	0
 1988 016f 06       		.uleb128 0x6
 1989 0170 04       		.byte	0x4
 1990 0171 26010000 		.4byte	0x126
 1991 0175 02       		.uleb128 0x2
 1992 0176 39040000 		.4byte	.LASF31
 1993 017a 06       		.byte	0x6
 1994 017b BF       		.byte	0xbf
 1995 017c 26010000 		.4byte	0x126
 1996 0180 09       		.uleb128 0x9
 1997 0181 61030000 		.4byte	.LASF33
 1998 0185 0C       		.byte	0xc
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 83


 1999 0186 06       		.byte	0x6
 2000 0187 C1       		.byte	0xc1
 2001 0188 B1010000 		.4byte	0x1b1
 2002 018c 0A       		.uleb128 0xa
 2003 018d 8F060000 		.4byte	.LASF26
 2004 0191 06       		.byte	0x6
 2005 0192 C4       		.byte	0xc4
 2006 0193 1B010000 		.4byte	0x11b
 2007 0197 00       		.byte	0
 2008 0198 0A       		.uleb128 0xa
 2009 0199 60050000 		.4byte	.LASF27
 2010 019d 06       		.byte	0x6
 2011 019e C5       		.byte	0xc5
 2012 019f 6F010000 		.4byte	0x16f
 2013 01a3 04       		.byte	0x4
 2014 01a4 0A       		.uleb128 0xa
 2015 01a5 67020000 		.4byte	.LASF28
 2016 01a9 06       		.byte	0x6
 2017 01aa C6       		.byte	0xc6
 2018 01ab 6F010000 		.4byte	0x16f
 2019 01af 08       		.byte	0x8
 2020 01b0 00       		.byte	0
 2021 01b1 02       		.uleb128 0x2
 2022 01b2 CC040000 		.4byte	.LASF34
 2023 01b6 06       		.byte	0x6
 2024 01b7 C8       		.byte	0xc8
 2025 01b8 80010000 		.4byte	0x180
 2026 01bc 09       		.uleb128 0x9
 2027 01bd 71030000 		.4byte	.LASF35
 2028 01c1 14       		.byte	0x14
 2029 01c2 06       		.byte	0x6
 2030 01c3 CD       		.byte	0xcd
 2031 01c4 ED010000 		.4byte	0x1ed
 2032 01c8 0A       		.uleb128 0xa
 2033 01c9 00000000 		.4byte	.LASF36
 2034 01cd 06       		.byte	0x6
 2035 01ce D0       		.byte	0xd0
 2036 01cf 10010000 		.4byte	0x110
 2037 01d3 00       		.byte	0
 2038 01d4 0A       		.uleb128 0xa
 2039 01d5 9C000000 		.4byte	.LASF37
 2040 01d9 06       		.byte	0x6
 2041 01da D1       		.byte	0xd1
 2042 01db ED010000 		.4byte	0x1ed
 2043 01df 04       		.byte	0x4
 2044 01e0 0A       		.uleb128 0xa
 2045 01e1 8E040000 		.4byte	.LASF38
 2046 01e5 06       		.byte	0x6
 2047 01e6 D2       		.byte	0xd2
 2048 01e7 B1010000 		.4byte	0x1b1
 2049 01eb 08       		.byte	0x8
 2050 01ec 00       		.byte	0
 2051 01ed 06       		.uleb128 0x6
 2052 01ee 04       		.byte	0x4
 2053 01ef 75010000 		.4byte	0x175
 2054 01f3 02       		.uleb128 0x2
 2055 01f4 B6050000 		.4byte	.LASF39
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 84


 2056 01f8 06       		.byte	0x6
 2057 01f9 D4       		.byte	0xd4
 2058 01fa BC010000 		.4byte	0x1bc
 2059 01fe 09       		.uleb128 0x9
 2060 01ff B9000000 		.4byte	.LASF40
 2061 0203 08       		.byte	0x8
 2062 0204 07       		.byte	0x7
 2063 0205 86       		.byte	0x86
 2064 0206 23020000 		.4byte	0x223
 2065 020a 0A       		.uleb128 0xa
 2066 020b 37010000 		.4byte	.LASF41
 2067 020f 07       		.byte	0x7
 2068 0210 88       		.byte	0x88
 2069 0211 05010000 		.4byte	0x105
 2070 0215 00       		.byte	0
 2071 0216 0A       		.uleb128 0xa
 2072 0217 3C050000 		.4byte	.LASF42
 2073 021b 07       		.byte	0x7
 2074 021c 89       		.byte	0x89
 2075 021d 1B010000 		.4byte	0x11b
 2076 0221 04       		.byte	0x4
 2077 0222 00       		.byte	0
 2078 0223 02       		.uleb128 0x2
 2079 0224 7C050000 		.4byte	.LASF43
 2080 0228 07       		.byte	0x7
 2081 0229 8A       		.byte	0x8a
 2082 022a FE010000 		.4byte	0x1fe
 2083 022e 02       		.uleb128 0x2
 2084 022f 80040000 		.4byte	.LASF44
 2085 0233 08       		.byte	0x8
 2086 0234 58       		.byte	0x58
 2087 0235 B0000000 		.4byte	0xb0
 2088 0239 0B       		.uleb128 0xb
 2089 023a 04       		.byte	0x4
 2090 023b 01       		.byte	0x1
 2091 023c 88       		.byte	0x88
 2092 023d 58020000 		.4byte	0x258
 2093 0241 0C       		.uleb128 0xc
 2094 0242 AE010000 		.4byte	.LASF45
 2095 0246 01       		.byte	0x1
 2096 0247 8A       		.byte	0x8a
 2097 0248 58020000 		.4byte	0x258
 2098 024c 0C       		.uleb128 0xc
 2099 024d 59010000 		.4byte	.LASF46
 2100 0251 01       		.byte	0x1
 2101 0252 8B       		.byte	0x8b
 2102 0253 10010000 		.4byte	0x110
 2103 0257 00       		.byte	0
 2104 0258 06       		.uleb128 0x6
 2105 0259 04       		.byte	0x4
 2106 025a CB000000 		.4byte	0xcb
 2107 025e 09       		.uleb128 0x9
 2108 025f 12020000 		.4byte	.LASF47
 2109 0263 4C       		.byte	0x4c
 2110 0264 01       		.byte	0x1
 2111 0265 82       		.byte	0x82
 2112 0266 ED020000 		.4byte	0x2ed
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 85


 2113 026a 0A       		.uleb128 0xa
 2114 026b 22080000 		.4byte	.LASF48
 2115 026f 01       		.byte	0x1
 2116 0270 84       		.byte	0x84
 2117 0271 58020000 		.4byte	0x258
 2118 0275 00       		.byte	0
 2119 0276 0A       		.uleb128 0xa
 2120 0277 36070000 		.4byte	.LASF49
 2121 027b 01       		.byte	0x1
 2122 027c 85       		.byte	0x85
 2123 027d 58020000 		.4byte	0x258
 2124 0281 04       		.byte	0x4
 2125 0282 0A       		.uleb128 0xa
 2126 0283 BD050000 		.4byte	.LASF50
 2127 0287 01       		.byte	0x1
 2128 0288 86       		.byte	0x86
 2129 0289 58020000 		.4byte	0x258
 2130 028d 08       		.byte	0x8
 2131 028e 0D       		.uleb128 0xd
 2132 028f 7500     		.ascii	"u\000"
 2133 0291 01       		.byte	0x1
 2134 0292 8C       		.byte	0x8c
 2135 0293 39020000 		.4byte	0x239
 2136 0297 0C       		.byte	0xc
 2137 0298 0A       		.uleb128 0xa
 2138 0299 0C010000 		.4byte	.LASF51
 2139 029d 01       		.byte	0x1
 2140 029e 8E       		.byte	0x8e
 2141 029f F3010000 		.4byte	0x1f3
 2142 02a3 10       		.byte	0x10
 2143 02a4 0A       		.uleb128 0xa
 2144 02a5 42000000 		.4byte	.LASF52
 2145 02a9 01       		.byte	0x1
 2146 02aa 8F       		.byte	0x8f
 2147 02ab F3010000 		.4byte	0x1f3
 2148 02af 24       		.byte	0x24
 2149 02b0 0A       		.uleb128 0xa
 2150 02b1 72020000 		.4byte	.LASF53
 2151 02b5 01       		.byte	0x1
 2152 02b6 91       		.byte	0x91
 2153 02b7 ED020000 		.4byte	0x2ed
 2154 02bb 38       		.byte	0x38
 2155 02bc 0A       		.uleb128 0xa
 2156 02bd 7C060000 		.4byte	.LASF54
 2157 02c1 01       		.byte	0x1
 2158 02c2 92       		.byte	0x92
 2159 02c3 10010000 		.4byte	0x110
 2160 02c7 3C       		.byte	0x3c
 2161 02c8 0A       		.uleb128 0xa
 2162 02c9 E9030000 		.4byte	.LASF55
 2163 02cd 01       		.byte	0x1
 2164 02ce 93       		.byte	0x93
 2165 02cf 10010000 		.4byte	0x110
 2166 02d3 40       		.byte	0x40
 2167 02d4 0A       		.uleb128 0xa
 2168 02d5 D1060000 		.4byte	.LASF56
 2169 02d9 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 86


 2170 02da 95       		.byte	0x95
 2171 02db F2020000 		.4byte	0x2f2
 2172 02df 44       		.byte	0x44
 2173 02e0 0A       		.uleb128 0xa
 2174 02e1 29080000 		.4byte	.LASF57
 2175 02e5 01       		.byte	0x1
 2176 02e6 96       		.byte	0x96
 2177 02e7 F2020000 		.4byte	0x2f2
 2178 02eb 48       		.byte	0x48
 2179 02ec 00       		.byte	0
 2180 02ed 0E       		.uleb128 0xe
 2181 02ee 10010000 		.4byte	0x110
 2182 02f2 0E       		.uleb128 0xe
 2183 02f3 05010000 		.4byte	0x105
 2184 02f7 02       		.uleb128 0x2
 2185 02f8 AC080000 		.4byte	.LASF58
 2186 02fc 01       		.byte	0x1
 2187 02fd A1       		.byte	0xa1
 2188 02fe 5E020000 		.4byte	0x25e
 2189 0302 02       		.uleb128 0x2
 2190 0303 6E010000 		.4byte	.LASF59
 2191 0307 01       		.byte	0x1
 2192 0308 A5       		.byte	0xa5
 2193 0309 F7020000 		.4byte	0x2f7
 2194 030d 09       		.uleb128 0x9
 2195 030e E3000000 		.4byte	.LASF60
 2196 0312 08       		.byte	0x8
 2197 0313 01       		.byte	0x1
 2198 0314 B2       		.byte	0xb2
 2199 0315 32030000 		.4byte	0x332
 2200 0319 0A       		.uleb128 0xa
 2201 031a 55030000 		.4byte	.LASF61
 2202 031e 01       		.byte	0x1
 2203 031f B4       		.byte	0xb4
 2204 0320 B9000000 		.4byte	0xb9
 2205 0324 00       		.byte	0
 2206 0325 0A       		.uleb128 0xa
 2207 0326 4D030000 		.4byte	.LASF62
 2208 032a 01       		.byte	0x1
 2209 032b B5       		.byte	0xb5
 2210 032c 2E020000 		.4byte	0x22e
 2211 0330 04       		.byte	0x4
 2212 0331 00       		.byte	0
 2213 0332 02       		.uleb128 0x2
 2214 0333 E3040000 		.4byte	.LASF63
 2215 0337 01       		.byte	0x1
 2216 0338 B6       		.byte	0xb6
 2217 0339 0D030000 		.4byte	0x30d
 2218 033d 02       		.uleb128 0x2
 2219 033e 8D010000 		.4byte	.LASF64
 2220 0342 01       		.byte	0x1
 2221 0343 BB       		.byte	0xbb
 2222 0344 32030000 		.4byte	0x332
 2223 0348 0F       		.uleb128 0xf
 2224 0349 44040000 		.4byte	.LASF65
 2225 034d 01       		.byte	0x1
 2226 034e EE07     		.2byte	0x7ee
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 87


 2227 0350 05010000 		.4byte	0x105
 2228 0354 00000000 		.4byte	.LFB85
 2229 0358 1E000000 		.4byte	.LFE85-.LFB85
 2230 035c 01       		.uleb128 0x1
 2231 035d 9C       		.byte	0x9c
 2232 035e 93030000 		.4byte	0x393
 2233 0362 10       		.uleb128 0x10
 2234 0363 47070000 		.4byte	.LASF67
 2235 0367 01       		.byte	0x1
 2236 0368 EE07     		.2byte	0x7ee
 2237 036a 93030000 		.4byte	0x393
 2238 036e 00000000 		.4byte	.LLST0
 2239 0372 11       		.uleb128 0x11
 2240 0373 4F070000 		.4byte	.LASF68
 2241 0377 01       		.byte	0x1
 2242 0378 F007     		.2byte	0x7f0
 2243 037a 05010000 		.4byte	0x105
 2244 037e 01       		.uleb128 0x1
 2245 037f 54       		.byte	0x54
 2246 0380 12       		.uleb128 0x12
 2247 0381 08000000 		.4byte	.LVL1
 2248 0385 89110000 		.4byte	0x1189
 2249 0389 12       		.uleb128 0x12
 2250 038a 1A000000 		.4byte	.LVL5
 2251 038e 94110000 		.4byte	0x1194
 2252 0392 00       		.byte	0
 2253 0393 06       		.uleb128 0x6
 2254 0394 04       		.byte	0x4
 2255 0395 99030000 		.4byte	0x399
 2256 0399 07       		.uleb128 0x7
 2257 039a 02030000 		.4byte	0x302
 2258 039e 0F       		.uleb128 0xf
 2259 039f 4E020000 		.4byte	.LASF66
 2260 03a3 01       		.byte	0x1
 2261 03a4 C707     		.2byte	0x7c7
 2262 03a6 05010000 		.4byte	0x105
 2263 03aa 00000000 		.4byte	.LFB83
 2264 03ae 1A000000 		.4byte	.LFE83-.LFB83
 2265 03b2 01       		.uleb128 0x1
 2266 03b3 9C       		.byte	0x9c
 2267 03b4 E9030000 		.4byte	0x3e9
 2268 03b8 10       		.uleb128 0x10
 2269 03b9 47070000 		.4byte	.LASF67
 2270 03bd 01       		.byte	0x1
 2271 03be C707     		.2byte	0x7c7
 2272 03c0 93030000 		.4byte	0x393
 2273 03c4 45000000 		.4byte	.LLST1
 2274 03c8 11       		.uleb128 0x11
 2275 03c9 4F070000 		.4byte	.LASF68
 2276 03cd 01       		.byte	0x1
 2277 03ce C907     		.2byte	0x7c9
 2278 03d0 05010000 		.4byte	0x105
 2279 03d4 01       		.uleb128 0x1
 2280 03d5 54       		.byte	0x54
 2281 03d6 12       		.uleb128 0x12
 2282 03d7 08000000 		.4byte	.LVL7
 2283 03db 89110000 		.4byte	0x1189
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 88


 2284 03df 12       		.uleb128 0x12
 2285 03e0 16000000 		.4byte	.LVL11
 2286 03e4 94110000 		.4byte	0x1194
 2287 03e8 00       		.byte	0
 2288 03e9 0F       		.uleb128 0xf
 2289 03ea 90030000 		.4byte	.LASF69
 2290 03ee 01       		.byte	0x1
 2291 03ef F806     		.2byte	0x6f8
 2292 03f1 05010000 		.4byte	0x105
 2293 03f5 00000000 		.4byte	.LFB80
 2294 03f9 7C000000 		.4byte	.LFE80-.LFB80
 2295 03fd 01       		.uleb128 0x1
 2296 03fe 9C       		.byte	0x9c
 2297 03ff 5F040000 		.4byte	0x45f
 2298 0403 10       		.uleb128 0x10
 2299 0404 47070000 		.4byte	.LASF67
 2300 0408 01       		.byte	0x1
 2301 0409 F806     		.2byte	0x6f8
 2302 040b 65040000 		.4byte	0x465
 2303 040f 8A000000 		.4byte	.LLST2
 2304 0413 10       		.uleb128 0x10
 2305 0414 D9060000 		.4byte	.LASF70
 2306 0418 01       		.byte	0x1
 2307 0419 F806     		.2byte	0x6f8
 2308 041b C4000000 		.4byte	0xc4
 2309 041f EA000000 		.4byte	.LLST3
 2310 0423 10       		.uleb128 0x10
 2311 0424 BA080000 		.4byte	.LASF71
 2312 0428 01       		.byte	0x1
 2313 0429 F806     		.2byte	0x6f8
 2314 042b 6A040000 		.4byte	0x46a
 2315 042f 56010000 		.4byte	.LLST4
 2316 0433 13       		.uleb128 0x13
 2317 0434 4F070000 		.4byte	.LASF68
 2318 0438 01       		.byte	0x1
 2319 0439 FA06     		.2byte	0x6fa
 2320 043b 05010000 		.4byte	0x105
 2321 043f 74010000 		.4byte	.LLST5
 2322 0443 12       		.uleb128 0x12
 2323 0444 14000000 		.4byte	.LVL16
 2324 0448 9F110000 		.4byte	0x119f
 2325 044c 12       		.uleb128 0x12
 2326 044d 22000000 		.4byte	.LVL19
 2327 0451 AB110000 		.4byte	0x11ab
 2328 0455 12       		.uleb128 0x12
 2329 0456 3E000000 		.4byte	.LVL22
 2330 045a AB110000 		.4byte	0x11ab
 2331 045e 00       		.byte	0
 2332 045f 06       		.uleb128 0x6
 2333 0460 04       		.byte	0x4
 2334 0461 02030000 		.4byte	0x302
 2335 0465 07       		.uleb128 0x7
 2336 0466 5F040000 		.4byte	0x45f
 2337 046a 07       		.uleb128 0x7
 2338 046b 05010000 		.4byte	0x105
 2339 046f 14       		.uleb128 0x14
 2340 0470 C6070000 		.4byte	.LASF73
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 89


 2341 0474 01       		.byte	0x1
 2342 0475 4207     		.2byte	0x742
 2343 0477 00000000 		.4byte	.LFB81
 2344 047b 24000000 		.4byte	.LFE81-.LFB81
 2345 047f 01       		.uleb128 0x1
 2346 0480 9C       		.byte	0x9c
 2347 0481 B6040000 		.4byte	0x4b6
 2348 0485 10       		.uleb128 0x10
 2349 0486 47070000 		.4byte	.LASF67
 2350 048a 01       		.byte	0x1
 2351 048b 4207     		.2byte	0x742
 2352 048d 65040000 		.4byte	0x465
 2353 0491 AA010000 		.4byte	.LLST6
 2354 0495 10       		.uleb128 0x10
 2355 0496 5E020000 		.4byte	.LASF72
 2356 049a 01       		.byte	0x1
 2357 049b 4207     		.2byte	0x742
 2358 049d B6040000 		.4byte	0x4b6
 2359 04a1 D6010000 		.4byte	.LLST7
 2360 04a5 15       		.uleb128 0x15
 2361 04a6 20000000 		.4byte	.LVL30
 2362 04aa AB110000 		.4byte	0x11ab
 2363 04ae 16       		.uleb128 0x16
 2364 04af 01       		.uleb128 0x1
 2365 04b0 50       		.byte	0x50
 2366 04b1 02       		.uleb128 0x2
 2367 04b2 74       		.byte	0x74
 2368 04b3 00       		.sleb128 0
 2369 04b4 00       		.byte	0
 2370 04b5 00       		.byte	0
 2371 04b6 07       		.uleb128 0x7
 2372 04b7 B0000000 		.4byte	0xb0
 2373 04bb 14       		.uleb128 0x14
 2374 04bc 4A080000 		.4byte	.LASF74
 2375 04c0 01       		.byte	0x1
 2376 04c1 5407     		.2byte	0x754
 2377 04c3 00000000 		.4byte	.LFB82
 2378 04c7 62000000 		.4byte	.LFE82-.LFB82
 2379 04cb 01       		.uleb128 0x1
 2380 04cc 9C       		.byte	0x9c
 2381 04cd 40050000 		.4byte	0x540
 2382 04d1 10       		.uleb128 0x10
 2383 04d2 47070000 		.4byte	.LASF67
 2384 04d6 01       		.byte	0x1
 2385 04d7 5407     		.2byte	0x754
 2386 04d9 65040000 		.4byte	0x465
 2387 04dd FF010000 		.4byte	.LLST8
 2388 04e1 12       		.uleb128 0x12
 2389 04e2 08000000 		.4byte	.LVL33
 2390 04e6 89110000 		.4byte	0x1189
 2391 04ea 17       		.uleb128 0x17
 2392 04eb 16000000 		.4byte	.LVL34
 2393 04ef B4110000 		.4byte	0x11b4
 2394 04f3 FE040000 		.4byte	0x4fe
 2395 04f7 16       		.uleb128 0x16
 2396 04f8 01       		.uleb128 0x1
 2397 04f9 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 90


 2398 04fa 02       		.uleb128 0x2
 2399 04fb 74       		.byte	0x74
 2400 04fc 24       		.sleb128 36
 2401 04fd 00       		.byte	0
 2402 04fe 12       		.uleb128 0x12
 2403 04ff 1C000000 		.4byte	.LVL35
 2404 0503 C0110000 		.4byte	0x11c0
 2405 0507 12       		.uleb128 0x12
 2406 0508 32000000 		.4byte	.LVL36
 2407 050c 94110000 		.4byte	0x1194
 2408 0510 12       		.uleb128 0x12
 2409 0511 36000000 		.4byte	.LVL37
 2410 0515 89110000 		.4byte	0x1189
 2411 0519 17       		.uleb128 0x17
 2412 051a 44000000 		.4byte	.LVL38
 2413 051e B4110000 		.4byte	0x11b4
 2414 0522 2D050000 		.4byte	0x52d
 2415 0526 16       		.uleb128 0x16
 2416 0527 01       		.uleb128 0x1
 2417 0528 50       		.byte	0x50
 2418 0529 02       		.uleb128 0x2
 2419 052a 74       		.byte	0x74
 2420 052b 10       		.sleb128 16
 2421 052c 00       		.byte	0
 2422 052d 12       		.uleb128 0x12
 2423 052e 4A000000 		.4byte	.LVL39
 2424 0532 C0110000 		.4byte	0x11c0
 2425 0536 12       		.uleb128 0x12
 2426 0537 60000000 		.4byte	.LVL40
 2427 053b 94110000 		.4byte	0x1194
 2428 053f 00       		.byte	0
 2429 0540 18       		.uleb128 0x18
 2430 0541 59080000 		.4byte	.LASF77
 2431 0545 01       		.byte	0x1
 2432 0546 0401     		.2byte	0x104
 2433 0548 05010000 		.4byte	0x105
 2434 054c 00000000 		.4byte	.LFB64
 2435 0550 5C000000 		.4byte	.LFE64-.LFB64
 2436 0554 01       		.uleb128 0x1
 2437 0555 9C       		.byte	0x9c
 2438 0556 E2050000 		.4byte	0x5e2
 2439 055a 10       		.uleb128 0x10
 2440 055b 05020000 		.4byte	.LASF75
 2441 055f 01       		.byte	0x1
 2442 0560 0401     		.2byte	0x104
 2443 0562 2E020000 		.4byte	0x22e
 2444 0566 1D020000 		.4byte	.LLST9
 2445 056a 10       		.uleb128 0x10
 2446 056b 67050000 		.4byte	.LASF76
 2447 056f 01       		.byte	0x1
 2448 0570 0401     		.2byte	0x104
 2449 0572 05010000 		.4byte	0x105
 2450 0576 3B020000 		.4byte	.LLST10
 2451 057a 13       		.uleb128 0x13
 2452 057b 47070000 		.4byte	.LASF67
 2453 057f 01       		.byte	0x1
 2454 0580 0601     		.2byte	0x106
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 91


 2455 0582 65040000 		.4byte	0x465
 2456 0586 59020000 		.4byte	.LLST11
 2457 058a 12       		.uleb128 0x12
 2458 058b 0A000000 		.4byte	.LVL43
 2459 058f 89110000 		.4byte	0x1189
 2460 0593 17       		.uleb128 0x17
 2461 0594 3A000000 		.4byte	.LVL44
 2462 0598 B4110000 		.4byte	0x11b4
 2463 059c A7050000 		.4byte	0x5a7
 2464 05a0 16       		.uleb128 0x16
 2465 05a1 01       		.uleb128 0x1
 2466 05a2 50       		.byte	0x50
 2467 05a3 02       		.uleb128 0x2
 2468 05a4 74       		.byte	0x74
 2469 05a5 10       		.sleb128 16
 2470 05a6 00       		.byte	0
 2471 05a7 12       		.uleb128 0x12
 2472 05a8 42000000 		.4byte	.LVL45
 2473 05ac CC110000 		.4byte	0x11cc
 2474 05b0 17       		.uleb128 0x17
 2475 05b1 4C000000 		.4byte	.LVL46
 2476 05b5 D7110000 		.4byte	0x11d7
 2477 05b9 C4050000 		.4byte	0x5c4
 2478 05bd 16       		.uleb128 0x16
 2479 05be 01       		.uleb128 0x1
 2480 05bf 50       		.byte	0x50
 2481 05c0 02       		.uleb128 0x2
 2482 05c1 74       		.byte	0x74
 2483 05c2 10       		.sleb128 16
 2484 05c3 00       		.byte	0
 2485 05c4 17       		.uleb128 0x17
 2486 05c5 54000000 		.4byte	.LVL47
 2487 05c9 D7110000 		.4byte	0x11d7
 2488 05cd D8050000 		.4byte	0x5d8
 2489 05d1 16       		.uleb128 0x16
 2490 05d2 01       		.uleb128 0x1
 2491 05d3 50       		.byte	0x50
 2492 05d4 02       		.uleb128 0x2
 2493 05d5 74       		.byte	0x74
 2494 05d6 24       		.sleb128 36
 2495 05d7 00       		.byte	0
 2496 05d8 12       		.uleb128 0x12
 2497 05d9 58000000 		.4byte	.LVL48
 2498 05dd 94110000 		.4byte	0x1194
 2499 05e1 00       		.byte	0
 2500 05e2 18       		.uleb128 0x18
 2501 05e3 F6040000 		.4byte	.LASF78
 2502 05e7 01       		.byte	0x1
 2503 05e8 3901     		.2byte	0x139
 2504 05ea 2E020000 		.4byte	0x22e
 2505 05ee 00000000 		.4byte	.LFB65
 2506 05f2 38000000 		.4byte	.LFE65-.LFB65
 2507 05f6 01       		.uleb128 0x1
 2508 05f7 9C       		.byte	0x9c
 2509 05f8 7B060000 		.4byte	0x67b
 2510 05fc 10       		.uleb128 0x10
 2511 05fd DB050000 		.4byte	.LASF79
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 92


 2512 0601 01       		.byte	0x1
 2513 0602 3901     		.2byte	0x139
 2514 0604 7B060000 		.4byte	0x67b
 2515 0608 77020000 		.4byte	.LLST12
 2516 060c 10       		.uleb128 0x10
 2517 060d E9030000 		.4byte	.LASF55
 2518 0611 01       		.byte	0x1
 2519 0612 3901     		.2byte	0x139
 2520 0614 7B060000 		.4byte	0x67b
 2521 0618 AB020000 		.4byte	.LLST13
 2522 061c 10       		.uleb128 0x10
 2523 061d 9D050000 		.4byte	.LASF80
 2524 0621 01       		.byte	0x1
 2525 0622 3901     		.2byte	0x139
 2526 0624 80060000 		.4byte	0x680
 2527 0628 C9020000 		.4byte	.LLST14
 2528 062c 13       		.uleb128 0x13
 2529 062d C3000000 		.4byte	.LASF81
 2530 0631 01       		.byte	0x1
 2531 0632 3B01     		.2byte	0x13b
 2532 0634 5F040000 		.4byte	0x45f
 2533 0638 EA020000 		.4byte	.LLST15
 2534 063c 13       		.uleb128 0x13
 2535 063d B0060000 		.4byte	.LASF82
 2536 0641 01       		.byte	0x1
 2537 0642 3C01     		.2byte	0x13c
 2538 0644 25000000 		.4byte	0x25
 2539 0648 08030000 		.4byte	.LLST16
 2540 064c 13       		.uleb128 0x13
 2541 064d 4F070000 		.4byte	.LASF68
 2542 0651 01       		.byte	0x1
 2543 0652 3D01     		.2byte	0x13d
 2544 0654 2E020000 		.4byte	0x22e
 2545 0658 34030000 		.4byte	.LLST17
 2546 065c 12       		.uleb128 0x12
 2547 065d 18000000 		.4byte	.LVL56
 2548 0661 E3110000 		.4byte	0x11e3
 2549 0665 15       		.uleb128 0x15
 2550 0666 34000000 		.4byte	.LVL58
 2551 066a 40050000 		.4byte	0x540
 2552 066e 16       		.uleb128 0x16
 2553 066f 01       		.uleb128 0x1
 2554 0670 50       		.byte	0x50
 2555 0671 02       		.uleb128 0x2
 2556 0672 74       		.byte	0x74
 2557 0673 00       		.sleb128 0
 2558 0674 16       		.uleb128 0x16
 2559 0675 01       		.uleb128 0x1
 2560 0676 51       		.byte	0x51
 2561 0677 01       		.uleb128 0x1
 2562 0678 31       		.byte	0x31
 2563 0679 00       		.byte	0
 2564 067a 00       		.byte	0
 2565 067b 07       		.uleb128 0x7
 2566 067c 10010000 		.4byte	0x110
 2567 0680 07       		.uleb128 0x7
 2568 0681 D6000000 		.4byte	0xd6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 93


 2569 0685 18       		.uleb128 0x18
 2570 0686 C4080000 		.4byte	.LASF83
 2571 068a 01       		.byte	0x1
 2572 068b 4602     		.2byte	0x246
 2573 068d 2E020000 		.4byte	0x22e
 2574 0691 00000000 		.4byte	.LFB69
 2575 0695 16000000 		.4byte	.LFE69-.LFB69
 2576 0699 01       		.uleb128 0x1
 2577 069a 9C       		.byte	0x9c
 2578 069b EB060000 		.4byte	0x6eb
 2579 069f 10       		.uleb128 0x10
 2580 06a0 71050000 		.4byte	.LASF84
 2581 06a4 01       		.byte	0x1
 2582 06a5 4602     		.2byte	0x246
 2583 06a7 7B060000 		.4byte	0x67b
 2584 06ab 53030000 		.4byte	.LLST18
 2585 06af 10       		.uleb128 0x10
 2586 06b0 F4030000 		.4byte	.LASF85
 2587 06b4 01       		.byte	0x1
 2588 06b5 4602     		.2byte	0x246
 2589 06b7 7B060000 		.4byte	0x67b
 2590 06bb 74030000 		.4byte	.LLST19
 2591 06bf 13       		.uleb128 0x13
 2592 06c0 4D030000 		.4byte	.LASF62
 2593 06c4 01       		.byte	0x1
 2594 06c5 4802     		.2byte	0x248
 2595 06c7 2E020000 		.4byte	0x22e
 2596 06cb 92030000 		.4byte	.LLST20
 2597 06cf 15       		.uleb128 0x15
 2598 06d0 0C000000 		.4byte	.LVL61
 2599 06d4 E2050000 		.4byte	0x5e2
 2600 06d8 16       		.uleb128 0x16
 2601 06d9 01       		.uleb128 0x1
 2602 06da 50       		.byte	0x50
 2603 06db 03       		.uleb128 0x3
 2604 06dc F3       		.byte	0xf3
 2605 06dd 01       		.uleb128 0x1
 2606 06de 50       		.byte	0x50
 2607 06df 16       		.uleb128 0x16
 2608 06e0 01       		.uleb128 0x1
 2609 06e1 51       		.byte	0x51
 2610 06e2 01       		.uleb128 0x1
 2611 06e3 30       		.byte	0x30
 2612 06e4 16       		.uleb128 0x16
 2613 06e5 01       		.uleb128 0x1
 2614 06e6 52       		.byte	0x52
 2615 06e7 01       		.uleb128 0x1
 2616 06e8 32       		.byte	0x32
 2617 06e9 00       		.byte	0
 2618 06ea 00       		.byte	0
 2619 06eb 18       		.uleb128 0x18
 2620 06ec A3030000 		.4byte	.LASF86
 2621 06f0 01       		.byte	0x1
 2622 06f1 6102     		.2byte	0x261
 2623 06f3 05010000 		.4byte	0x105
 2624 06f7 00000000 		.4byte	.LFB70
 2625 06fb D6000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 94


 2626 06ff 01       		.uleb128 0x1
 2627 0700 9C       		.byte	0x9c
 2628 0701 C0080000 		.4byte	0x8c0
 2629 0705 10       		.uleb128 0x10
 2630 0706 05020000 		.4byte	.LASF75
 2631 070a 01       		.byte	0x1
 2632 070b 6102     		.2byte	0x261
 2633 070d 2E020000 		.4byte	0x22e
 2634 0711 B0030000 		.4byte	.LLST21
 2635 0715 10       		.uleb128 0x10
 2636 0716 D9060000 		.4byte	.LASF70
 2637 071a 01       		.byte	0x1
 2638 071b 6102     		.2byte	0x261
 2639 071d C0080000 		.4byte	0x8c0
 2640 0721 CE030000 		.4byte	.LLST22
 2641 0725 10       		.uleb128 0x10
 2642 0726 F3070000 		.4byte	.LASF87
 2643 072a 01       		.byte	0x1
 2644 072b 6102     		.2byte	0x261
 2645 072d 1B010000 		.4byte	0x11b
 2646 0731 EC030000 		.4byte	.LLST23
 2647 0735 10       		.uleb128 0x10
 2648 0736 76010000 		.4byte	.LASF88
 2649 073a 01       		.byte	0x1
 2650 073b 6102     		.2byte	0x261
 2651 073d 6A040000 		.4byte	0x46a
 2652 0741 23040000 		.4byte	.LLST24
 2653 0745 13       		.uleb128 0x13
 2654 0746 2F030000 		.4byte	.LASF89
 2655 074a 01       		.byte	0x1
 2656 074b 6302     		.2byte	0x263
 2657 074d 05010000 		.4byte	0x105
 2658 0751 41040000 		.4byte	.LLST25
 2659 0755 13       		.uleb128 0x13
 2660 0756 F6010000 		.4byte	.LASF90
 2661 075a 01       		.byte	0x1
 2662 075b 6302     		.2byte	0x263
 2663 075d 05010000 		.4byte	0x105
 2664 0761 77040000 		.4byte	.LLST26
 2665 0765 11       		.uleb128 0x11
 2666 0766 44030000 		.4byte	.LASF91
 2667 076a 01       		.byte	0x1
 2668 076b 6402     		.2byte	0x264
 2669 076d 23020000 		.4byte	0x223
 2670 0771 02       		.uleb128 0x2
 2671 0772 91       		.byte	0x91
 2672 0773 60       		.sleb128 -32
 2673 0774 13       		.uleb128 0x13
 2674 0775 47070000 		.4byte	.LASF67
 2675 0779 01       		.byte	0x1
 2676 077a 6502     		.2byte	0x265
 2677 077c 65040000 		.4byte	0x465
 2678 0780 95040000 		.4byte	.LLST27
 2679 0784 12       		.uleb128 0x12
 2680 0785 12000000 		.4byte	.LVL66
 2681 0789 89110000 		.4byte	0x1189
 2682 078d 17       		.uleb128 0x17
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 95


 2683 078e 28000000 		.4byte	.LVL67
 2684 0792 E9030000 		.4byte	0x3e9
 2685 0796 AD070000 		.4byte	0x7ad
 2686 079a 16       		.uleb128 0x16
 2687 079b 01       		.uleb128 0x1
 2688 079c 50       		.byte	0x50
 2689 079d 02       		.uleb128 0x2
 2690 079e 74       		.byte	0x74
 2691 079f 00       		.sleb128 0
 2692 07a0 16       		.uleb128 0x16
 2693 07a1 01       		.uleb128 0x1
 2694 07a2 51       		.byte	0x51
 2695 07a3 02       		.uleb128 0x2
 2696 07a4 77       		.byte	0x77
 2697 07a5 00       		.sleb128 0
 2698 07a6 16       		.uleb128 0x16
 2699 07a7 01       		.uleb128 0x1
 2700 07a8 52       		.byte	0x52
 2701 07a9 02       		.uleb128 0x2
 2702 07aa 76       		.byte	0x76
 2703 07ab 00       		.sleb128 0
 2704 07ac 00       		.byte	0
 2705 07ad 17       		.uleb128 0x17
 2706 07ae 34000000 		.4byte	.LVL69
 2707 07b2 B4110000 		.4byte	0x11b4
 2708 07b6 C1070000 		.4byte	0x7c1
 2709 07ba 16       		.uleb128 0x16
 2710 07bb 01       		.uleb128 0x1
 2711 07bc 50       		.byte	0x50
 2712 07bd 02       		.uleb128 0x2
 2713 07be 74       		.byte	0x74
 2714 07bf 24       		.sleb128 36
 2715 07c0 00       		.byte	0
 2716 07c1 12       		.uleb128 0x12
 2717 07c2 3C000000 		.4byte	.LVL70
 2718 07c6 CC110000 		.4byte	0x11cc
 2719 07ca 12       		.uleb128 0x12
 2720 07cb 44000000 		.4byte	.LVL72
 2721 07cf CC110000 		.4byte	0x11cc
 2722 07d3 12       		.uleb128 0x12
 2723 07d4 48000000 		.4byte	.LVL73
 2724 07d8 94110000 		.4byte	0x1194
 2725 07dc 12       		.uleb128 0x12
 2726 07dd 54000000 		.4byte	.LVL74
 2727 07e1 94110000 		.4byte	0x1194
 2728 07e5 17       		.uleb128 0x17
 2729 07e6 60000000 		.4byte	.LVL75
 2730 07ea EE110000 		.4byte	0x11ee
 2731 07ee F9070000 		.4byte	0x7f9
 2732 07f2 16       		.uleb128 0x16
 2733 07f3 01       		.uleb128 0x1
 2734 07f4 50       		.byte	0x50
 2735 07f5 02       		.uleb128 0x2
 2736 07f6 91       		.byte	0x91
 2737 07f7 60       		.sleb128 -32
 2738 07f8 00       		.byte	0
 2739 07f9 12       		.uleb128 0x12
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 96


 2740 07fa 66000000 		.4byte	.LVL77
 2741 07fe 94110000 		.4byte	0x1194
 2742 0802 12       		.uleb128 0x12
 2743 0803 6A000000 		.4byte	.LVL78
 2744 0807 FA110000 		.4byte	0x11fa
 2745 080b 12       		.uleb128 0x12
 2746 080c 6E000000 		.4byte	.LVL79
 2747 0810 89110000 		.4byte	0x1189
 2748 0814 12       		.uleb128 0x12
 2749 0815 8A000000 		.4byte	.LVL80
 2750 0819 94110000 		.4byte	0x1194
 2751 081d 17       		.uleb128 0x17
 2752 081e 92000000 		.4byte	.LVL82
 2753 0822 06120000 		.4byte	0x1206
 2754 0826 37080000 		.4byte	0x837
 2755 082a 16       		.uleb128 0x16
 2756 082b 01       		.uleb128 0x1
 2757 082c 50       		.byte	0x50
 2758 082d 02       		.uleb128 0x2
 2759 082e 91       		.byte	0x91
 2760 082f 60       		.sleb128 -32
 2761 0830 16       		.uleb128 0x16
 2762 0831 01       		.uleb128 0x1
 2763 0832 51       		.byte	0x51
 2764 0833 02       		.uleb128 0x2
 2765 0834 91       		.byte	0x91
 2766 0835 5C       		.sleb128 -36
 2767 0836 00       		.byte	0
 2768 0837 17       		.uleb128 0x17
 2769 0838 9A000000 		.4byte	.LVL83
 2770 083c 48030000 		.4byte	0x348
 2771 0840 4B080000 		.4byte	0x84b
 2772 0844 16       		.uleb128 0x16
 2773 0845 01       		.uleb128 0x1
 2774 0846 50       		.byte	0x50
 2775 0847 02       		.uleb128 0x2
 2776 0848 74       		.byte	0x74
 2777 0849 00       		.sleb128 0
 2778 084a 00       		.byte	0
 2779 084b 17       		.uleb128 0x17
 2780 084c A6000000 		.4byte	.LVL84
 2781 0850 12120000 		.4byte	0x1212
 2782 0854 5F080000 		.4byte	0x85f
 2783 0858 16       		.uleb128 0x16
 2784 0859 01       		.uleb128 0x1
 2785 085a 50       		.byte	0x50
 2786 085b 02       		.uleb128 0x2
 2787 085c 74       		.byte	0x74
 2788 085d 10       		.sleb128 16
 2789 085e 00       		.byte	0
 2790 085f 17       		.uleb128 0x17
 2791 0860 AC000000 		.4byte	.LVL85
 2792 0864 BB040000 		.4byte	0x4bb
 2793 0868 73080000 		.4byte	0x873
 2794 086c 16       		.uleb128 0x16
 2795 086d 01       		.uleb128 0x1
 2796 086e 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 97


 2797 086f 02       		.uleb128 0x2
 2798 0870 74       		.byte	0x74
 2799 0871 00       		.sleb128 0
 2800 0872 00       		.byte	0
 2801 0873 12       		.uleb128 0x12
 2802 0874 B0000000 		.4byte	.LVL86
 2803 0878 1E120000 		.4byte	0x121e
 2804 087c 12       		.uleb128 0x12
 2805 087d B8000000 		.4byte	.LVL87
 2806 0881 CC110000 		.4byte	0x11cc
 2807 0885 17       		.uleb128 0x17
 2808 0886 C0000000 		.4byte	.LVL88
 2809 088a BB040000 		.4byte	0x4bb
 2810 088e 99080000 		.4byte	0x899
 2811 0892 16       		.uleb128 0x16
 2812 0893 01       		.uleb128 0x1
 2813 0894 50       		.byte	0x50
 2814 0895 02       		.uleb128 0x2
 2815 0896 74       		.byte	0x74
 2816 0897 00       		.sleb128 0
 2817 0898 00       		.byte	0
 2818 0899 12       		.uleb128 0x12
 2819 089a C4000000 		.4byte	.LVL89
 2820 089e 1E120000 		.4byte	0x121e
 2821 08a2 17       		.uleb128 0x17
 2822 08a3 CC000000 		.4byte	.LVL90
 2823 08a7 BB040000 		.4byte	0x4bb
 2824 08ab B6080000 		.4byte	0x8b6
 2825 08af 16       		.uleb128 0x16
 2826 08b0 01       		.uleb128 0x1
 2827 08b1 50       		.byte	0x50
 2828 08b2 02       		.uleb128 0x2
 2829 08b3 74       		.byte	0x74
 2830 08b4 00       		.sleb128 0
 2831 08b5 00       		.byte	0
 2832 08b6 12       		.uleb128 0x12
 2833 08b7 D0000000 		.4byte	.LVL91
 2834 08bb 1E120000 		.4byte	0x121e
 2835 08bf 00       		.byte	0
 2836 08c0 07       		.uleb128 0x7
 2837 08c1 C4000000 		.4byte	0xc4
 2838 08c5 18       		.uleb128 0x18
 2839 08c6 0A050000 		.4byte	.LASF92
 2840 08ca 01       		.byte	0x1
 2841 08cb 8701     		.2byte	0x187
 2842 08cd 2E020000 		.4byte	0x22e
 2843 08d1 00000000 		.4byte	.LFB66
 2844 08d5 44000000 		.4byte	.LFE66-.LFB66
 2845 08d9 01       		.uleb128 0x1
 2846 08da 9C       		.byte	0x9c
 2847 08db 5E090000 		.4byte	0x95e
 2848 08df 10       		.uleb128 0x10
 2849 08e0 9D050000 		.4byte	.LASF80
 2850 08e4 01       		.byte	0x1
 2851 08e5 8701     		.2byte	0x187
 2852 08e7 80060000 		.4byte	0x680
 2853 08eb B3040000 		.4byte	.LLST28
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 98


 2854 08ef 13       		.uleb128 0x13
 2855 08f0 C3000000 		.4byte	.LASF81
 2856 08f4 01       		.byte	0x1
 2857 08f5 8901     		.2byte	0x189
 2858 08f7 5F040000 		.4byte	0x45f
 2859 08fb D4040000 		.4byte	.LLST29
 2860 08ff 17       		.uleb128 0x17
 2861 0900 08000000 		.4byte	.LVL94
 2862 0904 E3110000 		.4byte	0x11e3
 2863 0908 13090000 		.4byte	0x913
 2864 090c 16       		.uleb128 0x16
 2865 090d 01       		.uleb128 0x1
 2866 090e 50       		.byte	0x50
 2867 090f 02       		.uleb128 0x2
 2868 0910 08       		.byte	0x8
 2869 0911 4C       		.byte	0x4c
 2870 0912 00       		.byte	0
 2871 0913 17       		.uleb128 0x17
 2872 0914 2C000000 		.4byte	.LVL96
 2873 0918 D7110000 		.4byte	0x11d7
 2874 091c 27090000 		.4byte	0x927
 2875 0920 16       		.uleb128 0x16
 2876 0921 01       		.uleb128 0x1
 2877 0922 50       		.byte	0x50
 2878 0923 02       		.uleb128 0x2
 2879 0924 74       		.byte	0x74
 2880 0925 10       		.sleb128 16
 2881 0926 00       		.byte	0
 2882 0927 17       		.uleb128 0x17
 2883 0928 34000000 		.4byte	.LVL97
 2884 092c D7110000 		.4byte	0x11d7
 2885 0930 3B090000 		.4byte	0x93b
 2886 0934 16       		.uleb128 0x16
 2887 0935 01       		.uleb128 0x1
 2888 0936 50       		.byte	0x50
 2889 0937 02       		.uleb128 0x2
 2890 0938 74       		.byte	0x74
 2891 0939 24       		.sleb128 36
 2892 093a 00       		.byte	0
 2893 093b 15       		.uleb128 0x15
 2894 093c 40000000 		.4byte	.LVL98
 2895 0940 EB060000 		.4byte	0x6eb
 2896 0944 16       		.uleb128 0x16
 2897 0945 01       		.uleb128 0x1
 2898 0946 50       		.byte	0x50
 2899 0947 02       		.uleb128 0x2
 2900 0948 74       		.byte	0x74
 2901 0949 00       		.sleb128 0
 2902 094a 16       		.uleb128 0x16
 2903 094b 01       		.uleb128 0x1
 2904 094c 51       		.byte	0x51
 2905 094d 02       		.uleb128 0x2
 2906 094e 75       		.byte	0x75
 2907 094f 00       		.sleb128 0
 2908 0950 16       		.uleb128 0x16
 2909 0951 01       		.uleb128 0x1
 2910 0952 52       		.byte	0x52
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 99


 2911 0953 02       		.uleb128 0x2
 2912 0954 75       		.byte	0x75
 2913 0955 00       		.sleb128 0
 2914 0956 16       		.uleb128 0x16
 2915 0957 01       		.uleb128 0x1
 2916 0958 53       		.byte	0x53
 2917 0959 02       		.uleb128 0x2
 2918 095a 75       		.byte	0x75
 2919 095b 00       		.sleb128 0
 2920 095c 00       		.byte	0
 2921 095d 00       		.byte	0
 2922 095e 18       		.uleb128 0x18
 2923 095f 31080000 		.4byte	.LASF93
 2924 0963 01       		.byte	0x1
 2925 0964 E501     		.2byte	0x1e5
 2926 0966 05010000 		.4byte	0x105
 2927 096a 00000000 		.4byte	.LFB67
 2928 096e 2C000000 		.4byte	.LFE67-.LFB67
 2929 0972 01       		.uleb128 0x1
 2930 0973 9C       		.byte	0x9c
 2931 0974 C0090000 		.4byte	0x9c0
 2932 0978 10       		.uleb128 0x10
 2933 0979 35050000 		.4byte	.LASF94
 2934 097d 01       		.byte	0x1
 2935 097e E501     		.2byte	0x1e5
 2936 0980 2E020000 		.4byte	0x22e
 2937 0984 F2040000 		.4byte	.LLST30
 2938 0988 11       		.uleb128 0x11
 2939 0989 4F070000 		.4byte	.LASF68
 2940 098d 01       		.byte	0x1
 2941 098e E701     		.2byte	0x1e7
 2942 0990 05010000 		.4byte	0x105
 2943 0994 01       		.uleb128 0x1
 2944 0995 50       		.byte	0x50
 2945 0996 13       		.uleb128 0x13
 2946 0997 73000000 		.4byte	.LASF95
 2947 099b 01       		.byte	0x1
 2948 099c E801     		.2byte	0x1e8
 2949 099e 65040000 		.4byte	0x465
 2950 09a2 10050000 		.4byte	.LLST31
 2951 09a6 12       		.uleb128 0x12
 2952 09a7 0A000000 		.4byte	.LVL101
 2953 09ab 2A120000 		.4byte	0x122a
 2954 09af 15       		.uleb128 0x15
 2955 09b0 20000000 		.4byte	.LVL102
 2956 09b4 EB060000 		.4byte	0x6eb
 2957 09b8 16       		.uleb128 0x16
 2958 09b9 01       		.uleb128 0x1
 2959 09ba 50       		.byte	0x50
 2960 09bb 02       		.uleb128 0x2
 2961 09bc 74       		.byte	0x74
 2962 09bd 00       		.sleb128 0
 2963 09be 00       		.byte	0
 2964 09bf 00       		.byte	0
 2965 09c0 18       		.uleb128 0x18
 2966 09c1 77030000 		.4byte	.LASF96
 2967 09c5 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 100


 2968 09c6 1E04     		.2byte	0x41e
 2969 09c8 05010000 		.4byte	0x105
 2970 09cc 00000000 		.4byte	.LFB71
 2971 09d0 70000000 		.4byte	.LFE71-.LFB71
 2972 09d4 01       		.uleb128 0x1
 2973 09d5 9C       		.byte	0x9c
 2974 09d6 960A0000 		.4byte	0xa96
 2975 09da 10       		.uleb128 0x10
 2976 09db 05020000 		.4byte	.LASF75
 2977 09df 01       		.byte	0x1
 2978 09e0 1E04     		.2byte	0x41e
 2979 09e2 2E020000 		.4byte	0x22e
 2980 09e6 2E050000 		.4byte	.LLST32
 2981 09ea 10       		.uleb128 0x10
 2982 09eb D9060000 		.4byte	.LASF70
 2983 09ef 01       		.byte	0x1
 2984 09f0 1E04     		.2byte	0x41e
 2985 09f2 C0080000 		.4byte	0x8c0
 2986 09f6 D7050000 		.4byte	.LLST33
 2987 09fa 10       		.uleb128 0x10
 2988 09fb 59000000 		.4byte	.LASF97
 2989 09ff 01       		.byte	0x1
 2990 0a00 1E04     		.2byte	0x41e
 2991 0a02 9C0A0000 		.4byte	0xa9c
 2992 0a06 F5050000 		.4byte	.LLST34
 2993 0a0a 10       		.uleb128 0x10
 2994 0a0b 76010000 		.4byte	.LASF88
 2995 0a0f 01       		.byte	0x1
 2996 0a10 1E04     		.2byte	0x41e
 2997 0a12 6A040000 		.4byte	0x46a
 2998 0a16 13060000 		.4byte	.LLST35
 2999 0a1a 11       		.uleb128 0x11
 3000 0a1b 4F070000 		.4byte	.LASF68
 3001 0a1f 01       		.byte	0x1
 3002 0a20 2004     		.2byte	0x420
 3003 0a22 05010000 		.4byte	0x105
 3004 0a26 01       		.uleb128 0x1
 3005 0a27 54       		.byte	0x54
 3006 0a28 13       		.uleb128 0x13
 3007 0a29 CF010000 		.4byte	.LASF98
 3008 0a2d 01       		.byte	0x1
 3009 0a2e 2104     		.2byte	0x421
 3010 0a30 10010000 		.4byte	0x110
 3011 0a34 31060000 		.4byte	.LLST36
 3012 0a38 13       		.uleb128 0x13
 3013 0a39 47070000 		.4byte	.LASF67
 3014 0a3d 01       		.byte	0x1
 3015 0a3e 2204     		.2byte	0x422
 3016 0a40 65040000 		.4byte	0x465
 3017 0a44 65060000 		.4byte	.LLST37
 3018 0a48 12       		.uleb128 0x12
 3019 0a49 10000000 		.4byte	.LVL108
 3020 0a4d 36120000 		.4byte	0x1236
 3021 0a51 17       		.uleb128 0x17
 3022 0a52 28000000 		.4byte	.LVL111
 3023 0a56 E9030000 		.4byte	0x3e9
 3024 0a5a 710A0000 		.4byte	0xa71
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 101


 3025 0a5e 16       		.uleb128 0x16
 3026 0a5f 01       		.uleb128 0x1
 3027 0a60 50       		.byte	0x50
 3028 0a61 02       		.uleb128 0x2
 3029 0a62 74       		.byte	0x74
 3030 0a63 00       		.sleb128 0
 3031 0a64 16       		.uleb128 0x16
 3032 0a65 01       		.uleb128 0x1
 3033 0a66 51       		.byte	0x51
 3034 0a67 02       		.uleb128 0x2
 3035 0a68 77       		.byte	0x77
 3036 0a69 00       		.sleb128 0
 3037 0a6a 16       		.uleb128 0x16
 3038 0a6b 01       		.uleb128 0x1
 3039 0a6c 52       		.byte	0x52
 3040 0a6d 02       		.uleb128 0x2
 3041 0a6e 75       		.byte	0x75
 3042 0a6f 00       		.sleb128 0
 3043 0a70 00       		.byte	0
 3044 0a71 17       		.uleb128 0x17
 3045 0a72 3C000000 		.4byte	.LVL112
 3046 0a76 B4110000 		.4byte	0x11b4
 3047 0a7a 850A0000 		.4byte	0xa85
 3048 0a7e 16       		.uleb128 0x16
 3049 0a7f 01       		.uleb128 0x1
 3050 0a80 50       		.byte	0x50
 3051 0a81 02       		.uleb128 0x2
 3052 0a82 74       		.byte	0x74
 3053 0a83 24       		.sleb128 36
 3054 0a84 00       		.byte	0
 3055 0a85 15       		.uleb128 0x15
 3056 0a86 6A000000 		.4byte	.LVL124
 3057 0a8a 41120000 		.4byte	0x1241
 3058 0a8e 16       		.uleb128 0x16
 3059 0a8f 01       		.uleb128 0x1
 3060 0a90 50       		.byte	0x50
 3061 0a91 02       		.uleb128 0x2
 3062 0a92 76       		.byte	0x76
 3063 0a93 00       		.sleb128 0
 3064 0a94 00       		.byte	0
 3065 0a95 00       		.byte	0
 3066 0a96 06       		.uleb128 0x6
 3067 0a97 04       		.byte	0x4
 3068 0a98 05010000 		.4byte	0x105
 3069 0a9c 07       		.uleb128 0x7
 3070 0a9d 960A0000 		.4byte	0xa96
 3071 0aa1 18       		.uleb128 0x18
 3072 0aa2 5F040000 		.4byte	.LASF99
 3073 0aa6 01       		.byte	0x1
 3074 0aa7 B304     		.2byte	0x4b3
 3075 0aa9 05010000 		.4byte	0x105
 3076 0aad 00000000 		.4byte	.LFB72
 3077 0ab1 5A000000 		.4byte	.LFE72-.LFB72
 3078 0ab5 01       		.uleb128 0x1
 3079 0ab6 9C       		.byte	0x9c
 3080 0ab7 370B0000 		.4byte	0xb37
 3081 0abb 10       		.uleb128 0x10
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 102


 3082 0abc 05020000 		.4byte	.LASF75
 3083 0ac0 01       		.byte	0x1
 3084 0ac1 B304     		.2byte	0x4b3
 3085 0ac3 2E020000 		.4byte	0x22e
 3086 0ac7 0E070000 		.4byte	.LLST38
 3087 0acb 10       		.uleb128 0x10
 3088 0acc 59000000 		.4byte	.LASF97
 3089 0ad0 01       		.byte	0x1
 3090 0ad1 B304     		.2byte	0x4b3
 3091 0ad3 9C0A0000 		.4byte	0xa9c
 3092 0ad7 B7070000 		.4byte	.LLST39
 3093 0adb 11       		.uleb128 0x11
 3094 0adc 4F070000 		.4byte	.LASF68
 3095 0ae0 01       		.byte	0x1
 3096 0ae1 B504     		.2byte	0x4b5
 3097 0ae3 05010000 		.4byte	0x105
 3098 0ae7 01       		.uleb128 0x1
 3099 0ae8 54       		.byte	0x54
 3100 0ae9 13       		.uleb128 0x13
 3101 0aea CF010000 		.4byte	.LASF98
 3102 0aee 01       		.byte	0x1
 3103 0aef B604     		.2byte	0x4b6
 3104 0af1 10010000 		.4byte	0x110
 3105 0af5 D5070000 		.4byte	.LLST40
 3106 0af9 13       		.uleb128 0x13
 3107 0afa 47070000 		.4byte	.LASF67
 3108 0afe 01       		.byte	0x1
 3109 0aff B704     		.2byte	0x4b7
 3110 0b01 65040000 		.4byte	0x465
 3111 0b05 09080000 		.4byte	.LLST41
 3112 0b09 12       		.uleb128 0x12
 3113 0b0a 0A000000 		.4byte	.LVL127
 3114 0b0e 36120000 		.4byte	0x1236
 3115 0b12 17       		.uleb128 0x17
 3116 0b13 2E000000 		.4byte	.LVL130
 3117 0b17 B4110000 		.4byte	0x11b4
 3118 0b1b 260B0000 		.4byte	0xb26
 3119 0b1f 16       		.uleb128 0x16
 3120 0b20 01       		.uleb128 0x1
 3121 0b21 50       		.byte	0x50
 3122 0b22 02       		.uleb128 0x2
 3123 0b23 74       		.byte	0x74
 3124 0b24 24       		.sleb128 36
 3125 0b25 00       		.byte	0
 3126 0b26 15       		.uleb128 0x15
 3127 0b27 56000000 		.4byte	.LVL142
 3128 0b2b 41120000 		.4byte	0x1241
 3129 0b2f 16       		.uleb128 0x16
 3130 0b30 01       		.uleb128 0x1
 3131 0b31 50       		.byte	0x50
 3132 0b32 02       		.uleb128 0x2
 3133 0b33 75       		.byte	0x75
 3134 0b34 00       		.sleb128 0
 3135 0b35 00       		.byte	0
 3136 0b36 00       		.byte	0
 3137 0b37 18       		.uleb128 0x18
 3138 0b38 22020000 		.4byte	.LASF100
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 103


 3139 0b3c 01       		.byte	0x1
 3140 0b3d 5405     		.2byte	0x554
 3141 0b3f 05010000 		.4byte	0x105
 3142 0b43 00000000 		.4byte	.LFB73
 3143 0b47 00010000 		.4byte	.LFE73-.LFB73
 3144 0b4b 01       		.uleb128 0x1
 3145 0b4c 9C       		.byte	0x9c
 3146 0b4d 3E0D0000 		.4byte	0xd3e
 3147 0b51 10       		.uleb128 0x10
 3148 0b52 05020000 		.4byte	.LASF75
 3149 0b56 01       		.byte	0x1
 3150 0b57 5405     		.2byte	0x554
 3151 0b59 2E020000 		.4byte	0x22e
 3152 0b5d B2080000 		.4byte	.LLST42
 3153 0b61 10       		.uleb128 0x10
 3154 0b62 5E020000 		.4byte	.LASF72
 3155 0b66 01       		.byte	0x1
 3156 0b67 5405     		.2byte	0x554
 3157 0b69 B6040000 		.4byte	0x4b6
 3158 0b6d D0080000 		.4byte	.LLST43
 3159 0b71 10       		.uleb128 0x10
 3160 0b72 F3070000 		.4byte	.LASF87
 3161 0b76 01       		.byte	0x1
 3162 0b77 5405     		.2byte	0x554
 3163 0b79 1B010000 		.4byte	0x11b
 3164 0b7d EE080000 		.4byte	.LLST44
 3165 0b81 10       		.uleb128 0x10
 3166 0b82 A9050000 		.4byte	.LASF101
 3167 0b86 01       		.byte	0x1
 3168 0b87 5405     		.2byte	0x554
 3169 0b89 6A040000 		.4byte	0x46a
 3170 0b8d 25090000 		.4byte	.LLST45
 3171 0b91 13       		.uleb128 0x13
 3172 0b92 2F030000 		.4byte	.LASF89
 3173 0b96 01       		.byte	0x1
 3174 0b97 5605     		.2byte	0x556
 3175 0b99 05010000 		.4byte	0x105
 3176 0b9d 43090000 		.4byte	.LLST46
 3177 0ba1 11       		.uleb128 0x11
 3178 0ba2 44030000 		.4byte	.LASF91
 3179 0ba6 01       		.byte	0x1
 3180 0ba7 5705     		.2byte	0x557
 3181 0ba9 23020000 		.4byte	0x223
 3182 0bad 02       		.uleb128 0x2
 3183 0bae 91       		.byte	0x91
 3184 0baf 60       		.sleb128 -32
 3185 0bb0 13       		.uleb128 0x13
 3186 0bb1 86050000 		.4byte	.LASF102
 3187 0bb5 01       		.byte	0x1
 3188 0bb6 5805     		.2byte	0x558
 3189 0bb8 58020000 		.4byte	0x258
 3190 0bbc 84090000 		.4byte	.LLST47
 3191 0bc0 13       		.uleb128 0x13
 3192 0bc1 47070000 		.4byte	.LASF67
 3193 0bc5 01       		.byte	0x1
 3194 0bc6 5905     		.2byte	0x559
 3195 0bc8 65040000 		.4byte	0x465
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 104


 3196 0bcc 97090000 		.4byte	.LLST48
 3197 0bd0 12       		.uleb128 0x12
 3198 0bd1 12000000 		.4byte	.LVL146
 3199 0bd5 89110000 		.4byte	0x1189
 3200 0bd9 17       		.uleb128 0x17
 3201 0bda 20000000 		.4byte	.LVL148
 3202 0bde 6F040000 		.4byte	0x46f
 3203 0be2 F30B0000 		.4byte	0xbf3
 3204 0be6 16       		.uleb128 0x16
 3205 0be7 01       		.uleb128 0x1
 3206 0be8 50       		.byte	0x50
 3207 0be9 02       		.uleb128 0x2
 3208 0bea 74       		.byte	0x74
 3209 0beb 00       		.sleb128 0
 3210 0bec 16       		.uleb128 0x16
 3211 0bed 01       		.uleb128 0x1
 3212 0bee 51       		.byte	0x51
 3213 0bef 02       		.uleb128 0x2
 3214 0bf0 77       		.byte	0x77
 3215 0bf1 00       		.sleb128 0
 3216 0bf2 00       		.byte	0
 3217 0bf3 12       		.uleb128 0x12
 3218 0bf4 30000000 		.4byte	.LVL149
 3219 0bf8 4C120000 		.4byte	0x124c
 3220 0bfc 17       		.uleb128 0x17
 3221 0bfd 3E000000 		.4byte	.LVL150
 3222 0c01 B4110000 		.4byte	0x11b4
 3223 0c05 100C0000 		.4byte	0xc10
 3224 0c09 16       		.uleb128 0x16
 3225 0c0a 01       		.uleb128 0x1
 3226 0c0b 50       		.byte	0x50
 3227 0c0c 02       		.uleb128 0x2
 3228 0c0d 74       		.byte	0x74
 3229 0c0e 10       		.sleb128 16
 3230 0c0f 00       		.byte	0
 3231 0c10 12       		.uleb128 0x12
 3232 0c11 46000000 		.4byte	.LVL151
 3233 0c15 CC110000 		.4byte	0x11cc
 3234 0c19 17       		.uleb128 0x17
 3235 0c1a 56000000 		.4byte	.LVL152
 3236 0c1e B4110000 		.4byte	0x11b4
 3237 0c22 2D0C0000 		.4byte	0xc2d
 3238 0c26 16       		.uleb128 0x16
 3239 0c27 01       		.uleb128 0x1
 3240 0c28 50       		.byte	0x50
 3241 0c29 02       		.uleb128 0x2
 3242 0c2a 74       		.byte	0x74
 3243 0c2b 24       		.sleb128 36
 3244 0c2c 00       		.byte	0
 3245 0c2d 12       		.uleb128 0x12
 3246 0c2e 5C000000 		.4byte	.LVL153
 3247 0c32 CC110000 		.4byte	0x11cc
 3248 0c36 12       		.uleb128 0x12
 3249 0c37 60000000 		.4byte	.LVL154
 3250 0c3b 94110000 		.4byte	0x1194
 3251 0c3f 12       		.uleb128 0x12
 3252 0c40 6C000000 		.4byte	.LVL156
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 105


 3253 0c44 94110000 		.4byte	0x1194
 3254 0c48 17       		.uleb128 0x17
 3255 0c49 78000000 		.4byte	.LVL157
 3256 0c4d EE110000 		.4byte	0x11ee
 3257 0c51 5C0C0000 		.4byte	0xc5c
 3258 0c55 16       		.uleb128 0x16
 3259 0c56 01       		.uleb128 0x1
 3260 0c57 50       		.byte	0x50
 3261 0c58 02       		.uleb128 0x2
 3262 0c59 91       		.byte	0x91
 3263 0c5a 60       		.sleb128 -32
 3264 0c5b 00       		.byte	0
 3265 0c5c 12       		.uleb128 0x12
 3266 0c5d 7E000000 		.4byte	.LVL159
 3267 0c61 94110000 		.4byte	0x1194
 3268 0c65 12       		.uleb128 0x12
 3269 0c66 82000000 		.4byte	.LVL160
 3270 0c6a FA110000 		.4byte	0x11fa
 3271 0c6e 12       		.uleb128 0x12
 3272 0c6f 86000000 		.4byte	.LVL161
 3273 0c73 89110000 		.4byte	0x1189
 3274 0c77 12       		.uleb128 0x12
 3275 0c78 A2000000 		.4byte	.LVL162
 3276 0c7c 94110000 		.4byte	0x1194
 3277 0c80 17       		.uleb128 0x17
 3278 0c81 AA000000 		.4byte	.LVL164
 3279 0c85 06120000 		.4byte	0x1206
 3280 0c89 9A0C0000 		.4byte	0xc9a
 3281 0c8d 16       		.uleb128 0x16
 3282 0c8e 01       		.uleb128 0x1
 3283 0c8f 50       		.byte	0x50
 3284 0c90 02       		.uleb128 0x2
 3285 0c91 91       		.byte	0x91
 3286 0c92 60       		.sleb128 -32
 3287 0c93 16       		.uleb128 0x16
 3288 0c94 01       		.uleb128 0x1
 3289 0c95 51       		.byte	0x51
 3290 0c96 02       		.uleb128 0x2
 3291 0c97 91       		.byte	0x91
 3292 0c98 5C       		.sleb128 -36
 3293 0c99 00       		.byte	0
 3294 0c9a 17       		.uleb128 0x17
 3295 0c9b B2000000 		.4byte	.LVL165
 3296 0c9f 9E030000 		.4byte	0x39e
 3297 0ca3 AE0C0000 		.4byte	0xcae
 3298 0ca7 16       		.uleb128 0x16
 3299 0ca8 01       		.uleb128 0x1
 3300 0ca9 50       		.byte	0x50
 3301 0caa 02       		.uleb128 0x2
 3302 0cab 74       		.byte	0x74
 3303 0cac 00       		.sleb128 0
 3304 0cad 00       		.byte	0
 3305 0cae 12       		.uleb128 0x12
 3306 0caf BC000000 		.4byte	.LVL166
 3307 0cb3 89110000 		.4byte	0x1189
 3308 0cb7 12       		.uleb128 0x12
 3309 0cb8 C2000000 		.4byte	.LVL167
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 106


 3310 0cbc 58120000 		.4byte	0x1258
 3311 0cc0 12       		.uleb128 0x12
 3312 0cc1 C6000000 		.4byte	.LVL168
 3313 0cc5 94110000 		.4byte	0x1194
 3314 0cc9 17       		.uleb128 0x17
 3315 0cca D0000000 		.4byte	.LVL169
 3316 0cce 12120000 		.4byte	0x1212
 3317 0cd2 DD0C0000 		.4byte	0xcdd
 3318 0cd6 16       		.uleb128 0x16
 3319 0cd7 01       		.uleb128 0x1
 3320 0cd8 50       		.byte	0x50
 3321 0cd9 02       		.uleb128 0x2
 3322 0cda 74       		.byte	0x74
 3323 0cdb 24       		.sleb128 36
 3324 0cdc 00       		.byte	0
 3325 0cdd 17       		.uleb128 0x17
 3326 0cde D6000000 		.4byte	.LVL170
 3327 0ce2 BB040000 		.4byte	0x4bb
 3328 0ce6 F10C0000 		.4byte	0xcf1
 3329 0cea 16       		.uleb128 0x16
 3330 0ceb 01       		.uleb128 0x1
 3331 0cec 50       		.byte	0x50
 3332 0ced 02       		.uleb128 0x2
 3333 0cee 74       		.byte	0x74
 3334 0cef 00       		.sleb128 0
 3335 0cf0 00       		.byte	0
 3336 0cf1 12       		.uleb128 0x12
 3337 0cf2 DA000000 		.4byte	.LVL171
 3338 0cf6 1E120000 		.4byte	0x121e
 3339 0cfa 12       		.uleb128 0x12
 3340 0cfb E2000000 		.4byte	.LVL172
 3341 0cff CC110000 		.4byte	0x11cc
 3342 0d03 17       		.uleb128 0x17
 3343 0d04 EA000000 		.4byte	.LVL173
 3344 0d08 BB040000 		.4byte	0x4bb
 3345 0d0c 170D0000 		.4byte	0xd17
 3346 0d10 16       		.uleb128 0x16
 3347 0d11 01       		.uleb128 0x1
 3348 0d12 50       		.byte	0x50
 3349 0d13 02       		.uleb128 0x2
 3350 0d14 74       		.byte	0x74
 3351 0d15 00       		.sleb128 0
 3352 0d16 00       		.byte	0
 3353 0d17 12       		.uleb128 0x12
 3354 0d18 EE000000 		.4byte	.LVL174
 3355 0d1c 1E120000 		.4byte	0x121e
 3356 0d20 17       		.uleb128 0x17
 3357 0d21 F6000000 		.4byte	.LVL175
 3358 0d25 BB040000 		.4byte	0x4bb
 3359 0d29 340D0000 		.4byte	0xd34
 3360 0d2d 16       		.uleb128 0x16
 3361 0d2e 01       		.uleb128 0x1
 3362 0d2f 50       		.byte	0x50
 3363 0d30 02       		.uleb128 0x2
 3364 0d31 74       		.byte	0x74
 3365 0d32 00       		.sleb128 0
 3366 0d33 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 107


 3367 0d34 12       		.uleb128 0x12
 3368 0d35 FA000000 		.4byte	.LVL176
 3369 0d39 1E120000 		.4byte	0x121e
 3370 0d3d 00       		.byte	0
 3371 0d3e 18       		.uleb128 0x18
 3372 0d3f 57060000 		.4byte	.LASF103
 3373 0d43 01       		.byte	0x1
 3374 0d44 1C02     		.2byte	0x21c
 3375 0d46 05010000 		.4byte	0x105
 3376 0d4a 00000000 		.4byte	.LFB68
 3377 0d4e 32000000 		.4byte	.LFE68-.LFB68
 3378 0d52 01       		.uleb128 0x1
 3379 0d53 9C       		.byte	0x9c
 3380 0d54 C20D0000 		.4byte	0xdc2
 3381 0d58 10       		.uleb128 0x10
 3382 0d59 35050000 		.4byte	.LASF94
 3383 0d5d 01       		.byte	0x1
 3384 0d5e 1C02     		.2byte	0x21c
 3385 0d60 2E020000 		.4byte	0x22e
 3386 0d64 B5090000 		.4byte	.LLST49
 3387 0d68 10       		.uleb128 0x10
 3388 0d69 F3070000 		.4byte	.LASF87
 3389 0d6d 01       		.byte	0x1
 3390 0d6e 1C02     		.2byte	0x21c
 3391 0d70 1B010000 		.4byte	0x11b
 3392 0d74 D3090000 		.4byte	.LLST50
 3393 0d78 13       		.uleb128 0x13
 3394 0d79 4F070000 		.4byte	.LASF68
 3395 0d7d 01       		.byte	0x1
 3396 0d7e 1E02     		.2byte	0x21e
 3397 0d80 05010000 		.4byte	0x105
 3398 0d84 F1090000 		.4byte	.LLST51
 3399 0d88 13       		.uleb128 0x13
 3400 0d89 73000000 		.4byte	.LASF95
 3401 0d8d 01       		.byte	0x1
 3402 0d8e 1F02     		.2byte	0x21f
 3403 0d90 65040000 		.4byte	0x465
 3404 0d94 100A0000 		.4byte	.LLST52
 3405 0d98 12       		.uleb128 0x12
 3406 0d99 0C000000 		.4byte	.LVL180
 3407 0d9d 2A120000 		.4byte	0x122a
 3408 0da1 15       		.uleb128 0x15
 3409 0da2 26000000 		.4byte	.LVL183
 3410 0da6 370B0000 		.4byte	0xb37
 3411 0daa 16       		.uleb128 0x16
 3412 0dab 01       		.uleb128 0x1
 3413 0dac 50       		.byte	0x50
 3414 0dad 02       		.uleb128 0x2
 3415 0dae 74       		.byte	0x74
 3416 0daf 00       		.sleb128 0
 3417 0db0 16       		.uleb128 0x16
 3418 0db1 01       		.uleb128 0x1
 3419 0db2 51       		.byte	0x51
 3420 0db3 01       		.uleb128 0x1
 3421 0db4 30       		.byte	0x30
 3422 0db5 16       		.uleb128 0x16
 3423 0db6 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 108


 3424 0db7 52       		.byte	0x52
 3425 0db8 02       		.uleb128 0x2
 3426 0db9 76       		.byte	0x76
 3427 0dba 00       		.sleb128 0
 3428 0dbb 16       		.uleb128 0x16
 3429 0dbc 01       		.uleb128 0x1
 3430 0dbd 53       		.byte	0x53
 3431 0dbe 01       		.uleb128 0x1
 3432 0dbf 30       		.byte	0x30
 3433 0dc0 00       		.byte	0
 3434 0dc1 00       		.byte	0
 3435 0dc2 18       		.uleb128 0x18
 3436 0dc3 2D000000 		.4byte	.LASF104
 3437 0dc7 01       		.byte	0x1
 3438 0dc8 0F06     		.2byte	0x60f
 3439 0dca 05010000 		.4byte	0x105
 3440 0dce 00000000 		.4byte	.LFB74
 3441 0dd2 60000000 		.4byte	.LFE74-.LFB74
 3442 0dd6 01       		.uleb128 0x1
 3443 0dd7 9C       		.byte	0x9c
 3444 0dd8 820E0000 		.4byte	0xe82
 3445 0ddc 10       		.uleb128 0x10
 3446 0ddd 05020000 		.4byte	.LASF75
 3447 0de1 01       		.byte	0x1
 3448 0de2 0F06     		.2byte	0x60f
 3449 0de4 2E020000 		.4byte	0x22e
 3450 0de8 2E0A0000 		.4byte	.LLST53
 3451 0dec 10       		.uleb128 0x10
 3452 0ded 5E020000 		.4byte	.LASF72
 3453 0df1 01       		.byte	0x1
 3454 0df2 0F06     		.2byte	0x60f
 3455 0df4 B6040000 		.4byte	0x4b6
 3456 0df8 D70A0000 		.4byte	.LLST54
 3457 0dfc 10       		.uleb128 0x10
 3458 0dfd 59000000 		.4byte	.LASF97
 3459 0e01 01       		.byte	0x1
 3460 0e02 0F06     		.2byte	0x60f
 3461 0e04 9C0A0000 		.4byte	0xa9c
 3462 0e08 F50A0000 		.4byte	.LLST55
 3463 0e0c 11       		.uleb128 0x11
 3464 0e0d 4F070000 		.4byte	.LASF68
 3465 0e11 01       		.byte	0x1
 3466 0e12 1106     		.2byte	0x611
 3467 0e14 05010000 		.4byte	0x105
 3468 0e18 01       		.uleb128 0x1
 3469 0e19 54       		.byte	0x54
 3470 0e1a 13       		.uleb128 0x13
 3471 0e1b CF010000 		.4byte	.LASF98
 3472 0e1f 01       		.byte	0x1
 3473 0e20 1206     		.2byte	0x612
 3474 0e22 10010000 		.4byte	0x110
 3475 0e26 130B0000 		.4byte	.LLST56
 3476 0e2a 13       		.uleb128 0x13
 3477 0e2b 47070000 		.4byte	.LASF67
 3478 0e2f 01       		.byte	0x1
 3479 0e30 1306     		.2byte	0x613
 3480 0e32 65040000 		.4byte	0x465
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 109


 3481 0e36 470B0000 		.4byte	.LLST57
 3482 0e3a 12       		.uleb128 0x12
 3483 0e3b 0C000000 		.4byte	.LVL186
 3484 0e3f 36120000 		.4byte	0x1236
 3485 0e43 17       		.uleb128 0x17
 3486 0e44 1A000000 		.4byte	.LVL189
 3487 0e48 6F040000 		.4byte	0x46f
 3488 0e4c 5D0E0000 		.4byte	0xe5d
 3489 0e50 16       		.uleb128 0x16
 3490 0e51 01       		.uleb128 0x1
 3491 0e52 50       		.byte	0x50
 3492 0e53 02       		.uleb128 0x2
 3493 0e54 74       		.byte	0x74
 3494 0e55 00       		.sleb128 0
 3495 0e56 16       		.uleb128 0x16
 3496 0e57 01       		.uleb128 0x1
 3497 0e58 51       		.byte	0x51
 3498 0e59 02       		.uleb128 0x2
 3499 0e5a 76       		.byte	0x76
 3500 0e5b 00       		.sleb128 0
 3501 0e5c 00       		.byte	0
 3502 0e5d 17       		.uleb128 0x17
 3503 0e5e 34000000 		.4byte	.LVL190
 3504 0e62 B4110000 		.4byte	0x11b4
 3505 0e66 710E0000 		.4byte	0xe71
 3506 0e6a 16       		.uleb128 0x16
 3507 0e6b 01       		.uleb128 0x1
 3508 0e6c 50       		.byte	0x50
 3509 0e6d 02       		.uleb128 0x2
 3510 0e6e 74       		.byte	0x74
 3511 0e6f 10       		.sleb128 16
 3512 0e70 00       		.byte	0
 3513 0e71 15       		.uleb128 0x15
 3514 0e72 5C000000 		.4byte	.LVL202
 3515 0e76 41120000 		.4byte	0x1241
 3516 0e7a 16       		.uleb128 0x16
 3517 0e7b 01       		.uleb128 0x1
 3518 0e7c 50       		.byte	0x50
 3519 0e7d 02       		.uleb128 0x2
 3520 0e7e 75       		.byte	0x75
 3521 0e7f 00       		.sleb128 0
 3522 0e80 00       		.byte	0
 3523 0e81 00       		.byte	0
 3524 0e82 18       		.uleb128 0x18
 3525 0e83 8B070000 		.4byte	.LASF105
 3526 0e87 01       		.byte	0x1
 3527 0e88 6606     		.2byte	0x666
 3528 0e8a 05010000 		.4byte	0x105
 3529 0e8e 00000000 		.4byte	.LFB75
 3530 0e92 2C000000 		.4byte	.LFE75-.LFB75
 3531 0e96 01       		.uleb128 0x1
 3532 0e97 9C       		.byte	0x9c
 3533 0e98 300F0000 		.4byte	0xf30
 3534 0e9c 10       		.uleb128 0x10
 3535 0e9d 05020000 		.4byte	.LASF75
 3536 0ea1 01       		.byte	0x1
 3537 0ea2 6606     		.2byte	0x666
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 110


 3538 0ea4 2E020000 		.4byte	0x22e
 3539 0ea8 F00B0000 		.4byte	.LLST58
 3540 0eac 10       		.uleb128 0x10
 3541 0ead 5E020000 		.4byte	.LASF72
 3542 0eb1 01       		.byte	0x1
 3543 0eb2 6606     		.2byte	0x666
 3544 0eb4 B6040000 		.4byte	0x4b6
 3545 0eb8 350C0000 		.4byte	.LLST59
 3546 0ebc 13       		.uleb128 0x13
 3547 0ebd 4F070000 		.4byte	.LASF68
 3548 0ec1 01       		.byte	0x1
 3549 0ec2 6806     		.2byte	0x668
 3550 0ec4 05010000 		.4byte	0x105
 3551 0ec8 530C0000 		.4byte	.LLST60
 3552 0ecc 13       		.uleb128 0x13
 3553 0ecd CF010000 		.4byte	.LASF98
 3554 0ed1 01       		.byte	0x1
 3555 0ed2 6906     		.2byte	0x669
 3556 0ed4 10010000 		.4byte	0x110
 3557 0ed8 720C0000 		.4byte	.LLST61
 3558 0edc 13       		.uleb128 0x13
 3559 0edd 86050000 		.4byte	.LASF102
 3560 0ee1 01       		.byte	0x1
 3561 0ee2 6A06     		.2byte	0x66a
 3562 0ee4 58020000 		.4byte	0x258
 3563 0ee8 A60C0000 		.4byte	.LLST62
 3564 0eec 13       		.uleb128 0x13
 3565 0eed 47070000 		.4byte	.LASF67
 3566 0ef1 01       		.byte	0x1
 3567 0ef2 6B06     		.2byte	0x66b
 3568 0ef4 65040000 		.4byte	0x465
 3569 0ef8 B90C0000 		.4byte	.LLST63
 3570 0efc 12       		.uleb128 0x12
 3571 0efd 0A000000 		.4byte	.LVL205
 3572 0f01 36120000 		.4byte	0x1236
 3573 0f05 17       		.uleb128 0x17
 3574 0f06 1A000000 		.4byte	.LVL209
 3575 0f0a 6F040000 		.4byte	0x46f
 3576 0f0e 1F0F0000 		.4byte	0xf1f
 3577 0f12 16       		.uleb128 0x16
 3578 0f13 01       		.uleb128 0x1
 3579 0f14 50       		.byte	0x50
 3580 0f15 02       		.uleb128 0x2
 3581 0f16 74       		.byte	0x74
 3582 0f17 00       		.sleb128 0
 3583 0f18 16       		.uleb128 0x16
 3584 0f19 01       		.uleb128 0x1
 3585 0f1a 51       		.byte	0x51
 3586 0f1b 02       		.uleb128 0x2
 3587 0f1c 76       		.byte	0x76
 3588 0f1d 00       		.sleb128 0
 3589 0f1e 00       		.byte	0
 3590 0f1f 15       		.uleb128 0x15
 3591 0f20 28000000 		.4byte	.LVL214
 3592 0f24 41120000 		.4byte	0x1241
 3593 0f28 16       		.uleb128 0x16
 3594 0f29 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 111


 3595 0f2a 50       		.byte	0x50
 3596 0f2b 02       		.uleb128 0x2
 3597 0f2c 75       		.byte	0x75
 3598 0f2d 00       		.sleb128 0
 3599 0f2e 00       		.byte	0
 3600 0f2f 00       		.byte	0
 3601 0f30 18       		.uleb128 0x18
 3602 0f31 1F070000 		.4byte	.LASF106
 3603 0f35 01       		.byte	0x1
 3604 0f36 9C06     		.2byte	0x69c
 3605 0f38 10010000 		.4byte	0x110
 3606 0f3c 00000000 		.4byte	.LFB76
 3607 0f40 12000000 		.4byte	.LFE76-.LFB76
 3608 0f44 01       		.uleb128 0x1
 3609 0f45 9C       		.byte	0x9c
 3610 0f46 7B0F0000 		.4byte	0xf7b
 3611 0f4a 10       		.uleb128 0x10
 3612 0f4b 05020000 		.4byte	.LASF75
 3613 0f4f 01       		.byte	0x1
 3614 0f50 9C06     		.2byte	0x69c
 3615 0f52 7B0F0000 		.4byte	0xf7b
 3616 0f56 FE0C0000 		.4byte	.LLST64
 3617 0f5a 11       		.uleb128 0x11
 3618 0f5b 84010000 		.4byte	.LASF107
 3619 0f5f 01       		.byte	0x1
 3620 0f60 9E06     		.2byte	0x69e
 3621 0f62 10010000 		.4byte	0x110
 3622 0f66 01       		.uleb128 0x1
 3623 0f67 54       		.byte	0x54
 3624 0f68 12       		.uleb128 0x12
 3625 0f69 08000000 		.4byte	.LVL216
 3626 0f6d 89110000 		.4byte	0x1189
 3627 0f71 12       		.uleb128 0x12
 3628 0f72 0E000000 		.4byte	.LVL218
 3629 0f76 94110000 		.4byte	0x1194
 3630 0f7a 00       		.byte	0
 3631 0f7b 07       		.uleb128 0x7
 3632 0f7c 2E020000 		.4byte	0x22e
 3633 0f80 18       		.uleb128 0x18
 3634 0f81 20010000 		.4byte	.LASF108
 3635 0f85 01       		.byte	0x1
 3636 0f86 AC06     		.2byte	0x6ac
 3637 0f88 10010000 		.4byte	0x110
 3638 0f8c 00000000 		.4byte	.LFB77
 3639 0f90 16000000 		.4byte	.LFE77-.LFB77
 3640 0f94 01       		.uleb128 0x1
 3641 0f95 9C       		.byte	0x9c
 3642 0f96 DB0F0000 		.4byte	0xfdb
 3643 0f9a 10       		.uleb128 0x10
 3644 0f9b 05020000 		.4byte	.LASF75
 3645 0f9f 01       		.byte	0x1
 3646 0fa0 AC06     		.2byte	0x6ac
 3647 0fa2 7B0F0000 		.4byte	0xf7b
 3648 0fa6 2A0D0000 		.4byte	.LLST65
 3649 0faa 11       		.uleb128 0x11
 3650 0fab 84010000 		.4byte	.LASF107
 3651 0faf 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 112


 3652 0fb0 AE06     		.2byte	0x6ae
 3653 0fb2 10010000 		.4byte	0x110
 3654 0fb6 01       		.uleb128 0x1
 3655 0fb7 54       		.byte	0x54
 3656 0fb8 13       		.uleb128 0x13
 3657 0fb9 47070000 		.4byte	.LASF67
 3658 0fbd 01       		.byte	0x1
 3659 0fbe AF06     		.2byte	0x6af
 3660 0fc0 5F040000 		.4byte	0x45f
 3661 0fc4 560D0000 		.4byte	.LLST66
 3662 0fc8 12       		.uleb128 0x12
 3663 0fc9 08000000 		.4byte	.LVL221
 3664 0fcd 89110000 		.4byte	0x1189
 3665 0fd1 12       		.uleb128 0x12
 3666 0fd2 12000000 		.4byte	.LVL224
 3667 0fd6 94110000 		.4byte	0x1194
 3668 0fda 00       		.byte	0
 3669 0fdb 18       		.uleb128 0x18
 3670 0fdc AE040000 		.4byte	.LASF109
 3671 0fe0 01       		.byte	0x1
 3672 0fe1 BE06     		.2byte	0x6be
 3673 0fe3 10010000 		.4byte	0x110
 3674 0fe7 00000000 		.4byte	.LFB78
 3675 0feb 04000000 		.4byte	.LFE78-.LFB78
 3676 0fef 01       		.uleb128 0x1
 3677 0ff0 9C       		.byte	0x9c
 3678 0ff1 14100000 		.4byte	0x1014
 3679 0ff5 10       		.uleb128 0x10
 3680 0ff6 05020000 		.4byte	.LASF75
 3681 0ffa 01       		.byte	0x1
 3682 0ffb BE06     		.2byte	0x6be
 3683 0ffd 7B0F0000 		.4byte	0xf7b
 3684 1001 820D0000 		.4byte	.LLST67
 3685 1005 11       		.uleb128 0x11
 3686 1006 84010000 		.4byte	.LASF107
 3687 100a 01       		.byte	0x1
 3688 100b C006     		.2byte	0x6c0
 3689 100d 10010000 		.4byte	0x110
 3690 1011 01       		.uleb128 0x1
 3691 1012 50       		.byte	0x50
 3692 1013 00       		.byte	0
 3693 1014 18       		.uleb128 0x18
 3694 1015 6C080000 		.4byte	.LASF110
 3695 1019 01       		.byte	0x1
 3696 101a DC07     		.2byte	0x7dc
 3697 101c 05010000 		.4byte	0x105
 3698 1020 00000000 		.4byte	.LFB84
 3699 1024 0C000000 		.4byte	.LFE84-.LFB84
 3700 1028 01       		.uleb128 0x1
 3701 1029 9C       		.byte	0x9c
 3702 102a 4D100000 		.4byte	0x104d
 3703 102e 10       		.uleb128 0x10
 3704 102f 05020000 		.4byte	.LASF75
 3705 1033 01       		.byte	0x1
 3706 1034 DC07     		.2byte	0x7dc
 3707 1036 7B0F0000 		.4byte	0xf7b
 3708 103a A30D0000 		.4byte	.LLST68
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 113


 3709 103e 11       		.uleb128 0x11
 3710 103f 4F070000 		.4byte	.LASF68
 3711 1043 01       		.byte	0x1
 3712 1044 DE07     		.2byte	0x7de
 3713 1046 05010000 		.4byte	0x105
 3714 104a 01       		.uleb128 0x1
 3715 104b 50       		.byte	0x50
 3716 104c 00       		.byte	0
 3717 104d 18       		.uleb128 0x18
 3718 104e 06070000 		.4byte	.LASF111
 3719 1052 01       		.byte	0x1
 3720 1053 0308     		.2byte	0x803
 3721 1055 05010000 		.4byte	0x105
 3722 1059 00000000 		.4byte	.LFB86
 3723 105d 10000000 		.4byte	.LFE86-.LFB86
 3724 1061 01       		.uleb128 0x1
 3725 1062 9C       		.byte	0x9c
 3726 1063 86100000 		.4byte	0x1086
 3727 1067 10       		.uleb128 0x10
 3728 1068 05020000 		.4byte	.LASF75
 3729 106c 01       		.byte	0x1
 3730 106d 0308     		.2byte	0x803
 3731 106f 7B0F0000 		.4byte	0xf7b
 3732 1073 DD0D0000 		.4byte	.LLST69
 3733 1077 11       		.uleb128 0x11
 3734 1078 4F070000 		.4byte	.LASF68
 3735 107c 01       		.byte	0x1
 3736 107d 0508     		.2byte	0x805
 3737 107f 05010000 		.4byte	0x105
 3738 1083 01       		.uleb128 0x1
 3739 1084 50       		.byte	0x50
 3740 1085 00       		.byte	0
 3741 1086 19       		.uleb128 0x19
 3742 1087 4C050000 		.4byte	.LASF112
 3743 108b 01       		.byte	0x1
 3744 108c 2A09     		.2byte	0x92a
 3745 108e 00000000 		.4byte	.LFB87
 3746 1092 28000000 		.4byte	.LFE87-.LFB87
 3747 1096 01       		.uleb128 0x1
 3748 1097 9C       		.byte	0x9c
 3749 1098 C8100000 		.4byte	0x10c8
 3750 109c 1A       		.uleb128 0x1a
 3751 109d 05020000 		.4byte	.LASF75
 3752 10a1 01       		.byte	0x1
 3753 10a2 2A09     		.2byte	0x92a
 3754 10a4 2E020000 		.4byte	0x22e
 3755 10a8 01       		.uleb128 0x1
 3756 10a9 50       		.byte	0x50
 3757 10aa 1A       		.uleb128 0x1a
 3758 10ab 55030000 		.4byte	.LASF61
 3759 10af 01       		.byte	0x1
 3760 10b0 2A09     		.2byte	0x92a
 3761 10b2 B9000000 		.4byte	0xb9
 3762 10b6 01       		.uleb128 0x1
 3763 10b7 51       		.byte	0x51
 3764 10b8 1B       		.uleb128 0x1b
 3765 10b9 757800   		.ascii	"ux\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 114


 3766 10bc 01       		.byte	0x1
 3767 10bd 2C09     		.2byte	0x92c
 3768 10bf 10010000 		.4byte	0x110
 3769 10c3 170E0000 		.4byte	.LLST70
 3770 10c7 00       		.byte	0
 3771 10c8 19       		.uleb128 0x19
 3772 10c9 B9010000 		.4byte	.LASF113
 3773 10cd 01       		.byte	0x1
 3774 10ce 4709     		.2byte	0x947
 3775 10d0 00000000 		.4byte	.LFB88
 3776 10d4 28000000 		.4byte	.LFE88-.LFB88
 3777 10d8 01       		.uleb128 0x1
 3778 10d9 9C       		.byte	0x9c
 3779 10da FC100000 		.4byte	0x10fc
 3780 10de 1A       		.uleb128 0x1a
 3781 10df 05020000 		.4byte	.LASF75
 3782 10e3 01       		.byte	0x1
 3783 10e4 4709     		.2byte	0x947
 3784 10e6 2E020000 		.4byte	0x22e
 3785 10ea 01       		.uleb128 0x1
 3786 10eb 50       		.byte	0x50
 3787 10ec 1B       		.uleb128 0x1b
 3788 10ed 757800   		.ascii	"ux\000"
 3789 10f0 01       		.byte	0x1
 3790 10f1 4909     		.2byte	0x949
 3791 10f3 10010000 		.4byte	0x110
 3792 10f7 410E0000 		.4byte	.LLST71
 3793 10fb 00       		.byte	0
 3794 10fc 19       		.uleb128 0x19
 3795 10fd A1010000 		.4byte	.LASF114
 3796 1101 01       		.byte	0x1
 3797 1102 CA06     		.2byte	0x6ca
 3798 1104 00000000 		.4byte	.LFB79
 3799 1108 10000000 		.4byte	.LFE79-.LFB79
 3800 110c 01       		.uleb128 0x1
 3801 110d 9C       		.byte	0x9c
 3802 110e 57110000 		.4byte	0x1157
 3803 1112 10       		.uleb128 0x10
 3804 1113 05020000 		.4byte	.LASF75
 3805 1117 01       		.byte	0x1
 3806 1118 CA06     		.2byte	0x6ca
 3807 111a 2E020000 		.4byte	0x22e
 3808 111e 600E0000 		.4byte	.LLST72
 3809 1122 13       		.uleb128 0x13
 3810 1123 47070000 		.4byte	.LASF67
 3811 1127 01       		.byte	0x1
 3812 1128 CC06     		.2byte	0x6cc
 3813 112a 65040000 		.4byte	0x465
 3814 112e 7E0E0000 		.4byte	.LLST73
 3815 1132 17       		.uleb128 0x17
 3816 1133 08000000 		.4byte	.LVL245
 3817 1137 C8100000 		.4byte	0x10c8
 3818 113b 46110000 		.4byte	0x1146
 3819 113f 16       		.uleb128 0x16
 3820 1140 01       		.uleb128 0x1
 3821 1141 50       		.byte	0x50
 3822 1142 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 115


 3823 1143 74       		.byte	0x74
 3824 1144 00       		.sleb128 0
 3825 1145 00       		.byte	0
 3826 1146 15       		.uleb128 0x15
 3827 1147 0E000000 		.4byte	.LVL246
 3828 114b 64120000 		.4byte	0x1264
 3829 114f 16       		.uleb128 0x16
 3830 1150 01       		.uleb128 0x1
 3831 1151 50       		.byte	0x50
 3832 1152 02       		.uleb128 0x2
 3833 1153 74       		.byte	0x74
 3834 1154 00       		.sleb128 0
 3835 1155 00       		.byte	0
 3836 1156 00       		.byte	0
 3837 1157 1C       		.uleb128 0x1c
 3838 1158 A3060000 		.4byte	.LASF115
 3839 115c 09       		.byte	0x9
 3840 115d 5506     		.2byte	0x655
 3841 115f 63110000 		.4byte	0x1163
 3842 1163 0E       		.uleb128 0xe
 3843 1164 E1000000 		.4byte	0xe1
 3844 1168 1D       		.uleb128 0x1d
 3845 1169 3D030000 		.4byte	0x33d
 3846 116d 78110000 		.4byte	0x1178
 3847 1171 1E       		.uleb128 0x1e
 3848 1172 A9000000 		.4byte	0xa9
 3849 1176 09       		.byte	0x9
 3850 1177 00       		.byte	0
 3851 1178 1F       		.uleb128 0x1f
 3852 1179 71040000 		.4byte	.LASF116
 3853 117d 01       		.byte	0x1
 3854 117e C0       		.byte	0xc0
 3855 117f 68110000 		.4byte	0x1168
 3856 1183 05       		.uleb128 0x5
 3857 1184 03       		.byte	0x3
 3858 1185 00000000 		.4byte	xQueueRegistry
 3859 1189 20       		.uleb128 0x20
 3860 118a 46010000 		.4byte	.LASF117
 3861 118e 46010000 		.4byte	.LASF117
 3862 1192 05       		.byte	0x5
 3863 1193 83       		.byte	0x83
 3864 1194 20       		.uleb128 0x20
 3865 1195 10000000 		.4byte	.LASF118
 3866 1199 10000000 		.4byte	.LASF118
 3867 119d 05       		.byte	0x5
 3868 119e 84       		.byte	0x84
 3869 119f 21       		.uleb128 0x21
 3870 11a0 03040000 		.4byte	.LASF119
 3871 11a4 03040000 		.4byte	.LASF119
 3872 11a8 07       		.byte	0x7
 3873 11a9 BC07     		.2byte	0x7bc
 3874 11ab 22       		.uleb128 0x22
 3875 11ac A5080000 		.4byte	.LASF139
 3876 11b0 A5080000 		.4byte	.LASF139
 3877 11b4 21       		.uleb128 0x21
 3878 11b5 1B040000 		.4byte	.LASF120
 3879 11b9 1B040000 		.4byte	.LASF120
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 116


 3880 11bd 07       		.byte	0x7
 3881 11be 8307     		.2byte	0x783
 3882 11c0 21       		.uleb128 0x21
 3883 11c1 60070000 		.4byte	.LASF121
 3884 11c5 60070000 		.4byte	.LASF121
 3885 11c9 07       		.byte	0x7
 3886 11ca AA07     		.2byte	0x7aa
 3887 11cc 20       		.uleb128 0x20
 3888 11cd 22000000 		.4byte	.LASF122
 3889 11d1 22000000 		.4byte	.LASF122
 3890 11d5 05       		.byte	0x5
 3891 11d6 7A       		.byte	0x7a
 3892 11d7 21       		.uleb128 0x21
 3893 11d8 B6070000 		.4byte	.LASF123
 3894 11dc B6070000 		.4byte	.LASF123
 3895 11e0 06       		.byte	0x6
 3896 11e1 8201     		.2byte	0x182
 3897 11e3 20       		.uleb128 0x20
 3898 11e4 84020000 		.4byte	.LASF124
 3899 11e8 84020000 		.4byte	.LASF124
 3900 11ec 0A       		.byte	0xa
 3901 11ed AB       		.byte	0xab
 3902 11ee 21       		.uleb128 0x21
 3903 11ef F7000000 		.4byte	.LASF125
 3904 11f3 F7000000 		.4byte	.LASF125
 3905 11f7 07       		.byte	0x7
 3906 11f8 9E07     		.2byte	0x79e
 3907 11fa 21       		.uleb128 0x21
 3908 11fb 91020000 		.4byte	.LASF126
 3909 11ff 91020000 		.4byte	.LASF126
 3910 1203 07       		.byte	0x7
 3911 1204 E603     		.2byte	0x3e6
 3912 1206 21       		.uleb128 0x21
 3913 1207 E7060000 		.4byte	.LASF127
 3914 120b E7060000 		.4byte	.LASF127
 3915 120f 07       		.byte	0x7
 3916 1210 A407     		.2byte	0x7a4
 3917 1212 21       		.uleb128 0x21
 3918 1213 B5030000 		.4byte	.LASF128
 3919 1217 B5030000 		.4byte	.LASF128
 3920 121b 07       		.byte	0x7
 3921 121c 5B07     		.2byte	0x75b
 3922 121e 21       		.uleb128 0x21
 3923 121f C2060000 		.4byte	.LASF129
 3924 1223 C2060000 		.4byte	.LASF129
 3925 1227 07       		.byte	0x7
 3926 1228 1C04     		.2byte	0x41c
 3927 122a 21       		.uleb128 0x21
 3928 122b 08080000 		.4byte	.LASF130
 3929 122f 08080000 		.4byte	.LASF130
 3930 1233 07       		.byte	0x7
 3931 1234 9907     		.2byte	0x799
 3932 1236 20       		.uleb128 0x20
 3933 1237 97040000 		.4byte	.LASF131
 3934 123b 97040000 		.4byte	.LASF131
 3935 123f 05       		.byte	0x5
 3936 1240 85       		.byte	0x85
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 117


 3937 1241 20       		.uleb128 0x20
 3938 1242 DB070000 		.4byte	.LASF132
 3939 1246 DB070000 		.4byte	.LASF132
 3940 124a 05       		.byte	0x5
 3941 124b 86       		.byte	0x86
 3942 124c 21       		.uleb128 0x21
 3943 124d CB030000 		.4byte	.LASF133
 3944 1251 CB030000 		.4byte	.LASF133
 3945 1255 07       		.byte	0x7
 3946 1256 ED07     		.2byte	0x7ed
 3947 1258 21       		.uleb128 0x21
 3948 1259 A4000000 		.4byte	.LASF134
 3949 125d A4000000 		.4byte	.LASF134
 3950 1261 07       		.byte	0x7
 3951 1262 B607     		.2byte	0x7b6
 3952 1264 20       		.uleb128 0x20
 3953 1265 FC060000 		.4byte	.LASF135
 3954 1269 FC060000 		.4byte	.LASF135
 3955 126d 0A       		.byte	0xa
 3956 126e AC       		.byte	0xac
 3957 126f 00       		.byte	0
 3958              		.section	.debug_abbrev,"",%progbits
 3959              	.Ldebug_abbrev0:
 3960 0000 01       		.uleb128 0x1
 3961 0001 11       		.uleb128 0x11
 3962 0002 01       		.byte	0x1
 3963 0003 25       		.uleb128 0x25
 3964 0004 0E       		.uleb128 0xe
 3965 0005 13       		.uleb128 0x13
 3966 0006 0B       		.uleb128 0xb
 3967 0007 03       		.uleb128 0x3
 3968 0008 0E       		.uleb128 0xe
 3969 0009 1B       		.uleb128 0x1b
 3970 000a 0E       		.uleb128 0xe
 3971 000b 55       		.uleb128 0x55
 3972 000c 17       		.uleb128 0x17
 3973 000d 11       		.uleb128 0x11
 3974 000e 01       		.uleb128 0x1
 3975 000f 10       		.uleb128 0x10
 3976 0010 17       		.uleb128 0x17
 3977 0011 00       		.byte	0
 3978 0012 00       		.byte	0
 3979 0013 02       		.uleb128 0x2
 3980 0014 16       		.uleb128 0x16
 3981 0015 00       		.byte	0
 3982 0016 03       		.uleb128 0x3
 3983 0017 0E       		.uleb128 0xe
 3984 0018 3A       		.uleb128 0x3a
 3985 0019 0B       		.uleb128 0xb
 3986 001a 3B       		.uleb128 0x3b
 3987 001b 0B       		.uleb128 0xb
 3988 001c 49       		.uleb128 0x49
 3989 001d 13       		.uleb128 0x13
 3990 001e 00       		.byte	0
 3991 001f 00       		.byte	0
 3992 0020 03       		.uleb128 0x3
 3993 0021 24       		.uleb128 0x24
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 118


 3994 0022 00       		.byte	0
 3995 0023 0B       		.uleb128 0xb
 3996 0024 0B       		.uleb128 0xb
 3997 0025 3E       		.uleb128 0x3e
 3998 0026 0B       		.uleb128 0xb
 3999 0027 03       		.uleb128 0x3
 4000 0028 0E       		.uleb128 0xe
 4001 0029 00       		.byte	0
 4002 002a 00       		.byte	0
 4003 002b 04       		.uleb128 0x4
 4004 002c 24       		.uleb128 0x24
 4005 002d 00       		.byte	0
 4006 002e 0B       		.uleb128 0xb
 4007 002f 0B       		.uleb128 0xb
 4008 0030 3E       		.uleb128 0x3e
 4009 0031 0B       		.uleb128 0xb
 4010 0032 03       		.uleb128 0x3
 4011 0033 08       		.uleb128 0x8
 4012 0034 00       		.byte	0
 4013 0035 00       		.byte	0
 4014 0036 05       		.uleb128 0x5
 4015 0037 0F       		.uleb128 0xf
 4016 0038 00       		.byte	0
 4017 0039 0B       		.uleb128 0xb
 4018 003a 0B       		.uleb128 0xb
 4019 003b 00       		.byte	0
 4020 003c 00       		.byte	0
 4021 003d 06       		.uleb128 0x6
 4022 003e 0F       		.uleb128 0xf
 4023 003f 00       		.byte	0
 4024 0040 0B       		.uleb128 0xb
 4025 0041 0B       		.uleb128 0xb
 4026 0042 49       		.uleb128 0x49
 4027 0043 13       		.uleb128 0x13
 4028 0044 00       		.byte	0
 4029 0045 00       		.byte	0
 4030 0046 07       		.uleb128 0x7
 4031 0047 26       		.uleb128 0x26
 4032 0048 00       		.byte	0
 4033 0049 49       		.uleb128 0x49
 4034 004a 13       		.uleb128 0x13
 4035 004b 00       		.byte	0
 4036 004c 00       		.byte	0
 4037 004d 08       		.uleb128 0x8
 4038 004e 26       		.uleb128 0x26
 4039 004f 00       		.byte	0
 4040 0050 00       		.byte	0
 4041 0051 00       		.byte	0
 4042 0052 09       		.uleb128 0x9
 4043 0053 13       		.uleb128 0x13
 4044 0054 01       		.byte	0x1
 4045 0055 03       		.uleb128 0x3
 4046 0056 0E       		.uleb128 0xe
 4047 0057 0B       		.uleb128 0xb
 4048 0058 0B       		.uleb128 0xb
 4049 0059 3A       		.uleb128 0x3a
 4050 005a 0B       		.uleb128 0xb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 119


 4051 005b 3B       		.uleb128 0x3b
 4052 005c 0B       		.uleb128 0xb
 4053 005d 01       		.uleb128 0x1
 4054 005e 13       		.uleb128 0x13
 4055 005f 00       		.byte	0
 4056 0060 00       		.byte	0
 4057 0061 0A       		.uleb128 0xa
 4058 0062 0D       		.uleb128 0xd
 4059 0063 00       		.byte	0
 4060 0064 03       		.uleb128 0x3
 4061 0065 0E       		.uleb128 0xe
 4062 0066 3A       		.uleb128 0x3a
 4063 0067 0B       		.uleb128 0xb
 4064 0068 3B       		.uleb128 0x3b
 4065 0069 0B       		.uleb128 0xb
 4066 006a 49       		.uleb128 0x49
 4067 006b 13       		.uleb128 0x13
 4068 006c 38       		.uleb128 0x38
 4069 006d 0B       		.uleb128 0xb
 4070 006e 00       		.byte	0
 4071 006f 00       		.byte	0
 4072 0070 0B       		.uleb128 0xb
 4073 0071 17       		.uleb128 0x17
 4074 0072 01       		.byte	0x1
 4075 0073 0B       		.uleb128 0xb
 4076 0074 0B       		.uleb128 0xb
 4077 0075 3A       		.uleb128 0x3a
 4078 0076 0B       		.uleb128 0xb
 4079 0077 3B       		.uleb128 0x3b
 4080 0078 0B       		.uleb128 0xb
 4081 0079 01       		.uleb128 0x1
 4082 007a 13       		.uleb128 0x13
 4083 007b 00       		.byte	0
 4084 007c 00       		.byte	0
 4085 007d 0C       		.uleb128 0xc
 4086 007e 0D       		.uleb128 0xd
 4087 007f 00       		.byte	0
 4088 0080 03       		.uleb128 0x3
 4089 0081 0E       		.uleb128 0xe
 4090 0082 3A       		.uleb128 0x3a
 4091 0083 0B       		.uleb128 0xb
 4092 0084 3B       		.uleb128 0x3b
 4093 0085 0B       		.uleb128 0xb
 4094 0086 49       		.uleb128 0x49
 4095 0087 13       		.uleb128 0x13
 4096 0088 00       		.byte	0
 4097 0089 00       		.byte	0
 4098 008a 0D       		.uleb128 0xd
 4099 008b 0D       		.uleb128 0xd
 4100 008c 00       		.byte	0
 4101 008d 03       		.uleb128 0x3
 4102 008e 08       		.uleb128 0x8
 4103 008f 3A       		.uleb128 0x3a
 4104 0090 0B       		.uleb128 0xb
 4105 0091 3B       		.uleb128 0x3b
 4106 0092 0B       		.uleb128 0xb
 4107 0093 49       		.uleb128 0x49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 120


 4108 0094 13       		.uleb128 0x13
 4109 0095 38       		.uleb128 0x38
 4110 0096 0B       		.uleb128 0xb
 4111 0097 00       		.byte	0
 4112 0098 00       		.byte	0
 4113 0099 0E       		.uleb128 0xe
 4114 009a 35       		.uleb128 0x35
 4115 009b 00       		.byte	0
 4116 009c 49       		.uleb128 0x49
 4117 009d 13       		.uleb128 0x13
 4118 009e 00       		.byte	0
 4119 009f 00       		.byte	0
 4120 00a0 0F       		.uleb128 0xf
 4121 00a1 2E       		.uleb128 0x2e
 4122 00a2 01       		.byte	0x1
 4123 00a3 03       		.uleb128 0x3
 4124 00a4 0E       		.uleb128 0xe
 4125 00a5 3A       		.uleb128 0x3a
 4126 00a6 0B       		.uleb128 0xb
 4127 00a7 3B       		.uleb128 0x3b
 4128 00a8 05       		.uleb128 0x5
 4129 00a9 27       		.uleb128 0x27
 4130 00aa 19       		.uleb128 0x19
 4131 00ab 49       		.uleb128 0x49
 4132 00ac 13       		.uleb128 0x13
 4133 00ad 11       		.uleb128 0x11
 4134 00ae 01       		.uleb128 0x1
 4135 00af 12       		.uleb128 0x12
 4136 00b0 06       		.uleb128 0x6
 4137 00b1 40       		.uleb128 0x40
 4138 00b2 18       		.uleb128 0x18
 4139 00b3 9742     		.uleb128 0x2117
 4140 00b5 19       		.uleb128 0x19
 4141 00b6 01       		.uleb128 0x1
 4142 00b7 13       		.uleb128 0x13
 4143 00b8 00       		.byte	0
 4144 00b9 00       		.byte	0
 4145 00ba 10       		.uleb128 0x10
 4146 00bb 05       		.uleb128 0x5
 4147 00bc 00       		.byte	0
 4148 00bd 03       		.uleb128 0x3
 4149 00be 0E       		.uleb128 0xe
 4150 00bf 3A       		.uleb128 0x3a
 4151 00c0 0B       		.uleb128 0xb
 4152 00c1 3B       		.uleb128 0x3b
 4153 00c2 05       		.uleb128 0x5
 4154 00c3 49       		.uleb128 0x49
 4155 00c4 13       		.uleb128 0x13
 4156 00c5 02       		.uleb128 0x2
 4157 00c6 17       		.uleb128 0x17
 4158 00c7 00       		.byte	0
 4159 00c8 00       		.byte	0
 4160 00c9 11       		.uleb128 0x11
 4161 00ca 34       		.uleb128 0x34
 4162 00cb 00       		.byte	0
 4163 00cc 03       		.uleb128 0x3
 4164 00cd 0E       		.uleb128 0xe
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 121


 4165 00ce 3A       		.uleb128 0x3a
 4166 00cf 0B       		.uleb128 0xb
 4167 00d0 3B       		.uleb128 0x3b
 4168 00d1 05       		.uleb128 0x5
 4169 00d2 49       		.uleb128 0x49
 4170 00d3 13       		.uleb128 0x13
 4171 00d4 02       		.uleb128 0x2
 4172 00d5 18       		.uleb128 0x18
 4173 00d6 00       		.byte	0
 4174 00d7 00       		.byte	0
 4175 00d8 12       		.uleb128 0x12
 4176 00d9 898201   		.uleb128 0x4109
 4177 00dc 00       		.byte	0
 4178 00dd 11       		.uleb128 0x11
 4179 00de 01       		.uleb128 0x1
 4180 00df 31       		.uleb128 0x31
 4181 00e0 13       		.uleb128 0x13
 4182 00e1 00       		.byte	0
 4183 00e2 00       		.byte	0
 4184 00e3 13       		.uleb128 0x13
 4185 00e4 34       		.uleb128 0x34
 4186 00e5 00       		.byte	0
 4187 00e6 03       		.uleb128 0x3
 4188 00e7 0E       		.uleb128 0xe
 4189 00e8 3A       		.uleb128 0x3a
 4190 00e9 0B       		.uleb128 0xb
 4191 00ea 3B       		.uleb128 0x3b
 4192 00eb 05       		.uleb128 0x5
 4193 00ec 49       		.uleb128 0x49
 4194 00ed 13       		.uleb128 0x13
 4195 00ee 02       		.uleb128 0x2
 4196 00ef 17       		.uleb128 0x17
 4197 00f0 00       		.byte	0
 4198 00f1 00       		.byte	0
 4199 00f2 14       		.uleb128 0x14
 4200 00f3 2E       		.uleb128 0x2e
 4201 00f4 01       		.byte	0x1
 4202 00f5 03       		.uleb128 0x3
 4203 00f6 0E       		.uleb128 0xe
 4204 00f7 3A       		.uleb128 0x3a
 4205 00f8 0B       		.uleb128 0xb
 4206 00f9 3B       		.uleb128 0x3b
 4207 00fa 05       		.uleb128 0x5
 4208 00fb 27       		.uleb128 0x27
 4209 00fc 19       		.uleb128 0x19
 4210 00fd 11       		.uleb128 0x11
 4211 00fe 01       		.uleb128 0x1
 4212 00ff 12       		.uleb128 0x12
 4213 0100 06       		.uleb128 0x6
 4214 0101 40       		.uleb128 0x40
 4215 0102 18       		.uleb128 0x18
 4216 0103 9742     		.uleb128 0x2117
 4217 0105 19       		.uleb128 0x19
 4218 0106 01       		.uleb128 0x1
 4219 0107 13       		.uleb128 0x13
 4220 0108 00       		.byte	0
 4221 0109 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 122


 4222 010a 15       		.uleb128 0x15
 4223 010b 898201   		.uleb128 0x4109
 4224 010e 01       		.byte	0x1
 4225 010f 11       		.uleb128 0x11
 4226 0110 01       		.uleb128 0x1
 4227 0111 31       		.uleb128 0x31
 4228 0112 13       		.uleb128 0x13
 4229 0113 00       		.byte	0
 4230 0114 00       		.byte	0
 4231 0115 16       		.uleb128 0x16
 4232 0116 8A8201   		.uleb128 0x410a
 4233 0119 00       		.byte	0
 4234 011a 02       		.uleb128 0x2
 4235 011b 18       		.uleb128 0x18
 4236 011c 9142     		.uleb128 0x2111
 4237 011e 18       		.uleb128 0x18
 4238 011f 00       		.byte	0
 4239 0120 00       		.byte	0
 4240 0121 17       		.uleb128 0x17
 4241 0122 898201   		.uleb128 0x4109
 4242 0125 01       		.byte	0x1
 4243 0126 11       		.uleb128 0x11
 4244 0127 01       		.uleb128 0x1
 4245 0128 31       		.uleb128 0x31
 4246 0129 13       		.uleb128 0x13
 4247 012a 01       		.uleb128 0x1
 4248 012b 13       		.uleb128 0x13
 4249 012c 00       		.byte	0
 4250 012d 00       		.byte	0
 4251 012e 18       		.uleb128 0x18
 4252 012f 2E       		.uleb128 0x2e
 4253 0130 01       		.byte	0x1
 4254 0131 3F       		.uleb128 0x3f
 4255 0132 19       		.uleb128 0x19
 4256 0133 03       		.uleb128 0x3
 4257 0134 0E       		.uleb128 0xe
 4258 0135 3A       		.uleb128 0x3a
 4259 0136 0B       		.uleb128 0xb
 4260 0137 3B       		.uleb128 0x3b
 4261 0138 05       		.uleb128 0x5
 4262 0139 27       		.uleb128 0x27
 4263 013a 19       		.uleb128 0x19
 4264 013b 49       		.uleb128 0x49
 4265 013c 13       		.uleb128 0x13
 4266 013d 11       		.uleb128 0x11
 4267 013e 01       		.uleb128 0x1
 4268 013f 12       		.uleb128 0x12
 4269 0140 06       		.uleb128 0x6
 4270 0141 40       		.uleb128 0x40
 4271 0142 18       		.uleb128 0x18
 4272 0143 9742     		.uleb128 0x2117
 4273 0145 19       		.uleb128 0x19
 4274 0146 01       		.uleb128 0x1
 4275 0147 13       		.uleb128 0x13
 4276 0148 00       		.byte	0
 4277 0149 00       		.byte	0
 4278 014a 19       		.uleb128 0x19
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 123


 4279 014b 2E       		.uleb128 0x2e
 4280 014c 01       		.byte	0x1
 4281 014d 3F       		.uleb128 0x3f
 4282 014e 19       		.uleb128 0x19
 4283 014f 03       		.uleb128 0x3
 4284 0150 0E       		.uleb128 0xe
 4285 0151 3A       		.uleb128 0x3a
 4286 0152 0B       		.uleb128 0xb
 4287 0153 3B       		.uleb128 0x3b
 4288 0154 05       		.uleb128 0x5
 4289 0155 27       		.uleb128 0x27
 4290 0156 19       		.uleb128 0x19
 4291 0157 11       		.uleb128 0x11
 4292 0158 01       		.uleb128 0x1
 4293 0159 12       		.uleb128 0x12
 4294 015a 06       		.uleb128 0x6
 4295 015b 40       		.uleb128 0x40
 4296 015c 18       		.uleb128 0x18
 4297 015d 9742     		.uleb128 0x2117
 4298 015f 19       		.uleb128 0x19
 4299 0160 01       		.uleb128 0x1
 4300 0161 13       		.uleb128 0x13
 4301 0162 00       		.byte	0
 4302 0163 00       		.byte	0
 4303 0164 1A       		.uleb128 0x1a
 4304 0165 05       		.uleb128 0x5
 4305 0166 00       		.byte	0
 4306 0167 03       		.uleb128 0x3
 4307 0168 0E       		.uleb128 0xe
 4308 0169 3A       		.uleb128 0x3a
 4309 016a 0B       		.uleb128 0xb
 4310 016b 3B       		.uleb128 0x3b
 4311 016c 05       		.uleb128 0x5
 4312 016d 49       		.uleb128 0x49
 4313 016e 13       		.uleb128 0x13
 4314 016f 02       		.uleb128 0x2
 4315 0170 18       		.uleb128 0x18
 4316 0171 00       		.byte	0
 4317 0172 00       		.byte	0
 4318 0173 1B       		.uleb128 0x1b
 4319 0174 34       		.uleb128 0x34
 4320 0175 00       		.byte	0
 4321 0176 03       		.uleb128 0x3
 4322 0177 08       		.uleb128 0x8
 4323 0178 3A       		.uleb128 0x3a
 4324 0179 0B       		.uleb128 0xb
 4325 017a 3B       		.uleb128 0x3b
 4326 017b 05       		.uleb128 0x5
 4327 017c 49       		.uleb128 0x49
 4328 017d 13       		.uleb128 0x13
 4329 017e 02       		.uleb128 0x2
 4330 017f 17       		.uleb128 0x17
 4331 0180 00       		.byte	0
 4332 0181 00       		.byte	0
 4333 0182 1C       		.uleb128 0x1c
 4334 0183 34       		.uleb128 0x34
 4335 0184 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 124


 4336 0185 03       		.uleb128 0x3
 4337 0186 0E       		.uleb128 0xe
 4338 0187 3A       		.uleb128 0x3a
 4339 0188 0B       		.uleb128 0xb
 4340 0189 3B       		.uleb128 0x3b
 4341 018a 05       		.uleb128 0x5
 4342 018b 49       		.uleb128 0x49
 4343 018c 13       		.uleb128 0x13
 4344 018d 3F       		.uleb128 0x3f
 4345 018e 19       		.uleb128 0x19
 4346 018f 3C       		.uleb128 0x3c
 4347 0190 19       		.uleb128 0x19
 4348 0191 00       		.byte	0
 4349 0192 00       		.byte	0
 4350 0193 1D       		.uleb128 0x1d
 4351 0194 01       		.uleb128 0x1
 4352 0195 01       		.byte	0x1
 4353 0196 49       		.uleb128 0x49
 4354 0197 13       		.uleb128 0x13
 4355 0198 01       		.uleb128 0x1
 4356 0199 13       		.uleb128 0x13
 4357 019a 00       		.byte	0
 4358 019b 00       		.byte	0
 4359 019c 1E       		.uleb128 0x1e
 4360 019d 21       		.uleb128 0x21
 4361 019e 00       		.byte	0
 4362 019f 49       		.uleb128 0x49
 4363 01a0 13       		.uleb128 0x13
 4364 01a1 2F       		.uleb128 0x2f
 4365 01a2 0B       		.uleb128 0xb
 4366 01a3 00       		.byte	0
 4367 01a4 00       		.byte	0
 4368 01a5 1F       		.uleb128 0x1f
 4369 01a6 34       		.uleb128 0x34
 4370 01a7 00       		.byte	0
 4371 01a8 03       		.uleb128 0x3
 4372 01a9 0E       		.uleb128 0xe
 4373 01aa 3A       		.uleb128 0x3a
 4374 01ab 0B       		.uleb128 0xb
 4375 01ac 3B       		.uleb128 0x3b
 4376 01ad 0B       		.uleb128 0xb
 4377 01ae 49       		.uleb128 0x49
 4378 01af 13       		.uleb128 0x13
 4379 01b0 3F       		.uleb128 0x3f
 4380 01b1 19       		.uleb128 0x19
 4381 01b2 02       		.uleb128 0x2
 4382 01b3 18       		.uleb128 0x18
 4383 01b4 00       		.byte	0
 4384 01b5 00       		.byte	0
 4385 01b6 20       		.uleb128 0x20
 4386 01b7 2E       		.uleb128 0x2e
 4387 01b8 00       		.byte	0
 4388 01b9 3F       		.uleb128 0x3f
 4389 01ba 19       		.uleb128 0x19
 4390 01bb 3C       		.uleb128 0x3c
 4391 01bc 19       		.uleb128 0x19
 4392 01bd 6E       		.uleb128 0x6e
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 125


 4393 01be 0E       		.uleb128 0xe
 4394 01bf 03       		.uleb128 0x3
 4395 01c0 0E       		.uleb128 0xe
 4396 01c1 3A       		.uleb128 0x3a
 4397 01c2 0B       		.uleb128 0xb
 4398 01c3 3B       		.uleb128 0x3b
 4399 01c4 0B       		.uleb128 0xb
 4400 01c5 00       		.byte	0
 4401 01c6 00       		.byte	0
 4402 01c7 21       		.uleb128 0x21
 4403 01c8 2E       		.uleb128 0x2e
 4404 01c9 00       		.byte	0
 4405 01ca 3F       		.uleb128 0x3f
 4406 01cb 19       		.uleb128 0x19
 4407 01cc 3C       		.uleb128 0x3c
 4408 01cd 19       		.uleb128 0x19
 4409 01ce 6E       		.uleb128 0x6e
 4410 01cf 0E       		.uleb128 0xe
 4411 01d0 03       		.uleb128 0x3
 4412 01d1 0E       		.uleb128 0xe
 4413 01d2 3A       		.uleb128 0x3a
 4414 01d3 0B       		.uleb128 0xb
 4415 01d4 3B       		.uleb128 0x3b
 4416 01d5 05       		.uleb128 0x5
 4417 01d6 00       		.byte	0
 4418 01d7 00       		.byte	0
 4419 01d8 22       		.uleb128 0x22
 4420 01d9 2E       		.uleb128 0x2e
 4421 01da 00       		.byte	0
 4422 01db 3F       		.uleb128 0x3f
 4423 01dc 19       		.uleb128 0x19
 4424 01dd 3C       		.uleb128 0x3c
 4425 01de 19       		.uleb128 0x19
 4426 01df 6E       		.uleb128 0x6e
 4427 01e0 0E       		.uleb128 0xe
 4428 01e1 03       		.uleb128 0x3
 4429 01e2 0E       		.uleb128 0xe
 4430 01e3 00       		.byte	0
 4431 01e4 00       		.byte	0
 4432 01e5 00       		.byte	0
 4433              		.section	.debug_loc,"",%progbits
 4434              	.Ldebug_loc0:
 4435              	.LLST0:
 4436 0000 00000000 		.4byte	.LVL0
 4437 0004 07000000 		.4byte	.LVL1-1
 4438 0008 0100     		.2byte	0x1
 4439 000a 50       		.byte	0x50
 4440 000b 07000000 		.4byte	.LVL1-1
 4441 000f 12000000 		.4byte	.LVL2
 4442 0013 0100     		.2byte	0x1
 4443 0015 54       		.byte	0x54
 4444 0016 12000000 		.4byte	.LVL2
 4445 001a 14000000 		.4byte	.LVL3
 4446 001e 0400     		.2byte	0x4
 4447 0020 F3       		.byte	0xf3
 4448 0021 01       		.uleb128 0x1
 4449 0022 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 126


 4450 0023 9F       		.byte	0x9f
 4451 0024 14000000 		.4byte	.LVL3
 4452 0028 16000000 		.4byte	.LVL4
 4453 002c 0100     		.2byte	0x1
 4454 002e 54       		.byte	0x54
 4455 002f 16000000 		.4byte	.LVL4
 4456 0033 1E000000 		.4byte	.LFE85
 4457 0037 0400     		.2byte	0x4
 4458 0039 F3       		.byte	0xf3
 4459 003a 01       		.uleb128 0x1
 4460 003b 50       		.byte	0x50
 4461 003c 9F       		.byte	0x9f
 4462 003d 00000000 		.4byte	0
 4463 0041 00000000 		.4byte	0
 4464              	.LLST1:
 4465 0045 00000000 		.4byte	.LVL6
 4466 0049 07000000 		.4byte	.LVL7-1
 4467 004d 0100     		.2byte	0x1
 4468 004f 50       		.byte	0x50
 4469 0050 07000000 		.4byte	.LVL7-1
 4470 0054 0E000000 		.4byte	.LVL8
 4471 0058 0100     		.2byte	0x1
 4472 005a 54       		.byte	0x54
 4473 005b 0E000000 		.4byte	.LVL8
 4474 005f 10000000 		.4byte	.LVL9
 4475 0063 0400     		.2byte	0x4
 4476 0065 F3       		.byte	0xf3
 4477 0066 01       		.uleb128 0x1
 4478 0067 50       		.byte	0x50
 4479 0068 9F       		.byte	0x9f
 4480 0069 10000000 		.4byte	.LVL9
 4481 006d 12000000 		.4byte	.LVL10
 4482 0071 0100     		.2byte	0x1
 4483 0073 54       		.byte	0x54
 4484 0074 12000000 		.4byte	.LVL10
 4485 0078 1A000000 		.4byte	.LFE83
 4486 007c 0400     		.2byte	0x4
 4487 007e F3       		.byte	0xf3
 4488 007f 01       		.uleb128 0x1
 4489 0080 50       		.byte	0x50
 4490 0081 9F       		.byte	0x9f
 4491 0082 00000000 		.4byte	0
 4492 0086 00000000 		.4byte	0
 4493              	.LLST2:
 4494 008a 00000000 		.4byte	.LVL12
 4495 008e 10000000 		.4byte	.LVL15
 4496 0092 0100     		.2byte	0x1
 4497 0094 50       		.byte	0x50
 4498 0095 10000000 		.4byte	.LVL15
 4499 0099 1A000000 		.4byte	.LVL17
 4500 009d 0100     		.2byte	0x1
 4501 009f 54       		.byte	0x54
 4502 00a0 1A000000 		.4byte	.LVL17
 4503 00a4 1E000000 		.4byte	.LVL18
 4504 00a8 0100     		.2byte	0x1
 4505 00aa 50       		.byte	0x50
 4506 00ab 1E000000 		.4byte	.LVL18
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 127


 4507 00af 38000000 		.4byte	.LVL20
 4508 00b3 0100     		.2byte	0x1
 4509 00b5 54       		.byte	0x54
 4510 00b6 38000000 		.4byte	.LVL20
 4511 00ba 3A000000 		.4byte	.LVL21
 4512 00be 0100     		.2byte	0x1
 4513 00c0 50       		.byte	0x50
 4514 00c1 3A000000 		.4byte	.LVL21
 4515 00c5 66000000 		.4byte	.LVL23
 4516 00c9 0100     		.2byte	0x1
 4517 00cb 54       		.byte	0x54
 4518 00cc 66000000 		.4byte	.LVL23
 4519 00d0 68000000 		.4byte	.LVL24
 4520 00d4 0100     		.2byte	0x1
 4521 00d6 50       		.byte	0x50
 4522 00d7 68000000 		.4byte	.LVL24
 4523 00db 7C000000 		.4byte	.LFE80
 4524 00df 0100     		.2byte	0x1
 4525 00e1 54       		.byte	0x54
 4526 00e2 00000000 		.4byte	0
 4527 00e6 00000000 		.4byte	0
 4528              	.LLST3:
 4529 00ea 00000000 		.4byte	.LVL12
 4530 00ee 13000000 		.4byte	.LVL16-1
 4531 00f2 0100     		.2byte	0x1
 4532 00f4 51       		.byte	0x51
 4533 00f5 13000000 		.4byte	.LVL16-1
 4534 00f9 1A000000 		.4byte	.LVL17
 4535 00fd 0400     		.2byte	0x4
 4536 00ff F3       		.byte	0xf3
 4537 0100 01       		.uleb128 0x1
 4538 0101 51       		.byte	0x51
 4539 0102 9F       		.byte	0x9f
 4540 0103 1A000000 		.4byte	.LVL17
 4541 0107 21000000 		.4byte	.LVL19-1
 4542 010b 0100     		.2byte	0x1
 4543 010d 51       		.byte	0x51
 4544 010e 21000000 		.4byte	.LVL19-1
 4545 0112 38000000 		.4byte	.LVL20
 4546 0116 0400     		.2byte	0x4
 4547 0118 F3       		.byte	0xf3
 4548 0119 01       		.uleb128 0x1
 4549 011a 51       		.byte	0x51
 4550 011b 9F       		.byte	0x9f
 4551 011c 38000000 		.4byte	.LVL20
 4552 0120 3D000000 		.4byte	.LVL22-1
 4553 0124 0100     		.2byte	0x1
 4554 0126 51       		.byte	0x51
 4555 0127 3D000000 		.4byte	.LVL22-1
 4556 012b 66000000 		.4byte	.LVL23
 4557 012f 0400     		.2byte	0x4
 4558 0131 F3       		.byte	0xf3
 4559 0132 01       		.uleb128 0x1
 4560 0133 51       		.byte	0x51
 4561 0134 9F       		.byte	0x9f
 4562 0135 66000000 		.4byte	.LVL23
 4563 0139 6A000000 		.4byte	.LVL25
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 128


 4564 013d 0100     		.2byte	0x1
 4565 013f 51       		.byte	0x51
 4566 0140 6A000000 		.4byte	.LVL25
 4567 0144 7C000000 		.4byte	.LFE80
 4568 0148 0400     		.2byte	0x4
 4569 014a F3       		.byte	0xf3
 4570 014b 01       		.uleb128 0x1
 4571 014c 51       		.byte	0x51
 4572 014d 9F       		.byte	0x9f
 4573 014e 00000000 		.4byte	0
 4574 0152 00000000 		.4byte	0
 4575              	.LLST4:
 4576 0156 00000000 		.4byte	.LVL12
 4577 015a 08000000 		.4byte	.LVL14
 4578 015e 0100     		.2byte	0x1
 4579 0160 52       		.byte	0x52
 4580 0161 08000000 		.4byte	.LVL14
 4581 0165 7C000000 		.4byte	.LFE80
 4582 0169 0100     		.2byte	0x1
 4583 016b 55       		.byte	0x55
 4584 016c 00000000 		.4byte	0
 4585 0170 00000000 		.4byte	0
 4586              	.LLST5:
 4587 0174 06000000 		.4byte	.LVL13
 4588 0178 14000000 		.4byte	.LVL16
 4589 017c 0200     		.2byte	0x2
 4590 017e 30       		.byte	0x30
 4591 017f 9F       		.byte	0x9f
 4592 0180 14000000 		.4byte	.LVL16
 4593 0184 1A000000 		.4byte	.LVL17
 4594 0188 0100     		.2byte	0x1
 4595 018a 50       		.byte	0x50
 4596 018b 1A000000 		.4byte	.LVL17
 4597 018f 74000000 		.4byte	.LVL26
 4598 0193 0200     		.2byte	0x2
 4599 0195 30       		.byte	0x30
 4600 0196 9F       		.byte	0x9f
 4601 0197 74000000 		.4byte	.LVL26
 4602 019b 7C000000 		.4byte	.LFE80
 4603 019f 0100     		.2byte	0x1
 4604 01a1 50       		.byte	0x50
 4605 01a2 00000000 		.4byte	0
 4606 01a6 00000000 		.4byte	0
 4607              	.LLST6:
 4608 01aa 00000000 		.4byte	.LVL27
 4609 01ae 1C000000 		.4byte	.LVL29
 4610 01b2 0100     		.2byte	0x1
 4611 01b4 50       		.byte	0x50
 4612 01b5 1C000000 		.4byte	.LVL29
 4613 01b9 22000000 		.4byte	.LVL31
 4614 01bd 0400     		.2byte	0x4
 4615 01bf F3       		.byte	0xf3
 4616 01c0 01       		.uleb128 0x1
 4617 01c1 50       		.byte	0x50
 4618 01c2 9F       		.byte	0x9f
 4619 01c3 22000000 		.4byte	.LVL31
 4620 01c7 24000000 		.4byte	.LFE81
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 129


 4621 01cb 0100     		.2byte	0x1
 4622 01cd 50       		.byte	0x50
 4623 01ce 00000000 		.4byte	0
 4624 01d2 00000000 		.4byte	0
 4625              	.LLST7:
 4626 01d6 00000000 		.4byte	.LVL27
 4627 01da 1A000000 		.4byte	.LVL28
 4628 01de 0100     		.2byte	0x1
 4629 01e0 51       		.byte	0x51
 4630 01e1 1A000000 		.4byte	.LVL28
 4631 01e5 22000000 		.4byte	.LVL31
 4632 01e9 0100     		.2byte	0x1
 4633 01eb 54       		.byte	0x54
 4634 01ec 22000000 		.4byte	.LVL31
 4635 01f0 24000000 		.4byte	.LFE81
 4636 01f4 0100     		.2byte	0x1
 4637 01f6 51       		.byte	0x51
 4638 01f7 00000000 		.4byte	0
 4639 01fb 00000000 		.4byte	0
 4640              	.LLST8:
 4641 01ff 00000000 		.4byte	.LVL32
 4642 0203 07000000 		.4byte	.LVL33-1
 4643 0207 0100     		.2byte	0x1
 4644 0209 50       		.byte	0x50
 4645 020a 07000000 		.4byte	.LVL33-1
 4646 020e 62000000 		.4byte	.LFE82
 4647 0212 0100     		.2byte	0x1
 4648 0214 54       		.byte	0x54
 4649 0215 00000000 		.4byte	0
 4650 0219 00000000 		.4byte	0
 4651              	.LLST9:
 4652 021d 00000000 		.4byte	.LVL41
 4653 0221 09000000 		.4byte	.LVL43-1
 4654 0225 0100     		.2byte	0x1
 4655 0227 50       		.byte	0x50
 4656 0228 09000000 		.4byte	.LVL43-1
 4657 022c 5C000000 		.4byte	.LFE64
 4658 0230 0100     		.2byte	0x1
 4659 0232 54       		.byte	0x54
 4660 0233 00000000 		.4byte	0
 4661 0237 00000000 		.4byte	0
 4662              	.LLST10:
 4663 023b 00000000 		.4byte	.LVL41
 4664 023f 09000000 		.4byte	.LVL43-1
 4665 0243 0100     		.2byte	0x1
 4666 0245 51       		.byte	0x51
 4667 0246 09000000 		.4byte	.LVL43-1
 4668 024a 5C000000 		.4byte	.LFE64
 4669 024e 0100     		.2byte	0x1
 4670 0250 55       		.byte	0x55
 4671 0251 00000000 		.4byte	0
 4672 0255 00000000 		.4byte	0
 4673              	.LLST11:
 4674 0259 06000000 		.4byte	.LVL42
 4675 025d 09000000 		.4byte	.LVL43-1
 4676 0261 0100     		.2byte	0x1
 4677 0263 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 130


 4678 0264 09000000 		.4byte	.LVL43-1
 4679 0268 5C000000 		.4byte	.LFE64
 4680 026c 0100     		.2byte	0x1
 4681 026e 54       		.byte	0x54
 4682 026f 00000000 		.4byte	0
 4683 0273 00000000 		.4byte	0
 4684              	.LLST12:
 4685 0277 00000000 		.4byte	.LVL49
 4686 027b 0C000000 		.4byte	.LVL51
 4687 027f 0100     		.2byte	0x1
 4688 0281 50       		.byte	0x50
 4689 0282 0C000000 		.4byte	.LVL51
 4690 0286 10000000 		.4byte	.LVL53
 4691 028a 0100     		.2byte	0x1
 4692 028c 56       		.byte	0x56
 4693 028d 10000000 		.4byte	.LVL53
 4694 0291 12000000 		.4byte	.LVL54
 4695 0295 0100     		.2byte	0x1
 4696 0297 50       		.byte	0x50
 4697 0298 12000000 		.4byte	.LVL54
 4698 029c 38000000 		.4byte	.LFE65
 4699 02a0 0100     		.2byte	0x1
 4700 02a2 56       		.byte	0x56
 4701 02a3 00000000 		.4byte	0
 4702 02a7 00000000 		.4byte	0
 4703              	.LLST13:
 4704 02ab 00000000 		.4byte	.LVL49
 4705 02af 17000000 		.4byte	.LVL56-1
 4706 02b3 0100     		.2byte	0x1
 4707 02b5 51       		.byte	0x51
 4708 02b6 17000000 		.4byte	.LVL56-1
 4709 02ba 38000000 		.4byte	.LFE65
 4710 02be 0100     		.2byte	0x1
 4711 02c0 55       		.byte	0x55
 4712 02c1 00000000 		.4byte	0
 4713 02c5 00000000 		.4byte	0
 4714              	.LLST14:
 4715 02c9 00000000 		.4byte	.LVL49
 4716 02cd 17000000 		.4byte	.LVL56-1
 4717 02d1 0100     		.2byte	0x1
 4718 02d3 52       		.byte	0x52
 4719 02d4 17000000 		.4byte	.LVL56-1
 4720 02d8 38000000 		.4byte	.LFE65
 4721 02dc 0400     		.2byte	0x4
 4722 02de F3       		.byte	0xf3
 4723 02df 01       		.uleb128 0x1
 4724 02e0 52       		.byte	0x52
 4725 02e1 9F       		.byte	0x9f
 4726 02e2 00000000 		.4byte	0
 4727 02e6 00000000 		.4byte	0
 4728              	.LLST15:
 4729 02ea 18000000 		.4byte	.LVL56
 4730 02ee 30000000 		.4byte	.LVL57
 4731 02f2 0100     		.2byte	0x1
 4732 02f4 50       		.byte	0x50
 4733 02f5 30000000 		.4byte	.LVL57
 4734 02f9 38000000 		.4byte	.LFE65
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 131


 4735 02fd 0100     		.2byte	0x1
 4736 02ff 54       		.byte	0x54
 4737 0300 00000000 		.4byte	0
 4738 0304 00000000 		.4byte	0
 4739              	.LLST16:
 4740 0308 0E000000 		.4byte	.LVL52
 4741 030c 10000000 		.4byte	.LVL53
 4742 0310 0100     		.2byte	0x1
 4743 0312 50       		.byte	0x50
 4744 0313 12000000 		.4byte	.LVL54
 4745 0317 14000000 		.4byte	.LVL55
 4746 031b 0100     		.2byte	0x1
 4747 031d 50       		.byte	0x50
 4748 031e 14000000 		.4byte	.LVL55
 4749 0322 17000000 		.4byte	.LVL56-1
 4750 0326 0400     		.2byte	0x4
 4751 0328 70       		.byte	0x70
 4752 0329 B47F     		.sleb128 -76
 4753 032b 9F       		.byte	0x9f
 4754 032c 00000000 		.4byte	0
 4755 0330 00000000 		.4byte	0
 4756              	.LLST17:
 4757 0334 04000000 		.4byte	.LVL50
 4758 0338 34000000 		.4byte	.LVL58
 4759 033c 0200     		.2byte	0x2
 4760 033e 30       		.byte	0x30
 4761 033f 9F       		.byte	0x9f
 4762 0340 34000000 		.4byte	.LVL58
 4763 0344 38000000 		.4byte	.LFE65
 4764 0348 0100     		.2byte	0x1
 4765 034a 54       		.byte	0x54
 4766 034b 00000000 		.4byte	0
 4767 034f 00000000 		.4byte	0
 4768              	.LLST18:
 4769 0353 00000000 		.4byte	.LVL59
 4770 0357 0B000000 		.4byte	.LVL61-1
 4771 035b 0100     		.2byte	0x1
 4772 035d 50       		.byte	0x50
 4773 035e 0B000000 		.4byte	.LVL61-1
 4774 0362 16000000 		.4byte	.LFE69
 4775 0366 0400     		.2byte	0x4
 4776 0368 F3       		.byte	0xf3
 4777 0369 01       		.uleb128 0x1
 4778 036a 50       		.byte	0x50
 4779 036b 9F       		.byte	0x9f
 4780 036c 00000000 		.4byte	0
 4781 0370 00000000 		.4byte	0
 4782              	.LLST19:
 4783 0374 00000000 		.4byte	.LVL59
 4784 0378 08000000 		.4byte	.LVL60
 4785 037c 0100     		.2byte	0x1
 4786 037e 51       		.byte	0x51
 4787 037f 08000000 		.4byte	.LVL60
 4788 0383 16000000 		.4byte	.LFE69
 4789 0387 0100     		.2byte	0x1
 4790 0389 54       		.byte	0x54
 4791 038a 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 132


 4792 038e 00000000 		.4byte	0
 4793              	.LLST20:
 4794 0392 0C000000 		.4byte	.LVL61
 4795 0396 14000000 		.4byte	.LVL62
 4796 039a 0100     		.2byte	0x1
 4797 039c 50       		.byte	0x50
 4798 039d 14000000 		.4byte	.LVL62
 4799 03a1 16000000 		.4byte	.LFE69
 4800 03a5 0100     		.2byte	0x1
 4801 03a7 53       		.byte	0x53
 4802 03a8 00000000 		.4byte	0
 4803 03ac 00000000 		.4byte	0
 4804              	.LLST21:
 4805 03b0 00000000 		.4byte	.LVL63
 4806 03b4 0E000000 		.4byte	.LVL65
 4807 03b8 0100     		.2byte	0x1
 4808 03ba 50       		.byte	0x50
 4809 03bb 0E000000 		.4byte	.LVL65
 4810 03bf D6000000 		.4byte	.LFE70
 4811 03c3 0100     		.2byte	0x1
 4812 03c5 54       		.byte	0x54
 4813 03c6 00000000 		.4byte	0
 4814 03ca 00000000 		.4byte	0
 4815              	.LLST22:
 4816 03ce 00000000 		.4byte	.LVL63
 4817 03d2 0E000000 		.4byte	.LVL65
 4818 03d6 0100     		.2byte	0x1
 4819 03d8 51       		.byte	0x51
 4820 03d9 0E000000 		.4byte	.LVL65
 4821 03dd D6000000 		.4byte	.LFE70
 4822 03e1 0100     		.2byte	0x1
 4823 03e3 57       		.byte	0x57
 4824 03e4 00000000 		.4byte	0
 4825 03e8 00000000 		.4byte	0
 4826              	.LLST23:
 4827 03ec 00000000 		.4byte	.LVL63
 4828 03f0 0E000000 		.4byte	.LVL65
 4829 03f4 0100     		.2byte	0x1
 4830 03f6 52       		.byte	0x52
 4831 03f7 0E000000 		.4byte	.LVL65
 4832 03fb 8C000000 		.4byte	.LVL81
 4833 03ff 0200     		.2byte	0x2
 4834 0401 91       		.byte	0x91
 4835 0402 5C       		.sleb128 -36
 4836 0403 8C000000 		.4byte	.LVL81
 4837 0407 91000000 		.4byte	.LVL82-1
 4838 040b 0200     		.2byte	0x2
 4839 040d 71       		.byte	0x71
 4840 040e 00       		.sleb128 0
 4841 040f 91000000 		.4byte	.LVL82-1
 4842 0413 D6000000 		.4byte	.LFE70
 4843 0417 0200     		.2byte	0x2
 4844 0419 91       		.byte	0x91
 4845 041a 5C       		.sleb128 -36
 4846 041b 00000000 		.4byte	0
 4847 041f 00000000 		.4byte	0
 4848              	.LLST24:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 133


 4849 0423 00000000 		.4byte	.LVL63
 4850 0427 0E000000 		.4byte	.LVL65
 4851 042b 0100     		.2byte	0x1
 4852 042d 53       		.byte	0x53
 4853 042e 0E000000 		.4byte	.LVL65
 4854 0432 D6000000 		.4byte	.LFE70
 4855 0436 0100     		.2byte	0x1
 4856 0438 56       		.byte	0x56
 4857 0439 00000000 		.4byte	0
 4858 043d 00000000 		.4byte	0
 4859              	.LLST25:
 4860 0441 0C000000 		.4byte	.LVL64
 4861 0445 0E000000 		.4byte	.LVL65
 4862 0449 0200     		.2byte	0x2
 4863 044b 30       		.byte	0x30
 4864 044c 9F       		.byte	0x9f
 4865 044d 0E000000 		.4byte	.LVL65
 4866 0451 60000000 		.4byte	.LVL75
 4867 0455 0100     		.2byte	0x1
 4868 0457 55       		.byte	0x55
 4869 0458 60000000 		.4byte	.LVL75
 4870 045c 62000000 		.4byte	.LVL76
 4871 0460 0200     		.2byte	0x2
 4872 0462 31       		.byte	0x31
 4873 0463 9F       		.byte	0x9f
 4874 0464 62000000 		.4byte	.LVL76
 4875 0468 D6000000 		.4byte	.LFE70
 4876 046c 0100     		.2byte	0x1
 4877 046e 55       		.byte	0x55
 4878 046f 00000000 		.4byte	0
 4879 0473 00000000 		.4byte	0
 4880              	.LLST26:
 4881 0477 28000000 		.4byte	.LVL67
 4882 047b 30000000 		.4byte	.LVL68
 4883 047f 0100     		.2byte	0x1
 4884 0481 50       		.byte	0x50
 4885 0482 3E000000 		.4byte	.LVL71
 4886 0486 43000000 		.4byte	.LVL72-1
 4887 048a 0100     		.2byte	0x1
 4888 048c 50       		.byte	0x50
 4889 048d 00000000 		.4byte	0
 4890 0491 00000000 		.4byte	0
 4891              	.LLST27:
 4892 0495 0C000000 		.4byte	.LVL64
 4893 0499 0E000000 		.4byte	.LVL65
 4894 049d 0100     		.2byte	0x1
 4895 049f 50       		.byte	0x50
 4896 04a0 0E000000 		.4byte	.LVL65
 4897 04a4 D6000000 		.4byte	.LFE70
 4898 04a8 0100     		.2byte	0x1
 4899 04aa 54       		.byte	0x54
 4900 04ab 00000000 		.4byte	0
 4901 04af 00000000 		.4byte	0
 4902              	.LLST28:
 4903 04b3 00000000 		.4byte	.LVL92
 4904 04b7 04000000 		.4byte	.LVL93
 4905 04bb 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 134


 4906 04bd 50       		.byte	0x50
 4907 04be 04000000 		.4byte	.LVL93
 4908 04c2 44000000 		.4byte	.LFE66
 4909 04c6 0400     		.2byte	0x4
 4910 04c8 F3       		.byte	0xf3
 4911 04c9 01       		.uleb128 0x1
 4912 04ca 50       		.byte	0x50
 4913 04cb 9F       		.byte	0x9f
 4914 04cc 00000000 		.4byte	0
 4915 04d0 00000000 		.4byte	0
 4916              	.LLST29:
 4917 04d4 08000000 		.4byte	.LVL94
 4918 04d8 28000000 		.4byte	.LVL95
 4919 04dc 0100     		.2byte	0x1
 4920 04de 50       		.byte	0x50
 4921 04df 28000000 		.4byte	.LVL95
 4922 04e3 44000000 		.4byte	.LFE66
 4923 04e7 0100     		.2byte	0x1
 4924 04e9 54       		.byte	0x54
 4925 04ea 00000000 		.4byte	0
 4926 04ee 00000000 		.4byte	0
 4927              	.LLST30:
 4928 04f2 00000000 		.4byte	.LVL99
 4929 04f6 09000000 		.4byte	.LVL101-1
 4930 04fa 0100     		.2byte	0x1
 4931 04fc 50       		.byte	0x50
 4932 04fd 09000000 		.4byte	.LVL101-1
 4933 0501 2C000000 		.4byte	.LFE67
 4934 0505 0100     		.2byte	0x1
 4935 0507 54       		.byte	0x54
 4936 0508 00000000 		.4byte	0
 4937 050c 00000000 		.4byte	0
 4938              	.LLST31:
 4939 0510 04000000 		.4byte	.LVL100
 4940 0514 09000000 		.4byte	.LVL101-1
 4941 0518 0100     		.2byte	0x1
 4942 051a 50       		.byte	0x50
 4943 051b 09000000 		.4byte	.LVL101-1
 4944 051f 2C000000 		.4byte	.LFE67
 4945 0523 0100     		.2byte	0x1
 4946 0525 54       		.byte	0x54
 4947 0526 00000000 		.4byte	0
 4948 052a 00000000 		.4byte	0
 4949              	.LLST32:
 4950 052e 00000000 		.4byte	.LVL106
 4951 0532 0F000000 		.4byte	.LVL108-1
 4952 0536 0100     		.2byte	0x1
 4953 0538 50       		.byte	0x50
 4954 0539 0F000000 		.4byte	.LVL108-1
 4955 053d 46000000 		.4byte	.LVL113
 4956 0541 0100     		.2byte	0x1
 4957 0543 54       		.byte	0x54
 4958 0544 46000000 		.4byte	.LVL113
 4959 0548 4C000000 		.4byte	.LVL114
 4960 054c 0400     		.2byte	0x4
 4961 054e F3       		.byte	0xf3
 4962 054f 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 135


 4963 0550 50       		.byte	0x50
 4964 0551 9F       		.byte	0x9f
 4965 0552 4C000000 		.4byte	.LVL114
 4966 0556 54000000 		.4byte	.LVL115
 4967 055a 0100     		.2byte	0x1
 4968 055c 54       		.byte	0x54
 4969 055d 54000000 		.4byte	.LVL115
 4970 0561 56000000 		.4byte	.LVL116
 4971 0565 0400     		.2byte	0x4
 4972 0567 F3       		.byte	0xf3
 4973 0568 01       		.uleb128 0x1
 4974 0569 50       		.byte	0x50
 4975 056a 9F       		.byte	0x9f
 4976 056b 56000000 		.4byte	.LVL116
 4977 056f 58000000 		.4byte	.LVL117
 4978 0573 0100     		.2byte	0x1
 4979 0575 54       		.byte	0x54
 4980 0576 58000000 		.4byte	.LVL117
 4981 057a 5A000000 		.4byte	.LVL118
 4982 057e 0400     		.2byte	0x4
 4983 0580 F3       		.byte	0xf3
 4984 0581 01       		.uleb128 0x1
 4985 0582 50       		.byte	0x50
 4986 0583 9F       		.byte	0x9f
 4987 0584 5A000000 		.4byte	.LVL118
 4988 0588 5C000000 		.4byte	.LVL119
 4989 058c 0100     		.2byte	0x1
 4990 058e 54       		.byte	0x54
 4991 058f 5C000000 		.4byte	.LVL119
 4992 0593 5E000000 		.4byte	.LVL120
 4993 0597 0400     		.2byte	0x4
 4994 0599 F3       		.byte	0xf3
 4995 059a 01       		.uleb128 0x1
 4996 059b 50       		.byte	0x50
 4997 059c 9F       		.byte	0x9f
 4998 059d 5E000000 		.4byte	.LVL120
 4999 05a1 60000000 		.4byte	.LVL121
 5000 05a5 0100     		.2byte	0x1
 5001 05a7 54       		.byte	0x54
 5002 05a8 60000000 		.4byte	.LVL121
 5003 05ac 62000000 		.4byte	.LVL122
 5004 05b0 0400     		.2byte	0x4
 5005 05b2 F3       		.byte	0xf3
 5006 05b3 01       		.uleb128 0x1
 5007 05b4 50       		.byte	0x50
 5008 05b5 9F       		.byte	0x9f
 5009 05b6 62000000 		.4byte	.LVL122
 5010 05ba 64000000 		.4byte	.LVL123
 5011 05be 0100     		.2byte	0x1
 5012 05c0 54       		.byte	0x54
 5013 05c1 64000000 		.4byte	.LVL123
 5014 05c5 70000000 		.4byte	.LFE71
 5015 05c9 0400     		.2byte	0x4
 5016 05cb F3       		.byte	0xf3
 5017 05cc 01       		.uleb128 0x1
 5018 05cd 50       		.byte	0x50
 5019 05ce 9F       		.byte	0x9f
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 136


 5020 05cf 00000000 		.4byte	0
 5021 05d3 00000000 		.4byte	0
 5022              	.LLST33:
 5023 05d7 00000000 		.4byte	.LVL106
 5024 05db 0F000000 		.4byte	.LVL108-1
 5025 05df 0100     		.2byte	0x1
 5026 05e1 51       		.byte	0x51
 5027 05e2 0F000000 		.4byte	.LVL108-1
 5028 05e6 70000000 		.4byte	.LFE71
 5029 05ea 0100     		.2byte	0x1
 5030 05ec 57       		.byte	0x57
 5031 05ed 00000000 		.4byte	0
 5032 05f1 00000000 		.4byte	0
 5033              	.LLST34:
 5034 05f5 00000000 		.4byte	.LVL106
 5035 05f9 0F000000 		.4byte	.LVL108-1
 5036 05fd 0100     		.2byte	0x1
 5037 05ff 52       		.byte	0x52
 5038 0600 0F000000 		.4byte	.LVL108-1
 5039 0604 70000000 		.4byte	.LFE71
 5040 0608 0100     		.2byte	0x1
 5041 060a 58       		.byte	0x58
 5042 060b 00000000 		.4byte	0
 5043 060f 00000000 		.4byte	0
 5044              	.LLST35:
 5045 0613 00000000 		.4byte	.LVL106
 5046 0617 0F000000 		.4byte	.LVL108-1
 5047 061b 0100     		.2byte	0x1
 5048 061d 53       		.byte	0x53
 5049 061e 0F000000 		.4byte	.LVL108-1
 5050 0622 70000000 		.4byte	.LFE71
 5051 0626 0100     		.2byte	0x1
 5052 0628 55       		.byte	0x55
 5053 0629 00000000 		.4byte	0
 5054 062d 00000000 		.4byte	0
 5055              	.LLST36:
 5056 0631 12000000 		.4byte	.LVL109
 5057 0635 24000000 		.4byte	.LVL110
 5058 0639 0100     		.2byte	0x1
 5059 063b 50       		.byte	0x50
 5060 063c 24000000 		.4byte	.LVL110
 5061 0640 56000000 		.4byte	.LVL116
 5062 0644 0100     		.2byte	0x1
 5063 0646 56       		.byte	0x56
 5064 0647 56000000 		.4byte	.LVL116
 5065 064b 5A000000 		.4byte	.LVL118
 5066 064f 0100     		.2byte	0x1
 5067 0651 50       		.byte	0x50
 5068 0652 5A000000 		.4byte	.LVL118
 5069 0656 70000000 		.4byte	.LFE71
 5070 065a 0100     		.2byte	0x1
 5071 065c 56       		.byte	0x56
 5072 065d 00000000 		.4byte	0
 5073 0661 00000000 		.4byte	0
 5074              	.LLST37:
 5075 0665 0C000000 		.4byte	.LVL107
 5076 0669 0F000000 		.4byte	.LVL108-1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 137


 5077 066d 0100     		.2byte	0x1
 5078 066f 50       		.byte	0x50
 5079 0670 0F000000 		.4byte	.LVL108-1
 5080 0674 46000000 		.4byte	.LVL113
 5081 0678 0100     		.2byte	0x1
 5082 067a 54       		.byte	0x54
 5083 067b 46000000 		.4byte	.LVL113
 5084 067f 4C000000 		.4byte	.LVL114
 5085 0683 0400     		.2byte	0x4
 5086 0685 F3       		.byte	0xf3
 5087 0686 01       		.uleb128 0x1
 5088 0687 50       		.byte	0x50
 5089 0688 9F       		.byte	0x9f
 5090 0689 4C000000 		.4byte	.LVL114
 5091 068d 54000000 		.4byte	.LVL115
 5092 0691 0100     		.2byte	0x1
 5093 0693 54       		.byte	0x54
 5094 0694 54000000 		.4byte	.LVL115
 5095 0698 56000000 		.4byte	.LVL116
 5096 069c 0400     		.2byte	0x4
 5097 069e F3       		.byte	0xf3
 5098 069f 01       		.uleb128 0x1
 5099 06a0 50       		.byte	0x50
 5100 06a1 9F       		.byte	0x9f
 5101 06a2 56000000 		.4byte	.LVL116
 5102 06a6 58000000 		.4byte	.LVL117
 5103 06aa 0100     		.2byte	0x1
 5104 06ac 54       		.byte	0x54
 5105 06ad 58000000 		.4byte	.LVL117
 5106 06b1 5A000000 		.4byte	.LVL118
 5107 06b5 0400     		.2byte	0x4
 5108 06b7 F3       		.byte	0xf3
 5109 06b8 01       		.uleb128 0x1
 5110 06b9 50       		.byte	0x50
 5111 06ba 9F       		.byte	0x9f
 5112 06bb 5A000000 		.4byte	.LVL118
 5113 06bf 5C000000 		.4byte	.LVL119
 5114 06c3 0100     		.2byte	0x1
 5115 06c5 54       		.byte	0x54
 5116 06c6 5C000000 		.4byte	.LVL119
 5117 06ca 5E000000 		.4byte	.LVL120
 5118 06ce 0400     		.2byte	0x4
 5119 06d0 F3       		.byte	0xf3
 5120 06d1 01       		.uleb128 0x1
 5121 06d2 50       		.byte	0x50
 5122 06d3 9F       		.byte	0x9f
 5123 06d4 5E000000 		.4byte	.LVL120
 5124 06d8 60000000 		.4byte	.LVL121
 5125 06dc 0100     		.2byte	0x1
 5126 06de 54       		.byte	0x54
 5127 06df 60000000 		.4byte	.LVL121
 5128 06e3 62000000 		.4byte	.LVL122
 5129 06e7 0400     		.2byte	0x4
 5130 06e9 F3       		.byte	0xf3
 5131 06ea 01       		.uleb128 0x1
 5132 06eb 50       		.byte	0x50
 5133 06ec 9F       		.byte	0x9f
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 138


 5134 06ed 62000000 		.4byte	.LVL122
 5135 06f1 64000000 		.4byte	.LVL123
 5136 06f5 0100     		.2byte	0x1
 5137 06f7 54       		.byte	0x54
 5138 06f8 64000000 		.4byte	.LVL123
 5139 06fc 70000000 		.4byte	.LFE71
 5140 0700 0400     		.2byte	0x4
 5141 0702 F3       		.byte	0xf3
 5142 0703 01       		.uleb128 0x1
 5143 0704 50       		.byte	0x50
 5144 0705 9F       		.byte	0x9f
 5145 0706 00000000 		.4byte	0
 5146 070a 00000000 		.4byte	0
 5147              	.LLST38:
 5148 070e 00000000 		.4byte	.LVL125
 5149 0712 09000000 		.4byte	.LVL127-1
 5150 0716 0100     		.2byte	0x1
 5151 0718 50       		.byte	0x50
 5152 0719 09000000 		.4byte	.LVL127-1
 5153 071d 34000000 		.4byte	.LVL131
 5154 0721 0100     		.2byte	0x1
 5155 0723 54       		.byte	0x54
 5156 0724 34000000 		.4byte	.LVL131
 5157 0728 38000000 		.4byte	.LVL132
 5158 072c 0400     		.2byte	0x4
 5159 072e F3       		.byte	0xf3
 5160 072f 01       		.uleb128 0x1
 5161 0730 50       		.byte	0x50
 5162 0731 9F       		.byte	0x9f
 5163 0732 38000000 		.4byte	.LVL132
 5164 0736 40000000 		.4byte	.LVL133
 5165 073a 0100     		.2byte	0x1
 5166 073c 54       		.byte	0x54
 5167 073d 40000000 		.4byte	.LVL133
 5168 0741 42000000 		.4byte	.LVL134
 5169 0745 0400     		.2byte	0x4
 5170 0747 F3       		.byte	0xf3
 5171 0748 01       		.uleb128 0x1
 5172 0749 50       		.byte	0x50
 5173 074a 9F       		.byte	0x9f
 5174 074b 42000000 		.4byte	.LVL134
 5175 074f 44000000 		.4byte	.LVL135
 5176 0753 0100     		.2byte	0x1
 5177 0755 54       		.byte	0x54
 5178 0756 44000000 		.4byte	.LVL135
 5179 075a 46000000 		.4byte	.LVL136
 5180 075e 0400     		.2byte	0x4
 5181 0760 F3       		.byte	0xf3
 5182 0761 01       		.uleb128 0x1
 5183 0762 50       		.byte	0x50
 5184 0763 9F       		.byte	0x9f
 5185 0764 46000000 		.4byte	.LVL136
 5186 0768 48000000 		.4byte	.LVL137
 5187 076c 0100     		.2byte	0x1
 5188 076e 54       		.byte	0x54
 5189 076f 48000000 		.4byte	.LVL137
 5190 0773 4A000000 		.4byte	.LVL138
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 139


 5191 0777 0400     		.2byte	0x4
 5192 0779 F3       		.byte	0xf3
 5193 077a 01       		.uleb128 0x1
 5194 077b 50       		.byte	0x50
 5195 077c 9F       		.byte	0x9f
 5196 077d 4A000000 		.4byte	.LVL138
 5197 0781 4C000000 		.4byte	.LVL139
 5198 0785 0100     		.2byte	0x1
 5199 0787 54       		.byte	0x54
 5200 0788 4C000000 		.4byte	.LVL139
 5201 078c 4E000000 		.4byte	.LVL140
 5202 0790 0400     		.2byte	0x4
 5203 0792 F3       		.byte	0xf3
 5204 0793 01       		.uleb128 0x1
 5205 0794 50       		.byte	0x50
 5206 0795 9F       		.byte	0x9f
 5207 0796 4E000000 		.4byte	.LVL140
 5208 079a 50000000 		.4byte	.LVL141
 5209 079e 0100     		.2byte	0x1
 5210 07a0 54       		.byte	0x54
 5211 07a1 50000000 		.4byte	.LVL141
 5212 07a5 5A000000 		.4byte	.LFE72
 5213 07a9 0400     		.2byte	0x4
 5214 07ab F3       		.byte	0xf3
 5215 07ac 01       		.uleb128 0x1
 5216 07ad 50       		.byte	0x50
 5217 07ae 9F       		.byte	0x9f
 5218 07af 00000000 		.4byte	0
 5219 07b3 00000000 		.4byte	0
 5220              	.LLST39:
 5221 07b7 00000000 		.4byte	.LVL125
 5222 07bb 09000000 		.4byte	.LVL127-1
 5223 07bf 0100     		.2byte	0x1
 5224 07c1 51       		.byte	0x51
 5225 07c2 09000000 		.4byte	.LVL127-1
 5226 07c6 5A000000 		.4byte	.LFE72
 5227 07ca 0100     		.2byte	0x1
 5228 07cc 56       		.byte	0x56
 5229 07cd 00000000 		.4byte	0
 5230 07d1 00000000 		.4byte	0
 5231              	.LLST40:
 5232 07d5 0C000000 		.4byte	.LVL128
 5233 07d9 2A000000 		.4byte	.LVL129
 5234 07dd 0100     		.2byte	0x1
 5235 07df 50       		.byte	0x50
 5236 07e0 2A000000 		.4byte	.LVL129
 5237 07e4 38000000 		.4byte	.LVL132
 5238 07e8 0100     		.2byte	0x1
 5239 07ea 55       		.byte	0x55
 5240 07eb 38000000 		.4byte	.LVL132
 5241 07ef 4A000000 		.4byte	.LVL138
 5242 07f3 0100     		.2byte	0x1
 5243 07f5 50       		.byte	0x50
 5244 07f6 4A000000 		.4byte	.LVL138
 5245 07fa 5A000000 		.4byte	.LFE72
 5246 07fe 0100     		.2byte	0x1
 5247 0800 55       		.byte	0x55
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 140


 5248 0801 00000000 		.4byte	0
 5249 0805 00000000 		.4byte	0
 5250              	.LLST41:
 5251 0809 06000000 		.4byte	.LVL126
 5252 080d 09000000 		.4byte	.LVL127-1
 5253 0811 0100     		.2byte	0x1
 5254 0813 50       		.byte	0x50
 5255 0814 09000000 		.4byte	.LVL127-1
 5256 0818 34000000 		.4byte	.LVL131
 5257 081c 0100     		.2byte	0x1
 5258 081e 54       		.byte	0x54
 5259 081f 34000000 		.4byte	.LVL131
 5260 0823 38000000 		.4byte	.LVL132
 5261 0827 0400     		.2byte	0x4
 5262 0829 F3       		.byte	0xf3
 5263 082a 01       		.uleb128 0x1
 5264 082b 50       		.byte	0x50
 5265 082c 9F       		.byte	0x9f
 5266 082d 38000000 		.4byte	.LVL132
 5267 0831 40000000 		.4byte	.LVL133
 5268 0835 0100     		.2byte	0x1
 5269 0837 54       		.byte	0x54
 5270 0838 40000000 		.4byte	.LVL133
 5271 083c 42000000 		.4byte	.LVL134
 5272 0840 0400     		.2byte	0x4
 5273 0842 F3       		.byte	0xf3
 5274 0843 01       		.uleb128 0x1
 5275 0844 50       		.byte	0x50
 5276 0845 9F       		.byte	0x9f
 5277 0846 42000000 		.4byte	.LVL134
 5278 084a 44000000 		.4byte	.LVL135
 5279 084e 0100     		.2byte	0x1
 5280 0850 54       		.byte	0x54
 5281 0851 44000000 		.4byte	.LVL135
 5282 0855 46000000 		.4byte	.LVL136
 5283 0859 0400     		.2byte	0x4
 5284 085b F3       		.byte	0xf3
 5285 085c 01       		.uleb128 0x1
 5286 085d 50       		.byte	0x50
 5287 085e 9F       		.byte	0x9f
 5288 085f 46000000 		.4byte	.LVL136
 5289 0863 48000000 		.4byte	.LVL137
 5290 0867 0100     		.2byte	0x1
 5291 0869 54       		.byte	0x54
 5292 086a 48000000 		.4byte	.LVL137
 5293 086e 4A000000 		.4byte	.LVL138
 5294 0872 0400     		.2byte	0x4
 5295 0874 F3       		.byte	0xf3
 5296 0875 01       		.uleb128 0x1
 5297 0876 50       		.byte	0x50
 5298 0877 9F       		.byte	0x9f
 5299 0878 4A000000 		.4byte	.LVL138
 5300 087c 4C000000 		.4byte	.LVL139
 5301 0880 0100     		.2byte	0x1
 5302 0882 54       		.byte	0x54
 5303 0883 4C000000 		.4byte	.LVL139
 5304 0887 4E000000 		.4byte	.LVL140
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 141


 5305 088b 0400     		.2byte	0x4
 5306 088d F3       		.byte	0xf3
 5307 088e 01       		.uleb128 0x1
 5308 088f 50       		.byte	0x50
 5309 0890 9F       		.byte	0x9f
 5310 0891 4E000000 		.4byte	.LVL140
 5311 0895 50000000 		.4byte	.LVL141
 5312 0899 0100     		.2byte	0x1
 5313 089b 54       		.byte	0x54
 5314 089c 50000000 		.4byte	.LVL141
 5315 08a0 5A000000 		.4byte	.LFE72
 5316 08a4 0400     		.2byte	0x4
 5317 08a6 F3       		.byte	0xf3
 5318 08a7 01       		.uleb128 0x1
 5319 08a8 50       		.byte	0x50
 5320 08a9 9F       		.byte	0x9f
 5321 08aa 00000000 		.4byte	0
 5322 08ae 00000000 		.4byte	0
 5323              	.LLST42:
 5324 08b2 00000000 		.4byte	.LVL143
 5325 08b6 0E000000 		.4byte	.LVL145
 5326 08ba 0100     		.2byte	0x1
 5327 08bc 50       		.byte	0x50
 5328 08bd 0E000000 		.4byte	.LVL145
 5329 08c1 00010000 		.4byte	.LFE73
 5330 08c5 0100     		.2byte	0x1
 5331 08c7 54       		.byte	0x54
 5332 08c8 00000000 		.4byte	0
 5333 08cc 00000000 		.4byte	0
 5334              	.LLST43:
 5335 08d0 00000000 		.4byte	.LVL143
 5336 08d4 0E000000 		.4byte	.LVL145
 5337 08d8 0100     		.2byte	0x1
 5338 08da 51       		.byte	0x51
 5339 08db 0E000000 		.4byte	.LVL145
 5340 08df 00010000 		.4byte	.LFE73
 5341 08e3 0100     		.2byte	0x1
 5342 08e5 57       		.byte	0x57
 5343 08e6 00000000 		.4byte	0
 5344 08ea 00000000 		.4byte	0
 5345              	.LLST44:
 5346 08ee 00000000 		.4byte	.LVL143
 5347 08f2 0E000000 		.4byte	.LVL145
 5348 08f6 0100     		.2byte	0x1
 5349 08f8 52       		.byte	0x52
 5350 08f9 0E000000 		.4byte	.LVL145
 5351 08fd A4000000 		.4byte	.LVL163
 5352 0901 0200     		.2byte	0x2
 5353 0903 91       		.byte	0x91
 5354 0904 5C       		.sleb128 -36
 5355 0905 A4000000 		.4byte	.LVL163
 5356 0909 A9000000 		.4byte	.LVL164-1
 5357 090d 0200     		.2byte	0x2
 5358 090f 71       		.byte	0x71
 5359 0910 00       		.sleb128 0
 5360 0911 A9000000 		.4byte	.LVL164-1
 5361 0915 00010000 		.4byte	.LFE73
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 142


 5362 0919 0200     		.2byte	0x2
 5363 091b 91       		.byte	0x91
 5364 091c 5C       		.sleb128 -36
 5365 091d 00000000 		.4byte	0
 5366 0921 00000000 		.4byte	0
 5367              	.LLST45:
 5368 0925 00000000 		.4byte	.LVL143
 5369 0929 0E000000 		.4byte	.LVL145
 5370 092d 0100     		.2byte	0x1
 5371 092f 53       		.byte	0x53
 5372 0930 0E000000 		.4byte	.LVL145
 5373 0934 00010000 		.4byte	.LFE73
 5374 0938 0100     		.2byte	0x1
 5375 093a 56       		.byte	0x56
 5376 093b 00000000 		.4byte	0
 5377 093f 00000000 		.4byte	0
 5378              	.LLST46:
 5379 0943 0C000000 		.4byte	.LVL144
 5380 0947 0E000000 		.4byte	.LVL145
 5381 094b 0200     		.2byte	0x2
 5382 094d 30       		.byte	0x30
 5383 094e 9F       		.byte	0x9f
 5384 094f 0E000000 		.4byte	.LVL145
 5385 0953 18000000 		.4byte	.LVL147
 5386 0957 0100     		.2byte	0x1
 5387 0959 55       		.byte	0x55
 5388 095a 64000000 		.4byte	.LVL155
 5389 095e 78000000 		.4byte	.LVL157
 5390 0962 0100     		.2byte	0x1
 5391 0964 55       		.byte	0x55
 5392 0965 78000000 		.4byte	.LVL157
 5393 0969 7A000000 		.4byte	.LVL158
 5394 096d 0200     		.2byte	0x2
 5395 096f 31       		.byte	0x31
 5396 0970 9F       		.byte	0x9f
 5397 0971 7A000000 		.4byte	.LVL158
 5398 0975 FC000000 		.4byte	.LVL177
 5399 0979 0100     		.2byte	0x1
 5400 097b 55       		.byte	0x55
 5401 097c 00000000 		.4byte	0
 5402 0980 00000000 		.4byte	0
 5403              	.LLST47:
 5404 0984 18000000 		.4byte	.LVL147
 5405 0988 64000000 		.4byte	.LVL155
 5406 098c 0100     		.2byte	0x1
 5407 098e 55       		.byte	0x55
 5408 098f 00000000 		.4byte	0
 5409 0993 00000000 		.4byte	0
 5410              	.LLST48:
 5411 0997 0C000000 		.4byte	.LVL144
 5412 099b 0E000000 		.4byte	.LVL145
 5413 099f 0100     		.2byte	0x1
 5414 09a1 50       		.byte	0x50
 5415 09a2 0E000000 		.4byte	.LVL145
 5416 09a6 00010000 		.4byte	.LFE73
 5417 09aa 0100     		.2byte	0x1
 5418 09ac 54       		.byte	0x54
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 143


 5419 09ad 00000000 		.4byte	0
 5420 09b1 00000000 		.4byte	0
 5421              	.LLST49:
 5422 09b5 00000000 		.4byte	.LVL178
 5423 09b9 0B000000 		.4byte	.LVL180-1
 5424 09bd 0100     		.2byte	0x1
 5425 09bf 50       		.byte	0x50
 5426 09c0 0B000000 		.4byte	.LVL180-1
 5427 09c4 32000000 		.4byte	.LFE68
 5428 09c8 0100     		.2byte	0x1
 5429 09ca 54       		.byte	0x54
 5430 09cb 00000000 		.4byte	0
 5431 09cf 00000000 		.4byte	0
 5432              	.LLST50:
 5433 09d3 00000000 		.4byte	.LVL178
 5434 09d7 0B000000 		.4byte	.LVL180-1
 5435 09db 0100     		.2byte	0x1
 5436 09dd 51       		.byte	0x51
 5437 09de 0B000000 		.4byte	.LVL180-1
 5438 09e2 32000000 		.4byte	.LFE68
 5439 09e6 0100     		.2byte	0x1
 5440 09e8 56       		.byte	0x56
 5441 09e9 00000000 		.4byte	0
 5442 09ed 00000000 		.4byte	0
 5443              	.LLST51:
 5444 09f1 16000000 		.4byte	.LVL181
 5445 09f5 1A000000 		.4byte	.LVL182
 5446 09f9 0200     		.2byte	0x2
 5447 09fb 31       		.byte	0x31
 5448 09fc 9F       		.byte	0x9f
 5449 09fd 26000000 		.4byte	.LVL183
 5450 0a01 32000000 		.4byte	.LFE68
 5451 0a05 0100     		.2byte	0x1
 5452 0a07 50       		.byte	0x50
 5453 0a08 00000000 		.4byte	0
 5454 0a0c 00000000 		.4byte	0
 5455              	.LLST52:
 5456 0a10 06000000 		.4byte	.LVL179
 5457 0a14 0B000000 		.4byte	.LVL180-1
 5458 0a18 0100     		.2byte	0x1
 5459 0a1a 50       		.byte	0x50
 5460 0a1b 0B000000 		.4byte	.LVL180-1
 5461 0a1f 32000000 		.4byte	.LFE68
 5462 0a23 0100     		.2byte	0x1
 5463 0a25 54       		.byte	0x54
 5464 0a26 00000000 		.4byte	0
 5465 0a2a 00000000 		.4byte	0
 5466              	.LLST53:
 5467 0a2e 00000000 		.4byte	.LVL184
 5468 0a32 0B000000 		.4byte	.LVL186-1
 5469 0a36 0100     		.2byte	0x1
 5470 0a38 50       		.byte	0x50
 5471 0a39 0B000000 		.4byte	.LVL186-1
 5472 0a3d 3A000000 		.4byte	.LVL191
 5473 0a41 0100     		.2byte	0x1
 5474 0a43 54       		.byte	0x54
 5475 0a44 3A000000 		.4byte	.LVL191
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 144


 5476 0a48 3E000000 		.4byte	.LVL192
 5477 0a4c 0400     		.2byte	0x4
 5478 0a4e F3       		.byte	0xf3
 5479 0a4f 01       		.uleb128 0x1
 5480 0a50 50       		.byte	0x50
 5481 0a51 9F       		.byte	0x9f
 5482 0a52 3E000000 		.4byte	.LVL192
 5483 0a56 46000000 		.4byte	.LVL193
 5484 0a5a 0100     		.2byte	0x1
 5485 0a5c 54       		.byte	0x54
 5486 0a5d 46000000 		.4byte	.LVL193
 5487 0a61 48000000 		.4byte	.LVL194
 5488 0a65 0400     		.2byte	0x4
 5489 0a67 F3       		.byte	0xf3
 5490 0a68 01       		.uleb128 0x1
 5491 0a69 50       		.byte	0x50
 5492 0a6a 9F       		.byte	0x9f
 5493 0a6b 48000000 		.4byte	.LVL194
 5494 0a6f 4A000000 		.4byte	.LVL195
 5495 0a73 0100     		.2byte	0x1
 5496 0a75 54       		.byte	0x54
 5497 0a76 4A000000 		.4byte	.LVL195
 5498 0a7a 4C000000 		.4byte	.LVL196
 5499 0a7e 0400     		.2byte	0x4
 5500 0a80 F3       		.byte	0xf3
 5501 0a81 01       		.uleb128 0x1
 5502 0a82 50       		.byte	0x50
 5503 0a83 9F       		.byte	0x9f
 5504 0a84 4C000000 		.4byte	.LVL196
 5505 0a88 4E000000 		.4byte	.LVL197
 5506 0a8c 0100     		.2byte	0x1
 5507 0a8e 54       		.byte	0x54
 5508 0a8f 4E000000 		.4byte	.LVL197
 5509 0a93 50000000 		.4byte	.LVL198
 5510 0a97 0400     		.2byte	0x4
 5511 0a99 F3       		.byte	0xf3
 5512 0a9a 01       		.uleb128 0x1
 5513 0a9b 50       		.byte	0x50
 5514 0a9c 9F       		.byte	0x9f
 5515 0a9d 50000000 		.4byte	.LVL198
 5516 0aa1 52000000 		.4byte	.LVL199
 5517 0aa5 0100     		.2byte	0x1
 5518 0aa7 54       		.byte	0x54
 5519 0aa8 52000000 		.4byte	.LVL199
 5520 0aac 54000000 		.4byte	.LVL200
 5521 0ab0 0400     		.2byte	0x4
 5522 0ab2 F3       		.byte	0xf3
 5523 0ab3 01       		.uleb128 0x1
 5524 0ab4 50       		.byte	0x50
 5525 0ab5 9F       		.byte	0x9f
 5526 0ab6 54000000 		.4byte	.LVL200
 5527 0aba 56000000 		.4byte	.LVL201
 5528 0abe 0100     		.2byte	0x1
 5529 0ac0 54       		.byte	0x54
 5530 0ac1 56000000 		.4byte	.LVL201
 5531 0ac5 60000000 		.4byte	.LFE74
 5532 0ac9 0400     		.2byte	0x4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 145


 5533 0acb F3       		.byte	0xf3
 5534 0acc 01       		.uleb128 0x1
 5535 0acd 50       		.byte	0x50
 5536 0ace 9F       		.byte	0x9f
 5537 0acf 00000000 		.4byte	0
 5538 0ad3 00000000 		.4byte	0
 5539              	.LLST54:
 5540 0ad7 00000000 		.4byte	.LVL184
 5541 0adb 0B000000 		.4byte	.LVL186-1
 5542 0adf 0100     		.2byte	0x1
 5543 0ae1 51       		.byte	0x51
 5544 0ae2 0B000000 		.4byte	.LVL186-1
 5545 0ae6 60000000 		.4byte	.LFE74
 5546 0aea 0100     		.2byte	0x1
 5547 0aec 56       		.byte	0x56
 5548 0aed 00000000 		.4byte	0
 5549 0af1 00000000 		.4byte	0
 5550              	.LLST55:
 5551 0af5 00000000 		.4byte	.LVL184
 5552 0af9 0B000000 		.4byte	.LVL186-1
 5553 0afd 0100     		.2byte	0x1
 5554 0aff 52       		.byte	0x52
 5555 0b00 0B000000 		.4byte	.LVL186-1
 5556 0b04 60000000 		.4byte	.LFE74
 5557 0b08 0100     		.2byte	0x1
 5558 0b0a 57       		.byte	0x57
 5559 0b0b 00000000 		.4byte	0
 5560 0b0f 00000000 		.4byte	0
 5561              	.LLST56:
 5562 0b13 0E000000 		.4byte	.LVL187
 5563 0b17 16000000 		.4byte	.LVL188
 5564 0b1b 0100     		.2byte	0x1
 5565 0b1d 50       		.byte	0x50
 5566 0b1e 16000000 		.4byte	.LVL188
 5567 0b22 48000000 		.4byte	.LVL194
 5568 0b26 0100     		.2byte	0x1
 5569 0b28 55       		.byte	0x55
 5570 0b29 48000000 		.4byte	.LVL194
 5571 0b2d 4C000000 		.4byte	.LVL196
 5572 0b31 0100     		.2byte	0x1
 5573 0b33 50       		.byte	0x50
 5574 0b34 4C000000 		.4byte	.LVL196
 5575 0b38 60000000 		.4byte	.LFE74
 5576 0b3c 0100     		.2byte	0x1
 5577 0b3e 55       		.byte	0x55
 5578 0b3f 00000000 		.4byte	0
 5579 0b43 00000000 		.4byte	0
 5580              	.LLST57:
 5581 0b47 08000000 		.4byte	.LVL185
 5582 0b4b 0B000000 		.4byte	.LVL186-1
 5583 0b4f 0100     		.2byte	0x1
 5584 0b51 50       		.byte	0x50
 5585 0b52 0B000000 		.4byte	.LVL186-1
 5586 0b56 3A000000 		.4byte	.LVL191
 5587 0b5a 0100     		.2byte	0x1
 5588 0b5c 54       		.byte	0x54
 5589 0b5d 3A000000 		.4byte	.LVL191
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 146


 5590 0b61 3E000000 		.4byte	.LVL192
 5591 0b65 0400     		.2byte	0x4
 5592 0b67 F3       		.byte	0xf3
 5593 0b68 01       		.uleb128 0x1
 5594 0b69 50       		.byte	0x50
 5595 0b6a 9F       		.byte	0x9f
 5596 0b6b 3E000000 		.4byte	.LVL192
 5597 0b6f 46000000 		.4byte	.LVL193
 5598 0b73 0100     		.2byte	0x1
 5599 0b75 54       		.byte	0x54
 5600 0b76 46000000 		.4byte	.LVL193
 5601 0b7a 48000000 		.4byte	.LVL194
 5602 0b7e 0400     		.2byte	0x4
 5603 0b80 F3       		.byte	0xf3
 5604 0b81 01       		.uleb128 0x1
 5605 0b82 50       		.byte	0x50
 5606 0b83 9F       		.byte	0x9f
 5607 0b84 48000000 		.4byte	.LVL194
 5608 0b88 4A000000 		.4byte	.LVL195
 5609 0b8c 0100     		.2byte	0x1
 5610 0b8e 54       		.byte	0x54
 5611 0b8f 4A000000 		.4byte	.LVL195
 5612 0b93 4C000000 		.4byte	.LVL196
 5613 0b97 0400     		.2byte	0x4
 5614 0b99 F3       		.byte	0xf3
 5615 0b9a 01       		.uleb128 0x1
 5616 0b9b 50       		.byte	0x50
 5617 0b9c 9F       		.byte	0x9f
 5618 0b9d 4C000000 		.4byte	.LVL196
 5619 0ba1 4E000000 		.4byte	.LVL197
 5620 0ba5 0100     		.2byte	0x1
 5621 0ba7 54       		.byte	0x54
 5622 0ba8 4E000000 		.4byte	.LVL197
 5623 0bac 50000000 		.4byte	.LVL198
 5624 0bb0 0400     		.2byte	0x4
 5625 0bb2 F3       		.byte	0xf3
 5626 0bb3 01       		.uleb128 0x1
 5627 0bb4 50       		.byte	0x50
 5628 0bb5 9F       		.byte	0x9f
 5629 0bb6 50000000 		.4byte	.LVL198
 5630 0bba 52000000 		.4byte	.LVL199
 5631 0bbe 0100     		.2byte	0x1
 5632 0bc0 54       		.byte	0x54
 5633 0bc1 52000000 		.4byte	.LVL199
 5634 0bc5 54000000 		.4byte	.LVL200
 5635 0bc9 0400     		.2byte	0x4
 5636 0bcb F3       		.byte	0xf3
 5637 0bcc 01       		.uleb128 0x1
 5638 0bcd 50       		.byte	0x50
 5639 0bce 9F       		.byte	0x9f
 5640 0bcf 54000000 		.4byte	.LVL200
 5641 0bd3 56000000 		.4byte	.LVL201
 5642 0bd7 0100     		.2byte	0x1
 5643 0bd9 54       		.byte	0x54
 5644 0bda 56000000 		.4byte	.LVL201
 5645 0bde 60000000 		.4byte	.LFE74
 5646 0be2 0400     		.2byte	0x4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 147


 5647 0be4 F3       		.byte	0xf3
 5648 0be5 01       		.uleb128 0x1
 5649 0be6 50       		.byte	0x50
 5650 0be7 9F       		.byte	0x9f
 5651 0be8 00000000 		.4byte	0
 5652 0bec 00000000 		.4byte	0
 5653              	.LLST58:
 5654 0bf0 00000000 		.4byte	.LVL203
 5655 0bf4 09000000 		.4byte	.LVL205-1
 5656 0bf8 0100     		.2byte	0x1
 5657 0bfa 50       		.byte	0x50
 5658 0bfb 09000000 		.4byte	.LVL205-1
 5659 0bff 1E000000 		.4byte	.LVL211
 5660 0c03 0100     		.2byte	0x1
 5661 0c05 54       		.byte	0x54
 5662 0c06 1E000000 		.4byte	.LVL211
 5663 0c0a 20000000 		.4byte	.LVL212
 5664 0c0e 0400     		.2byte	0x4
 5665 0c10 F3       		.byte	0xf3
 5666 0c11 01       		.uleb128 0x1
 5667 0c12 50       		.byte	0x50
 5668 0c13 9F       		.byte	0x9f
 5669 0c14 20000000 		.4byte	.LVL212
 5670 0c18 22000000 		.4byte	.LVL213
 5671 0c1c 0100     		.2byte	0x1
 5672 0c1e 54       		.byte	0x54
 5673 0c1f 22000000 		.4byte	.LVL213
 5674 0c23 2C000000 		.4byte	.LFE75
 5675 0c27 0400     		.2byte	0x4
 5676 0c29 F3       		.byte	0xf3
 5677 0c2a 01       		.uleb128 0x1
 5678 0c2b 50       		.byte	0x50
 5679 0c2c 9F       		.byte	0x9f
 5680 0c2d 00000000 		.4byte	0
 5681 0c31 00000000 		.4byte	0
 5682              	.LLST59:
 5683 0c35 00000000 		.4byte	.LVL203
 5684 0c39 09000000 		.4byte	.LVL205-1
 5685 0c3d 0100     		.2byte	0x1
 5686 0c3f 51       		.byte	0x51
 5687 0c40 09000000 		.4byte	.LVL205-1
 5688 0c44 2C000000 		.4byte	.LFE75
 5689 0c48 0100     		.2byte	0x1
 5690 0c4a 56       		.byte	0x56
 5691 0c4b 00000000 		.4byte	0
 5692 0c4f 00000000 		.4byte	0
 5693              	.LLST60:
 5694 0c53 1C000000 		.4byte	.LVL210
 5695 0c57 20000000 		.4byte	.LVL212
 5696 0c5b 0200     		.2byte	0x2
 5697 0c5d 31       		.byte	0x31
 5698 0c5e 9F       		.byte	0x9f
 5699 0c5f 22000000 		.4byte	.LVL213
 5700 0c63 2C000000 		.4byte	.LFE75
 5701 0c67 0100     		.2byte	0x1
 5702 0c69 54       		.byte	0x54
 5703 0c6a 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 148


 5704 0c6e 00000000 		.4byte	0
 5705              	.LLST61:
 5706 0c72 0C000000 		.4byte	.LVL206
 5707 0c76 16000000 		.4byte	.LVL208
 5708 0c7a 0100     		.2byte	0x1
 5709 0c7c 50       		.byte	0x50
 5710 0c7d 16000000 		.4byte	.LVL208
 5711 0c81 20000000 		.4byte	.LVL212
 5712 0c85 0100     		.2byte	0x1
 5713 0c87 55       		.byte	0x55
 5714 0c88 20000000 		.4byte	.LVL212
 5715 0c8c 22000000 		.4byte	.LVL213
 5716 0c90 0100     		.2byte	0x1
 5717 0c92 50       		.byte	0x50
 5718 0c93 22000000 		.4byte	.LVL213
 5719 0c97 2C000000 		.4byte	.LFE75
 5720 0c9b 0100     		.2byte	0x1
 5721 0c9d 55       		.byte	0x55
 5722 0c9e 00000000 		.4byte	0
 5723 0ca2 00000000 		.4byte	0
 5724              	.LLST62:
 5725 0ca6 12000000 		.4byte	.LVL207
 5726 0caa 20000000 		.4byte	.LVL212
 5727 0cae 0100     		.2byte	0x1
 5728 0cb0 57       		.byte	0x57
 5729 0cb1 00000000 		.4byte	0
 5730 0cb5 00000000 		.4byte	0
 5731              	.LLST63:
 5732 0cb9 06000000 		.4byte	.LVL204
 5733 0cbd 09000000 		.4byte	.LVL205-1
 5734 0cc1 0100     		.2byte	0x1
 5735 0cc3 50       		.byte	0x50
 5736 0cc4 09000000 		.4byte	.LVL205-1
 5737 0cc8 1E000000 		.4byte	.LVL211
 5738 0ccc 0100     		.2byte	0x1
 5739 0cce 54       		.byte	0x54
 5740 0ccf 1E000000 		.4byte	.LVL211
 5741 0cd3 20000000 		.4byte	.LVL212
 5742 0cd7 0400     		.2byte	0x4
 5743 0cd9 F3       		.byte	0xf3
 5744 0cda 01       		.uleb128 0x1
 5745 0cdb 50       		.byte	0x50
 5746 0cdc 9F       		.byte	0x9f
 5747 0cdd 20000000 		.4byte	.LVL212
 5748 0ce1 22000000 		.4byte	.LVL213
 5749 0ce5 0100     		.2byte	0x1
 5750 0ce7 54       		.byte	0x54
 5751 0ce8 22000000 		.4byte	.LVL213
 5752 0cec 2C000000 		.4byte	.LFE75
 5753 0cf0 0400     		.2byte	0x4
 5754 0cf2 F3       		.byte	0xf3
 5755 0cf3 01       		.uleb128 0x1
 5756 0cf4 50       		.byte	0x50
 5757 0cf5 9F       		.byte	0x9f
 5758 0cf6 00000000 		.4byte	0
 5759 0cfa 00000000 		.4byte	0
 5760              	.LLST64:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 149


 5761 0cfe 00000000 		.4byte	.LVL215
 5762 0d02 07000000 		.4byte	.LVL216-1
 5763 0d06 0100     		.2byte	0x1
 5764 0d08 50       		.byte	0x50
 5765 0d09 07000000 		.4byte	.LVL216-1
 5766 0d0d 0A000000 		.4byte	.LVL217
 5767 0d11 0100     		.2byte	0x1
 5768 0d13 54       		.byte	0x54
 5769 0d14 0A000000 		.4byte	.LVL217
 5770 0d18 12000000 		.4byte	.LFE76
 5771 0d1c 0400     		.2byte	0x4
 5772 0d1e F3       		.byte	0xf3
 5773 0d1f 01       		.uleb128 0x1
 5774 0d20 50       		.byte	0x50
 5775 0d21 9F       		.byte	0x9f
 5776 0d22 00000000 		.4byte	0
 5777 0d26 00000000 		.4byte	0
 5778              	.LLST65:
 5779 0d2a 00000000 		.4byte	.LVL219
 5780 0d2e 07000000 		.4byte	.LVL221-1
 5781 0d32 0100     		.2byte	0x1
 5782 0d34 50       		.byte	0x50
 5783 0d35 07000000 		.4byte	.LVL221-1
 5784 0d39 0C000000 		.4byte	.LVL222
 5785 0d3d 0100     		.2byte	0x1
 5786 0d3f 54       		.byte	0x54
 5787 0d40 0C000000 		.4byte	.LVL222
 5788 0d44 16000000 		.4byte	.LFE77
 5789 0d48 0400     		.2byte	0x4
 5790 0d4a F3       		.byte	0xf3
 5791 0d4b 01       		.uleb128 0x1
 5792 0d4c 50       		.byte	0x50
 5793 0d4d 9F       		.byte	0x9f
 5794 0d4e 00000000 		.4byte	0
 5795 0d52 00000000 		.4byte	0
 5796              	.LLST66:
 5797 0d56 04000000 		.4byte	.LVL220
 5798 0d5a 07000000 		.4byte	.LVL221-1
 5799 0d5e 0100     		.2byte	0x1
 5800 0d60 50       		.byte	0x50
 5801 0d61 07000000 		.4byte	.LVL221-1
 5802 0d65 0C000000 		.4byte	.LVL222
 5803 0d69 0100     		.2byte	0x1
 5804 0d6b 54       		.byte	0x54
 5805 0d6c 0C000000 		.4byte	.LVL222
 5806 0d70 16000000 		.4byte	.LFE77
 5807 0d74 0400     		.2byte	0x4
 5808 0d76 F3       		.byte	0xf3
 5809 0d77 01       		.uleb128 0x1
 5810 0d78 50       		.byte	0x50
 5811 0d79 9F       		.byte	0x9f
 5812 0d7a 00000000 		.4byte	0
 5813 0d7e 00000000 		.4byte	0
 5814              	.LLST67:
 5815 0d82 00000000 		.4byte	.LVL225
 5816 0d86 02000000 		.4byte	.LVL226
 5817 0d8a 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 150


 5818 0d8c 50       		.byte	0x50
 5819 0d8d 02000000 		.4byte	.LVL226
 5820 0d91 04000000 		.4byte	.LFE78
 5821 0d95 0400     		.2byte	0x4
 5822 0d97 F3       		.byte	0xf3
 5823 0d98 01       		.uleb128 0x1
 5824 0d99 50       		.byte	0x50
 5825 0d9a 9F       		.byte	0x9f
 5826 0d9b 00000000 		.4byte	0
 5827 0d9f 00000000 		.4byte	0
 5828              	.LLST68:
 5829 0da3 00000000 		.4byte	.LVL227
 5830 0da7 06000000 		.4byte	.LVL228
 5831 0dab 0100     		.2byte	0x1
 5832 0dad 50       		.byte	0x50
 5833 0dae 06000000 		.4byte	.LVL228
 5834 0db2 08000000 		.4byte	.LVL229
 5835 0db6 0400     		.2byte	0x4
 5836 0db8 F3       		.byte	0xf3
 5837 0db9 01       		.uleb128 0x1
 5838 0dba 50       		.byte	0x50
 5839 0dbb 9F       		.byte	0x9f
 5840 0dbc 08000000 		.4byte	.LVL229
 5841 0dc0 0A000000 		.4byte	.LVL230
 5842 0dc4 0100     		.2byte	0x1
 5843 0dc6 50       		.byte	0x50
 5844 0dc7 0A000000 		.4byte	.LVL230
 5845 0dcb 0C000000 		.4byte	.LFE84
 5846 0dcf 0400     		.2byte	0x4
 5847 0dd1 F3       		.byte	0xf3
 5848 0dd2 01       		.uleb128 0x1
 5849 0dd3 50       		.byte	0x50
 5850 0dd4 9F       		.byte	0x9f
 5851 0dd5 00000000 		.4byte	0
 5852 0dd9 00000000 		.4byte	0
 5853              	.LLST69:
 5854 0ddd 00000000 		.4byte	.LVL231
 5855 0de1 0A000000 		.4byte	.LVL232
 5856 0de5 0100     		.2byte	0x1
 5857 0de7 50       		.byte	0x50
 5858 0de8 0A000000 		.4byte	.LVL232
 5859 0dec 0C000000 		.4byte	.LVL233
 5860 0df0 0400     		.2byte	0x4
 5861 0df2 F3       		.byte	0xf3
 5862 0df3 01       		.uleb128 0x1
 5863 0df4 50       		.byte	0x50
 5864 0df5 9F       		.byte	0x9f
 5865 0df6 0C000000 		.4byte	.LVL233
 5866 0dfa 0E000000 		.4byte	.LVL234
 5867 0dfe 0100     		.2byte	0x1
 5868 0e00 50       		.byte	0x50
 5869 0e01 0E000000 		.4byte	.LVL234
 5870 0e05 10000000 		.4byte	.LFE86
 5871 0e09 0400     		.2byte	0x4
 5872 0e0b F3       		.byte	0xf3
 5873 0e0c 01       		.uleb128 0x1
 5874 0e0d 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 151


 5875 0e0e 9F       		.byte	0x9f
 5876 0e0f 00000000 		.4byte	0
 5877 0e13 00000000 		.4byte	0
 5878              	.LLST70:
 5879 0e17 00000000 		.4byte	.LVL235
 5880 0e1b 04000000 		.4byte	.LVL236
 5881 0e1f 0200     		.2byte	0x2
 5882 0e21 30       		.byte	0x30
 5883 0e22 9F       		.byte	0x9f
 5884 0e23 04000000 		.4byte	.LVL236
 5885 0e27 16000000 		.4byte	.LVL237
 5886 0e2b 0100     		.2byte	0x1
 5887 0e2d 53       		.byte	0x53
 5888 0e2e 1A000000 		.4byte	.LVL238
 5889 0e32 28000000 		.4byte	.LFE87
 5890 0e36 0100     		.2byte	0x1
 5891 0e38 53       		.byte	0x53
 5892 0e39 00000000 		.4byte	0
 5893 0e3d 00000000 		.4byte	0
 5894              	.LLST71:
 5895 0e41 00000000 		.4byte	.LVL240
 5896 0e45 04000000 		.4byte	.LVL241
 5897 0e49 0200     		.2byte	0x2
 5898 0e4b 30       		.byte	0x30
 5899 0e4c 9F       		.byte	0x9f
 5900 0e4d 04000000 		.4byte	.LVL241
 5901 0e51 28000000 		.4byte	.LFE88
 5902 0e55 0100     		.2byte	0x1
 5903 0e57 53       		.byte	0x53
 5904 0e58 00000000 		.4byte	0
 5905 0e5c 00000000 		.4byte	0
 5906              	.LLST72:
 5907 0e60 00000000 		.4byte	.LVL243
 5908 0e64 07000000 		.4byte	.LVL245-1
 5909 0e68 0100     		.2byte	0x1
 5910 0e6a 50       		.byte	0x50
 5911 0e6b 07000000 		.4byte	.LVL245-1
 5912 0e6f 10000000 		.4byte	.LFE79
 5913 0e73 0100     		.2byte	0x1
 5914 0e75 54       		.byte	0x54
 5915 0e76 00000000 		.4byte	0
 5916 0e7a 00000000 		.4byte	0
 5917              	.LLST73:
 5918 0e7e 04000000 		.4byte	.LVL244
 5919 0e82 07000000 		.4byte	.LVL245-1
 5920 0e86 0100     		.2byte	0x1
 5921 0e88 50       		.byte	0x50
 5922 0e89 07000000 		.4byte	.LVL245-1
 5923 0e8d 10000000 		.4byte	.LFE79
 5924 0e91 0100     		.2byte	0x1
 5925 0e93 54       		.byte	0x54
 5926 0e94 00000000 		.4byte	0
 5927 0e98 00000000 		.4byte	0
 5928              		.section	.debug_aranges,"",%progbits
 5929 0000 DC000000 		.4byte	0xdc
 5930 0004 0200     		.2byte	0x2
 5931 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 152


 5932 000a 04       		.byte	0x4
 5933 000b 00       		.byte	0
 5934 000c 0000     		.2byte	0
 5935 000e 0000     		.2byte	0
 5936 0010 00000000 		.4byte	.LFB85
 5937 0014 1E000000 		.4byte	.LFE85-.LFB85
 5938 0018 00000000 		.4byte	.LFB83
 5939 001c 1A000000 		.4byte	.LFE83-.LFB83
 5940 0020 00000000 		.4byte	.LFB80
 5941 0024 7C000000 		.4byte	.LFE80-.LFB80
 5942 0028 00000000 		.4byte	.LFB81
 5943 002c 24000000 		.4byte	.LFE81-.LFB81
 5944 0030 00000000 		.4byte	.LFB82
 5945 0034 62000000 		.4byte	.LFE82-.LFB82
 5946 0038 00000000 		.4byte	.LFB64
 5947 003c 5C000000 		.4byte	.LFE64-.LFB64
 5948 0040 00000000 		.4byte	.LFB65
 5949 0044 38000000 		.4byte	.LFE65-.LFB65
 5950 0048 00000000 		.4byte	.LFB69
 5951 004c 16000000 		.4byte	.LFE69-.LFB69
 5952 0050 00000000 		.4byte	.LFB70
 5953 0054 D6000000 		.4byte	.LFE70-.LFB70
 5954 0058 00000000 		.4byte	.LFB66
 5955 005c 44000000 		.4byte	.LFE66-.LFB66
 5956 0060 00000000 		.4byte	.LFB67
 5957 0064 2C000000 		.4byte	.LFE67-.LFB67
 5958 0068 00000000 		.4byte	.LFB71
 5959 006c 70000000 		.4byte	.LFE71-.LFB71
 5960 0070 00000000 		.4byte	.LFB72
 5961 0074 5A000000 		.4byte	.LFE72-.LFB72
 5962 0078 00000000 		.4byte	.LFB73
 5963 007c 00010000 		.4byte	.LFE73-.LFB73
 5964 0080 00000000 		.4byte	.LFB68
 5965 0084 32000000 		.4byte	.LFE68-.LFB68
 5966 0088 00000000 		.4byte	.LFB74
 5967 008c 60000000 		.4byte	.LFE74-.LFB74
 5968 0090 00000000 		.4byte	.LFB75
 5969 0094 2C000000 		.4byte	.LFE75-.LFB75
 5970 0098 00000000 		.4byte	.LFB76
 5971 009c 12000000 		.4byte	.LFE76-.LFB76
 5972 00a0 00000000 		.4byte	.LFB77
 5973 00a4 16000000 		.4byte	.LFE77-.LFB77
 5974 00a8 00000000 		.4byte	.LFB78
 5975 00ac 04000000 		.4byte	.LFE78-.LFB78
 5976 00b0 00000000 		.4byte	.LFB84
 5977 00b4 0C000000 		.4byte	.LFE84-.LFB84
 5978 00b8 00000000 		.4byte	.LFB86
 5979 00bc 10000000 		.4byte	.LFE86-.LFB86
 5980 00c0 00000000 		.4byte	.LFB87
 5981 00c4 28000000 		.4byte	.LFE87-.LFB87
 5982 00c8 00000000 		.4byte	.LFB88
 5983 00cc 28000000 		.4byte	.LFE88-.LFB88
 5984 00d0 00000000 		.4byte	.LFB79
 5985 00d4 10000000 		.4byte	.LFE79-.LFB79
 5986 00d8 00000000 		.4byte	0
 5987 00dc 00000000 		.4byte	0
 5988              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 153


 5989              	.Ldebug_ranges0:
 5990 0000 00000000 		.4byte	.LFB85
 5991 0004 1E000000 		.4byte	.LFE85
 5992 0008 00000000 		.4byte	.LFB83
 5993 000c 1A000000 		.4byte	.LFE83
 5994 0010 00000000 		.4byte	.LFB80
 5995 0014 7C000000 		.4byte	.LFE80
 5996 0018 00000000 		.4byte	.LFB81
 5997 001c 24000000 		.4byte	.LFE81
 5998 0020 00000000 		.4byte	.LFB82
 5999 0024 62000000 		.4byte	.LFE82
 6000 0028 00000000 		.4byte	.LFB64
 6001 002c 5C000000 		.4byte	.LFE64
 6002 0030 00000000 		.4byte	.LFB65
 6003 0034 38000000 		.4byte	.LFE65
 6004 0038 00000000 		.4byte	.LFB69
 6005 003c 16000000 		.4byte	.LFE69
 6006 0040 00000000 		.4byte	.LFB70
 6007 0044 D6000000 		.4byte	.LFE70
 6008 0048 00000000 		.4byte	.LFB66
 6009 004c 44000000 		.4byte	.LFE66
 6010 0050 00000000 		.4byte	.LFB67
 6011 0054 2C000000 		.4byte	.LFE67
 6012 0058 00000000 		.4byte	.LFB71
 6013 005c 70000000 		.4byte	.LFE71
 6014 0060 00000000 		.4byte	.LFB72
 6015 0064 5A000000 		.4byte	.LFE72
 6016 0068 00000000 		.4byte	.LFB73
 6017 006c 00010000 		.4byte	.LFE73
 6018 0070 00000000 		.4byte	.LFB68
 6019 0074 32000000 		.4byte	.LFE68
 6020 0078 00000000 		.4byte	.LFB74
 6021 007c 60000000 		.4byte	.LFE74
 6022 0080 00000000 		.4byte	.LFB75
 6023 0084 2C000000 		.4byte	.LFE75
 6024 0088 00000000 		.4byte	.LFB76
 6025 008c 12000000 		.4byte	.LFE76
 6026 0090 00000000 		.4byte	.LFB77
 6027 0094 16000000 		.4byte	.LFE77
 6028 0098 00000000 		.4byte	.LFB78
 6029 009c 04000000 		.4byte	.LFE78
 6030 00a0 00000000 		.4byte	.LFB84
 6031 00a4 0C000000 		.4byte	.LFE84
 6032 00a8 00000000 		.4byte	.LFB86
 6033 00ac 10000000 		.4byte	.LFE86
 6034 00b0 00000000 		.4byte	.LFB87
 6035 00b4 28000000 		.4byte	.LFE87
 6036 00b8 00000000 		.4byte	.LFB88
 6037 00bc 28000000 		.4byte	.LFE88
 6038 00c0 00000000 		.4byte	.LFB79
 6039 00c4 10000000 		.4byte	.LFE79
 6040 00c8 00000000 		.4byte	0
 6041 00cc 00000000 		.4byte	0
 6042              		.section	.debug_line,"",%progbits
 6043              	.Ldebug_line0:
 6044 0000 6E050000 		.section	.debug_str,"MS",%progbits,1
 6044      02000A02 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 154


 6044      00000201 
 6044      FB0E0D00 
 6044      01010101 
 6045              	.LASF36:
 6046 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 6046      6D626572 
 6046      4F664974 
 6046      656D7300 
 6047              	.LASF118:
 6048 0010 76506F72 		.ascii	"vPortExitCritical\000"
 6048      74457869 
 6048      74437269 
 6048      74696361 
 6048      6C00
 6049              	.LASF122:
 6050 0022 76506F72 		.ascii	"vPortYield\000"
 6050      74596965 
 6050      6C6400
 6051              	.LASF104:
 6052 002d 78517565 		.ascii	"xQueueReceiveFromISR\000"
 6052      75655265 
 6052      63656976 
 6052      6546726F 
 6052      6D495352 
 6053              	.LASF52:
 6054 0042 78546173 		.ascii	"xTasksWaitingToReceive\000"
 6054      6B735761 
 6054      6974696E 
 6054      67546F52 
 6054      65636569 
 6055              	.LASF97:
 6056 0059 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 6056      67686572 
 6056      5072696F 
 6056      72697479 
 6056      5461736B 
 6057              	.LASF95:
 6058 0073 70784D75 		.ascii	"pxMutex\000"
 6058      74657800 
 6059              	.LASF0:
 6060 007b 756E7369 		.ascii	"unsigned int\000"
 6060      676E6564 
 6060      20696E74 
 6060      00
 6061              	.LASF137:
 6062 0088 2E2E5C46 		.ascii	"..\\FreeRTOS\\queue.c\000"
 6062      72656552 
 6062      544F535C 
 6062      71756575 
 6062      652E6300 
 6063              	.LASF37:
 6064 009c 7078496E 		.ascii	"pxIndex\000"
 6064      64657800 
 6065              	.LASF134:
 6066 00a4 76546173 		.ascii	"vTaskPriorityInherit\000"
 6066      6B507269 
 6066      6F726974 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 155


 6066      79496E68 
 6066      65726974 
 6067              	.LASF40:
 6068 00b9 7854494D 		.ascii	"xTIME_OUT\000"
 6068      455F4F55 
 6068      5400
 6069              	.LASF81:
 6070 00c3 70784E65 		.ascii	"pxNewQueue\000"
 6070      77517565 
 6070      756500
 6071              	.LASF10:
 6072 00ce 5F5F696E 		.ascii	"__int32_t\000"
 6072      7433325F 
 6072      7400
 6073              	.LASF32:
 6074 00d8 784C4953 		.ascii	"xLIST_ITEM\000"
 6074      545F4954 
 6074      454D00
 6075              	.LASF60:
 6076 00e3 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 6076      455F5245 
 6076      47495354 
 6076      52595F49 
 6076      54454D00 
 6077              	.LASF125:
 6078 00f7 76546173 		.ascii	"vTaskSetTimeOutState\000"
 6078      6B536574 
 6078      54696D65 
 6078      4F757453 
 6078      74617465 
 6079              	.LASF51:
 6080 010c 78546173 		.ascii	"xTasksWaitingToSend\000"
 6080      6B735761 
 6080      6974696E 
 6080      67546F53 
 6080      656E6400 
 6081              	.LASF108:
 6082 0120 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 6082      65756553 
 6082      70616365 
 6082      73417661 
 6082      696C6162 
 6083              	.LASF41:
 6084 0137 784F7665 		.ascii	"xOverflowCount\000"
 6084      72666C6F 
 6084      77436F75 
 6084      6E7400
 6085              	.LASF117:
 6086 0146 76506F72 		.ascii	"vPortEnterCritical\000"
 6086      74456E74 
 6086      65724372 
 6086      69746963 
 6086      616C00
 6087              	.LASF46:
 6088 0159 75785265 		.ascii	"uxRecursiveCallCount\000"
 6088      63757273 
 6088      69766543 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 156


 6088      616C6C43 
 6088      6F756E74 
 6089              	.LASF59:
 6090 016e 51756575 		.ascii	"Queue_t\000"
 6090      655F7400 
 6091              	.LASF88:
 6092 0176 78436F70 		.ascii	"xCopyPosition\000"
 6092      79506F73 
 6092      6974696F 
 6092      6E00
 6093              	.LASF107:
 6094 0184 75785265 		.ascii	"uxReturn\000"
 6094      7475726E 
 6094      00
 6095              	.LASF64:
 6096 018d 51756575 		.ascii	"QueueRegistryItem_t\000"
 6096      65526567 
 6096      69737472 
 6096      79497465 
 6096      6D5F7400 
 6097              	.LASF114:
 6098 01a1 76517565 		.ascii	"vQueueDelete\000"
 6098      75654465 
 6098      6C657465 
 6098      00
 6099              	.LASF45:
 6100 01ae 70635265 		.ascii	"pcReadFrom\000"
 6100      61644672 
 6100      6F6D00
 6101              	.LASF113:
 6102 01b9 76517565 		.ascii	"vQueueUnregisterQueue\000"
 6102      7565556E 
 6102      72656769 
 6102      73746572 
 6102      51756575 
 6103              	.LASF98:
 6104 01cf 75785361 		.ascii	"uxSavedInterruptStatus\000"
 6104      76656449 
 6104      6E746572 
 6104      72757074 
 6104      53746174 
 6105              	.LASF20:
 6106 01e6 75696E74 		.ascii	"uint32_t\000"
 6106      33325F74 
 6106      00
 6107              	.LASF17:
 6108 01ef 696E7438 		.ascii	"int8_t\000"
 6108      5F7400
 6109              	.LASF90:
 6110 01f6 78596965 		.ascii	"xYieldRequired\000"
 6110      6C645265 
 6110      71756972 
 6110      656400
 6111              	.LASF75:
 6112 0205 78517565 		.ascii	"xQueue\000"
 6112      756500
 6113              	.LASF21:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 157


 6114 020c 666C6F61 		.ascii	"float\000"
 6114      7400
 6115              	.LASF47:
 6116 0212 51756575 		.ascii	"QueueDefinition\000"
 6116      65446566 
 6116      696E6974 
 6116      696F6E00 
 6117              	.LASF100:
 6118 0222 78517565 		.ascii	"xQueueGenericReceive\000"
 6118      75654765 
 6118      6E657269 
 6118      63526563 
 6118      65697665 
 6119              	.LASF14:
 6120 0237 6C6F6E67 		.ascii	"long long unsigned int\000"
 6120      206C6F6E 
 6120      6720756E 
 6120      7369676E 
 6120      65642069 
 6121              	.LASF66:
 6122 024e 70727649 		.ascii	"prvIsQueueEmpty\000"
 6122      73517565 
 6122      7565456D 
 6122      70747900 
 6123              	.LASF72:
 6124 025e 70764275 		.ascii	"pvBuffer\000"
 6124      66666572 
 6124      00
 6125              	.LASF28:
 6126 0267 70785072 		.ascii	"pxPrevious\000"
 6126      6576696F 
 6126      757300
 6127              	.LASF53:
 6128 0272 75784D65 		.ascii	"uxMessagesWaiting\000"
 6128      73736167 
 6128      65735761 
 6128      6974696E 
 6128      6700
 6129              	.LASF124:
 6130 0284 7076506F 		.ascii	"pvPortMalloc\000"
 6130      72744D61 
 6130      6C6C6F63 
 6130      00
 6131              	.LASF126:
 6132 0291 76546173 		.ascii	"vTaskSuspendAll\000"
 6132      6B537573 
 6132      70656E64 
 6132      416C6C00 
 6133              	.LASF136:
 6134 02a1 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 6134      43313120 
 6134      352E342E 
 6134      31203230 
 6134      31363036 
 6135 02d4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 6135      20726576 
 6135      6973696F 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 158


 6135      6E203233 
 6135      37373135 
 6136 0307 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 6136      66756E63 
 6136      74696F6E 
 6136      2D736563 
 6136      74696F6E 
 6137              	.LASF89:
 6138 032f 78456E74 		.ascii	"xEntryTimeSet\000"
 6138      72795469 
 6138      6D655365 
 6138      7400
 6139              	.LASF3:
 6140 033d 73697A65 		.ascii	"size_t\000"
 6140      5F7400
 6141              	.LASF91:
 6142 0344 7854696D 		.ascii	"xTimeOut\000"
 6142      654F7574 
 6142      00
 6143              	.LASF62:
 6144 034d 7848616E 		.ascii	"xHandle\000"
 6144      646C6500 
 6145              	.LASF61:
 6146 0355 70635175 		.ascii	"pcQueueName\000"
 6146      6575654E 
 6146      616D6500 
 6147              	.LASF33:
 6148 0361 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 6148      495F4C49 
 6148      53545F49 
 6148      54454D00 
 6149              	.LASF35:
 6150 0371 784C4953 		.ascii	"xLIST\000"
 6150      5400
 6151              	.LASF96:
 6152 0377 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 6152      75654765 
 6152      6E657269 
 6152      6353656E 
 6152      6446726F 
 6153              	.LASF69:
 6154 0390 70727643 		.ascii	"prvCopyDataToQueue\000"
 6154      6F707944 
 6154      61746154 
 6154      6F517565 
 6154      756500
 6155              	.LASF86:
 6156 03a3 78517565 		.ascii	"xQueueGenericSend\000"
 6156      75654765 
 6156      6E657269 
 6156      6353656E 
 6156      6400
 6157              	.LASF128:
 6158 03b5 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 6158      6B506C61 
 6158      63654F6E 
 6158      4576656E 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 159


 6158      744C6973 
 6159              	.LASF133:
 6160 03cb 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 6160      736B496E 
 6160      6372656D 
 6160      656E744D 
 6160      75746578 
 6161              	.LASF55:
 6162 03e9 75784974 		.ascii	"uxItemSize\000"
 6162      656D5369 
 6162      7A6500
 6163              	.LASF85:
 6164 03f4 7578496E 		.ascii	"uxInitialCount\000"
 6164      69746961 
 6164      6C436F75 
 6164      6E7400
 6165              	.LASF119:
 6166 0403 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 6166      6B507269 
 6166      6F726974 
 6166      79446973 
 6166      696E6865 
 6167              	.LASF120:
 6168 041b 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 6168      6B52656D 
 6168      6F766546 
 6168      726F6D45 
 6168      76656E74 
 6169              	.LASF16:
 6170 0434 63686172 		.ascii	"char\000"
 6170      00
 6171              	.LASF31:
 6172 0439 4C697374 		.ascii	"ListItem_t\000"
 6172      4974656D 
 6172      5F7400
 6173              	.LASF65:
 6174 0444 70727649 		.ascii	"prvIsQueueFull\000"
 6174      73517565 
 6174      75654675 
 6174      6C6C00
 6175              	.LASF24:
 6176 0453 55426173 		.ascii	"UBaseType_t\000"
 6176      65547970 
 6176      655F7400 
 6177              	.LASF99:
 6178 045f 78517565 		.ascii	"xQueueGiveFromISR\000"
 6178      75654769 
 6178      76654672 
 6178      6F6D4953 
 6178      5200
 6179              	.LASF116:
 6180 0471 78517565 		.ascii	"xQueueRegistry\000"
 6180      75655265 
 6180      67697374 
 6180      727900
 6181              	.LASF44:
 6182 0480 51756575 		.ascii	"QueueHandle_t\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 160


 6182      6548616E 
 6182      646C655F 
 6182      7400
 6183              	.LASF38:
 6184 048e 784C6973 		.ascii	"xListEnd\000"
 6184      74456E64 
 6184      00
 6185              	.LASF131:
 6186 0497 756C506F 		.ascii	"ulPortSetInterruptMask\000"
 6186      72745365 
 6186      74496E74 
 6186      65727275 
 6186      70744D61 
 6187              	.LASF109:
 6188 04ae 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 6188      6575654D 
 6188      65737361 
 6188      67657357 
 6188      61697469 
 6189              	.LASF34:
 6190 04cc 4D696E69 		.ascii	"MiniListItem_t\000"
 6190      4C697374 
 6190      4974656D 
 6190      5F7400
 6191              	.LASF18:
 6192 04db 75696E74 		.ascii	"uint8_t\000"
 6192      385F7400 
 6193              	.LASF63:
 6194 04e3 78517565 		.ascii	"xQueueRegistryItem\000"
 6194      75655265 
 6194      67697374 
 6194      72794974 
 6194      656D00
 6195              	.LASF78:
 6196 04f6 78517565 		.ascii	"xQueueGenericCreate\000"
 6196      75654765 
 6196      6E657269 
 6196      63437265 
 6196      61746500 
 6197              	.LASF92:
 6198 050a 78517565 		.ascii	"xQueueCreateMutex\000"
 6198      75654372 
 6198      65617465 
 6198      4D757465 
 6198      7800
 6199              	.LASF1:
 6200 051c 6C6F6E67 		.ascii	"long long int\000"
 6200      206C6F6E 
 6200      6720696E 
 6200      7400
 6201              	.LASF23:
 6202 052a 42617365 		.ascii	"BaseType_t\000"
 6202      54797065 
 6202      5F7400
 6203              	.LASF94:
 6204 0535 784D7574 		.ascii	"xMutex\000"
 6204      657800
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 161


 6205              	.LASF42:
 6206 053c 7854696D 		.ascii	"xTimeOnEntering\000"
 6206      654F6E45 
 6206      6E746572 
 6206      696E6700 
 6207              	.LASF112:
 6208 054c 76517565 		.ascii	"vQueueAddToRegistry\000"
 6208      75654164 
 6208      64546F52 
 6208      65676973 
 6208      74727900 
 6209              	.LASF27:
 6210 0560 70784E65 		.ascii	"pxNext\000"
 6210      787400
 6211              	.LASF76:
 6212 0567 784E6577 		.ascii	"xNewQueue\000"
 6212      51756575 
 6212      6500
 6213              	.LASF84:
 6214 0571 75784D61 		.ascii	"uxMaxCount\000"
 6214      78436F75 
 6214      6E7400
 6215              	.LASF43:
 6216 057c 54696D65 		.ascii	"TimeOut_t\000"
 6216      4F75745F 
 6216      7400
 6217              	.LASF102:
 6218 0586 70634F72 		.ascii	"pcOriginalReadPosition\000"
 6218      6967696E 
 6218      616C5265 
 6218      6164506F 
 6218      73697469 
 6219              	.LASF80:
 6220 059d 75635175 		.ascii	"ucQueueType\000"
 6220      65756554 
 6220      79706500 
 6221              	.LASF101:
 6222 05a9 784A7573 		.ascii	"xJustPeeking\000"
 6222      74506565 
 6222      6B696E67 
 6222      00
 6223              	.LASF39:
 6224 05b6 4C697374 		.ascii	"List_t\000"
 6224      5F7400
 6225              	.LASF50:
 6226 05bd 70635772 		.ascii	"pcWriteTo\000"
 6226      69746554 
 6226      6F00
 6227              	.LASF25:
 6228 05c7 5469636B 		.ascii	"TickType_t\000"
 6228      54797065 
 6228      5F7400
 6229              	.LASF4:
 6230 05d2 5F5F696E 		.ascii	"__int8_t\000"
 6230      74385F74 
 6230      00
 6231              	.LASF79:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 162


 6232 05db 75785175 		.ascii	"uxQueueLength\000"
 6232      6575654C 
 6232      656E6774 
 6232      6800
 6233              	.LASF2:
 6234 05e9 6C6F6E67 		.ascii	"long double\000"
 6234      20646F75 
 6234      626C6500 
 6235              	.LASF138:
 6236 05f5 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_Simple_S"
 6236      536F435F 
 6236      43726561 
 6236      746F725C 
 6236      43593843 
 6237 0625 44525F52 		.ascii	"DR_Receiver\\CY8CKIT-059_Simple_SDR_Receiver.cydsn\000"
 6237      65636569 
 6237      7665725C 
 6237      43593843 
 6237      4B49542D 
 6238              	.LASF103:
 6239 0657 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 6239      75655461 
 6239      6B654D75 
 6239      74657852 
 6239      65637572 
 6240              	.LASF30:
 6241 0670 7076436F 		.ascii	"pvContainer\000"
 6241      6E746169 
 6241      6E657200 
 6242              	.LASF54:
 6243 067c 75784C65 		.ascii	"uxLength\000"
 6243      6E677468 
 6243      00
 6244              	.LASF8:
 6245 0685 73686F72 		.ascii	"short int\000"
 6245      7420696E 
 6245      7400
 6246              	.LASF26:
 6247 068f 78497465 		.ascii	"xItemValue\000"
 6247      6D56616C 
 6247      756500
 6248              	.LASF11:
 6249 069a 6C6F6E67 		.ascii	"long int\000"
 6249      20696E74 
 6249      00
 6250              	.LASF115:
 6251 06a3 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6251      52784275 
 6251      66666572 
 6251      00
 6252              	.LASF82:
 6253 06b0 78517565 		.ascii	"xQueueSizeInBytes\000"
 6253      75655369 
 6253      7A65496E 
 6253      42797465 
 6253      7300
 6254              	.LASF129:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 163


 6255 06c2 78546173 		.ascii	"xTaskResumeAll\000"
 6255      6B526573 
 6255      756D6541 
 6255      6C6C00
 6256              	.LASF56:
 6257 06d1 7852784C 		.ascii	"xRxLock\000"
 6257      6F636B00 
 6258              	.LASF70:
 6259 06d9 70764974 		.ascii	"pvItemToQueue\000"
 6259      656D546F 
 6259      51756575 
 6259      6500
 6260              	.LASF127:
 6261 06e7 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 6261      6B436865 
 6261      636B466F 
 6261      7254696D 
 6261      654F7574 
 6262              	.LASF135:
 6263 06fc 76506F72 		.ascii	"vPortFree\000"
 6263      74467265 
 6263      6500
 6264              	.LASF111:
 6265 0706 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 6265      75654973 
 6265      51756575 
 6265      6546756C 
 6265      6C46726F 
 6266              	.LASF106:
 6267 071f 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 6267      6575654D 
 6267      65737361 
 6267      67657357 
 6267      61697469 
 6268              	.LASF49:
 6269 0736 70635461 		.ascii	"pcTail\000"
 6269      696C00
 6270              	.LASF6:
 6271 073d 5F5F7569 		.ascii	"__uint8_t\000"
 6271      6E74385F 
 6271      7400
 6272              	.LASF67:
 6273 0747 70785175 		.ascii	"pxQueue\000"
 6273      65756500 
 6274              	.LASF68:
 6275 074f 78526574 		.ascii	"xReturn\000"
 6275      75726E00 
 6276              	.LASF15:
 6277 0757 73697A65 		.ascii	"sizetype\000"
 6277      74797065 
 6277      00
 6278              	.LASF121:
 6279 0760 76546173 		.ascii	"vTaskMissedYield\000"
 6279      6B4D6973 
 6279      73656459 
 6279      69656C64 
 6279      00
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 164


 6280              	.LASF13:
 6281 0771 6C6F6E67 		.ascii	"long unsigned int\000"
 6281      20756E73 
 6281      69676E65 
 6281      6420696E 
 6281      7400
 6282              	.LASF19:
 6283 0783 696E7433 		.ascii	"int32_t\000"
 6283      325F7400 
 6284              	.LASF105:
 6285 078b 78517565 		.ascii	"xQueuePeekFromISR\000"
 6285      75655065 
 6285      656B4672 
 6285      6F6D4953 
 6285      5200
 6286              	.LASF7:
 6287 079d 756E7369 		.ascii	"unsigned char\000"
 6287      676E6564 
 6287      20636861 
 6287      7200
 6288              	.LASF12:
 6289 07ab 5F5F7569 		.ascii	"__uint32_t\000"
 6289      6E743332 
 6289      5F7400
 6290              	.LASF123:
 6291 07b6 764C6973 		.ascii	"vListInitialise\000"
 6291      74496E69 
 6291      7469616C 
 6291      69736500 
 6292              	.LASF73:
 6293 07c6 70727643 		.ascii	"prvCopyDataFromQueue\000"
 6293      6F707944 
 6293      61746146 
 6293      726F6D51 
 6293      75657565 
 6294              	.LASF132:
 6295 07db 76506F72 		.ascii	"vPortClearInterruptMask\000"
 6295      74436C65 
 6295      6172496E 
 6295      74657272 
 6295      7570744D 
 6296              	.LASF87:
 6297 07f3 78546963 		.ascii	"xTicksToWait\000"
 6297      6B73546F 
 6297      57616974 
 6297      00
 6298              	.LASF29:
 6299 0800 70764F77 		.ascii	"pvOwner\000"
 6299      6E657200 
 6300              	.LASF130:
 6301 0808 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 6301      6B476574 
 6301      43757272 
 6301      656E7454 
 6301      61736B48 
 6302              	.LASF48:
 6303 0822 70634865 		.ascii	"pcHead\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 165


 6303      616400
 6304              	.LASF57:
 6305 0829 7854784C 		.ascii	"xTxLock\000"
 6305      6F636B00 
 6306              	.LASF93:
 6307 0831 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 6307      75654769 
 6307      76654D75 
 6307      74657852 
 6307      65637572 
 6308              	.LASF74:
 6309 084a 70727655 		.ascii	"prvUnlockQueue\000"
 6309      6E6C6F63 
 6309      6B517565 
 6309      756500
 6310              	.LASF77:
 6311 0859 78517565 		.ascii	"xQueueGenericReset\000"
 6311      75654765 
 6311      6E657269 
 6311      63526573 
 6311      657400
 6312              	.LASF110:
 6313 086c 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 6313      75654973 
 6313      51756575 
 6313      65456D70 
 6313      74794672 
 6314              	.LASF5:
 6315 0886 7369676E 		.ascii	"signed char\000"
 6315      65642063 
 6315      68617200 
 6316              	.LASF9:
 6317 0892 73686F72 		.ascii	"short unsigned int\000"
 6317      7420756E 
 6317      7369676E 
 6317      65642069 
 6317      6E7400
 6318              	.LASF139:
 6319 08a5 6D656D63 		.ascii	"memcpy\000"
 6319      707900
 6320              	.LASF58:
 6321 08ac 78515545 		.ascii	"xQUEUE\000"
 6321      554500
 6322              	.LASF22:
 6323 08b3 646F7562 		.ascii	"double\000"
 6323      6C6500
 6324              	.LASF71:
 6325 08ba 78506F73 		.ascii	"xPosition\000"
 6325      6974696F 
 6325      6E00
 6326              	.LASF83:
 6327 08c4 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 6327      75654372 
 6327      65617465 
 6327      436F756E 
 6327      74696E67 
 6328              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccJztZTj.s 			page 166


