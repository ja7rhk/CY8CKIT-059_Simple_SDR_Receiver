ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvPortStartFirstTask, %function
  24              	prvPortStartFirstTask:
  25              	.LFB67:
  26              		.file 1 "..\\FreeRTOS\\port.c"
   1:..\FreeRTOS/port.c **** /*
   2:..\FreeRTOS/port.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:..\FreeRTOS/port.c ****     All rights reserved
   4:..\FreeRTOS/port.c **** 
   5:..\FreeRTOS/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS/port.c **** 
   7:..\FreeRTOS/port.c ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS/port.c **** 
   9:..\FreeRTOS/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS/port.c **** 
  13:..\FreeRTOS/port.c ****     ***************************************************************************
  14:..\FreeRTOS/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS/port.c ****     ***************************************************************************
  19:..\FreeRTOS/port.c **** 
  20:..\FreeRTOS/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS/port.c ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS/port.c **** 
  25:..\FreeRTOS/port.c ****     ***************************************************************************
  26:..\FreeRTOS/port.c ****      *                                                                       *
  27:..\FreeRTOS/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS/port.c ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS/port.c ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS/port.c ****      *                                                                       *
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 2


  32:..\FreeRTOS/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\FreeRTOS/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS/port.c ****      *                                                                       *
  37:..\FreeRTOS/port.c ****     ***************************************************************************
  38:..\FreeRTOS/port.c **** 
  39:..\FreeRTOS/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS/port.c ****     defined configASSERT()?
  42:..\FreeRTOS/port.c **** 
  43:..\FreeRTOS/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS/port.c ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS/port.c ****     participating in the support forum.
  46:..\FreeRTOS/port.c **** 
  47:..\FreeRTOS/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS/port.c **** 
  52:..\FreeRTOS/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS/port.c **** 
  56:..\FreeRTOS/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS/port.c **** 
  59:..\FreeRTOS/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\FreeRTOS/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\FreeRTOS/port.c **** 
  63:..\FreeRTOS/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS/port.c ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS/port.c **** 
  67:..\FreeRTOS/port.c ****     1 tab == 4 spaces!
  68:..\FreeRTOS/port.c **** */
  69:..\FreeRTOS/port.c **** 
  70:..\FreeRTOS/port.c **** /*-----------------------------------------------------------
  71:..\FreeRTOS/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  72:..\FreeRTOS/port.c ****  *----------------------------------------------------------*/
  73:..\FreeRTOS/port.c **** 
  74:..\FreeRTOS/port.c **** /* Scheduler includes. */
  75:..\FreeRTOS/port.c **** #include "FreeRTOS.h"
  76:..\FreeRTOS/port.c **** #include "task.h"
  77:..\FreeRTOS/port.c **** 
  78:..\FreeRTOS/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  79:..\FreeRTOS/port.c **** defined.  The value should also ensure backward compatibility.
  80:..\FreeRTOS/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  81:..\FreeRTOS/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  82:..\FreeRTOS/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  83:..\FreeRTOS/port.c **** #endif
  84:..\FreeRTOS/port.c **** 
  85:..\FreeRTOS/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  86:..\FreeRTOS/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  87:..\FreeRTOS/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  88:..\FreeRTOS/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 3


  89:..\FreeRTOS/port.c **** #else
  90:..\FreeRTOS/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  91:..\FreeRTOS/port.c **** 	as the core. */
  92:..\FreeRTOS/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  93:..\FreeRTOS/port.c **** #endif
  94:..\FreeRTOS/port.c **** 
  95:..\FreeRTOS/port.c **** /* Constants required to manipulate the core.  Registers first... */
  96:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  97:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  98:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  99:..\FreeRTOS/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
 100:..\FreeRTOS/port.c **** /* ...then bits in the registers. */
 101:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
 102:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 103:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 104:..\FreeRTOS/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 105:..\FreeRTOS/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 106:..\FreeRTOS/port.c **** 
 107:..\FreeRTOS/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 108:..\FreeRTOS/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 109:..\FreeRTOS/port.c **** 
 110:..\FreeRTOS/port.c **** /* Constants required to check the validity of an interrupt priority. */
 111:..\FreeRTOS/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 112:..\FreeRTOS/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 113:..\FreeRTOS/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 114:..\FreeRTOS/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 115:..\FreeRTOS/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 116:..\FreeRTOS/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 117:..\FreeRTOS/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 118:..\FreeRTOS/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 119:..\FreeRTOS/port.c **** 
 120:..\FreeRTOS/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 121:..\FreeRTOS/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 122:..\FreeRTOS/port.c **** 
 123:..\FreeRTOS/port.c **** /* Constants required to set up the initial stack. */
 124:..\FreeRTOS/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
 125:..\FreeRTOS/port.c **** 
 126:..\FreeRTOS/port.c **** /* The systick is a 24-bit counter. */
 127:..\FreeRTOS/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 128:..\FreeRTOS/port.c **** 
 129:..\FreeRTOS/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 130:..\FreeRTOS/port.c **** occurred while the SysTick counter is stopped during tickless idle
 131:..\FreeRTOS/port.c **** calculations. */
 132:..\FreeRTOS/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 133:..\FreeRTOS/port.c **** 
 134:..\FreeRTOS/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 135:..\FreeRTOS/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 136:..\FreeRTOS/port.c **** debugger. */
 137:..\FreeRTOS/port.c **** #ifdef configTASK_RETURN_ADDRESS
 138:..\FreeRTOS/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 139:..\FreeRTOS/port.c **** #else
 140:..\FreeRTOS/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 141:..\FreeRTOS/port.c **** #endif
 142:..\FreeRTOS/port.c **** 
 143:..\FreeRTOS/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 144:..\FreeRTOS/port.c **** variable. */
 145:..\FreeRTOS/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 4


 146:..\FreeRTOS/port.c **** 
 147:..\FreeRTOS/port.c **** /*
 148:..\FreeRTOS/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 149:..\FreeRTOS/port.c ****  * file is weak to allow application writers to change the timer used to
 150:..\FreeRTOS/port.c ****  * generate the tick interrupt.
 151:..\FreeRTOS/port.c ****  */
 152:..\FreeRTOS/port.c **** void vPortSetupTimerInterrupt( void );
 153:..\FreeRTOS/port.c **** 
 154:..\FreeRTOS/port.c **** /*
 155:..\FreeRTOS/port.c ****  * Exception handlers.
 156:..\FreeRTOS/port.c ****  */
 157:..\FreeRTOS/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 158:..\FreeRTOS/port.c **** void xPortSysTickHandler( void );
 159:..\FreeRTOS/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 160:..\FreeRTOS/port.c **** 
 161:..\FreeRTOS/port.c **** /*
 162:..\FreeRTOS/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 163:..\FreeRTOS/port.c ****  */
 164:..\FreeRTOS/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 165:..\FreeRTOS/port.c **** 
 166:..\FreeRTOS/port.c **** /*
 167:..\FreeRTOS/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 168:..\FreeRTOS/port.c ****  */
 169:..\FreeRTOS/port.c **** static void prvTaskExitError( void );
 170:..\FreeRTOS/port.c **** 
 171:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 172:..\FreeRTOS/port.c **** 
 173:..\FreeRTOS/port.c **** /*
 174:..\FreeRTOS/port.c ****  * The number of SysTick increments that make up one tick period.
 175:..\FreeRTOS/port.c ****  */
 176:..\FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 177:..\FreeRTOS/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 178:..\FreeRTOS/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 179:..\FreeRTOS/port.c **** 
 180:..\FreeRTOS/port.c **** /*
 181:..\FreeRTOS/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 182:..\FreeRTOS/port.c ****  * 24 bit resolution of the SysTick timer.
 183:..\FreeRTOS/port.c ****  */
 184:..\FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 185:..\FreeRTOS/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 186:..\FreeRTOS/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 187:..\FreeRTOS/port.c **** 
 188:..\FreeRTOS/port.c **** /*
 189:..\FreeRTOS/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 190:..\FreeRTOS/port.c ****  * power functionality only.
 191:..\FreeRTOS/port.c ****  */
 192:..\FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 193:..\FreeRTOS/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 194:..\FreeRTOS/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 195:..\FreeRTOS/port.c **** 
 196:..\FreeRTOS/port.c **** /*
 197:..\FreeRTOS/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 198:..\FreeRTOS/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 199:..\FreeRTOS/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 200:..\FreeRTOS/port.c ****  */
 201:..\FreeRTOS/port.c **** #if ( configASSERT_DEFINED == 1 )
 202:..\FreeRTOS/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 5


 203:..\FreeRTOS/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 204:..\FreeRTOS/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 205:..\FreeRTOS/port.c **** #endif /* configASSERT_DEFINED */
 206:..\FreeRTOS/port.c **** 
 207:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 208:..\FreeRTOS/port.c **** 
 209:..\FreeRTOS/port.c **** /*
 210:..\FreeRTOS/port.c ****  * See header file for description.
 211:..\FreeRTOS/port.c ****  */
 212:..\FreeRTOS/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 213:..\FreeRTOS/port.c **** {
 214:..\FreeRTOS/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 215:..\FreeRTOS/port.c **** 	interrupt. */
 216:..\FreeRTOS/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 217:..\FreeRTOS/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 218:..\FreeRTOS/port.c **** 	pxTopOfStack--;
 219:..\FreeRTOS/port.c **** 	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 220:..\FreeRTOS/port.c **** 	pxTopOfStack--;
 221:..\FreeRTOS/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 222:..\FreeRTOS/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 223:..\FreeRTOS/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 224:..\FreeRTOS/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 225:..\FreeRTOS/port.c **** 
 226:..\FreeRTOS/port.c **** 	return pxTopOfStack;
 227:..\FreeRTOS/port.c **** }
 228:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 229:..\FreeRTOS/port.c **** 
 230:..\FreeRTOS/port.c **** static void prvTaskExitError( void )
 231:..\FreeRTOS/port.c **** {
 232:..\FreeRTOS/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 233:..\FreeRTOS/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 234:..\FreeRTOS/port.c **** 	should instead call vTaskDelete( NULL ).
 235:..\FreeRTOS/port.c **** 
 236:..\FreeRTOS/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 237:..\FreeRTOS/port.c **** 	defined, then stop here so application writers can catch the error. */
 238:..\FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 239:..\FreeRTOS/port.c **** 	portDISABLE_INTERRUPTS();
 240:..\FreeRTOS/port.c **** 	for( ;; );
 241:..\FreeRTOS/port.c **** }
 242:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 243:..\FreeRTOS/port.c **** 
 244:..\FreeRTOS/port.c **** void vPortSVCHandler( void )
 245:..\FreeRTOS/port.c **** {
 246:..\FreeRTOS/port.c **** 	__asm volatile (
 247:..\FreeRTOS/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 248:..\FreeRTOS/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 249:..\FreeRTOS/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 250:..\FreeRTOS/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 251:..\FreeRTOS/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 252:..\FreeRTOS/port.c **** 					"	isb								\n"
 253:..\FreeRTOS/port.c **** 					"	mov r0, #0 						\n"
 254:..\FreeRTOS/port.c **** 					"	msr	basepri, r0					\n"
 255:..\FreeRTOS/port.c **** 					"	orr r14, #0xd					\n"
 256:..\FreeRTOS/port.c **** 					"	bx r14							\n"
 257:..\FreeRTOS/port.c **** 					"									\n"
 258:..\FreeRTOS/port.c **** 					"	.align 2						\n"
 259:..\FreeRTOS/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 6


 260:..\FreeRTOS/port.c **** 				);
 261:..\FreeRTOS/port.c **** }
 262:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 263:..\FreeRTOS/port.c **** 
 264:..\FreeRTOS/port.c **** static void prvPortStartFirstTask( void )
 265:..\FreeRTOS/port.c **** {
  27              		.loc 1 265 0
  28              		.cfi_startproc
  29              		@ Naked Function: prologue and epilogue provided by programmer.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
 266:..\FreeRTOS/port.c **** 	__asm volatile(
  32              		.loc 1 266 0
  33              		.syntax unified
  34              	@ 266 "..\FreeRTOS\port.c" 1
  35 0000 0648     		 ldr r0, =0xE000ED08 	
  36 0002 0068     	 ldr r0, [r0] 			
  37 0004 0068     	 ldr r0, [r0] 			
  38 0006 80F30888 	 msr msp, r0			
  39 000a 62B6     	 cpsie i				
  40 000c 61B6     	 cpsie f				
  41 000e BFF34F8F 	 dsb					
  42 0012 BFF36F8F 	 isb					
  43 0016 00DF     	 svc 0					
  44 0018 00BF     	 nop					
  45              	
  46              	@ 0 "" 2
 267:..\FreeRTOS/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 268:..\FreeRTOS/port.c **** 					" ldr r0, [r0] 			\n"
 269:..\FreeRTOS/port.c **** 					" ldr r0, [r0] 			\n"
 270:..\FreeRTOS/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 271:..\FreeRTOS/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 272:..\FreeRTOS/port.c **** 					" cpsie f				\n"
 273:..\FreeRTOS/port.c **** 					" dsb					\n"
 274:..\FreeRTOS/port.c **** 					" isb					\n"
 275:..\FreeRTOS/port.c **** 					" svc 0					\n" /* System call to start first task. */
 276:..\FreeRTOS/port.c **** 					" nop					\n"
 277:..\FreeRTOS/port.c **** 				);
 278:..\FreeRTOS/port.c **** }
  47              		.loc 1 278 0
  48              		.thumb
  49              		.syntax unified
  50              		.cfi_endproc
  51              	.LFE67:
  52              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
  53 001a 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
  54              		.align	2
  55              		.global	pxPortInitialiseStack
  56              		.thumb
  57              		.thumb_func
  58              		.type	pxPortInitialiseStack, %function
  59              	pxPortInitialiseStack:
  60              	.LFB64:
 213:..\FreeRTOS/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
  61              		.loc 1 213 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 7


  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL0:
 217:..\FreeRTOS/port.c **** 	pxTopOfStack--;
  67              		.loc 1 217 0
  68 0000 4FF08073 		mov	r3, #16777216
  69 0004 40F8043C 		str	r3, [r0, #-4]
  70              	.LVL1:
 219:..\FreeRTOS/port.c **** 	pxTopOfStack--;
  71              		.loc 1 219 0
  72 0008 40F8081C 		str	r1, [r0, #-8]
  73              	.LVL2:
 221:..\FreeRTOS/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  74              		.loc 1 221 0
  75 000c 034B     		ldr	r3, .L3
  76 000e 40F80C3C 		str	r3, [r0, #-12]
  77              	.LVL3:
 223:..\FreeRTOS/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  78              		.loc 1 223 0
  79 0012 40F8202C 		str	r2, [r0, #-32]
  80              	.LVL4:
 227:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
  81              		.loc 1 227 0
  82 0016 4038     		subs	r0, r0, #64
  83              	.LVL5:
  84 0018 7047     		bx	lr
  85              	.L4:
  86 001a 00BF     		.align	2
  87              	.L3:
  88 001c 00000000 		.word	prvTaskExitError
  89              		.cfi_endproc
  90              	.LFE64:
  91              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
  92              		.section	.text.vPortSVCHandler,"ax",%progbits
  93              		.align	2
  94              		.global	vPortSVCHandler
  95              		.thumb
  96              		.thumb_func
  97              		.type	vPortSVCHandler, %function
  98              	vPortSVCHandler:
  99              	.LFB66:
 245:..\FreeRTOS/port.c **** 	__asm volatile (
 100              		.loc 1 245 0
 101              		.cfi_startproc
 102              		@ Naked Function: prologue and epilogue provided by programmer.
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 246:..\FreeRTOS/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 105              		.loc 1 246 0
 106              		.syntax unified
 107              	@ 246 "..\FreeRTOS\port.c" 1
 108 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 109 0002 1968     		ldr r1, [r3]					
 110 0004 0868     		ldr r0, [r1]					
 111 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 112 000a 80F30988 		msr psp, r0						
 113 000e BFF36F8F 		isb								
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 8


 114 0012 4FF00000 		mov r0, #0 						
 115 0016 80F31188 		msr	basepri, r0					
 116 001a 4EF00D0E 		orr r14, #0xd					
 117 001e 7047     		bx r14							
 118              										
 119              		.align 2						
 120 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 121              	
 122              	@ 0 "" 2
 261:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 123              		.loc 1 261 0
 124              		.thumb
 125              		.syntax unified
 126              		.cfi_endproc
 127              	.LFE66:
 128              		.size	vPortSVCHandler, .-vPortSVCHandler
 129              		.section	.text.vPortEndScheduler,"ax",%progbits
 130              		.align	2
 131              		.global	vPortEndScheduler
 132              		.thumb
 133              		.thumb_func
 134              		.type	vPortEndScheduler, %function
 135              	vPortEndScheduler:
 136              	.LFB69:
 279:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 280:..\FreeRTOS/port.c **** 
 281:..\FreeRTOS/port.c **** /*
 282:..\FreeRTOS/port.c ****  * See header file for description.
 283:..\FreeRTOS/port.c ****  */
 284:..\FreeRTOS/port.c **** BaseType_t xPortStartScheduler( void )
 285:..\FreeRTOS/port.c **** {
 286:..\FreeRTOS/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 287:..\FreeRTOS/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 288:..\FreeRTOS/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 289:..\FreeRTOS/port.c **** 
 290:..\FreeRTOS/port.c **** 	#if( configASSERT_DEFINED == 1 )
 291:..\FreeRTOS/port.c **** 	{
 292:..\FreeRTOS/port.c **** 		volatile uint32_t ulOriginalPriority;
 293:..\FreeRTOS/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 294:..\FreeRTOS/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 295:..\FreeRTOS/port.c **** 
 296:..\FreeRTOS/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 297:..\FreeRTOS/port.c **** 		functions can be called.  ISR safe functions are those that end in
 298:..\FreeRTOS/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 299:..\FreeRTOS/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 300:..\FreeRTOS/port.c **** 
 301:..\FreeRTOS/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 302:..\FreeRTOS/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 303:..\FreeRTOS/port.c **** 
 304:..\FreeRTOS/port.c **** 		/* Determine the number of priority bits available.  First write to all
 305:..\FreeRTOS/port.c **** 		possible bits. */
 306:..\FreeRTOS/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 307:..\FreeRTOS/port.c **** 
 308:..\FreeRTOS/port.c **** 		/* Read the value back to see how many bits stuck. */
 309:..\FreeRTOS/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 310:..\FreeRTOS/port.c **** 
 311:..\FreeRTOS/port.c **** 		/* Use the same mask on the maximum system call priority. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 9


 312:..\FreeRTOS/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 313:..\FreeRTOS/port.c **** 
 314:..\FreeRTOS/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 315:..\FreeRTOS/port.c **** 		of bits read back. */
 316:..\FreeRTOS/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 317:..\FreeRTOS/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 318:..\FreeRTOS/port.c **** 		{
 319:..\FreeRTOS/port.c **** 			ulMaxPRIGROUPValue--;
 320:..\FreeRTOS/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 321:..\FreeRTOS/port.c **** 		}
 322:..\FreeRTOS/port.c **** 
 323:..\FreeRTOS/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 324:..\FreeRTOS/port.c **** 		register. */
 325:..\FreeRTOS/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 326:..\FreeRTOS/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 327:..\FreeRTOS/port.c **** 
 328:..\FreeRTOS/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 329:..\FreeRTOS/port.c **** 		value. */
 330:..\FreeRTOS/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 331:..\FreeRTOS/port.c **** 	}
 332:..\FreeRTOS/port.c **** 	#endif /* conifgASSERT_DEFINED */
 333:..\FreeRTOS/port.c **** 
 334:..\FreeRTOS/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 335:..\FreeRTOS/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 336:..\FreeRTOS/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 337:..\FreeRTOS/port.c **** 
 338:..\FreeRTOS/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 339:..\FreeRTOS/port.c **** 	here already. */
 340:..\FreeRTOS/port.c **** 	vPortSetupTimerInterrupt();
 341:..\FreeRTOS/port.c **** 
 342:..\FreeRTOS/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 343:..\FreeRTOS/port.c **** 	uxCriticalNesting = 0;
 344:..\FreeRTOS/port.c **** 
 345:..\FreeRTOS/port.c **** 	/* Start the first task. */
 346:..\FreeRTOS/port.c **** 	prvPortStartFirstTask();
 347:..\FreeRTOS/port.c **** 
 348:..\FreeRTOS/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 349:..\FreeRTOS/port.c **** 	exit error function to prevent compiler warnings about a static function
 350:..\FreeRTOS/port.c **** 	not being called in the case that the application writer overrides this
 351:..\FreeRTOS/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 352:..\FreeRTOS/port.c **** 	prvTaskExitError();
 353:..\FreeRTOS/port.c **** 
 354:..\FreeRTOS/port.c **** 	/* Should not get here! */
 355:..\FreeRTOS/port.c **** 	return 0;
 356:..\FreeRTOS/port.c **** }
 357:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 358:..\FreeRTOS/port.c **** 
 359:..\FreeRTOS/port.c **** void vPortEndScheduler( void )
 360:..\FreeRTOS/port.c **** {
 137              		.loc 1 360 0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE69:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 10


 145              		.size	vPortEndScheduler, .-vPortEndScheduler
 146 0002 00BF     		.section	.text.vPortYield,"ax",%progbits
 147              		.align	2
 148              		.global	vPortYield
 149              		.thumb
 150              		.thumb_func
 151              		.type	vPortYield, %function
 152              	vPortYield:
 153              	.LFB70:
 361:..\FreeRTOS/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 362:..\FreeRTOS/port.c **** 	Artificially force an assert. */
 363:..\FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 364:..\FreeRTOS/port.c **** }
 365:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 366:..\FreeRTOS/port.c **** 
 367:..\FreeRTOS/port.c **** void vPortYield( void )
 368:..\FreeRTOS/port.c **** {
 154              		.loc 1 368 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 369:..\FreeRTOS/port.c **** 	/* Set a PendSV to request a context switch. */
 370:..\FreeRTOS/port.c **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 159              		.loc 1 370 0
 160 0000 4FF08052 		mov	r2, #268435456
 161 0004 034B     		ldr	r3, .L8
 162 0006 1A60     		str	r2, [r3]
 371:..\FreeRTOS/port.c **** 
 372:..\FreeRTOS/port.c **** 	/* Barriers are normally not required but do ensure the code is completely
 373:..\FreeRTOS/port.c **** 	within the specified behaviour for the architecture. */
 374:..\FreeRTOS/port.c **** 	__asm volatile( "dsb" );
 163              		.loc 1 374 0
 164              		.syntax unified
 165              	@ 374 "..\FreeRTOS\port.c" 1
 166 0008 BFF34F8F 		dsb
 167              	@ 0 "" 2
 375:..\FreeRTOS/port.c **** 	__asm volatile( "isb" );
 168              		.loc 1 375 0
 169              	@ 375 "..\FreeRTOS\port.c" 1
 170 000c BFF36F8F 		isb
 171              	@ 0 "" 2
 172              		.thumb
 173              		.syntax unified
 174 0010 7047     		bx	lr
 175              	.L9:
 176 0012 00BF     		.align	2
 177              	.L8:
 178 0014 04ED00E0 		.word	-536810236
 179              		.cfi_endproc
 180              	.LFE70:
 181              		.size	vPortYield, .-vPortYield
 182              		.section	.text.ulPortSetInterruptMask,"ax",%progbits
 183              		.align	2
 184              		.global	ulPortSetInterruptMask
 185              		.thumb
 186              		.thumb_func
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 11


 187              		.type	ulPortSetInterruptMask, %function
 188              	ulPortSetInterruptMask:
 189              	.LFB73:
 376:..\FreeRTOS/port.c **** }
 377:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 378:..\FreeRTOS/port.c **** 
 379:..\FreeRTOS/port.c **** void vPortEnterCritical( void )
 380:..\FreeRTOS/port.c **** {
 381:..\FreeRTOS/port.c **** 	portDISABLE_INTERRUPTS();
 382:..\FreeRTOS/port.c **** 	uxCriticalNesting++;
 383:..\FreeRTOS/port.c **** 	__asm volatile( "dsb" );
 384:..\FreeRTOS/port.c **** 	__asm volatile( "isb" );
 385:..\FreeRTOS/port.c **** 	
 386:..\FreeRTOS/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 387:..\FreeRTOS/port.c **** 	assert() if it is being called from an interrupt context.  Only API 
 388:..\FreeRTOS/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 389:..\FreeRTOS/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 390:..\FreeRTOS/port.c **** 	assert function also uses a critical section. */
 391:..\FreeRTOS/port.c **** 	if( uxCriticalNesting == 1 )
 392:..\FreeRTOS/port.c **** 	{
 393:..\FreeRTOS/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 394:..\FreeRTOS/port.c **** 	}
 395:..\FreeRTOS/port.c **** }
 396:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 397:..\FreeRTOS/port.c **** 
 398:..\FreeRTOS/port.c **** void vPortExitCritical( void )
 399:..\FreeRTOS/port.c **** {
 400:..\FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting );
 401:..\FreeRTOS/port.c **** 	uxCriticalNesting--;
 402:..\FreeRTOS/port.c **** 	if( uxCriticalNesting == 0 )
 403:..\FreeRTOS/port.c **** 	{
 404:..\FreeRTOS/port.c **** 		portENABLE_INTERRUPTS();
 405:..\FreeRTOS/port.c **** 	}
 406:..\FreeRTOS/port.c **** }
 407:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 408:..\FreeRTOS/port.c **** 
 409:..\FreeRTOS/port.c **** __attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
 410:..\FreeRTOS/port.c **** {
 190              		.loc 1 410 0
 191              		.cfi_startproc
 192              		@ Naked Function: prologue and epilogue provided by programmer.
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 411:..\FreeRTOS/port.c **** 	__asm volatile														\
 195              		.loc 1 411 0
 196              		.syntax unified
 197              	@ 411 "..\FreeRTOS\port.c" 1
 198 0000 EFF31180 			mrs r0, basepri											
 199 0004 4FF0A001 		mov r1, #160												
 200 0008 81F31188 		msr basepri, r1											
 201 000c 7047     		bx lr													
 202              	
 203              	@ 0 "" 2
 412:..\FreeRTOS/port.c **** 	(																	\
 413:..\FreeRTOS/port.c **** 		"	mrs r0, basepri											\n" \
 414:..\FreeRTOS/port.c **** 		"	mov r1, %0												\n"	\
 415:..\FreeRTOS/port.c **** 		"	msr basepri, r1											\n" \
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 12


 416:..\FreeRTOS/port.c **** 		"	bx lr													\n" \
 417:..\FreeRTOS/port.c **** 		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
 418:..\FreeRTOS/port.c **** 	);
 419:..\FreeRTOS/port.c **** 
 420:..\FreeRTOS/port.c **** 	/* This return will not be reached but is necessary to prevent compiler
 421:..\FreeRTOS/port.c **** 	warnings. */
 422:..\FreeRTOS/port.c **** 	return 0;
 423:..\FreeRTOS/port.c **** }
 204              		.loc 1 423 0
 205              		.thumb
 206              		.syntax unified
 207 000e 0020     		movs	r0, #0
 208              		.cfi_endproc
 209              	.LFE73:
 210              		.size	ulPortSetInterruptMask, .-ulPortSetInterruptMask
 211              		.section	.text.prvTaskExitError,"ax",%progbits
 212              		.align	2
 213              		.thumb
 214              		.thumb_func
 215              		.type	prvTaskExitError, %function
 216              	prvTaskExitError:
 217              	.LFB65:
 231:..\FreeRTOS/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 218              		.loc 1 231 0
 219              		.cfi_startproc
 220              		@ Volatile: function does not return.
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223 0000 08B5     		push	{r3, lr}
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 3, -8
 226              		.cfi_offset 14, -4
 239:..\FreeRTOS/port.c **** 	for( ;; );
 227              		.loc 1 239 0
 228 0002 FFF7FEFF 		bl	ulPortSetInterruptMask
 229              	.LVL6:
 230              	.L12:
 231 0006 FEE7     		b	.L12
 232              		.cfi_endproc
 233              	.LFE65:
 234              		.size	prvTaskExitError, .-prvTaskExitError
 235              		.section	.text.vPortEnterCritical,"ax",%progbits
 236              		.align	2
 237              		.global	vPortEnterCritical
 238              		.thumb
 239              		.thumb_func
 240              		.type	vPortEnterCritical, %function
 241              	vPortEnterCritical:
 242              	.LFB71:
 380:..\FreeRTOS/port.c **** 	portDISABLE_INTERRUPTS();
 243              		.loc 1 380 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247 0000 08B5     		push	{r3, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 3, -8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 13


 250              		.cfi_offset 14, -4
 381:..\FreeRTOS/port.c **** 	uxCriticalNesting++;
 251              		.loc 1 381 0
 252 0002 FFF7FEFF 		bl	ulPortSetInterruptMask
 253              	.LVL7:
 382:..\FreeRTOS/port.c **** 	__asm volatile( "dsb" );
 254              		.loc 1 382 0
 255 0006 044A     		ldr	r2, .L16
 256 0008 1368     		ldr	r3, [r2]
 257 000a 0133     		adds	r3, r3, #1
 258 000c 1360     		str	r3, [r2]
 383:..\FreeRTOS/port.c **** 	__asm volatile( "isb" );
 259              		.loc 1 383 0
 260              		.syntax unified
 261              	@ 383 "..\FreeRTOS\port.c" 1
 262 000e BFF34F8F 		dsb
 263              	@ 0 "" 2
 384:..\FreeRTOS/port.c **** 	
 264              		.loc 1 384 0
 265              	@ 384 "..\FreeRTOS\port.c" 1
 266 0012 BFF36F8F 		isb
 267              	@ 0 "" 2
 268              		.thumb
 269              		.syntax unified
 270 0016 08BD     		pop	{r3, pc}
 271              	.L17:
 272              		.align	2
 273              	.L16:
 274 0018 00000000 		.word	.LANCHOR0
 275              		.cfi_endproc
 276              	.LFE71:
 277              		.size	vPortEnterCritical, .-vPortEnterCritical
 278              		.section	.text.vPortClearInterruptMask,"ax",%progbits
 279              		.align	2
 280              		.global	vPortClearInterruptMask
 281              		.thumb
 282              		.thumb_func
 283              		.type	vPortClearInterruptMask, %function
 284              	vPortClearInterruptMask:
 285              	.LFB74:
 424:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 425:..\FreeRTOS/port.c **** 
 426:..\FreeRTOS/port.c **** __attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
 427:..\FreeRTOS/port.c **** {
 286              		.loc 1 427 0
 287              		.cfi_startproc
 288              		@ Naked Function: prologue and epilogue provided by programmer.
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL8:
 428:..\FreeRTOS/port.c **** 	__asm volatile													\
 292              		.loc 1 428 0
 293              		.syntax unified
 294              	@ 428 "..\FreeRTOS\port.c" 1
 295 0000 80F31188 			msr basepri, r0										
 296 0004 7047     		bx lr												
 297              	
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 14


 298              	@ 0 "" 2
 299              	.LVL9:
 429:..\FreeRTOS/port.c **** 	(																\
 430:..\FreeRTOS/port.c **** 		"	msr basepri, r0										\n"	\
 431:..\FreeRTOS/port.c **** 		"	bx lr												\n" \
 432:..\FreeRTOS/port.c **** 		:::"r0"														\
 433:..\FreeRTOS/port.c **** 	);
 434:..\FreeRTOS/port.c **** 
 435:..\FreeRTOS/port.c **** 	/* Just to avoid compiler warnings. */
 436:..\FreeRTOS/port.c **** 	( void ) ulNewMaskValue;
 437:..\FreeRTOS/port.c **** }
 300              		.loc 1 437 0
 301              		.thumb
 302              		.syntax unified
 303              		.cfi_endproc
 304              	.LFE74:
 305              		.size	vPortClearInterruptMask, .-vPortClearInterruptMask
 306 0006 00BF     		.section	.text.vPortExitCritical,"ax",%progbits
 307              		.align	2
 308              		.global	vPortExitCritical
 309              		.thumb
 310              		.thumb_func
 311              		.type	vPortExitCritical, %function
 312              	vPortExitCritical:
 313              	.LFB72:
 399:..\FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting );
 314              		.loc 1 399 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 0000 08B5     		push	{r3, lr}
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 3, -8
 321              		.cfi_offset 14, -4
 401:..\FreeRTOS/port.c **** 	if( uxCriticalNesting == 0 )
 322              		.loc 1 401 0
 323 0002 044A     		ldr	r2, .L22
 324 0004 1368     		ldr	r3, [r2]
 325 0006 013B     		subs	r3, r3, #1
 326 0008 1360     		str	r3, [r2]
 402:..\FreeRTOS/port.c **** 	{
 327              		.loc 1 402 0
 328 000a 13B9     		cbnz	r3, .L19
 404:..\FreeRTOS/port.c **** 	}
 329              		.loc 1 404 0
 330 000c 0020     		movs	r0, #0
 331 000e FFF7FEFF 		bl	vPortClearInterruptMask
 332              	.LVL10:
 333              	.L19:
 334 0012 08BD     		pop	{r3, pc}
 335              	.L23:
 336              		.align	2
 337              	.L22:
 338 0014 00000000 		.word	.LANCHOR0
 339              		.cfi_endproc
 340              	.LFE72:
 341              		.size	vPortExitCritical, .-vPortExitCritical
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 15


 342              		.section	.text.xPortPendSVHandler,"ax",%progbits
 343              		.align	2
 344              		.global	xPortPendSVHandler
 345              		.thumb
 346              		.thumb_func
 347              		.type	xPortPendSVHandler, %function
 348              	xPortPendSVHandler:
 349              	.LFB75:
 438:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 439:..\FreeRTOS/port.c **** 
 440:..\FreeRTOS/port.c **** void xPortPendSVHandler( void )
 441:..\FreeRTOS/port.c **** {
 350              		.loc 1 441 0
 351              		.cfi_startproc
 352              		@ Naked Function: prologue and epilogue provided by programmer.
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 442:..\FreeRTOS/port.c **** 	/* This is a naked function. */
 443:..\FreeRTOS/port.c **** 
 444:..\FreeRTOS/port.c **** 	__asm volatile
 355              		.loc 1 444 0
 356              		.syntax unified
 357              	@ 444 "..\FreeRTOS\port.c" 1
 358 0000 EFF30980 			mrs r0, psp							
 359 0004 BFF36F8F 		isb									
 360              											
 361 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 362 000a 1A68     		ldr	r2, [r3]						
 363              											
 364 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 365 0010 1060     		str r0, [r2]						
 366              											
 367 0012 2DE90840 		stmdb sp!, {r3, r14}				
 368 0016 4FF0A000 		mov r0, #160							
 369 001a 80F31188 		msr basepri, r0						
 370 001e FFF7FEFF 		bl vTaskSwitchContext				
 371 0022 4FF00000 		mov r0, #0							
 372 0026 80F31188 		msr basepri, r0						
 373 002a BDE80840 		ldmia sp!, {r3, r14}				
 374              											
 375 002e 1968     		ldr r1, [r3]						
 376 0030 0868     		ldr r0, [r1]						
 377 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 378 0036 80F30988 		msr psp, r0							
 379 003a BFF36F8F 		isb									
 380 003e 7047     		bx r14								
 381              											
 382              		.align 2							
 383 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 384              	
 385              	@ 0 "" 2
 445:..\FreeRTOS/port.c **** 	(
 446:..\FreeRTOS/port.c **** 	"	mrs r0, psp							\n"
 447:..\FreeRTOS/port.c **** 	"	isb									\n"
 448:..\FreeRTOS/port.c **** 	"										\n"
 449:..\FreeRTOS/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 450:..\FreeRTOS/port.c **** 	"	ldr	r2, [r3]						\n"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 16


 451:..\FreeRTOS/port.c **** 	"										\n"
 452:..\FreeRTOS/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 453:..\FreeRTOS/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 454:..\FreeRTOS/port.c **** 	"										\n"
 455:..\FreeRTOS/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 456:..\FreeRTOS/port.c **** 	"	mov r0, %0							\n"
 457:..\FreeRTOS/port.c **** 	"	msr basepri, r0						\n"
 458:..\FreeRTOS/port.c **** 	"	bl vTaskSwitchContext				\n"
 459:..\FreeRTOS/port.c **** 	"	mov r0, #0							\n"
 460:..\FreeRTOS/port.c **** 	"	msr basepri, r0						\n"
 461:..\FreeRTOS/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 462:..\FreeRTOS/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 463:..\FreeRTOS/port.c **** 	"	ldr r1, [r3]						\n"
 464:..\FreeRTOS/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 465:..\FreeRTOS/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 466:..\FreeRTOS/port.c **** 	"	msr psp, r0							\n"
 467:..\FreeRTOS/port.c **** 	"	isb									\n"
 468:..\FreeRTOS/port.c **** 	"	bx r14								\n"
 469:..\FreeRTOS/port.c **** 	"										\n"
 470:..\FreeRTOS/port.c **** 	"	.align 2							\n"
 471:..\FreeRTOS/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 472:..\FreeRTOS/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 473:..\FreeRTOS/port.c **** 	);
 474:..\FreeRTOS/port.c **** }
 386              		.loc 1 474 0
 387              		.thumb
 388              		.syntax unified
 389              		.cfi_endproc
 390              	.LFE75:
 391              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 392              		.section	.text.xPortSysTickHandler,"ax",%progbits
 393              		.align	2
 394              		.global	xPortSysTickHandler
 395              		.thumb
 396              		.thumb_func
 397              		.type	xPortSysTickHandler, %function
 398              	xPortSysTickHandler:
 399              	.LFB76:
 475:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 476:..\FreeRTOS/port.c **** 
 477:..\FreeRTOS/port.c **** void xPortSysTickHandler( void )
 478:..\FreeRTOS/port.c **** {
 400              		.loc 1 478 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404 0000 08B5     		push	{r3, lr}
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 3, -8
 407              		.cfi_offset 14, -4
 479:..\FreeRTOS/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 480:..\FreeRTOS/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 481:..\FreeRTOS/port.c **** 	save and then restore the interrupt mask value as its value is already
 482:..\FreeRTOS/port.c **** 	known. */
 483:..\FreeRTOS/port.c **** 	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 408              		.loc 1 483 0
 409 0002 FFF7FEFF 		bl	ulPortSetInterruptMask
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 17


 410              	.LVL11:
 484:..\FreeRTOS/port.c **** 	{
 485:..\FreeRTOS/port.c **** 		/* Increment the RTOS tick. */
 486:..\FreeRTOS/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 411              		.loc 1 486 0
 412 0006 FFF7FEFF 		bl	xTaskIncrementTick
 413              	.LVL12:
 414 000a 18B1     		cbz	r0, .L26
 487:..\FreeRTOS/port.c **** 		{
 488:..\FreeRTOS/port.c **** 			/* A context switch is required.  Context switching is performed in
 489:..\FreeRTOS/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 490:..\FreeRTOS/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 415              		.loc 1 490 0
 416 000c 4FF08052 		mov	r2, #268435456
 417 0010 024B     		ldr	r3, .L28
 418 0012 1A60     		str	r2, [r3]
 419              	.L26:
 491:..\FreeRTOS/port.c **** 		}
 492:..\FreeRTOS/port.c **** 	}
 493:..\FreeRTOS/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 420              		.loc 1 493 0
 421 0014 0020     		movs	r0, #0
 422 0016 FFF7FEFF 		bl	vPortClearInterruptMask
 423              	.LVL13:
 424 001a 08BD     		pop	{r3, pc}
 425              	.L29:
 426              		.align	2
 427              	.L28:
 428 001c 04ED00E0 		.word	-536810236
 429              		.cfi_endproc
 430              	.LFE76:
 431              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 432              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 433              		.align	2
 434              		.weak	vPortSetupTimerInterrupt
 435              		.thumb
 436              		.thumb_func
 437              		.type	vPortSetupTimerInterrupt, %function
 438              	vPortSetupTimerInterrupt:
 439              	.LFB77:
 494:..\FreeRTOS/port.c **** }
 495:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 496:..\FreeRTOS/port.c **** 
 497:..\FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 498:..\FreeRTOS/port.c **** 
 499:..\FreeRTOS/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 500:..\FreeRTOS/port.c **** 	{
 501:..\FreeRTOS/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 502:..\FreeRTOS/port.c **** 	TickType_t xModifiableIdleTime;
 503:..\FreeRTOS/port.c **** 
 504:..\FreeRTOS/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 505:..\FreeRTOS/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 506:..\FreeRTOS/port.c **** 		{
 507:..\FreeRTOS/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 508:..\FreeRTOS/port.c **** 		}
 509:..\FreeRTOS/port.c **** 
 510:..\FreeRTOS/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 18


 511:..\FreeRTOS/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 512:..\FreeRTOS/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 513:..\FreeRTOS/port.c **** 		kernel with respect to calendar time. */
 514:..\FreeRTOS/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 515:..\FreeRTOS/port.c **** 
 516:..\FreeRTOS/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 517:..\FreeRTOS/port.c **** 		tick periods.  -1 is used because this code will execute part way
 518:..\FreeRTOS/port.c **** 		through one of the tick periods. */
 519:..\FreeRTOS/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 520:..\FreeRTOS/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 521:..\FreeRTOS/port.c **** 		{
 522:..\FreeRTOS/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 523:..\FreeRTOS/port.c **** 		}
 524:..\FreeRTOS/port.c **** 
 525:..\FreeRTOS/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 526:..\FreeRTOS/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 527:..\FreeRTOS/port.c **** 		__asm volatile( "cpsid i" );
 528:..\FreeRTOS/port.c **** 
 529:..\FreeRTOS/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 530:..\FreeRTOS/port.c **** 		to be unsuspended then abandon the low power entry. */
 531:..\FreeRTOS/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 532:..\FreeRTOS/port.c **** 		{
 533:..\FreeRTOS/port.c **** 			/* Restart from whatever is left in the count register to complete
 534:..\FreeRTOS/port.c **** 			this tick period. */
 535:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 536:..\FreeRTOS/port.c **** 
 537:..\FreeRTOS/port.c **** 			/* Restart SysTick. */
 538:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 539:..\FreeRTOS/port.c **** 
 540:..\FreeRTOS/port.c **** 			/* Reset the reload register to the value required for normal tick
 541:..\FreeRTOS/port.c **** 			periods. */
 542:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 543:..\FreeRTOS/port.c **** 
 544:..\FreeRTOS/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 545:..\FreeRTOS/port.c **** 			above. */
 546:..\FreeRTOS/port.c **** 			__asm volatile( "cpsie i" );
 547:..\FreeRTOS/port.c **** 		}
 548:..\FreeRTOS/port.c **** 		else
 549:..\FreeRTOS/port.c **** 		{
 550:..\FreeRTOS/port.c **** 			/* Set the new reload value. */
 551:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 552:..\FreeRTOS/port.c **** 
 553:..\FreeRTOS/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 554:..\FreeRTOS/port.c **** 			zero. */
 555:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 556:..\FreeRTOS/port.c **** 
 557:..\FreeRTOS/port.c **** 			/* Restart SysTick. */
 558:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 559:..\FreeRTOS/port.c **** 
 560:..\FreeRTOS/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 561:..\FreeRTOS/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 562:..\FreeRTOS/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 563:..\FreeRTOS/port.c **** 			should not be executed again.  However, the original expected idle
 564:..\FreeRTOS/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 565:..\FreeRTOS/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 566:..\FreeRTOS/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 567:..\FreeRTOS/port.c **** 			if( xModifiableIdleTime > 0 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 19


 568:..\FreeRTOS/port.c **** 			{
 569:..\FreeRTOS/port.c **** 				__asm volatile( "dsb" );
 570:..\FreeRTOS/port.c **** 				__asm volatile( "wfi" );
 571:..\FreeRTOS/port.c **** 				__asm volatile( "isb" );
 572:..\FreeRTOS/port.c **** 			}
 573:..\FreeRTOS/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 574:..\FreeRTOS/port.c **** 
 575:..\FreeRTOS/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 576:..\FreeRTOS/port.c **** 			accounted for as best it can be, but using the tickless mode will
 577:..\FreeRTOS/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 578:..\FreeRTOS/port.c **** 			kernel with respect to calendar time. */
 579:..\FreeRTOS/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 580:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 581:..\FreeRTOS/port.c **** 
 582:..\FreeRTOS/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 583:..\FreeRTOS/port.c **** 			above. */
 584:..\FreeRTOS/port.c **** 			__asm volatile( "cpsie i" );
 585:..\FreeRTOS/port.c **** 
 586:..\FreeRTOS/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 587:..\FreeRTOS/port.c **** 			{
 588:..\FreeRTOS/port.c **** 				uint32_t ulCalculatedLoadValue;
 589:..\FreeRTOS/port.c **** 
 590:..\FreeRTOS/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 591:..\FreeRTOS/port.c **** 				count reloaded with ulReloadValue.  Reset the
 592:..\FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 593:..\FreeRTOS/port.c **** 				period. */
 594:..\FreeRTOS/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 595:..\FreeRTOS/port.c **** 
 596:..\FreeRTOS/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 597:..\FreeRTOS/port.c **** 				underflowed because the post sleep hook did something
 598:..\FreeRTOS/port.c **** 				that took too long. */
 599:..\FreeRTOS/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 600:..\FreeRTOS/port.c **** 				{
 601:..\FreeRTOS/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 602:..\FreeRTOS/port.c **** 				}
 603:..\FreeRTOS/port.c **** 
 604:..\FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 605:..\FreeRTOS/port.c **** 
 606:..\FreeRTOS/port.c **** 				/* The tick interrupt handler will already have pended the tick
 607:..\FreeRTOS/port.c **** 				processing in the kernel.  As the pending tick will be
 608:..\FreeRTOS/port.c **** 				processed as soon as this function exits, the tick value
 609:..\FreeRTOS/port.c **** 				maintained by the tick is stepped forward by one less than the
 610:..\FreeRTOS/port.c **** 				time spent waiting. */
 611:..\FreeRTOS/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 612:..\FreeRTOS/port.c **** 			}
 613:..\FreeRTOS/port.c **** 			else
 614:..\FreeRTOS/port.c **** 			{
 615:..\FreeRTOS/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 616:..\FreeRTOS/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 617:..\FreeRTOS/port.c **** 				periods (not the ulReload value which accounted for part
 618:..\FreeRTOS/port.c **** 				ticks). */
 619:..\FreeRTOS/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 620:..\FreeRTOS/port.c **** 
 621:..\FreeRTOS/port.c **** 				/* How many complete tick periods passed while the processor
 622:..\FreeRTOS/port.c **** 				was waiting? */
 623:..\FreeRTOS/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 624:..\FreeRTOS/port.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 20


 625:..\FreeRTOS/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 626:..\FreeRTOS/port.c **** 				period remains. */
 627:..\FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCom
 628:..\FreeRTOS/port.c **** 			}
 629:..\FreeRTOS/port.c **** 
 630:..\FreeRTOS/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 631:..\FreeRTOS/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 632:..\FreeRTOS/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 633:..\FreeRTOS/port.c **** 			can only execute once in the case that the reload register is near
 634:..\FreeRTOS/port.c **** 			zero. */
 635:..\FreeRTOS/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 636:..\FreeRTOS/port.c **** 			portENTER_CRITICAL();
 637:..\FreeRTOS/port.c **** 			{
 638:..\FreeRTOS/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 639:..\FreeRTOS/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 640:..\FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 641:..\FreeRTOS/port.c **** 			}
 642:..\FreeRTOS/port.c **** 			portEXIT_CRITICAL();
 643:..\FreeRTOS/port.c **** 		}
 644:..\FreeRTOS/port.c **** 	}
 645:..\FreeRTOS/port.c **** 
 646:..\FreeRTOS/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 647:..\FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 648:..\FreeRTOS/port.c **** 
 649:..\FreeRTOS/port.c **** /*
 650:..\FreeRTOS/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 651:..\FreeRTOS/port.c ****  * frequency.
 652:..\FreeRTOS/port.c ****  */
 653:..\FreeRTOS/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 654:..\FreeRTOS/port.c **** {
 440              		.loc 1 654 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 655:..\FreeRTOS/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 656:..\FreeRTOS/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 657:..\FreeRTOS/port.c **** 	{
 658:..\FreeRTOS/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 659:..\FreeRTOS/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 660:..\FreeRTOS/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 661:..\FreeRTOS/port.c **** 	}
 662:..\FreeRTOS/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 663:..\FreeRTOS/port.c **** 
 664:..\FreeRTOS/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 665:..\FreeRTOS/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 445              		.loc 1 665 0
 446 0000 034A     		ldr	r2, .L31
 447 0002 044B     		ldr	r3, .L31+4
 448 0004 1A60     		str	r2, [r3]
 666:..\FreeRTOS/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 449              		.loc 1 666 0
 450 0006 0722     		movs	r2, #7
 451 0008 043B     		subs	r3, r3, #4
 452 000a 1A60     		str	r2, [r3]
 453 000c 7047     		bx	lr
 454              	.L32:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 21


 455 000e 00BF     		.align	2
 456              	.L31:
 457 0010 CF010100 		.word	65999
 458 0014 14E000E0 		.word	-536813548
 459              		.cfi_endproc
 460              	.LFE77:
 461              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 462              		.section	.text.xPortStartScheduler,"ax",%progbits
 463              		.align	2
 464              		.global	xPortStartScheduler
 465              		.thumb
 466              		.thumb_func
 467              		.type	xPortStartScheduler, %function
 468              	xPortStartScheduler:
 469              	.LFB68:
 285:..\FreeRTOS/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 470              		.loc 1 285 0
 471              		.cfi_startproc
 472              		@ Volatile: function does not return.
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475 0000 08B5     		push	{r3, lr}
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 335:..\FreeRTOS/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 479              		.loc 1 335 0
 480 0002 094B     		ldr	r3, .L35
 481 0004 1A68     		ldr	r2, [r3]
 482 0006 42F46002 		orr	r2, r2, #14680064
 483 000a 1A60     		str	r2, [r3]
 336:..\FreeRTOS/port.c **** 
 484              		.loc 1 336 0
 485 000c 1A68     		ldr	r2, [r3]
 486 000e 42F06042 		orr	r2, r2, #-536870912
 487 0012 1A60     		str	r2, [r3]
 340:..\FreeRTOS/port.c **** 
 488              		.loc 1 340 0
 489 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 490              	.LVL14:
 343:..\FreeRTOS/port.c **** 
 491              		.loc 1 343 0
 492 0018 0022     		movs	r2, #0
 493 001a 044B     		ldr	r3, .L35+4
 494 001c 1A60     		str	r2, [r3]
 346:..\FreeRTOS/port.c **** 
 495              		.loc 1 346 0
 496 001e FFF7FEFF 		bl	prvPortStartFirstTask
 497              	.LVL15:
 352:..\FreeRTOS/port.c **** 
 498              		.loc 1 352 0
 499 0022 FFF7FEFF 		bl	prvTaskExitError
 500              	.LVL16:
 501              	.L36:
 502 0026 00BF     		.align	2
 503              	.L35:
 504 0028 20ED00E0 		.word	-536810208
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 22


 505 002c 00000000 		.word	.LANCHOR0
 506              		.cfi_endproc
 507              	.LFE68:
 508              		.size	xPortStartScheduler, .-xPortStartScheduler
 509              		.data
 510              		.align	2
 511              		.set	.LANCHOR0,. + 0
 512              		.type	uxCriticalNesting, %object
 513              		.size	uxCriticalNesting, 4
 514              	uxCriticalNesting:
 515 0000 AAAAAAAA 		.word	-1431655766
 516              		.text
 517              	.Letext0:
 518              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 519              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 520              		.file 4 "..\\FreeRTOS\\projdefs.h"
 521              		.file 5 "..\\FreeRTOS\\portmacro.h"
 522              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 523              		.file 7 "..\\FreeRTOS\\task.h"
 524              		.section	.debug_info,"",%progbits
 525              	.Ldebug_info0:
 526 0000 F3020000 		.4byte	0x2f3
 527 0004 0400     		.2byte	0x4
 528 0006 00000000 		.4byte	.Ldebug_abbrev0
 529 000a 04       		.byte	0x4
 530 000b 01       		.uleb128 0x1
 531 000c BE000000 		.4byte	.LASF36
 532 0010 0C       		.byte	0xc
 533 0011 3C030000 		.4byte	.LASF37
 534 0015 90010000 		.4byte	.LASF38
 535 0019 00000000 		.4byte	.Ldebug_ranges0+0
 536 001d 00000000 		.4byte	0
 537 0021 00000000 		.4byte	.Ldebug_line0
 538 0025 02       		.uleb128 0x2
 539 0026 04       		.byte	0x4
 540 0027 05       		.byte	0x5
 541 0028 696E7400 		.ascii	"int\000"
 542 002c 03       		.uleb128 0x3
 543 002d 04       		.byte	0x4
 544 002e 07       		.byte	0x7
 545 002f 5C000000 		.4byte	.LASF0
 546 0033 03       		.uleb128 0x3
 547 0034 08       		.byte	0x8
 548 0035 05       		.byte	0x5
 549 0036 88020000 		.4byte	.LASF1
 550 003a 03       		.uleb128 0x3
 551 003b 08       		.byte	0x8
 552 003c 04       		.byte	0x4
 553 003d 24030000 		.4byte	.LASF2
 554 0041 03       		.uleb128 0x3
 555 0042 01       		.byte	0x1
 556 0043 06       		.byte	0x6
 557 0044 30030000 		.4byte	.LASF3
 558 0048 03       		.uleb128 0x3
 559 0049 01       		.byte	0x1
 560 004a 08       		.byte	0x8
 561 004b B0000000 		.4byte	.LASF4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 23


 562 004f 03       		.uleb128 0x3
 563 0050 02       		.byte	0x2
 564 0051 05       		.byte	0x5
 565 0052 CF020000 		.4byte	.LASF5
 566 0056 03       		.uleb128 0x3
 567 0057 02       		.byte	0x2
 568 0058 07       		.byte	0x7
 569 0059 5E010000 		.4byte	.LASF6
 570 005d 04       		.uleb128 0x4
 571 005e 49000000 		.4byte	.LASF8
 572 0062 02       		.byte	0x2
 573 0063 3F       		.byte	0x3f
 574 0064 68000000 		.4byte	0x68
 575 0068 03       		.uleb128 0x3
 576 0069 04       		.byte	0x4
 577 006a 05       		.byte	0x5
 578 006b 53000000 		.4byte	.LASF7
 579 006f 04       		.uleb128 0x4
 580 0070 85010000 		.4byte	.LASF9
 581 0074 02       		.byte	0x2
 582 0075 41       		.byte	0x41
 583 0076 7A000000 		.4byte	0x7a
 584 007a 03       		.uleb128 0x3
 585 007b 04       		.byte	0x4
 586 007c 07       		.byte	0x7
 587 007d 4C010000 		.4byte	.LASF10
 588 0081 03       		.uleb128 0x3
 589 0082 08       		.byte	0x8
 590 0083 07       		.byte	0x7
 591 0084 3E020000 		.4byte	.LASF11
 592 0088 04       		.uleb128 0x4
 593 0089 A2000000 		.4byte	.LASF12
 594 008d 03       		.byte	0x3
 595 008e 2C       		.byte	0x2c
 596 008f 5D000000 		.4byte	0x5d
 597 0093 04       		.uleb128 0x4
 598 0094 EB020000 		.4byte	.LASF13
 599 0098 03       		.byte	0x3
 600 0099 30       		.byte	0x30
 601 009a 6F000000 		.4byte	0x6f
 602 009e 03       		.uleb128 0x3
 603 009f 04       		.byte	0x4
 604 00a0 04       		.byte	0x4
 605 00a1 AA000000 		.4byte	.LASF14
 606 00a5 03       		.uleb128 0x3
 607 00a6 08       		.byte	0x8
 608 00a7 04       		.byte	0x4
 609 00a8 7E010000 		.4byte	.LASF15
 610 00ac 03       		.uleb128 0x3
 611 00ad 01       		.byte	0x1
 612 00ae 08       		.byte	0x8
 613 00af AE020000 		.4byte	.LASF16
 614 00b3 03       		.uleb128 0x3
 615 00b4 04       		.byte	0x4
 616 00b5 07       		.byte	0x7
 617 00b6 7F020000 		.4byte	.LASF17
 618 00ba 05       		.uleb128 0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 24


 619 00bb 04       		.byte	0x4
 620 00bc 04       		.uleb128 0x4
 621 00bd 93000000 		.4byte	.LASF18
 622 00c1 04       		.byte	0x4
 623 00c2 4D       		.byte	0x4d
 624 00c3 C7000000 		.4byte	0xc7
 625 00c7 06       		.uleb128 0x6
 626 00c8 04       		.byte	0x4
 627 00c9 CD000000 		.4byte	0xcd
 628 00cd 07       		.uleb128 0x7
 629 00ce D8000000 		.4byte	0xd8
 630 00d2 08       		.uleb128 0x8
 631 00d3 BA000000 		.4byte	0xba
 632 00d7 00       		.byte	0
 633 00d8 04       		.uleb128 0x4
 634 00d9 B3020000 		.4byte	.LASF19
 635 00dd 05       		.byte	0x5
 636 00de 61       		.byte	0x61
 637 00df 93000000 		.4byte	0x93
 638 00e3 04       		.uleb128 0x4
 639 00e4 03030000 		.4byte	.LASF20
 640 00e8 05       		.byte	0x5
 641 00e9 62       		.byte	0x62
 642 00ea 68000000 		.4byte	0x68
 643 00ee 04       		.uleb128 0x4
 644 00ef 63030000 		.4byte	.LASF21
 645 00f3 05       		.byte	0x5
 646 00f4 63       		.byte	0x63
 647 00f5 7A000000 		.4byte	0x7a
 648 00f9 04       		.uleb128 0x4
 649 00fa 3E000000 		.4byte	.LASF22
 650 00fe 05       		.byte	0x5
 651 00ff 69       		.byte	0x69
 652 0100 93000000 		.4byte	0x93
 653 0104 06       		.uleb128 0x6
 654 0105 04       		.byte	0x4
 655 0106 D8000000 		.4byte	0xd8
 656 010a 09       		.uleb128 0x9
 657 010b 0E030000 		.4byte	.LASF39
 658 010f 01       		.byte	0x1
 659 0110 0801     		.2byte	0x108
 660 0112 00000000 		.4byte	.LFB67
 661 0116 1A000000 		.4byte	.LFE67-.LFB67
 662 011a 01       		.uleb128 0x1
 663 011b 9C       		.byte	0x9c
 664 011c 0A       		.uleb128 0xa
 665 011d 6F030000 		.4byte	.LASF40
 666 0121 01       		.byte	0x1
 667 0122 D4       		.byte	0xd4
 668 0123 04010000 		.4byte	0x104
 669 0127 00000000 		.4byte	.LFB64
 670 012b 20000000 		.4byte	.LFE64-.LFB64
 671 012f 01       		.uleb128 0x1
 672 0130 9C       		.byte	0x9c
 673 0131 5F010000 		.4byte	0x15f
 674 0135 0B       		.uleb128 0xb
 675 0136 31020000 		.4byte	.LASF23
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 25


 676 013a 01       		.byte	0x1
 677 013b D4       		.byte	0xd4
 678 013c 04010000 		.4byte	0x104
 679 0140 00000000 		.4byte	.LLST0
 680 0144 0C       		.uleb128 0xc
 681 0145 25000000 		.4byte	.LASF24
 682 0149 01       		.byte	0x1
 683 014a D4       		.byte	0xd4
 684 014b BC000000 		.4byte	0xbc
 685 014f 01       		.uleb128 0x1
 686 0150 51       		.byte	0x51
 687 0151 0C       		.uleb128 0xc
 688 0152 F2010000 		.4byte	.LASF25
 689 0156 01       		.byte	0x1
 690 0157 D4       		.byte	0xd4
 691 0158 BA000000 		.4byte	0xba
 692 015c 01       		.uleb128 0x1
 693 015d 52       		.byte	0x52
 694 015e 00       		.byte	0
 695 015f 0D       		.uleb128 0xd
 696 0160 BF020000 		.4byte	.LASF26
 697 0164 01       		.byte	0x1
 698 0165 F4       		.byte	0xf4
 699 0166 00000000 		.4byte	.LFB66
 700 016a 24000000 		.4byte	.LFE66-.LFB66
 701 016e 01       		.uleb128 0x1
 702 016f 9C       		.byte	0x9c
 703 0170 0E       		.uleb128 0xe
 704 0171 2C000000 		.4byte	.LASF27
 705 0175 01       		.byte	0x1
 706 0176 6701     		.2byte	0x167
 707 0178 00000000 		.4byte	.LFB69
 708 017c 02000000 		.4byte	.LFE69-.LFB69
 709 0180 01       		.uleb128 0x1
 710 0181 9C       		.byte	0x9c
 711 0182 0E       		.uleb128 0xe
 712 0183 26020000 		.4byte	.LASF28
 713 0187 01       		.byte	0x1
 714 0188 6F01     		.2byte	0x16f
 715 018a 00000000 		.4byte	.LFB70
 716 018e 18000000 		.4byte	.LFE70-.LFB70
 717 0192 01       		.uleb128 0x1
 718 0193 9C       		.byte	0x9c
 719 0194 0F       		.uleb128 0xf
 720 0195 7C000000 		.4byte	.LASF41
 721 0199 01       		.byte	0x1
 722 019a 9901     		.2byte	0x199
 723 019c 93000000 		.4byte	0x93
 724 01a0 00000000 		.4byte	.LFB73
 725 01a4 10000000 		.4byte	.LFE73-.LFB73
 726 01a8 01       		.uleb128 0x1
 727 01a9 9C       		.byte	0x9c
 728 01aa 10       		.uleb128 0x10
 729 01ab 55020000 		.4byte	.LASF42
 730 01af 01       		.byte	0x1
 731 01b0 E6       		.byte	0xe6
 732 01b1 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 26


 733 01b5 08000000 		.4byte	.LFE65-.LFB65
 734 01b9 01       		.uleb128 0x1
 735 01ba 9C       		.byte	0x9c
 736 01bb C9010000 		.4byte	0x1c9
 737 01bf 11       		.uleb128 0x11
 738 01c0 06000000 		.4byte	.LVL6
 739 01c4 94010000 		.4byte	0x194
 740 01c8 00       		.byte	0
 741 01c9 12       		.uleb128 0x12
 742 01ca 12000000 		.4byte	.LASF29
 743 01ce 01       		.byte	0x1
 744 01cf 7B01     		.2byte	0x17b
 745 01d1 00000000 		.4byte	.LFB71
 746 01d5 1C000000 		.4byte	.LFE71-.LFB71
 747 01d9 01       		.uleb128 0x1
 748 01da 9C       		.byte	0x9c
 749 01db E9010000 		.4byte	0x1e9
 750 01df 11       		.uleb128 0x11
 751 01e0 06000000 		.4byte	.LVL7
 752 01e4 94010000 		.4byte	0x194
 753 01e8 00       		.byte	0
 754 01e9 12       		.uleb128 0x12
 755 01ea 96020000 		.4byte	.LASF30
 756 01ee 01       		.byte	0x1
 757 01ef AA01     		.2byte	0x1aa
 758 01f1 00000000 		.4byte	.LFB74
 759 01f5 06000000 		.4byte	.LFE74-.LFB74
 760 01f9 01       		.uleb128 0x1
 761 01fa 9C       		.byte	0x9c
 762 01fb 10020000 		.4byte	0x210
 763 01ff 13       		.uleb128 0x13
 764 0200 F4020000 		.4byte	.LASF31
 765 0204 01       		.byte	0x1
 766 0205 AA01     		.2byte	0x1aa
 767 0207 93000000 		.4byte	0x93
 768 020b 5F000000 		.4byte	.LLST1
 769 020f 00       		.byte	0
 770 0210 12       		.uleb128 0x12
 771 0211 D9020000 		.4byte	.LASF32
 772 0215 01       		.byte	0x1
 773 0216 8E01     		.2byte	0x18e
 774 0218 00000000 		.4byte	.LFB72
 775 021c 18000000 		.4byte	.LFE72-.LFB72
 776 0220 01       		.uleb128 0x1
 777 0221 9C       		.byte	0x9c
 778 0222 36020000 		.4byte	0x236
 779 0226 14       		.uleb128 0x14
 780 0227 12000000 		.4byte	.LVL10
 781 022b E9010000 		.4byte	0x1e9
 782 022f 15       		.uleb128 0x15
 783 0230 01       		.uleb128 0x1
 784 0231 50       		.byte	0x50
 785 0232 01       		.uleb128 0x1
 786 0233 30       		.byte	0x30
 787 0234 00       		.byte	0
 788 0235 00       		.byte	0
 789 0236 0E       		.uleb128 0xe
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 27


 790 0237 69000000 		.4byte	.LASF33
 791 023b 01       		.byte	0x1
 792 023c B801     		.2byte	0x1b8
 793 023e 00000000 		.4byte	.LFB75
 794 0242 44000000 		.4byte	.LFE75-.LFB75
 795 0246 01       		.uleb128 0x1
 796 0247 9C       		.byte	0x9c
 797 0248 12       		.uleb128 0x12
 798 0249 12020000 		.4byte	.LASF34
 799 024d 01       		.byte	0x1
 800 024e DD01     		.2byte	0x1dd
 801 0250 00000000 		.4byte	.LFB76
 802 0254 20000000 		.4byte	.LFE76-.LFB76
 803 0258 01       		.uleb128 0x1
 804 0259 9C       		.byte	0x9c
 805 025a 80020000 		.4byte	0x280
 806 025e 11       		.uleb128 0x11
 807 025f 06000000 		.4byte	.LVL11
 808 0263 94010000 		.4byte	0x194
 809 0267 11       		.uleb128 0x11
 810 0268 0A000000 		.4byte	.LVL12
 811 026c EA020000 		.4byte	0x2ea
 812 0270 14       		.uleb128 0x14
 813 0271 1A000000 		.4byte	.LVL13
 814 0275 E9010000 		.4byte	0x1e9
 815 0279 15       		.uleb128 0x15
 816 027a 01       		.uleb128 0x1
 817 027b 50       		.byte	0x50
 818 027c 01       		.uleb128 0x1
 819 027d 30       		.byte	0x30
 820 027e 00       		.byte	0
 821 027f 00       		.byte	0
 822 0280 0E       		.uleb128 0xe
 823 0281 66020000 		.4byte	.LASF35
 824 0285 01       		.byte	0x1
 825 0286 8D02     		.2byte	0x28d
 826 0288 00000000 		.4byte	.LFB77
 827 028c 18000000 		.4byte	.LFE77-.LFB77
 828 0290 01       		.uleb128 0x1
 829 0291 9C       		.byte	0x9c
 830 0292 16       		.uleb128 0x16
 831 0293 4F030000 		.4byte	.LASF43
 832 0297 01       		.byte	0x1
 833 0298 1C01     		.2byte	0x11c
 834 029a E3000000 		.4byte	0xe3
 835 029e 00000000 		.4byte	.LFB68
 836 02a2 30000000 		.4byte	.LFE68-.LFB68
 837 02a6 01       		.uleb128 0x1
 838 02a7 9C       		.byte	0x9c
 839 02a8 C8020000 		.4byte	0x2c8
 840 02ac 11       		.uleb128 0x11
 841 02ad 18000000 		.4byte	.LVL14
 842 02b1 80020000 		.4byte	0x280
 843 02b5 11       		.uleb128 0x11
 844 02b6 22000000 		.4byte	.LVL15
 845 02ba 0A010000 		.4byte	0x10a
 846 02be 11       		.uleb128 0x11
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 28


 847 02bf 26000000 		.4byte	.LVL16
 848 02c3 AA010000 		.4byte	0x1aa
 849 02c7 00       		.byte	0
 850 02c8 17       		.uleb128 0x17
 851 02c9 00000000 		.4byte	.LASF44
 852 02cd 01       		.byte	0x1
 853 02ce 91       		.byte	0x91
 854 02cf EE000000 		.4byte	0xee
 855 02d3 05       		.uleb128 0x5
 856 02d4 03       		.byte	0x3
 857 02d5 00000000 		.4byte	uxCriticalNesting
 858 02d9 18       		.uleb128 0x18
 859 02da 71010000 		.4byte	.LASF45
 860 02de 06       		.byte	0x6
 861 02df 5506     		.2byte	0x655
 862 02e1 E5020000 		.4byte	0x2e5
 863 02e5 19       		.uleb128 0x19
 864 02e6 88000000 		.4byte	0x88
 865 02ea 1A       		.uleb128 0x1a
 866 02eb FF010000 		.4byte	.LASF46
 867 02ef FF010000 		.4byte	.LASF46
 868 02f3 07       		.byte	0x7
 869 02f4 3A07     		.2byte	0x73a
 870 02f6 00       		.byte	0
 871              		.section	.debug_abbrev,"",%progbits
 872              	.Ldebug_abbrev0:
 873 0000 01       		.uleb128 0x1
 874 0001 11       		.uleb128 0x11
 875 0002 01       		.byte	0x1
 876 0003 25       		.uleb128 0x25
 877 0004 0E       		.uleb128 0xe
 878 0005 13       		.uleb128 0x13
 879 0006 0B       		.uleb128 0xb
 880 0007 03       		.uleb128 0x3
 881 0008 0E       		.uleb128 0xe
 882 0009 1B       		.uleb128 0x1b
 883 000a 0E       		.uleb128 0xe
 884 000b 55       		.uleb128 0x55
 885 000c 17       		.uleb128 0x17
 886 000d 11       		.uleb128 0x11
 887 000e 01       		.uleb128 0x1
 888 000f 10       		.uleb128 0x10
 889 0010 17       		.uleb128 0x17
 890 0011 00       		.byte	0
 891 0012 00       		.byte	0
 892 0013 02       		.uleb128 0x2
 893 0014 24       		.uleb128 0x24
 894 0015 00       		.byte	0
 895 0016 0B       		.uleb128 0xb
 896 0017 0B       		.uleb128 0xb
 897 0018 3E       		.uleb128 0x3e
 898 0019 0B       		.uleb128 0xb
 899 001a 03       		.uleb128 0x3
 900 001b 08       		.uleb128 0x8
 901 001c 00       		.byte	0
 902 001d 00       		.byte	0
 903 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 29


 904 001f 24       		.uleb128 0x24
 905 0020 00       		.byte	0
 906 0021 0B       		.uleb128 0xb
 907 0022 0B       		.uleb128 0xb
 908 0023 3E       		.uleb128 0x3e
 909 0024 0B       		.uleb128 0xb
 910 0025 03       		.uleb128 0x3
 911 0026 0E       		.uleb128 0xe
 912 0027 00       		.byte	0
 913 0028 00       		.byte	0
 914 0029 04       		.uleb128 0x4
 915 002a 16       		.uleb128 0x16
 916 002b 00       		.byte	0
 917 002c 03       		.uleb128 0x3
 918 002d 0E       		.uleb128 0xe
 919 002e 3A       		.uleb128 0x3a
 920 002f 0B       		.uleb128 0xb
 921 0030 3B       		.uleb128 0x3b
 922 0031 0B       		.uleb128 0xb
 923 0032 49       		.uleb128 0x49
 924 0033 13       		.uleb128 0x13
 925 0034 00       		.byte	0
 926 0035 00       		.byte	0
 927 0036 05       		.uleb128 0x5
 928 0037 0F       		.uleb128 0xf
 929 0038 00       		.byte	0
 930 0039 0B       		.uleb128 0xb
 931 003a 0B       		.uleb128 0xb
 932 003b 00       		.byte	0
 933 003c 00       		.byte	0
 934 003d 06       		.uleb128 0x6
 935 003e 0F       		.uleb128 0xf
 936 003f 00       		.byte	0
 937 0040 0B       		.uleb128 0xb
 938 0041 0B       		.uleb128 0xb
 939 0042 49       		.uleb128 0x49
 940 0043 13       		.uleb128 0x13
 941 0044 00       		.byte	0
 942 0045 00       		.byte	0
 943 0046 07       		.uleb128 0x7
 944 0047 15       		.uleb128 0x15
 945 0048 01       		.byte	0x1
 946 0049 27       		.uleb128 0x27
 947 004a 19       		.uleb128 0x19
 948 004b 01       		.uleb128 0x1
 949 004c 13       		.uleb128 0x13
 950 004d 00       		.byte	0
 951 004e 00       		.byte	0
 952 004f 08       		.uleb128 0x8
 953 0050 05       		.uleb128 0x5
 954 0051 00       		.byte	0
 955 0052 49       		.uleb128 0x49
 956 0053 13       		.uleb128 0x13
 957 0054 00       		.byte	0
 958 0055 00       		.byte	0
 959 0056 09       		.uleb128 0x9
 960 0057 2E       		.uleb128 0x2e
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 30


 961 0058 00       		.byte	0
 962 0059 03       		.uleb128 0x3
 963 005a 0E       		.uleb128 0xe
 964 005b 3A       		.uleb128 0x3a
 965 005c 0B       		.uleb128 0xb
 966 005d 3B       		.uleb128 0x3b
 967 005e 05       		.uleb128 0x5
 968 005f 27       		.uleb128 0x27
 969 0060 19       		.uleb128 0x19
 970 0061 11       		.uleb128 0x11
 971 0062 01       		.uleb128 0x1
 972 0063 12       		.uleb128 0x12
 973 0064 06       		.uleb128 0x6
 974 0065 40       		.uleb128 0x40
 975 0066 18       		.uleb128 0x18
 976 0067 9742     		.uleb128 0x2117
 977 0069 19       		.uleb128 0x19
 978 006a 00       		.byte	0
 979 006b 00       		.byte	0
 980 006c 0A       		.uleb128 0xa
 981 006d 2E       		.uleb128 0x2e
 982 006e 01       		.byte	0x1
 983 006f 3F       		.uleb128 0x3f
 984 0070 19       		.uleb128 0x19
 985 0071 03       		.uleb128 0x3
 986 0072 0E       		.uleb128 0xe
 987 0073 3A       		.uleb128 0x3a
 988 0074 0B       		.uleb128 0xb
 989 0075 3B       		.uleb128 0x3b
 990 0076 0B       		.uleb128 0xb
 991 0077 27       		.uleb128 0x27
 992 0078 19       		.uleb128 0x19
 993 0079 49       		.uleb128 0x49
 994 007a 13       		.uleb128 0x13
 995 007b 11       		.uleb128 0x11
 996 007c 01       		.uleb128 0x1
 997 007d 12       		.uleb128 0x12
 998 007e 06       		.uleb128 0x6
 999 007f 40       		.uleb128 0x40
 1000 0080 18       		.uleb128 0x18
 1001 0081 9742     		.uleb128 0x2117
 1002 0083 19       		.uleb128 0x19
 1003 0084 01       		.uleb128 0x1
 1004 0085 13       		.uleb128 0x13
 1005 0086 00       		.byte	0
 1006 0087 00       		.byte	0
 1007 0088 0B       		.uleb128 0xb
 1008 0089 05       		.uleb128 0x5
 1009 008a 00       		.byte	0
 1010 008b 03       		.uleb128 0x3
 1011 008c 0E       		.uleb128 0xe
 1012 008d 3A       		.uleb128 0x3a
 1013 008e 0B       		.uleb128 0xb
 1014 008f 3B       		.uleb128 0x3b
 1015 0090 0B       		.uleb128 0xb
 1016 0091 49       		.uleb128 0x49
 1017 0092 13       		.uleb128 0x13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 31


 1018 0093 02       		.uleb128 0x2
 1019 0094 17       		.uleb128 0x17
 1020 0095 00       		.byte	0
 1021 0096 00       		.byte	0
 1022 0097 0C       		.uleb128 0xc
 1023 0098 05       		.uleb128 0x5
 1024 0099 00       		.byte	0
 1025 009a 03       		.uleb128 0x3
 1026 009b 0E       		.uleb128 0xe
 1027 009c 3A       		.uleb128 0x3a
 1028 009d 0B       		.uleb128 0xb
 1029 009e 3B       		.uleb128 0x3b
 1030 009f 0B       		.uleb128 0xb
 1031 00a0 49       		.uleb128 0x49
 1032 00a1 13       		.uleb128 0x13
 1033 00a2 02       		.uleb128 0x2
 1034 00a3 18       		.uleb128 0x18
 1035 00a4 00       		.byte	0
 1036 00a5 00       		.byte	0
 1037 00a6 0D       		.uleb128 0xd
 1038 00a7 2E       		.uleb128 0x2e
 1039 00a8 00       		.byte	0
 1040 00a9 3F       		.uleb128 0x3f
 1041 00aa 19       		.uleb128 0x19
 1042 00ab 03       		.uleb128 0x3
 1043 00ac 0E       		.uleb128 0xe
 1044 00ad 3A       		.uleb128 0x3a
 1045 00ae 0B       		.uleb128 0xb
 1046 00af 3B       		.uleb128 0x3b
 1047 00b0 0B       		.uleb128 0xb
 1048 00b1 27       		.uleb128 0x27
 1049 00b2 19       		.uleb128 0x19
 1050 00b3 11       		.uleb128 0x11
 1051 00b4 01       		.uleb128 0x1
 1052 00b5 12       		.uleb128 0x12
 1053 00b6 06       		.uleb128 0x6
 1054 00b7 40       		.uleb128 0x40
 1055 00b8 18       		.uleb128 0x18
 1056 00b9 9742     		.uleb128 0x2117
 1057 00bb 19       		.uleb128 0x19
 1058 00bc 00       		.byte	0
 1059 00bd 00       		.byte	0
 1060 00be 0E       		.uleb128 0xe
 1061 00bf 2E       		.uleb128 0x2e
 1062 00c0 00       		.byte	0
 1063 00c1 3F       		.uleb128 0x3f
 1064 00c2 19       		.uleb128 0x19
 1065 00c3 03       		.uleb128 0x3
 1066 00c4 0E       		.uleb128 0xe
 1067 00c5 3A       		.uleb128 0x3a
 1068 00c6 0B       		.uleb128 0xb
 1069 00c7 3B       		.uleb128 0x3b
 1070 00c8 05       		.uleb128 0x5
 1071 00c9 27       		.uleb128 0x27
 1072 00ca 19       		.uleb128 0x19
 1073 00cb 11       		.uleb128 0x11
 1074 00cc 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 32


 1075 00cd 12       		.uleb128 0x12
 1076 00ce 06       		.uleb128 0x6
 1077 00cf 40       		.uleb128 0x40
 1078 00d0 18       		.uleb128 0x18
 1079 00d1 9742     		.uleb128 0x2117
 1080 00d3 19       		.uleb128 0x19
 1081 00d4 00       		.byte	0
 1082 00d5 00       		.byte	0
 1083 00d6 0F       		.uleb128 0xf
 1084 00d7 2E       		.uleb128 0x2e
 1085 00d8 00       		.byte	0
 1086 00d9 3F       		.uleb128 0x3f
 1087 00da 19       		.uleb128 0x19
 1088 00db 03       		.uleb128 0x3
 1089 00dc 0E       		.uleb128 0xe
 1090 00dd 3A       		.uleb128 0x3a
 1091 00de 0B       		.uleb128 0xb
 1092 00df 3B       		.uleb128 0x3b
 1093 00e0 05       		.uleb128 0x5
 1094 00e1 27       		.uleb128 0x27
 1095 00e2 19       		.uleb128 0x19
 1096 00e3 49       		.uleb128 0x49
 1097 00e4 13       		.uleb128 0x13
 1098 00e5 11       		.uleb128 0x11
 1099 00e6 01       		.uleb128 0x1
 1100 00e7 12       		.uleb128 0x12
 1101 00e8 06       		.uleb128 0x6
 1102 00e9 40       		.uleb128 0x40
 1103 00ea 18       		.uleb128 0x18
 1104 00eb 9742     		.uleb128 0x2117
 1105 00ed 19       		.uleb128 0x19
 1106 00ee 00       		.byte	0
 1107 00ef 00       		.byte	0
 1108 00f0 10       		.uleb128 0x10
 1109 00f1 2E       		.uleb128 0x2e
 1110 00f2 01       		.byte	0x1
 1111 00f3 03       		.uleb128 0x3
 1112 00f4 0E       		.uleb128 0xe
 1113 00f5 3A       		.uleb128 0x3a
 1114 00f6 0B       		.uleb128 0xb
 1115 00f7 3B       		.uleb128 0x3b
 1116 00f8 0B       		.uleb128 0xb
 1117 00f9 27       		.uleb128 0x27
 1118 00fa 19       		.uleb128 0x19
 1119 00fb 8701     		.uleb128 0x87
 1120 00fd 19       		.uleb128 0x19
 1121 00fe 11       		.uleb128 0x11
 1122 00ff 01       		.uleb128 0x1
 1123 0100 12       		.uleb128 0x12
 1124 0101 06       		.uleb128 0x6
 1125 0102 40       		.uleb128 0x40
 1126 0103 18       		.uleb128 0x18
 1127 0104 9742     		.uleb128 0x2117
 1128 0106 19       		.uleb128 0x19
 1129 0107 01       		.uleb128 0x1
 1130 0108 13       		.uleb128 0x13
 1131 0109 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 33


 1132 010a 00       		.byte	0
 1133 010b 11       		.uleb128 0x11
 1134 010c 898201   		.uleb128 0x4109
 1135 010f 00       		.byte	0
 1136 0110 11       		.uleb128 0x11
 1137 0111 01       		.uleb128 0x1
 1138 0112 31       		.uleb128 0x31
 1139 0113 13       		.uleb128 0x13
 1140 0114 00       		.byte	0
 1141 0115 00       		.byte	0
 1142 0116 12       		.uleb128 0x12
 1143 0117 2E       		.uleb128 0x2e
 1144 0118 01       		.byte	0x1
 1145 0119 3F       		.uleb128 0x3f
 1146 011a 19       		.uleb128 0x19
 1147 011b 03       		.uleb128 0x3
 1148 011c 0E       		.uleb128 0xe
 1149 011d 3A       		.uleb128 0x3a
 1150 011e 0B       		.uleb128 0xb
 1151 011f 3B       		.uleb128 0x3b
 1152 0120 05       		.uleb128 0x5
 1153 0121 27       		.uleb128 0x27
 1154 0122 19       		.uleb128 0x19
 1155 0123 11       		.uleb128 0x11
 1156 0124 01       		.uleb128 0x1
 1157 0125 12       		.uleb128 0x12
 1158 0126 06       		.uleb128 0x6
 1159 0127 40       		.uleb128 0x40
 1160 0128 18       		.uleb128 0x18
 1161 0129 9742     		.uleb128 0x2117
 1162 012b 19       		.uleb128 0x19
 1163 012c 01       		.uleb128 0x1
 1164 012d 13       		.uleb128 0x13
 1165 012e 00       		.byte	0
 1166 012f 00       		.byte	0
 1167 0130 13       		.uleb128 0x13
 1168 0131 05       		.uleb128 0x5
 1169 0132 00       		.byte	0
 1170 0133 03       		.uleb128 0x3
 1171 0134 0E       		.uleb128 0xe
 1172 0135 3A       		.uleb128 0x3a
 1173 0136 0B       		.uleb128 0xb
 1174 0137 3B       		.uleb128 0x3b
 1175 0138 05       		.uleb128 0x5
 1176 0139 49       		.uleb128 0x49
 1177 013a 13       		.uleb128 0x13
 1178 013b 02       		.uleb128 0x2
 1179 013c 17       		.uleb128 0x17
 1180 013d 00       		.byte	0
 1181 013e 00       		.byte	0
 1182 013f 14       		.uleb128 0x14
 1183 0140 898201   		.uleb128 0x4109
 1184 0143 01       		.byte	0x1
 1185 0144 11       		.uleb128 0x11
 1186 0145 01       		.uleb128 0x1
 1187 0146 31       		.uleb128 0x31
 1188 0147 13       		.uleb128 0x13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 34


 1189 0148 00       		.byte	0
 1190 0149 00       		.byte	0
 1191 014a 15       		.uleb128 0x15
 1192 014b 8A8201   		.uleb128 0x410a
 1193 014e 00       		.byte	0
 1194 014f 02       		.uleb128 0x2
 1195 0150 18       		.uleb128 0x18
 1196 0151 9142     		.uleb128 0x2111
 1197 0153 18       		.uleb128 0x18
 1198 0154 00       		.byte	0
 1199 0155 00       		.byte	0
 1200 0156 16       		.uleb128 0x16
 1201 0157 2E       		.uleb128 0x2e
 1202 0158 01       		.byte	0x1
 1203 0159 3F       		.uleb128 0x3f
 1204 015a 19       		.uleb128 0x19
 1205 015b 03       		.uleb128 0x3
 1206 015c 0E       		.uleb128 0xe
 1207 015d 3A       		.uleb128 0x3a
 1208 015e 0B       		.uleb128 0xb
 1209 015f 3B       		.uleb128 0x3b
 1210 0160 05       		.uleb128 0x5
 1211 0161 27       		.uleb128 0x27
 1212 0162 19       		.uleb128 0x19
 1213 0163 49       		.uleb128 0x49
 1214 0164 13       		.uleb128 0x13
 1215 0165 8701     		.uleb128 0x87
 1216 0167 19       		.uleb128 0x19
 1217 0168 11       		.uleb128 0x11
 1218 0169 01       		.uleb128 0x1
 1219 016a 12       		.uleb128 0x12
 1220 016b 06       		.uleb128 0x6
 1221 016c 40       		.uleb128 0x40
 1222 016d 18       		.uleb128 0x18
 1223 016e 9742     		.uleb128 0x2117
 1224 0170 19       		.uleb128 0x19
 1225 0171 01       		.uleb128 0x1
 1226 0172 13       		.uleb128 0x13
 1227 0173 00       		.byte	0
 1228 0174 00       		.byte	0
 1229 0175 17       		.uleb128 0x17
 1230 0176 34       		.uleb128 0x34
 1231 0177 00       		.byte	0
 1232 0178 03       		.uleb128 0x3
 1233 0179 0E       		.uleb128 0xe
 1234 017a 3A       		.uleb128 0x3a
 1235 017b 0B       		.uleb128 0xb
 1236 017c 3B       		.uleb128 0x3b
 1237 017d 0B       		.uleb128 0xb
 1238 017e 49       		.uleb128 0x49
 1239 017f 13       		.uleb128 0x13
 1240 0180 02       		.uleb128 0x2
 1241 0181 18       		.uleb128 0x18
 1242 0182 00       		.byte	0
 1243 0183 00       		.byte	0
 1244 0184 18       		.uleb128 0x18
 1245 0185 34       		.uleb128 0x34
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 35


 1246 0186 00       		.byte	0
 1247 0187 03       		.uleb128 0x3
 1248 0188 0E       		.uleb128 0xe
 1249 0189 3A       		.uleb128 0x3a
 1250 018a 0B       		.uleb128 0xb
 1251 018b 3B       		.uleb128 0x3b
 1252 018c 05       		.uleb128 0x5
 1253 018d 49       		.uleb128 0x49
 1254 018e 13       		.uleb128 0x13
 1255 018f 3F       		.uleb128 0x3f
 1256 0190 19       		.uleb128 0x19
 1257 0191 3C       		.uleb128 0x3c
 1258 0192 19       		.uleb128 0x19
 1259 0193 00       		.byte	0
 1260 0194 00       		.byte	0
 1261 0195 19       		.uleb128 0x19
 1262 0196 35       		.uleb128 0x35
 1263 0197 00       		.byte	0
 1264 0198 49       		.uleb128 0x49
 1265 0199 13       		.uleb128 0x13
 1266 019a 00       		.byte	0
 1267 019b 00       		.byte	0
 1268 019c 1A       		.uleb128 0x1a
 1269 019d 2E       		.uleb128 0x2e
 1270 019e 00       		.byte	0
 1271 019f 3F       		.uleb128 0x3f
 1272 01a0 19       		.uleb128 0x19
 1273 01a1 3C       		.uleb128 0x3c
 1274 01a2 19       		.uleb128 0x19
 1275 01a3 6E       		.uleb128 0x6e
 1276 01a4 0E       		.uleb128 0xe
 1277 01a5 03       		.uleb128 0x3
 1278 01a6 0E       		.uleb128 0xe
 1279 01a7 3A       		.uleb128 0x3a
 1280 01a8 0B       		.uleb128 0xb
 1281 01a9 3B       		.uleb128 0x3b
 1282 01aa 05       		.uleb128 0x5
 1283 01ab 00       		.byte	0
 1284 01ac 00       		.byte	0
 1285 01ad 00       		.byte	0
 1286              		.section	.debug_loc,"",%progbits
 1287              	.Ldebug_loc0:
 1288              	.LLST0:
 1289 0000 00000000 		.4byte	.LVL0
 1290 0004 00000000 		.4byte	.LVL0
 1291 0008 0100     		.2byte	0x1
 1292 000a 50       		.byte	0x50
 1293 000b 00000000 		.4byte	.LVL0
 1294 000f 08000000 		.4byte	.LVL1
 1295 0013 0300     		.2byte	0x3
 1296 0015 70       		.byte	0x70
 1297 0016 7C       		.sleb128 -4
 1298 0017 9F       		.byte	0x9f
 1299 0018 08000000 		.4byte	.LVL1
 1300 001c 0C000000 		.4byte	.LVL2
 1301 0020 0300     		.2byte	0x3
 1302 0022 70       		.byte	0x70
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 36


 1303 0023 78       		.sleb128 -8
 1304 0024 9F       		.byte	0x9f
 1305 0025 0C000000 		.4byte	.LVL2
 1306 0029 12000000 		.4byte	.LVL3
 1307 002d 0300     		.2byte	0x3
 1308 002f 70       		.byte	0x70
 1309 0030 74       		.sleb128 -12
 1310 0031 9F       		.byte	0x9f
 1311 0032 12000000 		.4byte	.LVL3
 1312 0036 16000000 		.4byte	.LVL4
 1313 003a 0300     		.2byte	0x3
 1314 003c 70       		.byte	0x70
 1315 003d 60       		.sleb128 -32
 1316 003e 9F       		.byte	0x9f
 1317 003f 16000000 		.4byte	.LVL4
 1318 0043 18000000 		.4byte	.LVL5
 1319 0047 0300     		.2byte	0x3
 1320 0049 70       		.byte	0x70
 1321 004a 40       		.sleb128 -64
 1322 004b 9F       		.byte	0x9f
 1323 004c 18000000 		.4byte	.LVL5
 1324 0050 20000000 		.4byte	.LFE64
 1325 0054 0100     		.2byte	0x1
 1326 0056 50       		.byte	0x50
 1327 0057 00000000 		.4byte	0
 1328 005b 00000000 		.4byte	0
 1329              	.LLST1:
 1330 005f 00000000 		.4byte	.LVL8
 1331 0063 06000000 		.4byte	.LVL9
 1332 0067 0100     		.2byte	0x1
 1333 0069 50       		.byte	0x50
 1334 006a 06000000 		.4byte	.LVL9
 1335 006e 06000000 		.4byte	.LFE74
 1336 0072 0400     		.2byte	0x4
 1337 0074 F3       		.byte	0xf3
 1338 0075 01       		.uleb128 0x1
 1339 0076 50       		.byte	0x50
 1340 0077 9F       		.byte	0x9f
 1341 0078 00000000 		.4byte	0
 1342 007c 00000000 		.4byte	0
 1343              		.section	.debug_aranges,"",%progbits
 1344 0000 84000000 		.4byte	0x84
 1345 0004 0200     		.2byte	0x2
 1346 0006 00000000 		.4byte	.Ldebug_info0
 1347 000a 04       		.byte	0x4
 1348 000b 00       		.byte	0
 1349 000c 0000     		.2byte	0
 1350 000e 0000     		.2byte	0
 1351 0010 00000000 		.4byte	.LFB67
 1352 0014 1A000000 		.4byte	.LFE67-.LFB67
 1353 0018 00000000 		.4byte	.LFB64
 1354 001c 20000000 		.4byte	.LFE64-.LFB64
 1355 0020 00000000 		.4byte	.LFB66
 1356 0024 24000000 		.4byte	.LFE66-.LFB66
 1357 0028 00000000 		.4byte	.LFB69
 1358 002c 02000000 		.4byte	.LFE69-.LFB69
 1359 0030 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 37


 1360 0034 18000000 		.4byte	.LFE70-.LFB70
 1361 0038 00000000 		.4byte	.LFB73
 1362 003c 10000000 		.4byte	.LFE73-.LFB73
 1363 0040 00000000 		.4byte	.LFB65
 1364 0044 08000000 		.4byte	.LFE65-.LFB65
 1365 0048 00000000 		.4byte	.LFB71
 1366 004c 1C000000 		.4byte	.LFE71-.LFB71
 1367 0050 00000000 		.4byte	.LFB74
 1368 0054 06000000 		.4byte	.LFE74-.LFB74
 1369 0058 00000000 		.4byte	.LFB72
 1370 005c 18000000 		.4byte	.LFE72-.LFB72
 1371 0060 00000000 		.4byte	.LFB75
 1372 0064 44000000 		.4byte	.LFE75-.LFB75
 1373 0068 00000000 		.4byte	.LFB76
 1374 006c 20000000 		.4byte	.LFE76-.LFB76
 1375 0070 00000000 		.4byte	.LFB77
 1376 0074 18000000 		.4byte	.LFE77-.LFB77
 1377 0078 00000000 		.4byte	.LFB68
 1378 007c 30000000 		.4byte	.LFE68-.LFB68
 1379 0080 00000000 		.4byte	0
 1380 0084 00000000 		.4byte	0
 1381              		.section	.debug_ranges,"",%progbits
 1382              	.Ldebug_ranges0:
 1383 0000 00000000 		.4byte	.LFB67
 1384 0004 1A000000 		.4byte	.LFE67
 1385 0008 00000000 		.4byte	.LFB64
 1386 000c 20000000 		.4byte	.LFE64
 1387 0010 00000000 		.4byte	.LFB66
 1388 0014 24000000 		.4byte	.LFE66
 1389 0018 00000000 		.4byte	.LFB69
 1390 001c 02000000 		.4byte	.LFE69
 1391 0020 00000000 		.4byte	.LFB70
 1392 0024 18000000 		.4byte	.LFE70
 1393 0028 00000000 		.4byte	.LFB73
 1394 002c 10000000 		.4byte	.LFE73
 1395 0030 00000000 		.4byte	.LFB65
 1396 0034 08000000 		.4byte	.LFE65
 1397 0038 00000000 		.4byte	.LFB71
 1398 003c 1C000000 		.4byte	.LFE71
 1399 0040 00000000 		.4byte	.LFB74
 1400 0044 06000000 		.4byte	.LFE74
 1401 0048 00000000 		.4byte	.LFB72
 1402 004c 18000000 		.4byte	.LFE72
 1403 0050 00000000 		.4byte	.LFB75
 1404 0054 44000000 		.4byte	.LFE75
 1405 0058 00000000 		.4byte	.LFB76
 1406 005c 20000000 		.4byte	.LFE76
 1407 0060 00000000 		.4byte	.LFB77
 1408 0064 18000000 		.4byte	.LFE77
 1409 0068 00000000 		.4byte	.LFB68
 1410 006c 30000000 		.4byte	.LFE68
 1411 0070 00000000 		.4byte	0
 1412 0074 00000000 		.4byte	0
 1413              		.section	.debug_line,"",%progbits
 1414              	.Ldebug_line0:
 1415 0000 8C020000 		.section	.debug_str,"MS",%progbits,1
 1415      02007201 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 38


 1415      00000201 
 1415      FB0E0D00 
 1415      01010101 
 1416              	.LASF44:
 1417 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1417      69746963 
 1417      616C4E65 
 1417      7374696E 
 1417      6700
 1418              	.LASF29:
 1419 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1419      74456E74 
 1419      65724372 
 1419      69746963 
 1419      616C00
 1420              	.LASF24:
 1421 0025 7078436F 		.ascii	"pxCode\000"
 1421      646500
 1422              	.LASF27:
 1423 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1423      74456E64 
 1423      53636865 
 1423      64756C65 
 1423      7200
 1424              	.LASF22:
 1425 003e 5469636B 		.ascii	"TickType_t\000"
 1425      54797065 
 1425      5F7400
 1426              	.LASF8:
 1427 0049 5F5F696E 		.ascii	"__int32_t\000"
 1427      7433325F 
 1427      7400
 1428              	.LASF7:
 1429 0053 6C6F6E67 		.ascii	"long int\000"
 1429      20696E74 
 1429      00
 1430              	.LASF0:
 1431 005c 756E7369 		.ascii	"unsigned int\000"
 1431      676E6564 
 1431      20696E74 
 1431      00
 1432              	.LASF33:
 1433 0069 78506F72 		.ascii	"xPortPendSVHandler\000"
 1433      7450656E 
 1433      64535648 
 1433      616E646C 
 1433      657200
 1434              	.LASF41:
 1435 007c 756C506F 		.ascii	"ulPortSetInterruptMask\000"
 1435      72745365 
 1435      74496E74 
 1435      65727275 
 1435      70744D61 
 1436              	.LASF18:
 1437 0093 5461736B 		.ascii	"TaskFunction_t\000"
 1437      46756E63 
 1437      74696F6E 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 39


 1437      5F7400
 1438              	.LASF12:
 1439 00a2 696E7433 		.ascii	"int32_t\000"
 1439      325F7400 
 1440              	.LASF14:
 1441 00aa 666C6F61 		.ascii	"float\000"
 1441      7400
 1442              	.LASF4:
 1443 00b0 756E7369 		.ascii	"unsigned char\000"
 1443      676E6564 
 1443      20636861 
 1443      7200
 1444              	.LASF36:
 1445 00be 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1445      43313120 
 1445      352E342E 
 1445      31203230 
 1445      31363036 
 1446 00f1 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1446      20726576 
 1446      6973696F 
 1446      6E203233 
 1446      37373135 
 1447 0124 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1447      66756E63 
 1447      74696F6E 
 1447      2D736563 
 1447      74696F6E 
 1448              	.LASF10:
 1449 014c 6C6F6E67 		.ascii	"long unsigned int\000"
 1449      20756E73 
 1449      69676E65 
 1449      6420696E 
 1449      7400
 1450              	.LASF6:
 1451 015e 73686F72 		.ascii	"short unsigned int\000"
 1451      7420756E 
 1451      7369676E 
 1451      65642069 
 1451      6E7400
 1452              	.LASF45:
 1453 0171 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1453      52784275 
 1453      66666572 
 1453      00
 1454              	.LASF15:
 1455 017e 646F7562 		.ascii	"double\000"
 1455      6C6500
 1456              	.LASF9:
 1457 0185 5F5F7569 		.ascii	"__uint32_t\000"
 1457      6E743332 
 1457      5F7400
 1458              	.LASF38:
 1459 0190 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_Simple_S"
 1459      536F435F 
 1459      43726561 
 1459      746F725C 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 40


 1459      43593843 
 1460 01c0 44525F52 		.ascii	"DR_Receiver\\CY8CKIT-059_Simple_SDR_Receiver.cydsn\000"
 1460      65636569 
 1460      7665725C 
 1460      43593843 
 1460      4B49542D 
 1461              	.LASF25:
 1462 01f2 70765061 		.ascii	"pvParameters\000"
 1462      72616D65 
 1462      74657273 
 1462      00
 1463              	.LASF46:
 1464 01ff 78546173 		.ascii	"xTaskIncrementTick\000"
 1464      6B496E63 
 1464      72656D65 
 1464      6E745469 
 1464      636B00
 1465              	.LASF34:
 1466 0212 78506F72 		.ascii	"xPortSysTickHandler\000"
 1466      74537973 
 1466      5469636B 
 1466      48616E64 
 1466      6C657200 
 1467              	.LASF28:
 1468 0226 76506F72 		.ascii	"vPortYield\000"
 1468      74596965 
 1468      6C6400
 1469              	.LASF23:
 1470 0231 7078546F 		.ascii	"pxTopOfStack\000"
 1470      704F6653 
 1470      7461636B 
 1470      00
 1471              	.LASF11:
 1472 023e 6C6F6E67 		.ascii	"long long unsigned int\000"
 1472      206C6F6E 
 1472      6720756E 
 1472      7369676E 
 1472      65642069 
 1473              	.LASF42:
 1474 0255 70727654 		.ascii	"prvTaskExitError\000"
 1474      61736B45 
 1474      78697445 
 1474      72726F72 
 1474      00
 1475              	.LASF35:
 1476 0266 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1476      74536574 
 1476      75705469 
 1476      6D657249 
 1476      6E746572 
 1477              	.LASF17:
 1478 027f 73697A65 		.ascii	"sizetype\000"
 1478      74797065 
 1478      00
 1479              	.LASF1:
 1480 0288 6C6F6E67 		.ascii	"long long int\000"
 1480      206C6F6E 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 41


 1480      6720696E 
 1480      7400
 1481              	.LASF30:
 1482 0296 76506F72 		.ascii	"vPortClearInterruptMask\000"
 1482      74436C65 
 1482      6172496E 
 1482      74657272 
 1482      7570744D 
 1483              	.LASF16:
 1484 02ae 63686172 		.ascii	"char\000"
 1484      00
 1485              	.LASF19:
 1486 02b3 53746163 		.ascii	"StackType_t\000"
 1486      6B547970 
 1486      655F7400 
 1487              	.LASF26:
 1488 02bf 76506F72 		.ascii	"vPortSVCHandler\000"
 1488      74535643 
 1488      48616E64 
 1488      6C657200 
 1489              	.LASF5:
 1490 02cf 73686F72 		.ascii	"short int\000"
 1490      7420696E 
 1490      7400
 1491              	.LASF32:
 1492 02d9 76506F72 		.ascii	"vPortExitCritical\000"
 1492      74457869 
 1492      74437269 
 1492      74696361 
 1492      6C00
 1493              	.LASF13:
 1494 02eb 75696E74 		.ascii	"uint32_t\000"
 1494      33325F74 
 1494      00
 1495              	.LASF31:
 1496 02f4 756C4E65 		.ascii	"ulNewMaskValue\000"
 1496      774D6173 
 1496      6B56616C 
 1496      756500
 1497              	.LASF20:
 1498 0303 42617365 		.ascii	"BaseType_t\000"
 1498      54797065 
 1498      5F7400
 1499              	.LASF39:
 1500 030e 70727650 		.ascii	"prvPortStartFirstTask\000"
 1500      6F727453 
 1500      74617274 
 1500      46697273 
 1500      74546173 
 1501              	.LASF2:
 1502 0324 6C6F6E67 		.ascii	"long double\000"
 1502      20646F75 
 1502      626C6500 
 1503              	.LASF3:
 1504 0330 7369676E 		.ascii	"signed char\000"
 1504      65642063 
 1504      68617200 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccr4BPzW.s 			page 42


 1505              	.LASF37:
 1506 033c 2E2E5C46 		.ascii	"..\\FreeRTOS\\port.c\000"
 1506      72656552 
 1506      544F535C 
 1506      706F7274 
 1506      2E6300
 1507              	.LASF43:
 1508 034f 78506F72 		.ascii	"xPortStartScheduler\000"
 1508      74537461 
 1508      72745363 
 1508      68656475 
 1508      6C657200 
 1509              	.LASF21:
 1510 0363 55426173 		.ascii	"UBaseType_t\000"
 1510      65547970 
 1510      655F7400 
 1511              	.LASF40:
 1512 036f 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1512      7274496E 
 1512      69746961 
 1512      6C697365 
 1512      53746163 
 1513              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
