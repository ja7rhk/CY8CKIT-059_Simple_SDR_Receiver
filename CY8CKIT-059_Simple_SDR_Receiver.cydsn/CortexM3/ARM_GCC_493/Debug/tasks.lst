ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	prvTaskIsTaskSuspended, %function
  23              	prvTaskIsTaskSuspended:
  24              	.LFB73:
  25              		.file 1 "..\\FreeRTOS\\tasks.c"
   1:..\FreeRTOS/tasks.c **** /*
   2:..\FreeRTOS/tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:..\FreeRTOS/tasks.c ****     All rights reserved
   4:..\FreeRTOS/tasks.c **** 
   5:..\FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS/tasks.c **** 
   7:..\FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS/tasks.c **** 
   9:..\FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS/tasks.c **** 
  13:..\FreeRTOS/tasks.c ****     ***************************************************************************
  14:..\FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS/tasks.c ****     ***************************************************************************
  19:..\FreeRTOS/tasks.c **** 
  20:..\FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS/tasks.c **** 
  25:..\FreeRTOS/tasks.c ****     ***************************************************************************
  26:..\FreeRTOS/tasks.c ****      *                                                                       *
  27:..\FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS/tasks.c ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS/tasks.c ****      *                                                                       *
  32:..\FreeRTOS/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 2


  33:..\FreeRTOS/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS/tasks.c ****      *                                                                       *
  37:..\FreeRTOS/tasks.c ****     ***************************************************************************
  38:..\FreeRTOS/tasks.c **** 
  39:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS/tasks.c ****     defined configASSERT()?
  42:..\FreeRTOS/tasks.c **** 
  43:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS/tasks.c ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS/tasks.c ****     participating in the support forum.
  46:..\FreeRTOS/tasks.c **** 
  47:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS/tasks.c **** 
  52:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS/tasks.c **** 
  56:..\FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS/tasks.c **** 
  59:..\FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\FreeRTOS/tasks.c **** 
  63:..\FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS/tasks.c **** 
  67:..\FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  68:..\FreeRTOS/tasks.c **** */
  69:..\FreeRTOS/tasks.c **** 
  70:..\FreeRTOS/tasks.c **** /* Standard includes. */
  71:..\FreeRTOS/tasks.c **** #include <stdlib.h>
  72:..\FreeRTOS/tasks.c **** #include <string.h>
  73:..\FreeRTOS/tasks.c **** 
  74:..\FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:..\FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:..\FreeRTOS/tasks.c **** task.h is included from an application file. */
  77:..\FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:..\FreeRTOS/tasks.c **** 
  79:..\FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  80:..\FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  81:..\FreeRTOS/tasks.c **** #include "task.h"
  82:..\FreeRTOS/tasks.c **** #include "timers.h"
  83:..\FreeRTOS/tasks.c **** #include "StackMacros.h"
  84:..\FreeRTOS/tasks.c **** 
  85:..\FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:..\FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:..\FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:..\FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:..\FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 3


  90:..\FreeRTOS/tasks.c **** 
  91:..\FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:..\FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  93:..\FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:..\FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:..\FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:..\FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:..\FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:..\FreeRTOS/tasks.c **** 	#include <stdio.h>
  99:..\FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:..\FreeRTOS/tasks.c **** 
 101:..\FreeRTOS/tasks.c **** /* Sanity check the configuration. */
 102:..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:..\FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:..\FreeRTOS/tasks.c **** 
 108:..\FreeRTOS/tasks.c **** /*
 109:..\FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:..\FreeRTOS/tasks.c ****  */
 111:..\FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:..\FreeRTOS/tasks.c **** 
 113:..\FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 114:..\FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:..\FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 116:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:..\FreeRTOS/tasks.c **** #else
 118:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:..\FreeRTOS/tasks.c **** #endif
 120:..\FreeRTOS/tasks.c **** 
 121:..\FreeRTOS/tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:..\FreeRTOS/tasks.c **** typedef enum
 123:..\FreeRTOS/tasks.c **** {
 124:..\FreeRTOS/tasks.c **** 	eNotWaitingNotification = 0,
 125:..\FreeRTOS/tasks.c **** 	eWaitingNotification,
 126:..\FreeRTOS/tasks.c **** 	eNotified
 127:..\FreeRTOS/tasks.c **** } eNotifyValue;
 128:..\FreeRTOS/tasks.c **** 
 129:..\FreeRTOS/tasks.c **** /*
 130:..\FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:..\FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:..\FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 133:..\FreeRTOS/tasks.c ****  */
 134:..\FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 135:..\FreeRTOS/tasks.c **** {
 136:..\FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:..\FreeRTOS/tasks.c **** 
 138:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:..\FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:..\FreeRTOS/tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:..\FreeRTOS/tasks.c **** 	#endif
 142:..\FreeRTOS/tasks.c **** 
 143:..\FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:..\FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:..\FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 146:..\FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 4


 147:..\FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:..\FreeRTOS/tasks.c **** 
 149:..\FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:..\FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:..\FreeRTOS/tasks.c **** 	#endif
 152:..\FreeRTOS/tasks.c **** 
 153:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 154:..\FreeRTOS/tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:..\FreeRTOS/tasks.c **** 	#endif
 156:..\FreeRTOS/tasks.c **** 
 157:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:..\FreeRTOS/tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:..\FreeRTOS/tasks.c **** 	#endif
 161:..\FreeRTOS/tasks.c **** 
 162:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:..\FreeRTOS/tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:..\FreeRTOS/tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:..\FreeRTOS/tasks.c **** 	#endif
 166:..\FreeRTOS/tasks.c **** 
 167:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:..\FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:..\FreeRTOS/tasks.c **** 	#endif
 170:..\FreeRTOS/tasks.c **** 
 171:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:..\FreeRTOS/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:..\FreeRTOS/tasks.c **** 	#endif
 174:..\FreeRTOS/tasks.c **** 
 175:..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:..\FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:..\FreeRTOS/tasks.c **** 	#endif
 178:..\FreeRTOS/tasks.c **** 
 179:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:..\FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:..\FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:..\FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:..\FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:..\FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 185:..\FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:..\FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:..\FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 188:..\FreeRTOS/tasks.c **** 	#endif
 189:..\FreeRTOS/tasks.c **** 
 190:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:..\FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:..\FreeRTOS/tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:..\FreeRTOS/tasks.c **** 	#endif
 194:..\FreeRTOS/tasks.c **** 
 195:..\FreeRTOS/tasks.c **** } tskTCB;
 196:..\FreeRTOS/tasks.c **** 
 197:..\FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:..\FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:..\FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 200:..\FreeRTOS/tasks.c **** 
 201:..\FreeRTOS/tasks.c **** /*
 202:..\FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 203:..\FreeRTOS/tasks.c ****  * be global, rather than file scope.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 5


 204:..\FreeRTOS/tasks.c ****  */
 205:..\FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 206:..\FreeRTOS/tasks.c **** 	#define static
 207:..\FreeRTOS/tasks.c **** #endif
 208:..\FreeRTOS/tasks.c **** 
 209:..\FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:..\FreeRTOS/tasks.c **** static variables must be declared volatile. */
 211:..\FreeRTOS/tasks.c **** 
 212:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:..\FreeRTOS/tasks.c **** 
 214:..\FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:..\FreeRTOS/tasks.c **** 
 222:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:..\FreeRTOS/tasks.c **** 
 224:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:..\FreeRTOS/tasks.c **** 
 227:..\FreeRTOS/tasks.c **** #endif
 228:..\FreeRTOS/tasks.c **** 
 229:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:..\FreeRTOS/tasks.c **** 
 231:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:..\FreeRTOS/tasks.c **** 
 233:..\FreeRTOS/tasks.c **** #endif
 234:..\FreeRTOS/tasks.c **** 
 235:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:..\FreeRTOS/tasks.c **** 
 237:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:..\FreeRTOS/tasks.c **** 
 239:..\FreeRTOS/tasks.c **** #endif
 240:..\FreeRTOS/tasks.c **** 
 241:..\FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 242:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:..\FreeRTOS/tasks.c **** 
 252:..\FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:..\FreeRTOS/tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:..\FreeRTOS/tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:..\FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:..\FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:..\FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:..\FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:..\FreeRTOS/tasks.c **** accessed from a critical section. */
 260:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 6


 261:..\FreeRTOS/tasks.c **** 
 262:..\FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 263:..\FreeRTOS/tasks.c **** 
 264:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:..\FreeRTOS/tasks.c **** 
 267:..\FreeRTOS/tasks.c **** #endif
 268:..\FreeRTOS/tasks.c **** 
 269:..\FreeRTOS/tasks.c **** /*lint +e956 */
 270:..\FreeRTOS/tasks.c **** 
 271:..\FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:..\FreeRTOS/tasks.c **** 
 273:..\FreeRTOS/tasks.c **** /*
 274:..\FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:..\FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:..\FreeRTOS/tasks.c ****  */
 277:..\FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:..\FreeRTOS/tasks.c **** 
 279:..\FreeRTOS/tasks.c **** /*
 280:..\FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:..\FreeRTOS/tasks.c ****  */
 282:..\FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:..\FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:..\FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 285:..\FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:..\FreeRTOS/tasks.c **** 
 287:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 288:..\FreeRTOS/tasks.c **** 
 289:..\FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:..\FreeRTOS/tasks.c **** 
 291:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:..\FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:..\FreeRTOS/tasks.c **** 	microcontroller architecture. */
 294:..\FreeRTOS/tasks.c **** 
 295:..\FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:..\FreeRTOS/tasks.c **** 	state task. */
 297:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:..\FreeRTOS/tasks.c **** 	{																									\
 299:..\FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:..\FreeRTOS/tasks.c **** 		{																								\
 301:..\FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:..\FreeRTOS/tasks.c **** 		}																								\
 303:..\FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:..\FreeRTOS/tasks.c **** 
 305:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 306:..\FreeRTOS/tasks.c **** 
 307:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:..\FreeRTOS/tasks.c **** 	{																									\
 309:..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:..\FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:..\FreeRTOS/tasks.c **** 		{																								\
 312:..\FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:..\FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 314:..\FreeRTOS/tasks.c **** 		}																								\
 315:..\FreeRTOS/tasks.c **** 																										\
 316:..\FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 317:..\FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 7


 318:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 320:..\FreeRTOS/tasks.c **** 
 321:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 322:..\FreeRTOS/tasks.c **** 
 323:..\FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:..\FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 325:..\FreeRTOS/tasks.c **** 	being used. */
 326:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:..\FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:..\FreeRTOS/tasks.c **** 
 329:..\FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:..\FreeRTOS/tasks.c **** 
 331:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:..\FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:..\FreeRTOS/tasks.c **** 	architecture being used. */
 334:..\FreeRTOS/tasks.c **** 
 335:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:..\FreeRTOS/tasks.c **** 
 338:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 339:..\FreeRTOS/tasks.c **** 
 340:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:..\FreeRTOS/tasks.c **** 	{																								\
 342:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:..\FreeRTOS/tasks.c **** 																									\
 344:..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:..\FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:..\FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:..\FreeRTOS/tasks.c **** 
 350:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 351:..\FreeRTOS/tasks.c **** 
 352:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:..\FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:..\FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 356:..\FreeRTOS/tasks.c **** 	{																									\
 357:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:..\FreeRTOS/tasks.c **** 		{																								\
 359:..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:..\FreeRTOS/tasks.c **** 		}																								\
 361:..\FreeRTOS/tasks.c **** 	}
 362:..\FreeRTOS/tasks.c **** 
 363:..\FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:..\FreeRTOS/tasks.c **** 
 365:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 366:..\FreeRTOS/tasks.c **** 
 367:..\FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:..\FreeRTOS/tasks.c **** count overflows. */
 369:..\FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:..\FreeRTOS/tasks.c **** {																									\
 371:..\FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 372:..\FreeRTOS/tasks.c **** 																									\
 373:..\FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 374:..\FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 8


 375:..\FreeRTOS/tasks.c **** 																									\
 376:..\FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 377:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:..\FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 380:..\FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:..\FreeRTOS/tasks.c **** }
 382:..\FreeRTOS/tasks.c **** 
 383:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 384:..\FreeRTOS/tasks.c **** 
 385:..\FreeRTOS/tasks.c **** /*
 386:..\FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:..\FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 388:..\FreeRTOS/tasks.c ****  */
 389:..\FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:..\FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:..\FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:..\FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 394:..\FreeRTOS/tasks.c **** 
 395:..\FreeRTOS/tasks.c **** /*
 396:..\FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 397:..\FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 398:..\FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 399:..\FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 400:..\FreeRTOS/tasks.c ****  */
 401:..\FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 402:..\FreeRTOS/tasks.c **** 
 403:..\FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 404:..\FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 405:..\FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 406:..\FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 407:..\FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 408:..\FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 409:..\FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 410:..\FreeRTOS/tasks.c **** to its original value when it is released. */
 411:..\FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 412:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 413:..\FreeRTOS/tasks.c **** #else
 414:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 415:..\FreeRTOS/tasks.c **** #endif
 416:..\FreeRTOS/tasks.c **** 
 417:..\FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 418:..\FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 419:..\FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 420:..\FreeRTOS/tasks.c **** #endif
 421:..\FreeRTOS/tasks.c **** 
 422:..\FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 423:..\FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 424:..\FreeRTOS/tasks.c **** #endif
 425:..\FreeRTOS/tasks.c **** 
 426:..\FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 427:..\FreeRTOS/tasks.c **** 
 428:..\FreeRTOS/tasks.c **** /*
 429:..\FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 430:..\FreeRTOS/tasks.c ****  * into the TCB structure.
 431:..\FreeRTOS/tasks.c ****  */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 9


 432:..\FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 433:..\FreeRTOS/tasks.c **** 
 434:..\FreeRTOS/tasks.c **** /**
 435:..\FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 436:..\FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 437:..\FreeRTOS/tasks.c ****  * is in any other state.
 438:..\FreeRTOS/tasks.c ****  */
 439:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 440:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 442:..\FreeRTOS/tasks.c **** 
 443:..\FreeRTOS/tasks.c **** /*
 444:..\FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 445:..\FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 446:..\FreeRTOS/tasks.c ****  */
 447:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 448:..\FreeRTOS/tasks.c **** 
 449:..\FreeRTOS/tasks.c **** /*
 450:..\FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 451:..\FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 452:..\FreeRTOS/tasks.c ****  * creation of the first user task.
 453:..\FreeRTOS/tasks.c ****  *
 454:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 455:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 456:..\FreeRTOS/tasks.c ****  *
 457:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 458:..\FreeRTOS/tasks.c ****  *
 459:..\FreeRTOS/tasks.c ****  */
 460:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 461:..\FreeRTOS/tasks.c **** 
 462:..\FreeRTOS/tasks.c **** /*
 463:..\FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 464:..\FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 465:..\FreeRTOS/tasks.c ****  *
 466:..\FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 467:..\FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 468:..\FreeRTOS/tasks.c ****  */
 469:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 470:..\FreeRTOS/tasks.c **** 
 471:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 472:..\FreeRTOS/tasks.c **** 
 473:..\FreeRTOS/tasks.c **** #endif
 474:..\FreeRTOS/tasks.c **** 
 475:..\FreeRTOS/tasks.c **** /*
 476:..\FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 477:..\FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 478:..\FreeRTOS/tasks.c ****  * and its TCB deleted.
 479:..\FreeRTOS/tasks.c ****  */
 480:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 481:..\FreeRTOS/tasks.c **** 
 482:..\FreeRTOS/tasks.c **** /*
 483:..\FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 484:..\FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 485:..\FreeRTOS/tasks.c ****  */
 486:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 487:..\FreeRTOS/tasks.c **** 
 488:..\FreeRTOS/tasks.c **** /*
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 10


 489:..\FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 490:..\FreeRTOS/tasks.c ****  * allocation was successful.
 491:..\FreeRTOS/tasks.c ****  */
 492:..\FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 493:..\FreeRTOS/tasks.c **** 
 494:..\FreeRTOS/tasks.c **** /*
 495:..\FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 496:..\FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 497:..\FreeRTOS/tasks.c ****  * a suspended list, etc.).
 498:..\FreeRTOS/tasks.c ****  *
 499:..\FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 500:..\FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 501:..\FreeRTOS/tasks.c ****  */
 502:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 503:..\FreeRTOS/tasks.c **** 
 504:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 505:..\FreeRTOS/tasks.c **** 
 506:..\FreeRTOS/tasks.c **** #endif
 507:..\FreeRTOS/tasks.c **** 
 508:..\FreeRTOS/tasks.c **** /*
 509:..\FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 510:..\FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 511:..\FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 512:..\FreeRTOS/tasks.c ****  */
 513:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 514:..\FreeRTOS/tasks.c **** 
 515:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 516:..\FreeRTOS/tasks.c **** 
 517:..\FreeRTOS/tasks.c **** #endif
 518:..\FreeRTOS/tasks.c **** 
 519:..\FreeRTOS/tasks.c **** /*
 520:..\FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 521:..\FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 522:..\FreeRTOS/tasks.c ****  *
 523:..\FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 524:..\FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 525:..\FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 526:..\FreeRTOS/tasks.c ****  * set to a value other than 1.
 527:..\FreeRTOS/tasks.c ****  */
 528:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 529:..\FreeRTOS/tasks.c **** 
 530:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 531:..\FreeRTOS/tasks.c **** 
 532:..\FreeRTOS/tasks.c **** #endif
 533:..\FreeRTOS/tasks.c **** 
 534:..\FreeRTOS/tasks.c **** /*
 535:..\FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 536:..\FreeRTOS/tasks.c ****  * will exit the Blocked state.
 537:..\FreeRTOS/tasks.c ****  */
 538:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 539:..\FreeRTOS/tasks.c **** 
 540:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 541:..\FreeRTOS/tasks.c **** 
 542:..\FreeRTOS/tasks.c **** 	/*
 543:..\FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 544:..\FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 545:..\FreeRTOS/tasks.c **** 	 */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 11


 546:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 547:..\FreeRTOS/tasks.c **** 
 548:..\FreeRTOS/tasks.c **** #endif
 549:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 550:..\FreeRTOS/tasks.c **** 
 551:..\FreeRTOS/tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 552:..\FreeRTOS/tasks.c **** {
 553:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 554:..\FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 555:..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 556:..\FreeRTOS/tasks.c **** 
 557:..\FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 558:..\FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 559:..\FreeRTOS/tasks.c **** 
 560:..\FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 561:..\FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 562:..\FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 563:..\FreeRTOS/tasks.c **** 
 564:..\FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 565:..\FreeRTOS/tasks.c **** 	{
 566:..\FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 567:..\FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 568:..\FreeRTOS/tasks.c **** 			BaseType_t xRunPrivileged;
 569:..\FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 570:..\FreeRTOS/tasks.c **** 			{
 571:..\FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 572:..\FreeRTOS/tasks.c **** 			}
 573:..\FreeRTOS/tasks.c **** 			else
 574:..\FreeRTOS/tasks.c **** 			{
 575:..\FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 576:..\FreeRTOS/tasks.c **** 			}
 577:..\FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 578:..\FreeRTOS/tasks.c **** 
 579:..\FreeRTOS/tasks.c **** 			if( puxStackBuffer != NULL )
 580:..\FreeRTOS/tasks.c **** 			{
 581:..\FreeRTOS/tasks.c **** 				/* The application provided its own stack.  Note this so no
 582:..\FreeRTOS/tasks.c **** 				attempt is made to delete the stack should that task be
 583:..\FreeRTOS/tasks.c **** 				deleted. */
 584:..\FreeRTOS/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 585:..\FreeRTOS/tasks.c **** 			}
 586:..\FreeRTOS/tasks.c **** 			else
 587:..\FreeRTOS/tasks.c **** 			{
 588:..\FreeRTOS/tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 589:..\FreeRTOS/tasks.c **** 				deleted again if the task is deleted. */
 590:..\FreeRTOS/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 591:..\FreeRTOS/tasks.c **** 			}
 592:..\FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 593:..\FreeRTOS/tasks.c **** 
 594:..\FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 595:..\FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 596:..\FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 597:..\FreeRTOS/tasks.c **** 		required by the port. */
 598:..\FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 599:..\FreeRTOS/tasks.c **** 		{
 600:..\FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 601:..\FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 602:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 12


 603:..\FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 604:..\FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 605:..\FreeRTOS/tasks.c **** 		}
 606:..\FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 607:..\FreeRTOS/tasks.c **** 		{
 608:..\FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 609:..\FreeRTOS/tasks.c **** 
 610:..\FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 611:..\FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 612:..\FreeRTOS/tasks.c **** 
 613:..\FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 614:..\FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 615:..\FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 616:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 617:..\FreeRTOS/tasks.c **** 		}
 618:..\FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 619:..\FreeRTOS/tasks.c **** 
 620:..\FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 621:..\FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 622:..\FreeRTOS/tasks.c **** 
 623:..\FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 624:..\FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 625:..\FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 626:..\FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 627:..\FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 628:..\FreeRTOS/tasks.c **** 		{
 629:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 630:..\FreeRTOS/tasks.c **** 		}
 631:..\FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 632:..\FreeRTOS/tasks.c **** 		{
 633:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 634:..\FreeRTOS/tasks.c **** 		}
 635:..\FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 636:..\FreeRTOS/tasks.c **** 
 637:..\FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 638:..\FreeRTOS/tasks.c **** 		{
 639:..\FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 640:..\FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 641:..\FreeRTOS/tasks.c **** 			required.*/
 642:..\FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 643:..\FreeRTOS/tasks.c **** 		}
 644:..\FreeRTOS/tasks.c **** 		else
 645:..\FreeRTOS/tasks.c **** 		{
 646:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 647:..\FreeRTOS/tasks.c **** 		}
 648:..\FreeRTOS/tasks.c **** 
 649:..\FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 650:..\FreeRTOS/tasks.c **** 		updated. */
 651:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 652:..\FreeRTOS/tasks.c **** 		{
 653:..\FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 654:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 655:..\FreeRTOS/tasks.c **** 			{
 656:..\FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 657:..\FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 658:..\FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 659:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 13


 660:..\FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 661:..\FreeRTOS/tasks.c **** 				{
 662:..\FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 663:..\FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 664:..\FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 665:..\FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 666:..\FreeRTOS/tasks.c **** 				}
 667:..\FreeRTOS/tasks.c **** 				else
 668:..\FreeRTOS/tasks.c **** 				{
 669:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 670:..\FreeRTOS/tasks.c **** 				}
 671:..\FreeRTOS/tasks.c **** 			}
 672:..\FreeRTOS/tasks.c **** 			else
 673:..\FreeRTOS/tasks.c **** 			{
 674:..\FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 675:..\FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 676:..\FreeRTOS/tasks.c **** 				so far. */
 677:..\FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 678:..\FreeRTOS/tasks.c **** 				{
 679:..\FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 680:..\FreeRTOS/tasks.c **** 					{
 681:..\FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 682:..\FreeRTOS/tasks.c **** 					}
 683:..\FreeRTOS/tasks.c **** 					else
 684:..\FreeRTOS/tasks.c **** 					{
 685:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 686:..\FreeRTOS/tasks.c **** 					}
 687:..\FreeRTOS/tasks.c **** 				}
 688:..\FreeRTOS/tasks.c **** 				else
 689:..\FreeRTOS/tasks.c **** 				{
 690:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 691:..\FreeRTOS/tasks.c **** 				}
 692:..\FreeRTOS/tasks.c **** 			}
 693:..\FreeRTOS/tasks.c **** 
 694:..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
 695:..\FreeRTOS/tasks.c **** 
 696:..\FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 697:..\FreeRTOS/tasks.c **** 			{
 698:..\FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 699:..\FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 700:..\FreeRTOS/tasks.c **** 			}
 701:..\FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 702:..\FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 703:..\FreeRTOS/tasks.c **** 
 704:..\FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 705:..\FreeRTOS/tasks.c **** 
 706:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 707:..\FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 708:..\FreeRTOS/tasks.c **** 		}
 709:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 710:..\FreeRTOS/tasks.c **** 	}
 711:..\FreeRTOS/tasks.c **** 	else
 712:..\FreeRTOS/tasks.c **** 	{
 713:..\FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 714:..\FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 715:..\FreeRTOS/tasks.c **** 	}
 716:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 14


 717:..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 718:..\FreeRTOS/tasks.c **** 	{
 719:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 720:..\FreeRTOS/tasks.c **** 		{
 721:..\FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 722:..\FreeRTOS/tasks.c **** 			then it should run now. */
 723:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 724:..\FreeRTOS/tasks.c **** 			{
 725:..\FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 726:..\FreeRTOS/tasks.c **** 			}
 727:..\FreeRTOS/tasks.c **** 			else
 728:..\FreeRTOS/tasks.c **** 			{
 729:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 730:..\FreeRTOS/tasks.c **** 			}
 731:..\FreeRTOS/tasks.c **** 		}
 732:..\FreeRTOS/tasks.c **** 		else
 733:..\FreeRTOS/tasks.c **** 		{
 734:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 735:..\FreeRTOS/tasks.c **** 		}
 736:..\FreeRTOS/tasks.c **** 	}
 737:..\FreeRTOS/tasks.c **** 
 738:..\FreeRTOS/tasks.c **** 	return xReturn;
 739:..\FreeRTOS/tasks.c **** }
 740:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 741:..\FreeRTOS/tasks.c **** 
 742:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 743:..\FreeRTOS/tasks.c **** 
 744:..\FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 745:..\FreeRTOS/tasks.c **** 	{
 746:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 747:..\FreeRTOS/tasks.c **** 
 748:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 749:..\FreeRTOS/tasks.c **** 		{
 750:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 751:..\FreeRTOS/tasks.c **** 			being deleted. */
 752:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 753:..\FreeRTOS/tasks.c **** 
 754:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 755:..\FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 756:..\FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 757:..\FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 758:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 759:..\FreeRTOS/tasks.c **** 			{
 760:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 761:..\FreeRTOS/tasks.c **** 			}
 762:..\FreeRTOS/tasks.c **** 			else
 763:..\FreeRTOS/tasks.c **** 			{
 764:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 765:..\FreeRTOS/tasks.c **** 			}
 766:..\FreeRTOS/tasks.c **** 
 767:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 768:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 769:..\FreeRTOS/tasks.c **** 			{
 770:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 771:..\FreeRTOS/tasks.c **** 			}
 772:..\FreeRTOS/tasks.c **** 			else
 773:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 15


 774:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:..\FreeRTOS/tasks.c **** 			}
 776:..\FreeRTOS/tasks.c **** 
 777:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 778:..\FreeRTOS/tasks.c **** 
 779:..\FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 780:..\FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 781:..\FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 782:..\FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 783:..\FreeRTOS/tasks.c **** 
 784:..\FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 785:..\FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 786:..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
 787:..\FreeRTOS/tasks.c **** 
 788:..\FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 789:..\FreeRTOS/tasks.c **** 		}
 790:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 791:..\FreeRTOS/tasks.c **** 
 792:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 793:..\FreeRTOS/tasks.c **** 		been deleted. */
 794:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 795:..\FreeRTOS/tasks.c **** 		{
 796:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 797:..\FreeRTOS/tasks.c **** 			{
 798:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 799:..\FreeRTOS/tasks.c **** 
 800:..\FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 801:..\FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
 802:..\FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 803:..\FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 804:..\FreeRTOS/tasks.c **** 				required. */
 805:..\FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 806:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 807:..\FreeRTOS/tasks.c **** 			}
 808:..\FreeRTOS/tasks.c **** 			else
 809:..\FreeRTOS/tasks.c **** 			{
 810:..\FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 811:..\FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 812:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 813:..\FreeRTOS/tasks.c **** 				{
 814:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 815:..\FreeRTOS/tasks.c **** 				}
 816:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 817:..\FreeRTOS/tasks.c **** 			}
 818:..\FreeRTOS/tasks.c **** 		}
 819:..\FreeRTOS/tasks.c **** 	}
 820:..\FreeRTOS/tasks.c **** 
 821:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 822:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 823:..\FreeRTOS/tasks.c **** 
 824:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 825:..\FreeRTOS/tasks.c **** 
 826:..\FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 827:..\FreeRTOS/tasks.c **** 	{
 828:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 829:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 830:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 16


 831:..\FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 832:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 833:..\FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 834:..\FreeRTOS/tasks.c **** 
 835:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 836:..\FreeRTOS/tasks.c **** 		{
 837:..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 838:..\FreeRTOS/tasks.c **** 			block. */
 839:..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 840:..\FreeRTOS/tasks.c **** 
 841:..\FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 842:..\FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 843:..\FreeRTOS/tasks.c **** 
 844:..\FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 845:..\FreeRTOS/tasks.c **** 			{
 846:..\FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 847:..\FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 848:..\FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 849:..\FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 850:..\FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 851:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 852:..\FreeRTOS/tasks.c **** 				{
 853:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 854:..\FreeRTOS/tasks.c **** 				}
 855:..\FreeRTOS/tasks.c **** 				else
 856:..\FreeRTOS/tasks.c **** 				{
 857:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 858:..\FreeRTOS/tasks.c **** 				}
 859:..\FreeRTOS/tasks.c **** 			}
 860:..\FreeRTOS/tasks.c **** 			else
 861:..\FreeRTOS/tasks.c **** 			{
 862:..\FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 863:..\FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 864:..\FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 865:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 866:..\FreeRTOS/tasks.c **** 				{
 867:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 868:..\FreeRTOS/tasks.c **** 				}
 869:..\FreeRTOS/tasks.c **** 				else
 870:..\FreeRTOS/tasks.c **** 				{
 871:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 872:..\FreeRTOS/tasks.c **** 				}
 873:..\FreeRTOS/tasks.c **** 			}
 874:..\FreeRTOS/tasks.c **** 
 875:..\FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 876:..\FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 877:..\FreeRTOS/tasks.c **** 
 878:..\FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 879:..\FreeRTOS/tasks.c **** 			{
 880:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 881:..\FreeRTOS/tasks.c **** 
 882:..\FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 883:..\FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 884:..\FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 885:..\FreeRTOS/tasks.c **** 				{
 886:..\FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 887:..\FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 17


 888:..\FreeRTOS/tasks.c **** 					directly. */
 889:..\FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 890:..\FreeRTOS/tasks.c **** 				}
 891:..\FreeRTOS/tasks.c **** 				else
 892:..\FreeRTOS/tasks.c **** 				{
 893:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 894:..\FreeRTOS/tasks.c **** 				}
 895:..\FreeRTOS/tasks.c **** 
 896:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 897:..\FreeRTOS/tasks.c **** 			}
 898:..\FreeRTOS/tasks.c **** 			else
 899:..\FreeRTOS/tasks.c **** 			{
 900:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 901:..\FreeRTOS/tasks.c **** 			}
 902:..\FreeRTOS/tasks.c **** 		}
 903:..\FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 904:..\FreeRTOS/tasks.c **** 
 905:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 906:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 907:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 908:..\FreeRTOS/tasks.c **** 		{
 909:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 910:..\FreeRTOS/tasks.c **** 		}
 911:..\FreeRTOS/tasks.c **** 		else
 912:..\FreeRTOS/tasks.c **** 		{
 913:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 914:..\FreeRTOS/tasks.c **** 		}
 915:..\FreeRTOS/tasks.c **** 	}
 916:..\FreeRTOS/tasks.c **** 
 917:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 918:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 919:..\FreeRTOS/tasks.c **** 
 920:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 921:..\FreeRTOS/tasks.c **** 
 922:..\FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 923:..\FreeRTOS/tasks.c **** 	{
 924:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 925:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 926:..\FreeRTOS/tasks.c **** 
 927:..\FreeRTOS/tasks.c **** 
 928:..\FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 929:..\FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 930:..\FreeRTOS/tasks.c **** 		{
 931:..\FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 932:..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 933:..\FreeRTOS/tasks.c **** 			{
 934:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 935:..\FreeRTOS/tasks.c **** 
 936:..\FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 937:..\FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 938:..\FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 939:..\FreeRTOS/tasks.c **** 				is resumed.
 940:..\FreeRTOS/tasks.c **** 
 941:..\FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 942:..\FreeRTOS/tasks.c **** 				executing task. */
 943:..\FreeRTOS/tasks.c **** 
 944:..\FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 18


 945:..\FreeRTOS/tasks.c **** 				not a problem. */
 946:..\FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 947:..\FreeRTOS/tasks.c **** 
 948:..\FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 949:..\FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 950:..\FreeRTOS/tasks.c **** 				both lists. */
 951:..\FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 952:..\FreeRTOS/tasks.c **** 				{
 953:..\FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 954:..\FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 955:..\FreeRTOS/tasks.c **** 					directly. */
 956:..\FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 957:..\FreeRTOS/tasks.c **** 				}
 958:..\FreeRTOS/tasks.c **** 				else
 959:..\FreeRTOS/tasks.c **** 				{
 960:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 961:..\FreeRTOS/tasks.c **** 				}
 962:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 963:..\FreeRTOS/tasks.c **** 			}
 964:..\FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 965:..\FreeRTOS/tasks.c **** 		}
 966:..\FreeRTOS/tasks.c **** 		else
 967:..\FreeRTOS/tasks.c **** 		{
 968:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 969:..\FreeRTOS/tasks.c **** 		}
 970:..\FreeRTOS/tasks.c **** 
 971:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 972:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 973:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 974:..\FreeRTOS/tasks.c **** 		{
 975:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 976:..\FreeRTOS/tasks.c **** 		}
 977:..\FreeRTOS/tasks.c **** 		else
 978:..\FreeRTOS/tasks.c **** 		{
 979:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 980:..\FreeRTOS/tasks.c **** 		}
 981:..\FreeRTOS/tasks.c **** 	}
 982:..\FreeRTOS/tasks.c **** 
 983:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 984:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 985:..\FreeRTOS/tasks.c **** 
 986:..\FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 987:..\FreeRTOS/tasks.c **** 
 988:..\FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 989:..\FreeRTOS/tasks.c **** 	{
 990:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 991:..\FreeRTOS/tasks.c **** 	List_t *pxStateList;
 992:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 993:..\FreeRTOS/tasks.c **** 
 994:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 995:..\FreeRTOS/tasks.c **** 
 996:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 997:..\FreeRTOS/tasks.c **** 		{
 998:..\FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 999:..\FreeRTOS/tasks.c **** 			eReturn = eRunning;
1000:..\FreeRTOS/tasks.c **** 		}
1001:..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 19


1002:..\FreeRTOS/tasks.c **** 		{
1003:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1004:..\FreeRTOS/tasks.c **** 			{
1005:..\FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
1006:..\FreeRTOS/tasks.c **** 			}
1007:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1008:..\FreeRTOS/tasks.c **** 
1009:..\FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1010:..\FreeRTOS/tasks.c **** 			{
1011:..\FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1012:..\FreeRTOS/tasks.c **** 				lists. */
1013:..\FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1014:..\FreeRTOS/tasks.c **** 			}
1015:..\FreeRTOS/tasks.c **** 
1016:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1017:..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1018:..\FreeRTOS/tasks.c **** 				{
1019:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1020:..\FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1021:..\FreeRTOS/tasks.c **** 					indefinitely? */
1022:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1023:..\FreeRTOS/tasks.c **** 					{
1024:..\FreeRTOS/tasks.c **** 						eReturn = eSuspended;
1025:..\FreeRTOS/tasks.c **** 					}
1026:..\FreeRTOS/tasks.c **** 					else
1027:..\FreeRTOS/tasks.c **** 					{
1028:..\FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1029:..\FreeRTOS/tasks.c **** 					}
1030:..\FreeRTOS/tasks.c **** 				}
1031:..\FreeRTOS/tasks.c **** 			#endif
1032:..\FreeRTOS/tasks.c **** 
1033:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1034:..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
1035:..\FreeRTOS/tasks.c **** 				{
1036:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1037:..\FreeRTOS/tasks.c **** 					tasks list. */
1038:..\FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1039:..\FreeRTOS/tasks.c **** 				}
1040:..\FreeRTOS/tasks.c **** 			#endif
1041:..\FreeRTOS/tasks.c **** 
1042:..\FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1043:..\FreeRTOS/tasks.c **** 			{
1044:..\FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1045:..\FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1046:..\FreeRTOS/tasks.c **** 				eReturn = eReady;
1047:..\FreeRTOS/tasks.c **** 			}
1048:..\FreeRTOS/tasks.c **** 		}
1049:..\FreeRTOS/tasks.c **** 
1050:..\FreeRTOS/tasks.c **** 		return eReturn;
1051:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1052:..\FreeRTOS/tasks.c **** 
1053:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1054:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1055:..\FreeRTOS/tasks.c **** 
1056:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1057:..\FreeRTOS/tasks.c **** 
1058:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 20


1059:..\FreeRTOS/tasks.c **** 	{
1060:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1061:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1062:..\FreeRTOS/tasks.c **** 
1063:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1064:..\FreeRTOS/tasks.c **** 		{
1065:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1066:..\FreeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1067:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1068:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1069:..\FreeRTOS/tasks.c **** 		}
1070:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1071:..\FreeRTOS/tasks.c **** 
1072:..\FreeRTOS/tasks.c **** 		return uxReturn;
1073:..\FreeRTOS/tasks.c **** 	}
1074:..\FreeRTOS/tasks.c **** 
1075:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1076:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1077:..\FreeRTOS/tasks.c **** 
1078:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1079:..\FreeRTOS/tasks.c **** 
1080:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1081:..\FreeRTOS/tasks.c **** 	{
1082:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1083:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1084:..\FreeRTOS/tasks.c **** 
1085:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1086:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1087:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1088:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1089:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1090:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1091:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1092:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1093:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1094:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1095:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1096:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1097:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1098:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1099:..\FreeRTOS/tasks.c **** 		provided on the following link:
1100:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1101:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1102:..\FreeRTOS/tasks.c **** 
1103:..\FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1104:..\FreeRTOS/tasks.c **** 		{
1105:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1106:..\FreeRTOS/tasks.c **** 			task that is being queried. */
1107:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1108:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1109:..\FreeRTOS/tasks.c **** 		}
1110:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1111:..\FreeRTOS/tasks.c **** 
1112:..\FreeRTOS/tasks.c **** 		return uxReturn;
1113:..\FreeRTOS/tasks.c **** 	}
1114:..\FreeRTOS/tasks.c **** 
1115:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 21


1116:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1117:..\FreeRTOS/tasks.c **** 
1118:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1119:..\FreeRTOS/tasks.c **** 
1120:..\FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1121:..\FreeRTOS/tasks.c **** 	{
1122:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1123:..\FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1124:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1125:..\FreeRTOS/tasks.c **** 
1126:..\FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1127:..\FreeRTOS/tasks.c **** 
1128:..\FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1129:..\FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1130:..\FreeRTOS/tasks.c **** 		{
1131:..\FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1132:..\FreeRTOS/tasks.c **** 		}
1133:..\FreeRTOS/tasks.c **** 		else
1134:..\FreeRTOS/tasks.c **** 		{
1135:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1136:..\FreeRTOS/tasks.c **** 		}
1137:..\FreeRTOS/tasks.c **** 
1138:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1139:..\FreeRTOS/tasks.c **** 		{
1140:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1141:..\FreeRTOS/tasks.c **** 			task that is being changed. */
1142:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1143:..\FreeRTOS/tasks.c **** 
1144:..\FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1145:..\FreeRTOS/tasks.c **** 
1146:..\FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1147:..\FreeRTOS/tasks.c **** 			{
1148:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1149:..\FreeRTOS/tasks.c **** 			}
1150:..\FreeRTOS/tasks.c **** 			#else
1151:..\FreeRTOS/tasks.c **** 			{
1152:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1153:..\FreeRTOS/tasks.c **** 			}
1154:..\FreeRTOS/tasks.c **** 			#endif
1155:..\FreeRTOS/tasks.c **** 
1156:..\FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1157:..\FreeRTOS/tasks.c **** 			{
1158:..\FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1159:..\FreeRTOS/tasks.c **** 				priority than the calling task. */
1160:..\FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1161:..\FreeRTOS/tasks.c **** 				{
1162:..\FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1163:..\FreeRTOS/tasks.c **** 					{
1164:..\FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1165:..\FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1166:..\FreeRTOS/tasks.c **** 						raised above that of the running task? */
1167:..\FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1168:..\FreeRTOS/tasks.c **** 						{
1169:..\FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1170:..\FreeRTOS/tasks.c **** 						}
1171:..\FreeRTOS/tasks.c **** 						else
1172:..\FreeRTOS/tasks.c **** 						{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 22


1173:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1174:..\FreeRTOS/tasks.c **** 						}
1175:..\FreeRTOS/tasks.c **** 					}
1176:..\FreeRTOS/tasks.c **** 					else
1177:..\FreeRTOS/tasks.c **** 					{
1178:..\FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1179:..\FreeRTOS/tasks.c **** 						but the running task must already be the highest
1180:..\FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1181:..\FreeRTOS/tasks.c **** 					}
1182:..\FreeRTOS/tasks.c **** 				}
1183:..\FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1184:..\FreeRTOS/tasks.c **** 				{
1185:..\FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1186:..\FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1187:..\FreeRTOS/tasks.c **** 					is ready to execute. */
1188:..\FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1189:..\FreeRTOS/tasks.c **** 				}
1190:..\FreeRTOS/tasks.c **** 				else
1191:..\FreeRTOS/tasks.c **** 				{
1192:..\FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1193:..\FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1194:..\FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1195:..\FreeRTOS/tasks.c **** 				}
1196:..\FreeRTOS/tasks.c **** 
1197:..\FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1198:..\FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1199:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1200:..\FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1201:..\FreeRTOS/tasks.c **** 
1202:..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1203:..\FreeRTOS/tasks.c **** 				{
1204:..\FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1205:..\FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1206:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1207:..\FreeRTOS/tasks.c **** 					{
1208:..\FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1209:..\FreeRTOS/tasks.c **** 					}
1210:..\FreeRTOS/tasks.c **** 					else
1211:..\FreeRTOS/tasks.c **** 					{
1212:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1213:..\FreeRTOS/tasks.c **** 					}
1214:..\FreeRTOS/tasks.c **** 
1215:..\FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1216:..\FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1217:..\FreeRTOS/tasks.c **** 				}
1218:..\FreeRTOS/tasks.c **** 				#else
1219:..\FreeRTOS/tasks.c **** 				{
1220:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1221:..\FreeRTOS/tasks.c **** 				}
1222:..\FreeRTOS/tasks.c **** 				#endif
1223:..\FreeRTOS/tasks.c **** 
1224:..\FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1225:..\FreeRTOS/tasks.c **** 				being used for anything else. */
1226:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1227:..\FreeRTOS/tasks.c **** 				{
1228:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1229:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 23


1230:..\FreeRTOS/tasks.c **** 				else
1231:..\FreeRTOS/tasks.c **** 				{
1232:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1233:..\FreeRTOS/tasks.c **** 				}
1234:..\FreeRTOS/tasks.c **** 
1235:..\FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1236:..\FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1237:..\FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1238:..\FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1239:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
1240:..\FreeRTOS/tasks.c **** 				{
1241:..\FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1242:..\FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1243:..\FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1244:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1245:..\FreeRTOS/tasks.c **** 					{
1246:..\FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1247:..\FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1248:..\FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1249:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1250:..\FreeRTOS/tasks.c **** 					}
1251:..\FreeRTOS/tasks.c **** 					else
1252:..\FreeRTOS/tasks.c **** 					{
1253:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1254:..\FreeRTOS/tasks.c **** 					}
1255:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1256:..\FreeRTOS/tasks.c **** 				}
1257:..\FreeRTOS/tasks.c **** 				else
1258:..\FreeRTOS/tasks.c **** 				{
1259:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1260:..\FreeRTOS/tasks.c **** 				}
1261:..\FreeRTOS/tasks.c **** 
1262:..\FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
1263:..\FreeRTOS/tasks.c **** 				{
1264:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1265:..\FreeRTOS/tasks.c **** 				}
1266:..\FreeRTOS/tasks.c **** 				else
1267:..\FreeRTOS/tasks.c **** 				{
1268:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1269:..\FreeRTOS/tasks.c **** 				}
1270:..\FreeRTOS/tasks.c **** 
1271:..\FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1272:..\FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1273:..\FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1274:..\FreeRTOS/tasks.c **** 			}
1275:..\FreeRTOS/tasks.c **** 		}
1276:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1277:..\FreeRTOS/tasks.c **** 	}
1278:..\FreeRTOS/tasks.c **** 
1279:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1280:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1281:..\FreeRTOS/tasks.c **** 
1282:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1283:..\FreeRTOS/tasks.c **** 
1284:..\FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1285:..\FreeRTOS/tasks.c **** 	{
1286:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 24


1287:..\FreeRTOS/tasks.c **** 
1288:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1289:..\FreeRTOS/tasks.c **** 		{
1290:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1291:..\FreeRTOS/tasks.c **** 			being suspended. */
1292:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1293:..\FreeRTOS/tasks.c **** 
1294:..\FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1295:..\FreeRTOS/tasks.c **** 
1296:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1297:..\FreeRTOS/tasks.c **** 			suspended list. */
1298:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1299:..\FreeRTOS/tasks.c **** 			{
1300:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1301:..\FreeRTOS/tasks.c **** 			}
1302:..\FreeRTOS/tasks.c **** 			else
1303:..\FreeRTOS/tasks.c **** 			{
1304:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1305:..\FreeRTOS/tasks.c **** 			}
1306:..\FreeRTOS/tasks.c **** 
1307:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1308:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1309:..\FreeRTOS/tasks.c **** 			{
1310:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1311:..\FreeRTOS/tasks.c **** 			}
1312:..\FreeRTOS/tasks.c **** 			else
1313:..\FreeRTOS/tasks.c **** 			{
1314:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:..\FreeRTOS/tasks.c **** 			}
1316:..\FreeRTOS/tasks.c **** 
1317:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1318:..\FreeRTOS/tasks.c **** 		}
1319:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1320:..\FreeRTOS/tasks.c **** 
1321:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1322:..\FreeRTOS/tasks.c **** 		{
1323:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1324:..\FreeRTOS/tasks.c **** 			{
1325:..\FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1326:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1327:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1328:..\FreeRTOS/tasks.c **** 			}
1329:..\FreeRTOS/tasks.c **** 			else
1330:..\FreeRTOS/tasks.c **** 			{
1331:..\FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1332:..\FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1333:..\FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1334:..\FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1335:..\FreeRTOS/tasks.c **** 				{
1336:..\FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1337:..\FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1338:..\FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1339:..\FreeRTOS/tasks.c **** 					is. */
1340:..\FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1341:..\FreeRTOS/tasks.c **** 				}
1342:..\FreeRTOS/tasks.c **** 				else
1343:..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 25


1344:..\FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1345:..\FreeRTOS/tasks.c **** 				}
1346:..\FreeRTOS/tasks.c **** 			}
1347:..\FreeRTOS/tasks.c **** 		}
1348:..\FreeRTOS/tasks.c **** 		else
1349:..\FreeRTOS/tasks.c **** 		{
1350:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1351:..\FreeRTOS/tasks.c **** 			{
1352:..\FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1353:..\FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1354:..\FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1355:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
1356:..\FreeRTOS/tasks.c **** 				{
1357:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
1358:..\FreeRTOS/tasks.c **** 				}
1359:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
1360:..\FreeRTOS/tasks.c **** 			}
1361:..\FreeRTOS/tasks.c **** 			else
1362:..\FreeRTOS/tasks.c **** 			{
1363:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1364:..\FreeRTOS/tasks.c **** 			}
1365:..\FreeRTOS/tasks.c **** 		}
1366:..\FreeRTOS/tasks.c **** 	}
1367:..\FreeRTOS/tasks.c **** 
1368:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1369:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1370:..\FreeRTOS/tasks.c **** 
1371:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1372:..\FreeRTOS/tasks.c **** 
1373:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1374:..\FreeRTOS/tasks.c **** 	{
  26              		.loc 1 1374 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1375:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1376:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1377:..\FreeRTOS/tasks.c **** 
1378:..\FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1379:..\FreeRTOS/tasks.c **** 		section. */
1380:..\FreeRTOS/tasks.c **** 
1381:..\FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1382:..\FreeRTOS/tasks.c **** 		configASSERT( xTask );
1383:..\FreeRTOS/tasks.c **** 
1384:..\FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1385:..\FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
  32              		.loc 1 1385 0
  33 0000 4269     		ldr	r2, [r0, #20]
  34 0002 0B4B     		ldr	r3, .L10
  35 0004 9A42     		cmp	r2, r3
  36 0006 01D1     		bne	.L5
  37 0008 0123     		movs	r3, #1
  38 000a 00E0     		b	.L2
  39              	.L5:
  40 000c 0023     		movs	r3, #0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 26


  41              	.L2:
  42              		.loc 1 1385 0 is_stmt 0 discriminator 4
  43 000e 43B1     		cbz	r3, .L6
1386:..\FreeRTOS/tasks.c **** 		{
1387:..\FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1388:..\FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  44              		.loc 1 1388 0 is_stmt 1
  45 0010 826A     		ldr	r2, [r0, #40]
  46 0012 0849     		ldr	r1, .L10+4
  47 0014 8A42     		cmp	r2, r1
  48 0016 06D0     		beq	.L7
1389:..\FreeRTOS/tasks.c **** 			{
1390:..\FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1391:..\FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1392:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  49              		.loc 1 1392 0
  50 0018 02B1     		cbz	r2, .L4
  51 001a 0023     		movs	r3, #0
  52              	.L4:
  53              		.loc 1 1392 0 is_stmt 0 discriminator 4
  54 001c 2BB9     		cbnz	r3, .L9
1375:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  55              		.loc 1 1375 0 is_stmt 1
  56 001e 0020     		movs	r0, #0
  57              	.LVL1:
  58 0020 7047     		bx	lr
  59              	.LVL2:
  60              	.L6:
  61 0022 0020     		movs	r0, #0
  62              	.LVL3:
  63 0024 7047     		bx	lr
  64              	.LVL4:
  65              	.L7:
  66 0026 0020     		movs	r0, #0
  67              	.LVL5:
  68 0028 7047     		bx	lr
  69              	.LVL6:
  70              	.L9:
1393:..\FreeRTOS/tasks.c **** 				{
1394:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
  71              		.loc 1 1394 0
  72 002a 0120     		movs	r0, #1
  73              	.LVL7:
1395:..\FreeRTOS/tasks.c **** 				}
1396:..\FreeRTOS/tasks.c **** 				else
1397:..\FreeRTOS/tasks.c **** 				{
1398:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1399:..\FreeRTOS/tasks.c **** 				}
1400:..\FreeRTOS/tasks.c **** 			}
1401:..\FreeRTOS/tasks.c **** 			else
1402:..\FreeRTOS/tasks.c **** 			{
1403:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1404:..\FreeRTOS/tasks.c **** 			}
1405:..\FreeRTOS/tasks.c **** 		}
1406:..\FreeRTOS/tasks.c **** 		else
1407:..\FreeRTOS/tasks.c **** 		{
1408:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 27


1409:..\FreeRTOS/tasks.c **** 		}
1410:..\FreeRTOS/tasks.c **** 
1411:..\FreeRTOS/tasks.c **** 		return xReturn;
1412:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  74              		.loc 1 1412 0
  75 002c 7047     		bx	lr
  76              	.L11:
  77 002e 00BF     		.align	2
  78              	.L10:
  79 0030 00000000 		.word	.LANCHOR0
  80 0034 14000000 		.word	.LANCHOR0+20
  81              		.cfi_endproc
  82              	.LFE73:
  83              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  84              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  85              		.align	2
  86              		.thumb
  87              		.thumb_func
  88              		.type	prvTaskCheckFreeStackSpace, %function
  89              	prvTaskCheckFreeStackSpace:
  90              	.LFB98:
1413:..\FreeRTOS/tasks.c **** 
1414:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1415:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1416:..\FreeRTOS/tasks.c **** 
1417:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1418:..\FreeRTOS/tasks.c **** 
1419:..\FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1420:..\FreeRTOS/tasks.c **** 	{
1421:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1422:..\FreeRTOS/tasks.c **** 
1423:..\FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1424:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1425:..\FreeRTOS/tasks.c **** 
1426:..\FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1427:..\FreeRTOS/tasks.c **** 		currently executing task. */
1428:..\FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1429:..\FreeRTOS/tasks.c **** 		{
1430:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1431:..\FreeRTOS/tasks.c **** 			{
1432:..\FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1433:..\FreeRTOS/tasks.c **** 				{
1434:..\FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1435:..\FreeRTOS/tasks.c **** 
1436:..\FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1437:..\FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1438:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1439:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1440:..\FreeRTOS/tasks.c **** 
1441:..\FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1442:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1443:..\FreeRTOS/tasks.c **** 					{
1444:..\FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1445:..\FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1446:..\FreeRTOS/tasks.c **** 						next yield. */
1447:..\FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1448:..\FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 28


1449:..\FreeRTOS/tasks.c **** 					else
1450:..\FreeRTOS/tasks.c **** 					{
1451:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1452:..\FreeRTOS/tasks.c **** 					}
1453:..\FreeRTOS/tasks.c **** 				}
1454:..\FreeRTOS/tasks.c **** 				else
1455:..\FreeRTOS/tasks.c **** 				{
1456:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1457:..\FreeRTOS/tasks.c **** 				}
1458:..\FreeRTOS/tasks.c **** 			}
1459:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1460:..\FreeRTOS/tasks.c **** 		}
1461:..\FreeRTOS/tasks.c **** 		else
1462:..\FreeRTOS/tasks.c **** 		{
1463:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1464:..\FreeRTOS/tasks.c **** 		}
1465:..\FreeRTOS/tasks.c **** 	}
1466:..\FreeRTOS/tasks.c **** 
1467:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1468:..\FreeRTOS/tasks.c **** 
1469:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1470:..\FreeRTOS/tasks.c **** 
1471:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1472:..\FreeRTOS/tasks.c **** 
1473:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1474:..\FreeRTOS/tasks.c **** 	{
1475:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1476:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1477:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1478:..\FreeRTOS/tasks.c **** 
1479:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1480:..\FreeRTOS/tasks.c **** 
1481:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1482:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1483:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1484:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1485:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1486:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1487:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1488:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1489:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1490:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1491:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1492:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1493:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1494:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1495:..\FreeRTOS/tasks.c **** 		provided on the following link:
1496:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1497:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1498:..\FreeRTOS/tasks.c **** 
1499:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1500:..\FreeRTOS/tasks.c **** 		{
1501:..\FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1502:..\FreeRTOS/tasks.c **** 			{
1503:..\FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1504:..\FreeRTOS/tasks.c **** 
1505:..\FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 29


1506:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1507:..\FreeRTOS/tasks.c **** 				{
1508:..\FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1509:..\FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1510:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1511:..\FreeRTOS/tasks.c **** 					{
1512:..\FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1513:..\FreeRTOS/tasks.c **** 					}
1514:..\FreeRTOS/tasks.c **** 					else
1515:..\FreeRTOS/tasks.c **** 					{
1516:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1517:..\FreeRTOS/tasks.c **** 					}
1518:..\FreeRTOS/tasks.c **** 
1519:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1520:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1521:..\FreeRTOS/tasks.c **** 				}
1522:..\FreeRTOS/tasks.c **** 				else
1523:..\FreeRTOS/tasks.c **** 				{
1524:..\FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1525:..\FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1526:..\FreeRTOS/tasks.c **** 					unsuspended. */
1527:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1528:..\FreeRTOS/tasks.c **** 				}
1529:..\FreeRTOS/tasks.c **** 			}
1530:..\FreeRTOS/tasks.c **** 			else
1531:..\FreeRTOS/tasks.c **** 			{
1532:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1533:..\FreeRTOS/tasks.c **** 			}
1534:..\FreeRTOS/tasks.c **** 		}
1535:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1536:..\FreeRTOS/tasks.c **** 
1537:..\FreeRTOS/tasks.c **** 		return xYieldRequired;
1538:..\FreeRTOS/tasks.c **** 	}
1539:..\FreeRTOS/tasks.c **** 
1540:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1541:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1542:..\FreeRTOS/tasks.c **** 
1543:..\FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1544:..\FreeRTOS/tasks.c **** {
1545:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
1546:..\FreeRTOS/tasks.c **** 
1547:..\FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1548:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1549:..\FreeRTOS/tasks.c **** 	{
1550:..\FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1551:..\FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1552:..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1553:..\FreeRTOS/tasks.c **** 	}
1554:..\FreeRTOS/tasks.c **** 	#else
1555:..\FreeRTOS/tasks.c **** 	{
1556:..\FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1557:..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1558:..\FreeRTOS/tasks.c **** 	}
1559:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1560:..\FreeRTOS/tasks.c **** 
1561:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1562:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 30


1563:..\FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1564:..\FreeRTOS/tasks.c **** 		{
1565:..\FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1566:..\FreeRTOS/tasks.c **** 		}
1567:..\FreeRTOS/tasks.c **** 		else
1568:..\FreeRTOS/tasks.c **** 		{
1569:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1570:..\FreeRTOS/tasks.c **** 		}
1571:..\FreeRTOS/tasks.c **** 	}
1572:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1573:..\FreeRTOS/tasks.c **** 
1574:..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
1575:..\FreeRTOS/tasks.c **** 	{
1576:..\FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1577:..\FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1578:..\FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1579:..\FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1580:..\FreeRTOS/tasks.c **** 		starts to run. */
1581:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1582:..\FreeRTOS/tasks.c **** 
1583:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1584:..\FreeRTOS/tasks.c **** 		{
1585:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1586:..\FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1587:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1588:..\FreeRTOS/tasks.c **** 		}
1589:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1590:..\FreeRTOS/tasks.c **** 
1591:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1592:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1593:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1594:..\FreeRTOS/tasks.c **** 
1595:..\FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1596:..\FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1597:..\FreeRTOS/tasks.c **** 		the run time counter time base. */
1598:..\FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1599:..\FreeRTOS/tasks.c **** 
1600:..\FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1601:..\FreeRTOS/tasks.c **** 		portable interface. */
1602:..\FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1603:..\FreeRTOS/tasks.c **** 		{
1604:..\FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1605:..\FreeRTOS/tasks.c **** 			function will not return. */
1606:..\FreeRTOS/tasks.c **** 		}
1607:..\FreeRTOS/tasks.c **** 		else
1608:..\FreeRTOS/tasks.c **** 		{
1609:..\FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1610:..\FreeRTOS/tasks.c **** 		}
1611:..\FreeRTOS/tasks.c **** 	}
1612:..\FreeRTOS/tasks.c **** 	else
1613:..\FreeRTOS/tasks.c **** 	{
1614:..\FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1615:..\FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1616:..\FreeRTOS/tasks.c **** 		or the timer task. */
1617:..\FreeRTOS/tasks.c **** 		configASSERT( xReturn );
1618:..\FreeRTOS/tasks.c **** 	}
1619:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 31


1620:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1621:..\FreeRTOS/tasks.c **** 
1622:..\FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1623:..\FreeRTOS/tasks.c **** {
1624:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1625:..\FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1626:..\FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1627:..\FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
1628:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
1629:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
1630:..\FreeRTOS/tasks.c **** }
1631:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1632:..\FreeRTOS/tasks.c **** 
1633:..\FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1634:..\FreeRTOS/tasks.c **** {
1635:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1636:..\FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1637:..\FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1638:..\FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1639:..\FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
1640:..\FreeRTOS/tasks.c **** }
1641:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1642:..\FreeRTOS/tasks.c **** 
1643:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:..\FreeRTOS/tasks.c **** 
1645:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1646:..\FreeRTOS/tasks.c **** 	{
1647:..\FreeRTOS/tasks.c **** 	TickType_t xReturn;
1648:..\FreeRTOS/tasks.c **** 
1649:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1650:..\FreeRTOS/tasks.c **** 		{
1651:..\FreeRTOS/tasks.c **** 			xReturn = 0;
1652:..\FreeRTOS/tasks.c **** 		}
1653:..\FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1654:..\FreeRTOS/tasks.c **** 		{
1655:..\FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1656:..\FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1657:..\FreeRTOS/tasks.c **** 			processed. */
1658:..\FreeRTOS/tasks.c **** 			xReturn = 0;
1659:..\FreeRTOS/tasks.c **** 		}
1660:..\FreeRTOS/tasks.c **** 		else
1661:..\FreeRTOS/tasks.c **** 		{
1662:..\FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1663:..\FreeRTOS/tasks.c **** 		}
1664:..\FreeRTOS/tasks.c **** 
1665:..\FreeRTOS/tasks.c **** 		return xReturn;
1666:..\FreeRTOS/tasks.c **** 	}
1667:..\FreeRTOS/tasks.c **** 
1668:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1669:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1670:..\FreeRTOS/tasks.c **** 
1671:..\FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
1672:..\FreeRTOS/tasks.c **** {
1673:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
1674:..\FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
1675:..\FreeRTOS/tasks.c **** 
1676:..\FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 32


1677:..\FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1678:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1679:..\FreeRTOS/tasks.c **** 
1680:..\FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1681:..\FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1682:..\FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1683:..\FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1684:..\FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1685:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
1686:..\FreeRTOS/tasks.c **** 	{
1687:..\FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
1688:..\FreeRTOS/tasks.c **** 
1689:..\FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1690:..\FreeRTOS/tasks.c **** 		{
1691:..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1692:..\FreeRTOS/tasks.c **** 			{
1693:..\FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1694:..\FreeRTOS/tasks.c **** 				appropriate ready list. */
1695:..\FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1696:..\FreeRTOS/tasks.c **** 				{
1697:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1698:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1699:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1700:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1701:..\FreeRTOS/tasks.c **** 
1702:..\FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
1703:..\FreeRTOS/tasks.c **** 					task then a yield must be performed. */
1704:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1705:..\FreeRTOS/tasks.c **** 					{
1706:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
1707:..\FreeRTOS/tasks.c **** 					}
1708:..\FreeRTOS/tasks.c **** 					else
1709:..\FreeRTOS/tasks.c **** 					{
1710:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1711:..\FreeRTOS/tasks.c **** 					}
1712:..\FreeRTOS/tasks.c **** 				}
1713:..\FreeRTOS/tasks.c **** 
1714:..\FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1715:..\FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1716:..\FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1717:..\FreeRTOS/tasks.c **** 				time. */
1718:..\FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
1719:..\FreeRTOS/tasks.c **** 				{
1720:..\FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
1721:..\FreeRTOS/tasks.c **** 					{
1722:..\FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
1723:..\FreeRTOS/tasks.c **** 						{
1724:..\FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
1725:..\FreeRTOS/tasks.c **** 						}
1726:..\FreeRTOS/tasks.c **** 						else
1727:..\FreeRTOS/tasks.c **** 						{
1728:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1729:..\FreeRTOS/tasks.c **** 						}
1730:..\FreeRTOS/tasks.c **** 						--uxPendedTicks;
1731:..\FreeRTOS/tasks.c **** 					}
1732:..\FreeRTOS/tasks.c **** 				}
1733:..\FreeRTOS/tasks.c **** 				else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 33


1734:..\FreeRTOS/tasks.c **** 				{
1735:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1736:..\FreeRTOS/tasks.c **** 				}
1737:..\FreeRTOS/tasks.c **** 
1738:..\FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
1739:..\FreeRTOS/tasks.c **** 				{
1740:..\FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1741:..\FreeRTOS/tasks.c **** 					{
1742:..\FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
1743:..\FreeRTOS/tasks.c **** 					}
1744:..\FreeRTOS/tasks.c **** 					#endif
1745:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1746:..\FreeRTOS/tasks.c **** 				}
1747:..\FreeRTOS/tasks.c **** 				else
1748:..\FreeRTOS/tasks.c **** 				{
1749:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1750:..\FreeRTOS/tasks.c **** 				}
1751:..\FreeRTOS/tasks.c **** 			}
1752:..\FreeRTOS/tasks.c **** 		}
1753:..\FreeRTOS/tasks.c **** 		else
1754:..\FreeRTOS/tasks.c **** 		{
1755:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1756:..\FreeRTOS/tasks.c **** 		}
1757:..\FreeRTOS/tasks.c **** 	}
1758:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1759:..\FreeRTOS/tasks.c **** 
1760:..\FreeRTOS/tasks.c **** 	return xAlreadyYielded;
1761:..\FreeRTOS/tasks.c **** }
1762:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1763:..\FreeRTOS/tasks.c **** 
1764:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
1765:..\FreeRTOS/tasks.c **** {
1766:..\FreeRTOS/tasks.c **** TickType_t xTicks;
1767:..\FreeRTOS/tasks.c **** 
1768:..\FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1769:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1770:..\FreeRTOS/tasks.c **** 	{
1771:..\FreeRTOS/tasks.c **** 		xTicks = xTickCount;
1772:..\FreeRTOS/tasks.c **** 	}
1773:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1774:..\FreeRTOS/tasks.c **** 
1775:..\FreeRTOS/tasks.c **** 	return xTicks;
1776:..\FreeRTOS/tasks.c **** }
1777:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1778:..\FreeRTOS/tasks.c **** 
1779:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1780:..\FreeRTOS/tasks.c **** {
1781:..\FreeRTOS/tasks.c **** TickType_t xReturn;
1782:..\FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
1783:..\FreeRTOS/tasks.c **** 
1784:..\FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1785:..\FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1786:..\FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1787:..\FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1788:..\FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1789:..\FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1790:..\FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 34


1791:..\FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1792:..\FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1793:..\FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1794:..\FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1795:..\FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1796:..\FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1797:..\FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1798:..\FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1799:..\FreeRTOS/tasks.c **** 
1800:..\FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
1801:..\FreeRTOS/tasks.c **** 	{
1802:..\FreeRTOS/tasks.c **** 		xReturn = xTickCount;
1803:..\FreeRTOS/tasks.c **** 	}
1804:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1805:..\FreeRTOS/tasks.c **** 
1806:..\FreeRTOS/tasks.c **** 	return xReturn;
1807:..\FreeRTOS/tasks.c **** }
1808:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:..\FreeRTOS/tasks.c **** 
1810:..\FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1811:..\FreeRTOS/tasks.c **** {
1812:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1813:..\FreeRTOS/tasks.c **** 	BaseType_t. */
1814:..\FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
1815:..\FreeRTOS/tasks.c **** }
1816:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1817:..\FreeRTOS/tasks.c **** 
1818:..\FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1819:..\FreeRTOS/tasks.c **** 
1820:..\FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1821:..\FreeRTOS/tasks.c **** 	{
1822:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1823:..\FreeRTOS/tasks.c **** 
1824:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1825:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1826:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1827:..\FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1828:..\FreeRTOS/tasks.c **** 	}
1829:..\FreeRTOS/tasks.c **** 
1830:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1831:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1832:..\FreeRTOS/tasks.c **** 
1833:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1834:..\FreeRTOS/tasks.c **** 
1835:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1836:..\FreeRTOS/tasks.c **** 	{
1837:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
1838:..\FreeRTOS/tasks.c **** 
1839:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1840:..\FreeRTOS/tasks.c **** 		{
1841:..\FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1842:..\FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1843:..\FreeRTOS/tasks.c **** 			{
1844:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1845:..\FreeRTOS/tasks.c **** 				task in the Ready state. */
1846:..\FreeRTOS/tasks.c **** 				do
1847:..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 35


1848:..\FreeRTOS/tasks.c **** 					uxQueue--;
1849:..\FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1850:..\FreeRTOS/tasks.c **** 
1851:..\FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
1852:..\FreeRTOS/tasks.c **** 
1853:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1854:..\FreeRTOS/tasks.c **** 				task in the Blocked state. */
1855:..\FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
1856:..\FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
1857:..\FreeRTOS/tasks.c **** 
1858:..\FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1859:..\FreeRTOS/tasks.c **** 				{
1860:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1861:..\FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1862:..\FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1863:..\FreeRTOS/tasks.c **** 				}
1864:..\FreeRTOS/tasks.c **** 				#endif
1865:..\FreeRTOS/tasks.c **** 
1866:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1867:..\FreeRTOS/tasks.c **** 				{
1868:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1869:..\FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1870:..\FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1871:..\FreeRTOS/tasks.c **** 				}
1872:..\FreeRTOS/tasks.c **** 				#endif
1873:..\FreeRTOS/tasks.c **** 
1874:..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1875:..\FreeRTOS/tasks.c **** 				{
1876:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1877:..\FreeRTOS/tasks.c **** 					{
1878:..\FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1879:..\FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1880:..\FreeRTOS/tasks.c **** 						#else
1881:..\FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1882:..\FreeRTOS/tasks.c **** 						#endif
1883:..\FreeRTOS/tasks.c **** 					}
1884:..\FreeRTOS/tasks.c **** 				}
1885:..\FreeRTOS/tasks.c **** 				#else
1886:..\FreeRTOS/tasks.c **** 				{
1887:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1888:..\FreeRTOS/tasks.c **** 					{
1889:..\FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
1890:..\FreeRTOS/tasks.c **** 					}
1891:..\FreeRTOS/tasks.c **** 				}
1892:..\FreeRTOS/tasks.c **** 				#endif
1893:..\FreeRTOS/tasks.c **** 			}
1894:..\FreeRTOS/tasks.c **** 			else
1895:..\FreeRTOS/tasks.c **** 			{
1896:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1897:..\FreeRTOS/tasks.c **** 			}
1898:..\FreeRTOS/tasks.c **** 		}
1899:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
1900:..\FreeRTOS/tasks.c **** 
1901:..\FreeRTOS/tasks.c **** 		return uxTask;
1902:..\FreeRTOS/tasks.c **** 	}
1903:..\FreeRTOS/tasks.c **** 
1904:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 36


1905:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1906:..\FreeRTOS/tasks.c **** 
1907:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1908:..\FreeRTOS/tasks.c **** 
1909:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1910:..\FreeRTOS/tasks.c **** 	{
1911:..\FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1912:..\FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1913:..\FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1914:..\FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1915:..\FreeRTOS/tasks.c **** 	}
1916:..\FreeRTOS/tasks.c **** 
1917:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1918:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1919:..\FreeRTOS/tasks.c **** 
1920:..\FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1921:..\FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1922:..\FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1923:..\FreeRTOS/tasks.c **** 1. */
1924:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1925:..\FreeRTOS/tasks.c **** 
1926:..\FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1927:..\FreeRTOS/tasks.c **** 	{
1928:..\FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1929:..\FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1930:..\FreeRTOS/tasks.c **** 		each stepped tick. */
1931:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1932:..\FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1933:..\FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1934:..\FreeRTOS/tasks.c **** 	}
1935:..\FreeRTOS/tasks.c **** 
1936:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1937:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1938:..\FreeRTOS/tasks.c **** 
1939:..\FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
1940:..\FreeRTOS/tasks.c **** {
1941:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
1942:..\FreeRTOS/tasks.c **** TickType_t xItemValue;
1943:..\FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
1944:..\FreeRTOS/tasks.c **** 
1945:..\FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1946:..\FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1947:..\FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1948:..\FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1949:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1950:..\FreeRTOS/tasks.c **** 	{
1951:..\FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1952:..\FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1953:..\FreeRTOS/tasks.c **** 		++xTickCount;
1954:..\FreeRTOS/tasks.c **** 
1955:..\FreeRTOS/tasks.c **** 		{
1956:..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1957:..\FreeRTOS/tasks.c **** 			block. */
1958:..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1959:..\FreeRTOS/tasks.c **** 
1960:..\FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
1961:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 37


1962:..\FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
1963:..\FreeRTOS/tasks.c **** 			}
1964:..\FreeRTOS/tasks.c **** 			else
1965:..\FreeRTOS/tasks.c **** 			{
1966:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1967:..\FreeRTOS/tasks.c **** 			}
1968:..\FreeRTOS/tasks.c **** 
1969:..\FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1970:..\FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1971:..\FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1972:..\FreeRTOS/tasks.c **** 			look any further down the list. */
1973:..\FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
1974:..\FreeRTOS/tasks.c **** 			{
1975:..\FreeRTOS/tasks.c **** 				for( ;; )
1976:..\FreeRTOS/tasks.c **** 				{
1977:..\FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1978:..\FreeRTOS/tasks.c **** 					{
1979:..\FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1980:..\FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1981:..\FreeRTOS/tasks.c **** 						unlikely that the
1982:..\FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1983:..\FreeRTOS/tasks.c **** 						next time through. */
1984:..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
1985:..\FreeRTOS/tasks.c **** 						break;
1986:..\FreeRTOS/tasks.c **** 					}
1987:..\FreeRTOS/tasks.c **** 					else
1988:..\FreeRTOS/tasks.c **** 					{
1989:..\FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1990:..\FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1991:..\FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1992:..\FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1993:..\FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1994:..\FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1995:..\FreeRTOS/tasks.c **** 
1996:..\FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
1997:..\FreeRTOS/tasks.c **** 						{
1998:..\FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1999:..\FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
2000:..\FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
2001:..\FreeRTOS/tasks.c **** 							state -	so record the item value in
2002:..\FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
2003:..\FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
2004:..\FreeRTOS/tasks.c **** 							break;
2005:..\FreeRTOS/tasks.c **** 						}
2006:..\FreeRTOS/tasks.c **** 						else
2007:..\FreeRTOS/tasks.c **** 						{
2008:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2009:..\FreeRTOS/tasks.c **** 						}
2010:..\FreeRTOS/tasks.c **** 
2011:..\FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2012:..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2013:..\FreeRTOS/tasks.c **** 
2014:..\FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2015:..\FreeRTOS/tasks.c **** 						it from the event list. */
2016:..\FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2017:..\FreeRTOS/tasks.c **** 						{
2018:..\FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 38


2019:..\FreeRTOS/tasks.c **** 						}
2020:..\FreeRTOS/tasks.c **** 						else
2021:..\FreeRTOS/tasks.c **** 						{
2022:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2023:..\FreeRTOS/tasks.c **** 						}
2024:..\FreeRTOS/tasks.c **** 
2025:..\FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
2026:..\FreeRTOS/tasks.c **** 						list. */
2027:..\FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
2028:..\FreeRTOS/tasks.c **** 
2029:..\FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
2030:..\FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
2031:..\FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2032:..\FreeRTOS/tasks.c **** 						{
2033:..\FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
2034:..\FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
2035:..\FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
2036:..\FreeRTOS/tasks.c **** 							currently executing task. */
2037:..\FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2038:..\FreeRTOS/tasks.c **** 							{
2039:..\FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
2040:..\FreeRTOS/tasks.c **** 							}
2041:..\FreeRTOS/tasks.c **** 							else
2042:..\FreeRTOS/tasks.c **** 							{
2043:..\FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2044:..\FreeRTOS/tasks.c **** 							}
2045:..\FreeRTOS/tasks.c **** 						}
2046:..\FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
2047:..\FreeRTOS/tasks.c **** 					}
2048:..\FreeRTOS/tasks.c **** 				}
2049:..\FreeRTOS/tasks.c **** 			}
2050:..\FreeRTOS/tasks.c **** 		}
2051:..\FreeRTOS/tasks.c **** 
2052:..\FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2053:..\FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2054:..\FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2055:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2056:..\FreeRTOS/tasks.c **** 		{
2057:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2058:..\FreeRTOS/tasks.c **** 			{
2059:..\FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2060:..\FreeRTOS/tasks.c **** 			}
2061:..\FreeRTOS/tasks.c **** 			else
2062:..\FreeRTOS/tasks.c **** 			{
2063:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2064:..\FreeRTOS/tasks.c **** 			}
2065:..\FreeRTOS/tasks.c **** 		}
2066:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2067:..\FreeRTOS/tasks.c **** 
2068:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2069:..\FreeRTOS/tasks.c **** 		{
2070:..\FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2071:..\FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2072:..\FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2073:..\FreeRTOS/tasks.c **** 			{
2074:..\FreeRTOS/tasks.c **** 				vApplicationTickHook();
2075:..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 39


2076:..\FreeRTOS/tasks.c **** 			else
2077:..\FreeRTOS/tasks.c **** 			{
2078:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2079:..\FreeRTOS/tasks.c **** 			}
2080:..\FreeRTOS/tasks.c **** 		}
2081:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2082:..\FreeRTOS/tasks.c **** 	}
2083:..\FreeRTOS/tasks.c **** 	else
2084:..\FreeRTOS/tasks.c **** 	{
2085:..\FreeRTOS/tasks.c **** 		++uxPendedTicks;
2086:..\FreeRTOS/tasks.c **** 
2087:..\FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2088:..\FreeRTOS/tasks.c **** 		scheduler is locked. */
2089:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2090:..\FreeRTOS/tasks.c **** 		{
2091:..\FreeRTOS/tasks.c **** 			vApplicationTickHook();
2092:..\FreeRTOS/tasks.c **** 		}
2093:..\FreeRTOS/tasks.c **** 		#endif
2094:..\FreeRTOS/tasks.c **** 	}
2095:..\FreeRTOS/tasks.c **** 
2096:..\FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2097:..\FreeRTOS/tasks.c **** 	{
2098:..\FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2099:..\FreeRTOS/tasks.c **** 		{
2100:..\FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2101:..\FreeRTOS/tasks.c **** 		}
2102:..\FreeRTOS/tasks.c **** 		else
2103:..\FreeRTOS/tasks.c **** 		{
2104:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2105:..\FreeRTOS/tasks.c **** 		}
2106:..\FreeRTOS/tasks.c **** 	}
2107:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2108:..\FreeRTOS/tasks.c **** 
2109:..\FreeRTOS/tasks.c **** 	return xSwitchRequired;
2110:..\FreeRTOS/tasks.c **** }
2111:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2112:..\FreeRTOS/tasks.c **** 
2113:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2114:..\FreeRTOS/tasks.c **** 
2115:..\FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2116:..\FreeRTOS/tasks.c **** 	{
2117:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2118:..\FreeRTOS/tasks.c **** 
2119:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2120:..\FreeRTOS/tasks.c **** 		getting set. */
2121:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2122:..\FreeRTOS/tasks.c **** 		{
2123:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2124:..\FreeRTOS/tasks.c **** 		}
2125:..\FreeRTOS/tasks.c **** 		else
2126:..\FreeRTOS/tasks.c **** 		{
2127:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2128:..\FreeRTOS/tasks.c **** 		}
2129:..\FreeRTOS/tasks.c **** 
2130:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2131:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2132:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 40


2133:..\FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2134:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2135:..\FreeRTOS/tasks.c **** 	}
2136:..\FreeRTOS/tasks.c **** 
2137:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2138:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2139:..\FreeRTOS/tasks.c **** 
2140:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2141:..\FreeRTOS/tasks.c **** 
2142:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2143:..\FreeRTOS/tasks.c **** 	{
2144:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2145:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2146:..\FreeRTOS/tasks.c **** 
2147:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2148:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2149:..\FreeRTOS/tasks.c **** 		{
2150:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2151:..\FreeRTOS/tasks.c **** 		}
2152:..\FreeRTOS/tasks.c **** 		else
2153:..\FreeRTOS/tasks.c **** 		{
2154:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2155:..\FreeRTOS/tasks.c **** 		}
2156:..\FreeRTOS/tasks.c **** 
2157:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2158:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2159:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2160:..\FreeRTOS/tasks.c **** 		{
2161:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2162:..\FreeRTOS/tasks.c **** 		}
2163:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2164:..\FreeRTOS/tasks.c **** 
2165:..\FreeRTOS/tasks.c **** 		return xReturn;
2166:..\FreeRTOS/tasks.c **** 	}
2167:..\FreeRTOS/tasks.c **** 
2168:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2169:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2170:..\FreeRTOS/tasks.c **** 
2171:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2172:..\FreeRTOS/tasks.c **** 
2173:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2174:..\FreeRTOS/tasks.c **** 	{
2175:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2176:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2177:..\FreeRTOS/tasks.c **** 
2178:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2179:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2180:..\FreeRTOS/tasks.c **** 		{
2181:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2182:..\FreeRTOS/tasks.c **** 		}
2183:..\FreeRTOS/tasks.c **** 		else
2184:..\FreeRTOS/tasks.c **** 		{
2185:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2186:..\FreeRTOS/tasks.c **** 		}
2187:..\FreeRTOS/tasks.c **** 
2188:..\FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2189:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 41


2190:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2191:..\FreeRTOS/tasks.c **** 		}
2192:..\FreeRTOS/tasks.c **** 		else
2193:..\FreeRTOS/tasks.c **** 		{
2194:..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2195:..\FreeRTOS/tasks.c **** 		}
2196:..\FreeRTOS/tasks.c **** 
2197:..\FreeRTOS/tasks.c **** 		return xReturn;
2198:..\FreeRTOS/tasks.c **** 	}
2199:..\FreeRTOS/tasks.c **** 
2200:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2201:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2202:..\FreeRTOS/tasks.c **** 
2203:..\FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2204:..\FreeRTOS/tasks.c **** {
2205:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2206:..\FreeRTOS/tasks.c **** 	{
2207:..\FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2208:..\FreeRTOS/tasks.c **** 		switch. */
2209:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2210:..\FreeRTOS/tasks.c **** 	}
2211:..\FreeRTOS/tasks.c **** 	else
2212:..\FreeRTOS/tasks.c **** 	{
2213:..\FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2214:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2215:..\FreeRTOS/tasks.c **** 
2216:..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2217:..\FreeRTOS/tasks.c **** 		{
2218:..\FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2219:..\FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2220:..\FreeRTOS/tasks.c **** 				#else
2221:..\FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2222:..\FreeRTOS/tasks.c **** 				#endif
2223:..\FreeRTOS/tasks.c **** 
2224:..\FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2225:..\FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2226:..\FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2227:..\FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2228:..\FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2229:..\FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2230:..\FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2231:..\FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2232:..\FreeRTOS/tasks.c **** 				{
2233:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2234:..\FreeRTOS/tasks.c **** 				}
2235:..\FreeRTOS/tasks.c **** 				else
2236:..\FreeRTOS/tasks.c **** 				{
2237:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2238:..\FreeRTOS/tasks.c **** 				}
2239:..\FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2240:..\FreeRTOS/tasks.c **** 		}
2241:..\FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2242:..\FreeRTOS/tasks.c **** 
2243:..\FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2244:..\FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2245:..\FreeRTOS/tasks.c **** 
2246:..\FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 42


2247:..\FreeRTOS/tasks.c **** 		optimised asm code. */
2248:..\FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2249:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2250:..\FreeRTOS/tasks.c **** 
2251:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2252:..\FreeRTOS/tasks.c **** 		{
2253:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2254:..\FreeRTOS/tasks.c **** 			structure specific to this task. */
2255:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2256:..\FreeRTOS/tasks.c **** 		}
2257:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2258:..\FreeRTOS/tasks.c **** 	}
2259:..\FreeRTOS/tasks.c **** }
2260:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2261:..\FreeRTOS/tasks.c **** 
2262:..\FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2263:..\FreeRTOS/tasks.c **** {
2264:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
2265:..\FreeRTOS/tasks.c **** 
2266:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2267:..\FreeRTOS/tasks.c **** 
2268:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2269:..\FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2270:..\FreeRTOS/tasks.c **** 
2271:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2272:..\FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2273:..\FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2274:..\FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2275:..\FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2276:..\FreeRTOS/tasks.c **** 
2277:..\FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2278:..\FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2279:..\FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2280:..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2281:..\FreeRTOS/tasks.c **** 	{
2282:..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2283:..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2284:..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2285:..\FreeRTOS/tasks.c **** 	}
2286:..\FreeRTOS/tasks.c **** 	else
2287:..\FreeRTOS/tasks.c **** 	{
2288:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2289:..\FreeRTOS/tasks.c **** 	}
2290:..\FreeRTOS/tasks.c **** 
2291:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2292:..\FreeRTOS/tasks.c **** 	{
2293:..\FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2294:..\FreeRTOS/tasks.c **** 		{
2295:..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2296:..\FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2297:..\FreeRTOS/tasks.c **** 			block indefinitely. */
2298:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2299:..\FreeRTOS/tasks.c **** 		}
2300:..\FreeRTOS/tasks.c **** 		else
2301:..\FreeRTOS/tasks.c **** 		{
2302:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2303:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 43


2304:..\FreeRTOS/tasks.c **** 			scheduler will handle it. */
2305:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2306:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2307:..\FreeRTOS/tasks.c **** 		}
2308:..\FreeRTOS/tasks.c **** 	}
2309:..\FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2310:..\FreeRTOS/tasks.c **** 	{
2311:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2312:..\FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2313:..\FreeRTOS/tasks.c **** 			will handle it. */
2314:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2315:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2316:..\FreeRTOS/tasks.c **** 	}
2317:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2318:..\FreeRTOS/tasks.c **** }
2319:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:..\FreeRTOS/tasks.c **** 
2321:..\FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2322:..\FreeRTOS/tasks.c **** {
2323:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
2324:..\FreeRTOS/tasks.c **** 
2325:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2326:..\FreeRTOS/tasks.c **** 
2327:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2328:..\FreeRTOS/tasks.c **** 	the event groups implementation. */
2329:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2330:..\FreeRTOS/tasks.c **** 
2331:..\FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2332:..\FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2333:..\FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2334:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2335:..\FreeRTOS/tasks.c **** 
2336:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2337:..\FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2338:..\FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2339:..\FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2340:..\FreeRTOS/tasks.c **** 	the task level). */
2341:..\FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2342:..\FreeRTOS/tasks.c **** 
2343:..\FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2344:..\FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2345:..\FreeRTOS/tasks.c **** 	scheduler is locked. */
2346:..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2347:..\FreeRTOS/tasks.c **** 	{
2348:..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2349:..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2350:..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2351:..\FreeRTOS/tasks.c **** 	}
2352:..\FreeRTOS/tasks.c **** 	else
2353:..\FreeRTOS/tasks.c **** 	{
2354:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2355:..\FreeRTOS/tasks.c **** 	}
2356:..\FreeRTOS/tasks.c **** 
2357:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2358:..\FreeRTOS/tasks.c **** 	{
2359:..\FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2360:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 44


2361:..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2362:..\FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2363:..\FreeRTOS/tasks.c **** 			indefinitely. */
2364:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2365:..\FreeRTOS/tasks.c **** 		}
2366:..\FreeRTOS/tasks.c **** 		else
2367:..\FreeRTOS/tasks.c **** 		{
2368:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2369:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2370:..\FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2371:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2372:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2373:..\FreeRTOS/tasks.c **** 		}
2374:..\FreeRTOS/tasks.c **** 	}
2375:..\FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2376:..\FreeRTOS/tasks.c **** 	{
2377:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2378:..\FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2379:..\FreeRTOS/tasks.c **** 			will manage it correctly. */
2380:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2381:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2382:..\FreeRTOS/tasks.c **** 	}
2383:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2384:..\FreeRTOS/tasks.c **** }
2385:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:..\FreeRTOS/tasks.c **** 
2387:..\FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2388:..\FreeRTOS/tasks.c **** 
2389:..\FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2390:..\FreeRTOS/tasks.c **** 	{
2391:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
2392:..\FreeRTOS/tasks.c **** 
2393:..\FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2394:..\FreeRTOS/tasks.c **** 
2395:..\FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2396:..\FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2397:..\FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2398:..\FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2399:..\FreeRTOS/tasks.c **** 
2400:..\FreeRTOS/tasks.c **** 
2401:..\FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2402:..\FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2403:..\FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2404:..\FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2405:..\FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2406:..\FreeRTOS/tasks.c **** 
2407:..\FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2408:..\FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2409:..\FreeRTOS/tasks.c **** 		function is called with the scheduler locked so interrupts will not
2410:..\FreeRTOS/tasks.c **** 		access the lists at the same time. */
2411:..\FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2412:..\FreeRTOS/tasks.c **** 		{
2413:..\FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2414:..\FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2415:..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2416:..\FreeRTOS/tasks.c **** 		}
2417:..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 45


2418:..\FreeRTOS/tasks.c **** 		{
2419:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2420:..\FreeRTOS/tasks.c **** 		}
2421:..\FreeRTOS/tasks.c **** 
2422:..\FreeRTOS/tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2423:..\FreeRTOS/tasks.c **** 		available and a task that is blocking indefinitely can enter the
2424:..\FreeRTOS/tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2425:..\FreeRTOS/tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2426:..\FreeRTOS/tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2427:..\FreeRTOS/tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2428:..\FreeRTOS/tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
2429:..\FreeRTOS/tasks.c **** 		{
2430:..\FreeRTOS/tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2431:..\FreeRTOS/tasks.c **** 			{
2432:..\FreeRTOS/tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2433:..\FreeRTOS/tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2434:..\FreeRTOS/tasks.c **** 				will block indefinitely. */
2435:..\FreeRTOS/tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2436:..\FreeRTOS/tasks.c **** 			}
2437:..\FreeRTOS/tasks.c **** 			else
2438:..\FreeRTOS/tasks.c **** 			{
2439:..\FreeRTOS/tasks.c **** 				/* Calculate the time at which the task should be woken if the
2440:..\FreeRTOS/tasks.c **** 				event does not occur.  This may overflow but this doesn't
2441:..\FreeRTOS/tasks.c **** 				matter. */
2442:..\FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2443:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
2444:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2445:..\FreeRTOS/tasks.c **** 			}
2446:..\FreeRTOS/tasks.c **** 		}
2447:..\FreeRTOS/tasks.c **** 		#else
2448:..\FreeRTOS/tasks.c **** 		{
2449:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2450:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2451:..\FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2452:..\FreeRTOS/tasks.c **** 			traceTASK_DELAY_UNTIL();
2453:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2454:..\FreeRTOS/tasks.c **** 
2455:..\FreeRTOS/tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2456:..\FreeRTOS/tasks.c **** 			defined. */
2457:..\FreeRTOS/tasks.c **** 			( void ) xWaitIndefinitely;
2458:..\FreeRTOS/tasks.c **** 		}
2459:..\FreeRTOS/tasks.c **** 		#endif
2460:..\FreeRTOS/tasks.c **** 	}
2461:..\FreeRTOS/tasks.c **** 
2462:..\FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2463:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2464:..\FreeRTOS/tasks.c **** 
2465:..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2466:..\FreeRTOS/tasks.c **** {
2467:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2468:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2469:..\FreeRTOS/tasks.c **** 
2470:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2471:..\FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2472:..\FreeRTOS/tasks.c **** 
2473:..\FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2474:..\FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 46


2475:..\FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2476:..\FreeRTOS/tasks.c **** 
2477:..\FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2478:..\FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2479:..\FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2480:..\FreeRTOS/tasks.c **** 
2481:..\FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2482:..\FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2483:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2484:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2485:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2486:..\FreeRTOS/tasks.c **** 
2487:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2488:..\FreeRTOS/tasks.c **** 	{
2489:..\FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2490:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2491:..\FreeRTOS/tasks.c **** 	}
2492:..\FreeRTOS/tasks.c **** 	else
2493:..\FreeRTOS/tasks.c **** 	{
2494:..\FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2495:..\FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2496:..\FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2497:..\FreeRTOS/tasks.c **** 	}
2498:..\FreeRTOS/tasks.c **** 
2499:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2500:..\FreeRTOS/tasks.c **** 	{
2501:..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2502:..\FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2503:..\FreeRTOS/tasks.c **** 		it should force a context switch now. */
2504:..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
2505:..\FreeRTOS/tasks.c **** 
2506:..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2507:..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2508:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2509:..\FreeRTOS/tasks.c **** 	}
2510:..\FreeRTOS/tasks.c **** 	else
2511:..\FreeRTOS/tasks.c **** 	{
2512:..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
2513:..\FreeRTOS/tasks.c **** 	}
2514:..\FreeRTOS/tasks.c **** 
2515:..\FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2516:..\FreeRTOS/tasks.c **** 	{
2517:..\FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2518:..\FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2519:..\FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2520:..\FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2521:..\FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2522:..\FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2523:..\FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2524:..\FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
2525:..\FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
2526:..\FreeRTOS/tasks.c **** 	}
2527:..\FreeRTOS/tasks.c **** 	#endif
2528:..\FreeRTOS/tasks.c **** 
2529:..\FreeRTOS/tasks.c **** 	return xReturn;
2530:..\FreeRTOS/tasks.c **** }
2531:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 47


2532:..\FreeRTOS/tasks.c **** 
2533:..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2534:..\FreeRTOS/tasks.c **** {
2535:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2536:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2537:..\FreeRTOS/tasks.c **** 
2538:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2539:..\FreeRTOS/tasks.c **** 	the event flags implementation. */
2540:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2541:..\FreeRTOS/tasks.c **** 
2542:..\FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2543:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2544:..\FreeRTOS/tasks.c **** 
2545:..\FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2546:..\FreeRTOS/tasks.c **** 	event flags. */
2547:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2548:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2549:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2550:..\FreeRTOS/tasks.c **** 
2551:..\FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2552:..\FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2553:..\FreeRTOS/tasks.c **** 	lists. */
2554:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2555:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2556:..\FreeRTOS/tasks.c **** 
2557:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:..\FreeRTOS/tasks.c **** 	{
2559:..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2560:..\FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2561:..\FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2562:..\FreeRTOS/tasks.c **** 		switch now. */
2563:..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
2564:..\FreeRTOS/tasks.c **** 
2565:..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2566:..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2567:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2568:..\FreeRTOS/tasks.c **** 	}
2569:..\FreeRTOS/tasks.c **** 	else
2570:..\FreeRTOS/tasks.c **** 	{
2571:..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
2572:..\FreeRTOS/tasks.c **** 	}
2573:..\FreeRTOS/tasks.c **** 
2574:..\FreeRTOS/tasks.c **** 	return xReturn;
2575:..\FreeRTOS/tasks.c **** }
2576:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2577:..\FreeRTOS/tasks.c **** 
2578:..\FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2579:..\FreeRTOS/tasks.c **** {
2580:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
2581:..\FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2582:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2583:..\FreeRTOS/tasks.c **** }
2584:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2585:..\FreeRTOS/tasks.c **** 
2586:..\FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2587:..\FreeRTOS/tasks.c **** {
2588:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 48


2589:..\FreeRTOS/tasks.c **** 
2590:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
2591:..\FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
2592:..\FreeRTOS/tasks.c **** 
2593:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2594:..\FreeRTOS/tasks.c **** 	{
2595:..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2596:..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
2597:..\FreeRTOS/tasks.c **** 
2598:..\FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2599:..\FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2600:..\FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2601:..\FreeRTOS/tasks.c **** 			therefore never time out. */
2602:..\FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2603:..\FreeRTOS/tasks.c **** 			{
2604:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
2605:..\FreeRTOS/tasks.c **** 			}
2606:..\FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2607:..\FreeRTOS/tasks.c **** 		#endif
2608:..\FreeRTOS/tasks.c **** 
2609:..\FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
2610:..\FreeRTOS/tasks.c **** 		{
2611:..\FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2612:..\FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2613:..\FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2614:..\FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2615:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
2616:..\FreeRTOS/tasks.c **** 		}
2617:..\FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
2618:..\FreeRTOS/tasks.c **** 		{
2619:..\FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2620:..\FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2621:..\FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2622:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
2623:..\FreeRTOS/tasks.c **** 		}
2624:..\FreeRTOS/tasks.c **** 		else
2625:..\FreeRTOS/tasks.c **** 		{
2626:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
2627:..\FreeRTOS/tasks.c **** 		}
2628:..\FreeRTOS/tasks.c **** 	}
2629:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2630:..\FreeRTOS/tasks.c **** 
2631:..\FreeRTOS/tasks.c **** 	return xReturn;
2632:..\FreeRTOS/tasks.c **** }
2633:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2634:..\FreeRTOS/tasks.c **** 
2635:..\FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2636:..\FreeRTOS/tasks.c **** {
2637:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
2638:..\FreeRTOS/tasks.c **** }
2639:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2640:..\FreeRTOS/tasks.c **** 
2641:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2642:..\FreeRTOS/tasks.c **** 
2643:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2644:..\FreeRTOS/tasks.c **** 	{
2645:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 49


2646:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2647:..\FreeRTOS/tasks.c **** 
2648:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
2649:..\FreeRTOS/tasks.c **** 		{
2650:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2651:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2652:..\FreeRTOS/tasks.c **** 		}
2653:..\FreeRTOS/tasks.c **** 		else
2654:..\FreeRTOS/tasks.c **** 		{
2655:..\FreeRTOS/tasks.c **** 			uxReturn = 0U;
2656:..\FreeRTOS/tasks.c **** 		}
2657:..\FreeRTOS/tasks.c **** 
2658:..\FreeRTOS/tasks.c **** 		return uxReturn;
2659:..\FreeRTOS/tasks.c **** 	}
2660:..\FreeRTOS/tasks.c **** 
2661:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2662:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2663:..\FreeRTOS/tasks.c **** 
2664:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2665:..\FreeRTOS/tasks.c **** 
2666:..\FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2667:..\FreeRTOS/tasks.c **** 	{
2668:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2669:..\FreeRTOS/tasks.c **** 
2670:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
2671:..\FreeRTOS/tasks.c **** 		{
2672:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2673:..\FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2674:..\FreeRTOS/tasks.c **** 		}
2675:..\FreeRTOS/tasks.c **** 	}
2676:..\FreeRTOS/tasks.c **** 
2677:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2678:..\FreeRTOS/tasks.c **** 
2679:..\FreeRTOS/tasks.c **** /*
2680:..\FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2681:..\FreeRTOS/tasks.c ****  * The Idle task.
2682:..\FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2683:..\FreeRTOS/tasks.c ****  *
2684:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2685:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2686:..\FreeRTOS/tasks.c ****  *
2687:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2688:..\FreeRTOS/tasks.c ****  *
2689:..\FreeRTOS/tasks.c ****  */
2690:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2691:..\FreeRTOS/tasks.c **** {
2692:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
2693:..\FreeRTOS/tasks.c **** 	( void ) pvParameters;
2694:..\FreeRTOS/tasks.c **** 
2695:..\FreeRTOS/tasks.c **** 	for( ;; )
2696:..\FreeRTOS/tasks.c **** 	{
2697:..\FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2698:..\FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
2699:..\FreeRTOS/tasks.c **** 
2700:..\FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2701:..\FreeRTOS/tasks.c **** 		{
2702:..\FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 50


2703:..\FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2704:..\FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2705:..\FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2706:..\FreeRTOS/tasks.c **** 			taskYIELD();
2707:..\FreeRTOS/tasks.c **** 		}
2708:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2709:..\FreeRTOS/tasks.c **** 
2710:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2711:..\FreeRTOS/tasks.c **** 		{
2712:..\FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2713:..\FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2714:..\FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2715:..\FreeRTOS/tasks.c **** 			timeslice.
2716:..\FreeRTOS/tasks.c **** 
2717:..\FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2718:..\FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2719:..\FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2720:..\FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2721:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
2722:..\FreeRTOS/tasks.c **** 			{
2723:..\FreeRTOS/tasks.c **** 				taskYIELD();
2724:..\FreeRTOS/tasks.c **** 			}
2725:..\FreeRTOS/tasks.c **** 			else
2726:..\FreeRTOS/tasks.c **** 			{
2727:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2728:..\FreeRTOS/tasks.c **** 			}
2729:..\FreeRTOS/tasks.c **** 		}
2730:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2731:..\FreeRTOS/tasks.c **** 
2732:..\FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2733:..\FreeRTOS/tasks.c **** 		{
2734:..\FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2735:..\FreeRTOS/tasks.c **** 
2736:..\FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2737:..\FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2738:..\FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2739:..\FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2740:..\FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2741:..\FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2742:..\FreeRTOS/tasks.c **** 		}
2743:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2744:..\FreeRTOS/tasks.c **** 
2745:..\FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2746:..\FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2747:..\FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2748:..\FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2749:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2750:..\FreeRTOS/tasks.c **** 		{
2751:..\FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
2752:..\FreeRTOS/tasks.c **** 
2753:..\FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2754:..\FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2755:..\FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2756:..\FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2757:..\FreeRTOS/tasks.c **** 			valid. */
2758:..\FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2759:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 51


2760:..\FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2761:..\FreeRTOS/tasks.c **** 			{
2762:..\FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2763:..\FreeRTOS/tasks.c **** 				{
2764:..\FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2765:..\FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2766:..\FreeRTOS/tasks.c **** 					be used. */
2767:..\FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2768:..\FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2769:..\FreeRTOS/tasks.c **** 
2770:..\FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2771:..\FreeRTOS/tasks.c **** 					{
2772:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2773:..\FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2774:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2775:..\FreeRTOS/tasks.c **** 					}
2776:..\FreeRTOS/tasks.c **** 					else
2777:..\FreeRTOS/tasks.c **** 					{
2778:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2779:..\FreeRTOS/tasks.c **** 					}
2780:..\FreeRTOS/tasks.c **** 				}
2781:..\FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2782:..\FreeRTOS/tasks.c **** 			}
2783:..\FreeRTOS/tasks.c **** 			else
2784:..\FreeRTOS/tasks.c **** 			{
2785:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2786:..\FreeRTOS/tasks.c **** 			}
2787:..\FreeRTOS/tasks.c **** 		}
2788:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2789:..\FreeRTOS/tasks.c **** 	}
2790:..\FreeRTOS/tasks.c **** }
2791:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2792:..\FreeRTOS/tasks.c **** 
2793:..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2794:..\FreeRTOS/tasks.c **** 
2795:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2796:..\FreeRTOS/tasks.c **** 	{
2797:..\FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2798:..\FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
2799:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2800:..\FreeRTOS/tasks.c **** 
2801:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2802:..\FreeRTOS/tasks.c **** 		{
2803:..\FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2804:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2805:..\FreeRTOS/tasks.c **** 		}
2806:..\FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2807:..\FreeRTOS/tasks.c **** 		{
2808:..\FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2809:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2810:..\FreeRTOS/tasks.c **** 		}
2811:..\FreeRTOS/tasks.c **** 		else
2812:..\FreeRTOS/tasks.c **** 		{
2813:..\FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2814:..\FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
2815:..\FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
2816:..\FreeRTOS/tasks.c **** 			interrupts. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 52


2817:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2818:..\FreeRTOS/tasks.c **** 			{
2819:..\FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2820:..\FreeRTOS/tasks.c **** 			}
2821:..\FreeRTOS/tasks.c **** 			else
2822:..\FreeRTOS/tasks.c **** 			{
2823:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2824:..\FreeRTOS/tasks.c **** 			}
2825:..\FreeRTOS/tasks.c **** 		}
2826:..\FreeRTOS/tasks.c **** 
2827:..\FreeRTOS/tasks.c **** 		return eReturn;
2828:..\FreeRTOS/tasks.c **** 	}
2829:..\FreeRTOS/tasks.c **** 
2830:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2831:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2832:..\FreeRTOS/tasks.c **** 
2833:..\FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2834:..\FreeRTOS/tasks.c **** {
2835:..\FreeRTOS/tasks.c **** UBaseType_t x;
2836:..\FreeRTOS/tasks.c **** 
2837:..\FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2838:..\FreeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2839:..\FreeRTOS/tasks.c **** 	{
2840:..\FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2841:..\FreeRTOS/tasks.c **** 
2842:..\FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2843:..\FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2844:..\FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2845:..\FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
2846:..\FreeRTOS/tasks.c **** 		{
2847:..\FreeRTOS/tasks.c **** 			break;
2848:..\FreeRTOS/tasks.c **** 		}
2849:..\FreeRTOS/tasks.c **** 		else
2850:..\FreeRTOS/tasks.c **** 		{
2851:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2852:..\FreeRTOS/tasks.c **** 		}
2853:..\FreeRTOS/tasks.c **** 	}
2854:..\FreeRTOS/tasks.c **** 
2855:..\FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2856:..\FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2857:..\FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2858:..\FreeRTOS/tasks.c **** 
2859:..\FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2860:..\FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2861:..\FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2862:..\FreeRTOS/tasks.c **** 	{
2863:..\FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2864:..\FreeRTOS/tasks.c **** 	}
2865:..\FreeRTOS/tasks.c **** 	else
2866:..\FreeRTOS/tasks.c **** 	{
2867:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2868:..\FreeRTOS/tasks.c **** 	}
2869:..\FreeRTOS/tasks.c **** 
2870:..\FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2871:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2872:..\FreeRTOS/tasks.c **** 	{
2873:..\FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 53


2874:..\FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
2875:..\FreeRTOS/tasks.c **** 	}
2876:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2877:..\FreeRTOS/tasks.c **** 
2878:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2879:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2880:..\FreeRTOS/tasks.c **** 
2881:..\FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2882:..\FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2883:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2884:..\FreeRTOS/tasks.c **** 
2885:..\FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2886:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
2887:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2888:..\FreeRTOS/tasks.c **** 
2889:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2890:..\FreeRTOS/tasks.c **** 	{
2891:..\FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2892:..\FreeRTOS/tasks.c **** 	}
2893:..\FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2894:..\FreeRTOS/tasks.c **** 
2895:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2896:..\FreeRTOS/tasks.c **** 	{
2897:..\FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2898:..\FreeRTOS/tasks.c **** 	}
2899:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2900:..\FreeRTOS/tasks.c **** 
2901:..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2902:..\FreeRTOS/tasks.c **** 	{
2903:..\FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2904:..\FreeRTOS/tasks.c **** 	}
2905:..\FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2906:..\FreeRTOS/tasks.c **** 
2907:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2908:..\FreeRTOS/tasks.c **** 	{
2909:..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2910:..\FreeRTOS/tasks.c **** 	}
2911:..\FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2912:..\FreeRTOS/tasks.c **** 	{
2913:..\FreeRTOS/tasks.c **** 		( void ) xRegions;
2914:..\FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2915:..\FreeRTOS/tasks.c **** 	}
2916:..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2917:..\FreeRTOS/tasks.c **** 
2918:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2919:..\FreeRTOS/tasks.c **** 	{
2920:..\FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2921:..\FreeRTOS/tasks.c **** 		{
2922:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
2923:..\FreeRTOS/tasks.c **** 		}
2924:..\FreeRTOS/tasks.c **** 	}
2925:..\FreeRTOS/tasks.c **** 	#endif
2926:..\FreeRTOS/tasks.c **** 
2927:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2928:..\FreeRTOS/tasks.c **** 	{
2929:..\FreeRTOS/tasks.c **** 		pxTCB->ulNotifiedValue = 0;
2930:..\FreeRTOS/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 54


2931:..\FreeRTOS/tasks.c **** 	}
2932:..\FreeRTOS/tasks.c **** 	#endif
2933:..\FreeRTOS/tasks.c **** 
2934:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2935:..\FreeRTOS/tasks.c **** 	{
2936:..\FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2937:..\FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2938:..\FreeRTOS/tasks.c **** 	}
2939:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2940:..\FreeRTOS/tasks.c **** }
2941:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2942:..\FreeRTOS/tasks.c **** 
2943:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2944:..\FreeRTOS/tasks.c **** 
2945:..\FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2946:..\FreeRTOS/tasks.c **** 	{
2947:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2948:..\FreeRTOS/tasks.c **** 
2949:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2950:..\FreeRTOS/tasks.c **** 		{
2951:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2952:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2953:..\FreeRTOS/tasks.c **** 		}
2954:..\FreeRTOS/tasks.c **** 	}
2955:..\FreeRTOS/tasks.c **** 
2956:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2957:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2958:..\FreeRTOS/tasks.c **** 
2959:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2960:..\FreeRTOS/tasks.c **** 
2961:..\FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2962:..\FreeRTOS/tasks.c **** 	{
2963:..\FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
2964:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2965:..\FreeRTOS/tasks.c **** 
2966:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2967:..\FreeRTOS/tasks.c **** 		{
2968:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2969:..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2970:..\FreeRTOS/tasks.c **** 		}
2971:..\FreeRTOS/tasks.c **** 		else
2972:..\FreeRTOS/tasks.c **** 		{
2973:..\FreeRTOS/tasks.c **** 			pvReturn = NULL;
2974:..\FreeRTOS/tasks.c **** 		}
2975:..\FreeRTOS/tasks.c **** 
2976:..\FreeRTOS/tasks.c **** 		return pvReturn;
2977:..\FreeRTOS/tasks.c **** 	}
2978:..\FreeRTOS/tasks.c **** 
2979:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2980:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2981:..\FreeRTOS/tasks.c **** 
2982:..\FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2983:..\FreeRTOS/tasks.c **** 
2984:..\FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2985:..\FreeRTOS/tasks.c **** 	{
2986:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2987:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 55


2988:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
2989:..\FreeRTOS/tasks.c **** 		the calling task. */
2990:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2991:..\FreeRTOS/tasks.c **** 
2992:..\FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2993:..\FreeRTOS/tasks.c **** 	}
2994:..\FreeRTOS/tasks.c **** 
2995:..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2996:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2997:..\FreeRTOS/tasks.c **** 
2998:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2999:..\FreeRTOS/tasks.c **** {
3000:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3001:..\FreeRTOS/tasks.c **** 
3002:..\FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3003:..\FreeRTOS/tasks.c **** 	{
3004:..\FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3005:..\FreeRTOS/tasks.c **** 	}
3006:..\FreeRTOS/tasks.c **** 
3007:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3008:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3009:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3010:..\FreeRTOS/tasks.c **** 
3011:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3012:..\FreeRTOS/tasks.c **** 	{
3013:..\FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3014:..\FreeRTOS/tasks.c **** 	}
3015:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3016:..\FreeRTOS/tasks.c **** 
3017:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3018:..\FreeRTOS/tasks.c **** 	{
3019:..\FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3020:..\FreeRTOS/tasks.c **** 	}
3021:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3022:..\FreeRTOS/tasks.c **** 
3023:..\FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3024:..\FreeRTOS/tasks.c **** 	using list2. */
3025:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3026:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3027:..\FreeRTOS/tasks.c **** }
3028:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3029:..\FreeRTOS/tasks.c **** 
3030:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3031:..\FreeRTOS/tasks.c **** {
3032:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3033:..\FreeRTOS/tasks.c **** 	{
3034:..\FreeRTOS/tasks.c **** 		BaseType_t xListIsEmpty;
3035:..\FreeRTOS/tasks.c **** 
3036:..\FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3037:..\FreeRTOS/tasks.c **** 		too often in the idle task. */
3038:..\FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
3039:..\FreeRTOS/tasks.c **** 		{
3040:..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
3041:..\FreeRTOS/tasks.c **** 			{
3042:..\FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3043:..\FreeRTOS/tasks.c **** 			}
3044:..\FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 56


3045:..\FreeRTOS/tasks.c **** 
3046:..\FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3047:..\FreeRTOS/tasks.c **** 			{
3048:..\FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
3049:..\FreeRTOS/tasks.c **** 
3050:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
3051:..\FreeRTOS/tasks.c **** 				{
3052:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3053:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
3054:..\FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
3055:..\FreeRTOS/tasks.c **** 					--uxTasksDeleted;
3056:..\FreeRTOS/tasks.c **** 				}
3057:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
3058:..\FreeRTOS/tasks.c **** 
3059:..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
3060:..\FreeRTOS/tasks.c **** 			}
3061:..\FreeRTOS/tasks.c **** 			else
3062:..\FreeRTOS/tasks.c **** 			{
3063:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3064:..\FreeRTOS/tasks.c **** 			}
3065:..\FreeRTOS/tasks.c **** 		}
3066:..\FreeRTOS/tasks.c **** 	}
3067:..\FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
3068:..\FreeRTOS/tasks.c **** }
3069:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3070:..\FreeRTOS/tasks.c **** 
3071:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3072:..\FreeRTOS/tasks.c **** {
3073:..\FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
3074:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
3075:..\FreeRTOS/tasks.c **** 
3076:..\FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
3077:..\FreeRTOS/tasks.c **** 	{
3078:..\FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3079:..\FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3080:..\FreeRTOS/tasks.c **** 	}
3081:..\FreeRTOS/tasks.c **** 	else
3082:..\FreeRTOS/tasks.c **** 	{
3083:..\FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3084:..\FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3085:..\FreeRTOS/tasks.c **** 
3086:..\FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3087:..\FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3088:..\FreeRTOS/tasks.c **** 		too. */
3089:..\FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
3090:..\FreeRTOS/tasks.c **** 		{
3091:..\FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
3092:..\FreeRTOS/tasks.c **** 		}
3093:..\FreeRTOS/tasks.c **** 		else
3094:..\FreeRTOS/tasks.c **** 		{
3095:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3096:..\FreeRTOS/tasks.c **** 		}
3097:..\FreeRTOS/tasks.c **** 	}
3098:..\FreeRTOS/tasks.c **** }
3099:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3100:..\FreeRTOS/tasks.c **** 
3101:..\FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 57


3102:..\FreeRTOS/tasks.c **** {
3103:..\FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
3104:..\FreeRTOS/tasks.c **** 
3105:..\FreeRTOS/tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3106:..\FreeRTOS/tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3107:..\FreeRTOS/tasks.c **** 	the TCB then the stack. */
3108:..\FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3109:..\FreeRTOS/tasks.c **** 	{
3110:..\FreeRTOS/tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3111:..\FreeRTOS/tasks.c **** 		the implementation of the port malloc function. */
3112:..\FreeRTOS/tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3113:..\FreeRTOS/tasks.c **** 
3114:..\FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
3115:..\FreeRTOS/tasks.c **** 		{
3116:..\FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created.
3117:..\FreeRTOS/tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3118:..\FreeRTOS/tasks.c **** 			be deleted later if required. */
3119:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3120:..\FreeRTOS/tasks.c **** 
3121:..\FreeRTOS/tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3122:..\FreeRTOS/tasks.c **** 			{
3123:..\FreeRTOS/tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3124:..\FreeRTOS/tasks.c **** 				vPortFree( pxNewTCB );
3125:..\FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
3126:..\FreeRTOS/tasks.c **** 			}
3127:..\FreeRTOS/tasks.c **** 		}
3128:..\FreeRTOS/tasks.c **** 	}
3129:..\FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
3130:..\FreeRTOS/tasks.c **** 	{
3131:..\FreeRTOS/tasks.c **** 	StackType_t *pxStack;
3132:..\FreeRTOS/tasks.c **** 
3133:..\FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3134:..\FreeRTOS/tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
3135:..\FreeRTOS/tasks.c **** 
3136:..\FreeRTOS/tasks.c **** 		if( pxStack != NULL )
3137:..\FreeRTOS/tasks.c **** 		{
3138:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3139:..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function. */
3140:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3141:..\FreeRTOS/tasks.c **** 
3142:..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
3143:..\FreeRTOS/tasks.c **** 			{
3144:..\FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
3145:..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxStack;
3146:..\FreeRTOS/tasks.c **** 			}
3147:..\FreeRTOS/tasks.c **** 			else
3148:..\FreeRTOS/tasks.c **** 			{
3149:..\FreeRTOS/tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3150:..\FreeRTOS/tasks.c **** 				again. */
3151:..\FreeRTOS/tasks.c **** 				vPortFree( pxStack );
3152:..\FreeRTOS/tasks.c **** 			}
3153:..\FreeRTOS/tasks.c **** 		}
3154:..\FreeRTOS/tasks.c **** 		else
3155:..\FreeRTOS/tasks.c **** 		{
3156:..\FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
3157:..\FreeRTOS/tasks.c **** 		}
3158:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 58


3159:..\FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
3160:..\FreeRTOS/tasks.c **** 
3161:..\FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
3162:..\FreeRTOS/tasks.c **** 	{
3163:..\FreeRTOS/tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3164:..\FreeRTOS/tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3165:..\FreeRTOS/tasks.c **** 		{
3166:..\FreeRTOS/tasks.c **** 			/* Just to help debugging. */
3167:..\FreeRTOS/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
3168:..\FreeRTOS/tasks.c **** 		}
3169:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
3170:..\FreeRTOS/tasks.c **** 	}
3171:..\FreeRTOS/tasks.c **** 
3172:..\FreeRTOS/tasks.c **** 	return pxNewTCB;
3173:..\FreeRTOS/tasks.c **** }
3174:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3175:..\FreeRTOS/tasks.c **** 
3176:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3177:..\FreeRTOS/tasks.c **** 
3178:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3179:..\FreeRTOS/tasks.c **** 	{
3180:..\FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3181:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3182:..\FreeRTOS/tasks.c **** 
3183:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3184:..\FreeRTOS/tasks.c **** 		{
3185:..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3186:..\FreeRTOS/tasks.c **** 
3187:..\FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3188:..\FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3189:..\FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3190:..\FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3191:..\FreeRTOS/tasks.c **** 			do
3192:..\FreeRTOS/tasks.c **** 			{
3193:..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3194:..\FreeRTOS/tasks.c **** 
3195:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
3196:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
3197:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
3198:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
3199:..\FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
3200:..\FreeRTOS/tasks.c **** 
3201:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3202:..\FreeRTOS/tasks.c **** 				{
3203:..\FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
3204:..\FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
3205:..\FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
3206:..\FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3207:..\FreeRTOS/tasks.c **** 					{
3208:..\FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
3209:..\FreeRTOS/tasks.c **** 						{
3210:..\FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
3211:..\FreeRTOS/tasks.c **** 						}
3212:..\FreeRTOS/tasks.c **** 					}
3213:..\FreeRTOS/tasks.c **** 				}
3214:..\FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3215:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 59


3216:..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3217:..\FreeRTOS/tasks.c **** 				{
3218:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
3219:..\FreeRTOS/tasks.c **** 				}
3220:..\FreeRTOS/tasks.c **** 				#else
3221:..\FreeRTOS/tasks.c **** 				{
3222:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3223:..\FreeRTOS/tasks.c **** 				}
3224:..\FreeRTOS/tasks.c **** 				#endif
3225:..\FreeRTOS/tasks.c **** 
3226:..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3227:..\FreeRTOS/tasks.c **** 				{
3228:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3229:..\FreeRTOS/tasks.c **** 				}
3230:..\FreeRTOS/tasks.c **** 				#else
3231:..\FreeRTOS/tasks.c **** 				{
3232:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
3233:..\FreeRTOS/tasks.c **** 				}
3234:..\FreeRTOS/tasks.c **** 				#endif
3235:..\FreeRTOS/tasks.c **** 
3236:..\FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3237:..\FreeRTOS/tasks.c **** 				{
3238:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3239:..\FreeRTOS/tasks.c **** 				}
3240:..\FreeRTOS/tasks.c **** 				#else
3241:..\FreeRTOS/tasks.c **** 				{
3242:..\FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3243:..\FreeRTOS/tasks.c **** 				}
3244:..\FreeRTOS/tasks.c **** 				#endif
3245:..\FreeRTOS/tasks.c **** 
3246:..\FreeRTOS/tasks.c **** 				uxTask++;
3247:..\FreeRTOS/tasks.c **** 
3248:..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3249:..\FreeRTOS/tasks.c **** 		}
3250:..\FreeRTOS/tasks.c **** 		else
3251:..\FreeRTOS/tasks.c **** 		{
3252:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3253:..\FreeRTOS/tasks.c **** 		}
3254:..\FreeRTOS/tasks.c **** 
3255:..\FreeRTOS/tasks.c **** 		return uxTask;
3256:..\FreeRTOS/tasks.c **** 	}
3257:..\FreeRTOS/tasks.c **** 
3258:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3260:..\FreeRTOS/tasks.c **** 
3261:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3262:..\FreeRTOS/tasks.c **** 
3263:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3264:..\FreeRTOS/tasks.c **** 	{
  91              		.loc 1 3264 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL8:
3265:..\FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
  97              		.loc 1 3265 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 60


  98 0000 0023     		movs	r3, #0
3266:..\FreeRTOS/tasks.c **** 
3267:..\FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  99              		.loc 1 3267 0
 100 0002 01E0     		b	.L13
 101              	.LVL9:
 102              	.L14:
3268:..\FreeRTOS/tasks.c **** 		{
3269:..\FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 103              		.loc 1 3269 0
 104 0004 0130     		adds	r0, r0, #1
 105              	.LVL10:
3270:..\FreeRTOS/tasks.c **** 			ulCount++;
 106              		.loc 1 3270 0
 107 0006 0133     		adds	r3, r3, #1
 108              	.LVL11:
 109              	.L13:
3267:..\FreeRTOS/tasks.c **** 		{
 110              		.loc 1 3267 0
 111 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 112 000a A52A     		cmp	r2, #165
 113 000c FAD0     		beq	.L14
 114              	.LVL12:
3271:..\FreeRTOS/tasks.c **** 		}
3272:..\FreeRTOS/tasks.c **** 
3273:..\FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3274:..\FreeRTOS/tasks.c **** 
3275:..\FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
3276:..\FreeRTOS/tasks.c **** 	}
 115              		.loc 1 3276 0
 116 000e C3F38F00 		ubfx	r0, r3, #2, #16
 117              	.LVL13:
 118 0012 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE98:
 121              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 122              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 123              		.align	2
 124              		.thumb
 125              		.thumb_func
 126              		.type	prvResetNextTaskUnblockTime, %function
 127              	prvResetNextTaskUnblockTime:
 128              	.LFB101:
3277:..\FreeRTOS/tasks.c **** 
3278:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3279:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3280:..\FreeRTOS/tasks.c **** 
3281:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3282:..\FreeRTOS/tasks.c **** 
3283:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3284:..\FreeRTOS/tasks.c **** 	{
3285:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3286:..\FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3287:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3288:..\FreeRTOS/tasks.c **** 
3289:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3290:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 61


3291:..\FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3292:..\FreeRTOS/tasks.c **** 		{
3293:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3294:..\FreeRTOS/tasks.c **** 		}
3295:..\FreeRTOS/tasks.c **** 		#else
3296:..\FreeRTOS/tasks.c **** 		{
3297:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3298:..\FreeRTOS/tasks.c **** 		}
3299:..\FreeRTOS/tasks.c **** 		#endif
3300:..\FreeRTOS/tasks.c **** 
3301:..\FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3302:..\FreeRTOS/tasks.c **** 
3303:..\FreeRTOS/tasks.c **** 		return uxReturn;
3304:..\FreeRTOS/tasks.c **** 	}
3305:..\FreeRTOS/tasks.c **** 
3306:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3307:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3308:..\FreeRTOS/tasks.c **** 
3309:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3310:..\FreeRTOS/tasks.c **** 
3311:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3312:..\FreeRTOS/tasks.c **** 	{
3313:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3314:..\FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3315:..\FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3316:..\FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3317:..\FreeRTOS/tasks.c **** 
3318:..\FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3319:..\FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3320:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3321:..\FreeRTOS/tasks.c **** 		{
3322:..\FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3323:..\FreeRTOS/tasks.c **** 		}
3324:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3325:..\FreeRTOS/tasks.c **** 
3326:..\FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3327:..\FreeRTOS/tasks.c **** 		{
3328:..\FreeRTOS/tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3329:..\FreeRTOS/tasks.c **** 			place. */
3330:..\FreeRTOS/tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3331:..\FreeRTOS/tasks.c **** 			{
3332:..\FreeRTOS/tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3333:..\FreeRTOS/tasks.c **** 			}
3334:..\FreeRTOS/tasks.c **** 		}
3335:..\FreeRTOS/tasks.c **** 		#else
3336:..\FreeRTOS/tasks.c **** 		{
3337:..\FreeRTOS/tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
3338:..\FreeRTOS/tasks.c **** 		}
3339:..\FreeRTOS/tasks.c **** 		#endif
3340:..\FreeRTOS/tasks.c **** 
3341:..\FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
3342:..\FreeRTOS/tasks.c **** 	}
3343:..\FreeRTOS/tasks.c **** 
3344:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3345:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3346:..\FreeRTOS/tasks.c **** 
3347:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 62


3348:..\FreeRTOS/tasks.c **** {
 129              		.loc 1 3348 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
3349:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
3350:..\FreeRTOS/tasks.c **** 
3351:..\FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 134              		.loc 1 3351 0
 135 0000 094B     		ldr	r3, .L20
 136 0002 9B6A     		ldr	r3, [r3, #40]
 137 0004 1B68     		ldr	r3, [r3]
 138 0006 0BB9     		cbnz	r3, .L19
 139 0008 0123     		movs	r3, #1
 140 000a 00E0     		b	.L16
 141              	.L19:
 142 000c 0023     		movs	r3, #0
 143              	.L16:
 144              		.loc 1 3351 0 is_stmt 0 discriminator 4
 145 000e 23B1     		cbz	r3, .L17
3352:..\FreeRTOS/tasks.c **** 	{
3353:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3354:..\FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3355:..\FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3356:..\FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3357:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 146              		.loc 1 3357 0 is_stmt 1
 147 0010 4FF0FF32 		mov	r2, #-1
 148 0014 044B     		ldr	r3, .L20
 149 0016 DA62     		str	r2, [r3, #44]
 150 0018 7047     		bx	lr
 151              	.L17:
3358:..\FreeRTOS/tasks.c **** 	}
3359:..\FreeRTOS/tasks.c **** 	else
3360:..\FreeRTOS/tasks.c **** 	{
3361:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3362:..\FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3363:..\FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3364:..\FreeRTOS/tasks.c **** 		from the Blocked state. */
3365:..\FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 152              		.loc 1 3365 0
 153 001a 034B     		ldr	r3, .L20
 154 001c 9A6A     		ldr	r2, [r3, #40]
 155 001e D268     		ldr	r2, [r2, #12]
 156 0020 D268     		ldr	r2, [r2, #12]
 157              	.LVL14:
3366:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 158              		.loc 1 3366 0
 159 0022 5268     		ldr	r2, [r2, #4]
 160              	.LVL15:
 161 0024 DA62     		str	r2, [r3, #44]
 162 0026 7047     		bx	lr
 163              	.L21:
 164              		.align	2
 165              	.L20:
 166 0028 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 63


 167              		.cfi_endproc
 168              	.LFE101:
 169              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 170              		.section	.text.prvDeleteTCB,"ax",%progbits
 171              		.align	2
 172              		.thumb
 173              		.thumb_func
 174              		.type	prvDeleteTCB, %function
 175              	prvDeleteTCB:
 176              	.LFB100:
3312:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 177              		.loc 1 3312 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              	.LVL16:
 182 0000 10B5     		push	{r4, lr}
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 4, -8
 185              		.cfi_offset 14, -4
 186 0002 0446     		mov	r4, r0
3337:..\FreeRTOS/tasks.c **** 		}
 187              		.loc 1 3337 0
 188 0004 006B     		ldr	r0, [r0, #48]
 189              	.LVL17:
 190 0006 FFF7FEFF 		bl	vPortFree
 191              	.LVL18:
3341:..\FreeRTOS/tasks.c **** 	}
 192              		.loc 1 3341 0
 193 000a 2046     		mov	r0, r4
 194 000c FFF7FEFF 		bl	vPortFree
 195              	.LVL19:
 196 0010 10BD     		pop	{r4, pc}
 197              		.cfi_endproc
 198              	.LFE100:
 199              		.size	prvDeleteTCB, .-prvDeleteTCB
 200 0012 00BF     		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 201              		.align	2
 202              		.thumb
 203              		.thumb_func
 204              		.type	prvAllocateTCBAndStack, %function
 205              	prvAllocateTCBAndStack:
 206              	.LFB97:
3102:..\FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
 207              		.loc 1 3102 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              	.LVL20:
 212 0000 70B5     		push	{r4, r5, r6, lr}
 213              		.cfi_def_cfa_offset 16
 214              		.cfi_offset 4, -16
 215              		.cfi_offset 5, -12
 216              		.cfi_offset 6, -8
 217              		.cfi_offset 14, -4
 218 0002 0646     		mov	r6, r0
 219              	.LBB7:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 64


3134:..\FreeRTOS/tasks.c **** 
 220              		.loc 1 3134 0
 221 0004 0C46     		mov	r4, r1
 222 0006 19B9     		cbnz	r1, .L25
3134:..\FreeRTOS/tasks.c **** 
 223              		.loc 1 3134 0 is_stmt 0 discriminator 1
 224 0008 8000     		lsls	r0, r0, #2
 225              	.LVL21:
 226 000a FFF7FEFF 		bl	pvPortMalloc
 227              	.LVL22:
 228 000e 0446     		mov	r4, r0
 229              	.LVL23:
 230              	.L25:
3136:..\FreeRTOS/tasks.c **** 		{
 231              		.loc 1 3136 0 is_stmt 1 discriminator 4
 232 0010 54B1     		cbz	r4, .L30
3140:..\FreeRTOS/tasks.c **** 
 233              		.loc 1 3140 0
 234 0012 5020     		movs	r0, #80
 235 0014 FFF7FEFF 		bl	pvPortMalloc
 236              	.LVL24:
3142:..\FreeRTOS/tasks.c **** 			{
 237              		.loc 1 3142 0
 238 0018 0546     		mov	r5, r0
 239 001a 08B1     		cbz	r0, .L27
3145:..\FreeRTOS/tasks.c **** 			}
 240              		.loc 1 3145 0
 241 001c 0463     		str	r4, [r0, #48]
 242 001e 04E0     		b	.L26
 243              	.L27:
3151:..\FreeRTOS/tasks.c **** 			}
 244              		.loc 1 3151 0
 245 0020 2046     		mov	r0, r4
 246              	.LVL25:
 247 0022 FFF7FEFF 		bl	vPortFree
 248              	.LVL26:
 249 0026 00E0     		b	.L26
 250              	.LVL27:
 251              	.L30:
3156:..\FreeRTOS/tasks.c **** 		}
 252              		.loc 1 3156 0
 253 0028 0025     		movs	r5, #0
 254              	.L26:
 255              	.LVL28:
 256              	.LBE7:
3161:..\FreeRTOS/tasks.c **** 	{
 257              		.loc 1 3161 0
 258 002a 25B1     		cbz	r5, .L28
3167:..\FreeRTOS/tasks.c **** 		}
 259              		.loc 1 3167 0
 260 002c 286B     		ldr	r0, [r5, #48]
 261 002e A521     		movs	r1, #165
 262 0030 B200     		lsls	r2, r6, #2
 263 0032 FFF7FEFF 		bl	memset
 264              	.LVL29:
 265              	.L28:
3173:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 65


 266              		.loc 1 3173 0
 267 0036 2846     		mov	r0, r5
 268 0038 70BD     		pop	{r4, r5, r6, pc}
 269              		.cfi_endproc
 270              	.LFE97:
 271              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 272 003a 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 273              		.align	2
 274              		.thumb
 275              		.thumb_func
 276              		.type	prvInitialiseTCBVariables, %function
 277              	prvInitialiseTCBVariables:
 278              	.LFB93:
2834:..\FreeRTOS/tasks.c **** UBaseType_t x;
 279              		.loc 1 2834 0
 280              		.cfi_startproc
 281              		@ args = 4, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL30:
 284 0000 70B5     		push	{r4, r5, r6, lr}
 285              		.cfi_def_cfa_offset 16
 286              		.cfi_offset 4, -16
 287              		.cfi_offset 5, -12
 288              		.cfi_offset 6, -8
 289              		.cfi_offset 14, -4
 290 0002 0446     		mov	r4, r0
 291 0004 1546     		mov	r5, r2
 292              	.LVL31:
2838:..\FreeRTOS/tasks.c **** 	{
 293              		.loc 1 2838 0
 294 0006 0023     		movs	r3, #0
 295              	.LVL32:
 296 0008 06E0     		b	.L33
 297              	.LVL33:
 298              	.L35:
2840:..\FreeRTOS/tasks.c **** 
 299              		.loc 1 2840 0
 300 000a C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 301 000c E218     		adds	r2, r4, r3
 302 000e 82F83400 		strb	r0, [r2, #52]
2845:..\FreeRTOS/tasks.c **** 		{
 303              		.loc 1 2845 0
 304 0012 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 305 0014 12B1     		cbz	r2, .L34
2838:..\FreeRTOS/tasks.c **** 	{
 306              		.loc 1 2838 0 discriminator 2
 307 0016 0133     		adds	r3, r3, #1
 308              	.LVL34:
 309              	.L33:
2838:..\FreeRTOS/tasks.c **** 	{
 310              		.loc 1 2838 0 is_stmt 0 discriminator 1
 311 0018 0B2B     		cmp	r3, #11
 312 001a F6D9     		bls	.L35
 313              	.L34:
2857:..\FreeRTOS/tasks.c **** 
 314              		.loc 1 2857 0 is_stmt 1
 315 001c 0023     		movs	r3, #0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 66


 316              	.LVL35:
 317 001e 84F83F30 		strb	r3, [r4, #63]
2861:..\FreeRTOS/tasks.c **** 	{
 318              		.loc 1 2861 0
 319 0022 042D     		cmp	r5, #4
 320 0024 00D9     		bls	.L36
2863:..\FreeRTOS/tasks.c **** 	}
 321              		.loc 1 2863 0
 322 0026 0425     		movs	r5, #4
 323              	.LVL36:
 324              	.L36:
2870:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 325              		.loc 1 2870 0
 326 0028 E562     		str	r5, [r4, #44]
2873:..\FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 327              		.loc 1 2873 0
 328 002a 2564     		str	r5, [r4, #64]
2874:..\FreeRTOS/tasks.c **** 	}
 329              		.loc 1 2874 0
 330 002c 0026     		movs	r6, #0
 331 002e 6664     		str	r6, [r4, #68]
2878:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 332              		.loc 1 2878 0
 333 0030 201D     		adds	r0, r4, #4
 334 0032 FFF7FEFF 		bl	vListInitialiseItem
 335              	.LVL37:
2879:..\FreeRTOS/tasks.c **** 
 336              		.loc 1 2879 0
 337 0036 04F11800 		add	r0, r4, #24
 338 003a FFF7FEFF 		bl	vListInitialiseItem
 339              	.LVL38:
2883:..\FreeRTOS/tasks.c **** 
 340              		.loc 1 2883 0
 341 003e 2461     		str	r4, [r4, #16]
2886:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 342              		.loc 1 2886 0
 343 0040 C5F10505 		rsb	r5, r5, #5
 344              	.LVL39:
 345 0044 A561     		str	r5, [r4, #24]
2887:..\FreeRTOS/tasks.c **** 
 346              		.loc 1 2887 0
 347 0046 6462     		str	r4, [r4, #36]
2929:..\FreeRTOS/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 348              		.loc 1 2929 0
 349 0048 A664     		str	r6, [r4, #72]
2930:..\FreeRTOS/tasks.c **** 	}
 350              		.loc 1 2930 0
 351 004a 84F84C60 		strb	r6, [r4, #76]
 352 004e 70BD     		pop	{r4, r5, r6, pc}
 353              		.cfi_endproc
 354              	.LFE93:
 355              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 356              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 357              		.align	2
 358              		.thumb
 359              		.thumb_func
 360              		.type	prvInitialiseTaskLists, %function
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 67


 361              	prvInitialiseTaskLists:
 362              	.LFB94:
2999:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 363              		.loc 1 2999 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 70B5     		push	{r4, r5, r6, lr}
 368              		.cfi_def_cfa_offset 16
 369              		.cfi_offset 4, -16
 370              		.cfi_offset 5, -12
 371              		.cfi_offset 6, -8
 372              		.cfi_offset 14, -4
 373              	.LVL40:
3002:..\FreeRTOS/tasks.c **** 	{
 374              		.loc 1 3002 0
 375 0002 0024     		movs	r4, #0
 376 0004 07E0     		b	.L40
 377              	.LVL41:
 378              	.L41:
3004:..\FreeRTOS/tasks.c **** 	}
 379              		.loc 1 3004 0 discriminator 3
 380 0006 04EB8403 		add	r3, r4, r4, lsl #2
 381 000a 9B00     		lsls	r3, r3, #2
 382 000c 1048     		ldr	r0, .L43
 383 000e 1844     		add	r0, r0, r3
 384 0010 FFF7FEFF 		bl	vListInitialise
 385              	.LVL42:
3002:..\FreeRTOS/tasks.c **** 	{
 386              		.loc 1 3002 0 discriminator 3
 387 0014 0134     		adds	r4, r4, #1
 388              	.LVL43:
 389              	.L40:
3002:..\FreeRTOS/tasks.c **** 	{
 390              		.loc 1 3002 0 is_stmt 0 discriminator 1
 391 0016 042C     		cmp	r4, #4
 392 0018 F5D9     		bls	.L41
3007:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 393              		.loc 1 3007 0 is_stmt 1
 394 001a 0E4C     		ldr	r4, .L43+4
 395              	.LVL44:
 396 001c 04F19406 		add	r6, r4, #148
 397 0020 3046     		mov	r0, r6
 398 0022 FFF7FEFF 		bl	vListInitialise
 399              	.LVL45:
3008:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 400              		.loc 1 3008 0
 401 0026 04F1A805 		add	r5, r4, #168
 402 002a 2846     		mov	r0, r5
 403 002c FFF7FEFF 		bl	vListInitialise
 404              	.LVL46:
3009:..\FreeRTOS/tasks.c **** 
 405              		.loc 1 3009 0
 406 0030 04F11400 		add	r0, r4, #20
 407 0034 FFF7FEFF 		bl	vListInitialise
 408              	.LVL47:
3013:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 68


 409              		.loc 1 3013 0
 410 0038 04F1BC00 		add	r0, r4, #188
 411 003c FFF7FEFF 		bl	vListInitialise
 412              	.LVL48:
3019:..\FreeRTOS/tasks.c **** 	}
 413              		.loc 1 3019 0
 414 0040 2046     		mov	r0, r4
 415 0042 FFF7FEFF 		bl	vListInitialise
 416              	.LVL49:
3025:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 417              		.loc 1 3025 0
 418 0046 A662     		str	r6, [r4, #40]
3026:..\FreeRTOS/tasks.c **** }
 419              		.loc 1 3026 0
 420 0048 C4F8D050 		str	r5, [r4, #208]
 421 004c 70BD     		pop	{r4, r5, r6, pc}
 422              	.L44:
 423 004e 00BF     		.align	2
 424              	.L43:
 425 0050 30000000 		.word	.LANCHOR0+48
 426 0054 00000000 		.word	.LANCHOR0
 427              		.cfi_endproc
 428              	.LFE94:
 429              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 430              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 431              		.align	2
 432              		.thumb
 433              		.thumb_func
 434              		.type	prvAddCurrentTaskToDelayedList, %function
 435              	prvAddCurrentTaskToDelayedList:
 436              	.LFB96:
3072:..\FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
 437              		.loc 1 3072 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              	.LVL50:
 442 0000 38B5     		push	{r3, r4, r5, lr}
 443              		.cfi_def_cfa_offset 16
 444              		.cfi_offset 3, -16
 445              		.cfi_offset 4, -12
 446              		.cfi_offset 5, -8
 447              		.cfi_offset 14, -4
 448 0002 0446     		mov	r4, r0
3074:..\FreeRTOS/tasks.c **** 
 449              		.loc 1 3074 0
 450 0004 0E4B     		ldr	r3, .L49
 451 0006 D3F8D420 		ldr	r2, [r3, #212]
 452 000a 5060     		str	r0, [r2, #4]
3076:..\FreeRTOS/tasks.c **** 	{
 453              		.loc 1 3076 0
 454 000c D3F8D830 		ldr	r3, [r3, #216]
 455 0010 9842     		cmp	r0, r3
 456 0012 08D2     		bcs	.L46
3079:..\FreeRTOS/tasks.c **** 	}
 457              		.loc 1 3079 0
 458 0014 0A4B     		ldr	r3, .L49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 69


 459 0016 D3F8D000 		ldr	r0, [r3, #208]
 460              	.LVL51:
 461 001a D3F8D410 		ldr	r1, [r3, #212]
 462 001e 0431     		adds	r1, r1, #4
 463 0020 FFF7FEFF 		bl	vListInsert
 464              	.LVL52:
 465 0024 38BD     		pop	{r3, r4, r5, pc}
 466              	.LVL53:
 467              	.L46:
3084:..\FreeRTOS/tasks.c **** 
 468              		.loc 1 3084 0
 469 0026 064D     		ldr	r5, .L49
 470 0028 A86A     		ldr	r0, [r5, #40]
 471              	.LVL54:
 472 002a D5F8D410 		ldr	r1, [r5, #212]
 473 002e 0431     		adds	r1, r1, #4
 474 0030 FFF7FEFF 		bl	vListInsert
 475              	.LVL55:
3089:..\FreeRTOS/tasks.c **** 		{
 476              		.loc 1 3089 0
 477 0034 EB6A     		ldr	r3, [r5, #44]
 478 0036 9C42     		cmp	r4, r3
 479 0038 00D2     		bcs	.L45
3091:..\FreeRTOS/tasks.c **** 		}
 480              		.loc 1 3091 0
 481 003a EC62     		str	r4, [r5, #44]
 482              	.L45:
 483 003c 38BD     		pop	{r3, r4, r5, pc}
 484              	.LVL56:
 485              	.L50:
 486 003e 00BF     		.align	2
 487              	.L49:
 488 0040 00000000 		.word	.LANCHOR0
 489              		.cfi_endproc
 490              	.LFE96:
 491              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 492              		.section	.text.xTaskGenericCreate,"ax",%progbits
 493              		.align	2
 494              		.global	xTaskGenericCreate
 495              		.thumb
 496              		.thumb_func
 497              		.type	xTaskGenericCreate, %function
 498              	xTaskGenericCreate:
 499              	.LFB64:
 552:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 500              		.loc 1 552 0
 501              		.cfi_startproc
 502              		@ args = 16, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504              	.LVL57:
 505 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 506              		.cfi_def_cfa_offset 32
 507              		.cfi_offset 4, -32
 508              		.cfi_offset 5, -28
 509              		.cfi_offset 6, -24
 510              		.cfi_offset 7, -20
 511              		.cfi_offset 8, -16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 70


 512              		.cfi_offset 9, -12
 513              		.cfi_offset 10, -8
 514              		.cfi_offset 14, -4
 515 0004 82B0     		sub	sp, sp, #8
 516              		.cfi_def_cfa_offset 40
 517 0006 8146     		mov	r9, r0
 518 0008 8A46     		mov	r10, r1
 519 000a 1646     		mov	r6, r2
 520 000c 9846     		mov	r8, r3
 521 000e 0B9F     		ldr	r7, [sp, #44]
 562:..\FreeRTOS/tasks.c **** 
 522              		.loc 1 562 0
 523 0010 1046     		mov	r0, r2
 524              	.LVL58:
 525 0012 0C99     		ldr	r1, [sp, #48]
 526              	.LVL59:
 527 0014 FFF7FEFF 		bl	prvAllocateTCBAndStack
 528              	.LVL60:
 564:..\FreeRTOS/tasks.c **** 	{
 529              		.loc 1 564 0
 530 0018 0028     		cmp	r0, #0
 531 001a 54D0     		beq	.L57
 532 001c 0446     		mov	r4, r0
 600:..\FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 533              		.loc 1 600 0
 534 001e 036B     		ldr	r3, [r0, #48]
 535 0020 06F18045 		add	r5, r6, #1073741824
 536 0024 013D     		subs	r5, r5, #1
 537 0026 03EB8505 		add	r5, r3, r5, lsl #2
 538              	.LVL61:
 601:..\FreeRTOS/tasks.c **** 
 539              		.loc 1 601 0
 540 002a 25F00705 		bic	r5, r5, #7
 541              	.LVL62:
 621:..\FreeRTOS/tasks.c **** 
 542              		.loc 1 621 0
 543 002e 0096     		str	r6, [sp]
 544 0030 5146     		mov	r1, r10
 545 0032 0A9A     		ldr	r2, [sp, #40]
 546 0034 0D9B     		ldr	r3, [sp, #52]
 547 0036 FFF7FEFF 		bl	prvInitialiseTCBVariables
 548              	.LVL63:
 633:..\FreeRTOS/tasks.c **** 		}
 549              		.loc 1 633 0
 550 003a 2846     		mov	r0, r5
 551 003c 4946     		mov	r1, r9
 552 003e 4246     		mov	r2, r8
 553 0040 FFF7FEFF 		bl	pxPortInitialiseStack
 554              	.LVL64:
 555 0044 2060     		str	r0, [r4]
 637:..\FreeRTOS/tasks.c **** 		{
 556              		.loc 1 637 0
 557 0046 07B1     		cbz	r7, .L53
 642:..\FreeRTOS/tasks.c **** 		}
 558              		.loc 1 642 0
 559 0048 3C60     		str	r4, [r7]
 560              	.L53:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 71


 651:..\FreeRTOS/tasks.c **** 		{
 561              		.loc 1 651 0
 562 004a FFF7FEFF 		bl	vPortEnterCritical
 563              	.LVL65:
 653:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 564              		.loc 1 653 0
 565 004e 284B     		ldr	r3, .L59
 566 0050 D3F8DC20 		ldr	r2, [r3, #220]
 567 0054 0132     		adds	r2, r2, #1
 568 0056 C3F8DC20 		str	r2, [r3, #220]
 654:..\FreeRTOS/tasks.c **** 			{
 569              		.loc 1 654 0
 570 005a D3F8D430 		ldr	r3, [r3, #212]
 571 005e 4BB9     		cbnz	r3, .L54
 658:..\FreeRTOS/tasks.c **** 
 572              		.loc 1 658 0
 573 0060 234B     		ldr	r3, .L59
 574 0062 C3F8D440 		str	r4, [r3, #212]
 660:..\FreeRTOS/tasks.c **** 				{
 575              		.loc 1 660 0
 576 0066 D3F8DC30 		ldr	r3, [r3, #220]
 577 006a 012B     		cmp	r3, #1
 578 006c 10D1     		bne	.L55
 665:..\FreeRTOS/tasks.c **** 				}
 579              		.loc 1 665 0
 580 006e FFF7FEFF 		bl	prvInitialiseTaskLists
 581              	.LVL66:
 582 0072 0DE0     		b	.L55
 583              	.L54:
 677:..\FreeRTOS/tasks.c **** 				{
 584              		.loc 1 677 0
 585 0074 1E4B     		ldr	r3, .L59
 586 0076 D3F8E030 		ldr	r3, [r3, #224]
 587 007a 4BB9     		cbnz	r3, .L55
 679:..\FreeRTOS/tasks.c **** 					{
 588              		.loc 1 679 0
 589 007c 1C4B     		ldr	r3, .L59
 590 007e D3F8D430 		ldr	r3, [r3, #212]
 591 0082 DB6A     		ldr	r3, [r3, #44]
 592 0084 0A9A     		ldr	r2, [sp, #40]
 593 0086 9342     		cmp	r3, r2
 594 0088 02D8     		bhi	.L55
 681:..\FreeRTOS/tasks.c **** 					}
 595              		.loc 1 681 0
 596 008a 194B     		ldr	r3, .L59
 597 008c C3F8D440 		str	r4, [r3, #212]
 598              	.L55:
 694:..\FreeRTOS/tasks.c **** 
 599              		.loc 1 694 0
 600 0090 174A     		ldr	r2, .L59
 601 0092 D2F8E430 		ldr	r3, [r2, #228]
 602 0096 0133     		adds	r3, r3, #1
 603 0098 C2F8E430 		str	r3, [r2, #228]
 704:..\FreeRTOS/tasks.c **** 
 604              		.loc 1 704 0
 605 009c E36A     		ldr	r3, [r4, #44]
 606 009e 0125     		movs	r5, #1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 72


 607              	.LVL67:
 608 00a0 05FA03F0 		lsl	r0, r5, r3
 609 00a4 D2F8E810 		ldr	r1, [r2, #232]
 610 00a8 0143     		orrs	r1, r1, r0
 611 00aa C2F8E810 		str	r1, [r2, #232]
 612 00ae 3032     		adds	r2, r2, #48
 613 00b0 03EB8300 		add	r0, r3, r3, lsl #2
 614 00b4 8000     		lsls	r0, r0, #2
 615 00b6 1044     		add	r0, r0, r2
 616 00b8 211D     		adds	r1, r4, #4
 617 00ba FFF7FEFF 		bl	vListInsertEnd
 618              	.LVL68:
 709:..\FreeRTOS/tasks.c **** 	}
 619              		.loc 1 709 0
 620 00be FFF7FEFF 		bl	vPortExitCritical
 621              	.LVL69:
 706:..\FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 622              		.loc 1 706 0
 623 00c2 2C46     		mov	r4, r5
 624              	.LVL70:
 625 00c4 01E0     		b	.L52
 626              	.LVL71:
 627              	.L57:
 713:..\FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 628              		.loc 1 713 0
 629 00c6 4FF0FF34 		mov	r4, #-1
 630              	.LVL72:
 631              	.L52:
 717:..\FreeRTOS/tasks.c **** 	{
 632              		.loc 1 717 0
 633 00ca 012C     		cmp	r4, #1
 634 00cc 0CD1     		bne	.L56
 719:..\FreeRTOS/tasks.c **** 		{
 635              		.loc 1 719 0
 636 00ce 084B     		ldr	r3, .L59
 637 00d0 D3F8E030 		ldr	r3, [r3, #224]
 638 00d4 43B1     		cbz	r3, .L56
 723:..\FreeRTOS/tasks.c **** 			{
 639              		.loc 1 723 0
 640 00d6 064B     		ldr	r3, .L59
 641 00d8 D3F8D430 		ldr	r3, [r3, #212]
 642 00dc DB6A     		ldr	r3, [r3, #44]
 643 00de 0A9A     		ldr	r2, [sp, #40]
 644 00e0 9342     		cmp	r3, r2
 645 00e2 01D2     		bcs	.L56
 725:..\FreeRTOS/tasks.c **** 			}
 646              		.loc 1 725 0
 647 00e4 FFF7FEFF 		bl	vPortYield
 648              	.LVL73:
 649              	.L56:
 739:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 650              		.loc 1 739 0
 651 00e8 2046     		mov	r0, r4
 652 00ea 02B0     		add	sp, sp, #8
 653              		.cfi_def_cfa_offset 32
 654              		@ sp needed
 655 00ec BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 73


 656              	.LVL74:
 657              	.L60:
 658              		.align	2
 659              	.L59:
 660 00f0 00000000 		.word	.LANCHOR0
 661              		.cfi_endproc
 662              	.LFE64:
 663              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 664              		.section	.text.vTaskDelete,"ax",%progbits
 665              		.align	2
 666              		.global	vTaskDelete
 667              		.thumb
 668              		.thumb_func
 669              		.type	vTaskDelete, %function
 670              	vTaskDelete:
 671              	.LFB65:
 745:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 672              		.loc 1 745 0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              	.LVL75:
 677 0000 70B5     		push	{r4, r5, r6, lr}
 678              		.cfi_def_cfa_offset 16
 679              		.cfi_offset 4, -16
 680              		.cfi_offset 5, -12
 681              		.cfi_offset 6, -8
 682              		.cfi_offset 14, -4
 683 0002 0546     		mov	r5, r0
 748:..\FreeRTOS/tasks.c **** 		{
 684              		.loc 1 748 0
 685 0004 FFF7FEFF 		bl	vPortEnterCritical
 686              	.LVL76:
 752:..\FreeRTOS/tasks.c **** 
 687              		.loc 1 752 0
 688 0008 15B9     		cbnz	r5, .L62
 752:..\FreeRTOS/tasks.c **** 
 689              		.loc 1 752 0 is_stmt 0 discriminator 1
 690 000a 204B     		ldr	r3, .L68
 691 000c D3F8D450 		ldr	r5, [r3, #212]
 692              	.LVL77:
 693              	.L62:
 758:..\FreeRTOS/tasks.c **** 			{
 694              		.loc 1 758 0 is_stmt 1 discriminator 4
 695 0010 2E1D     		adds	r6, r5, #4
 696 0012 3046     		mov	r0, r6
 697 0014 FFF7FEFF 		bl	uxListRemove
 698              	.LVL78:
 699 0018 78B9     		cbnz	r0, .L63
 760:..\FreeRTOS/tasks.c **** 			}
 700              		.loc 1 760 0
 701 001a EA6A     		ldr	r2, [r5, #44]
 702 001c 02EB8203 		add	r3, r2, r2, lsl #2
 703 0020 9B00     		lsls	r3, r3, #2
 704 0022 1A49     		ldr	r1, .L68
 705 0024 0B44     		add	r3, r3, r1
 706 0026 1B6B     		ldr	r3, [r3, #48]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 74


 707 0028 3BB9     		cbnz	r3, .L63
 760:..\FreeRTOS/tasks.c **** 			}
 708              		.loc 1 760 0 is_stmt 0 discriminator 1
 709 002a 0123     		movs	r3, #1
 710 002c 9340     		lsls	r3, r3, r2
 711 002e D1F8E820 		ldr	r2, [r1, #232]
 712 0032 22EA0303 		bic	r3, r2, r3
 713 0036 C1F8E830 		str	r3, [r1, #232]
 714              	.L63:
 768:..\FreeRTOS/tasks.c **** 			{
 715              		.loc 1 768 0 is_stmt 1
 716 003a AB6A     		ldr	r3, [r5, #40]
 717 003c 1BB1     		cbz	r3, .L64
 770:..\FreeRTOS/tasks.c **** 			}
 718              		.loc 1 770 0
 719 003e 05F11800 		add	r0, r5, #24
 720 0042 FFF7FEFF 		bl	uxListRemove
 721              	.LVL79:
 722              	.L64:
 777:..\FreeRTOS/tasks.c **** 
 723              		.loc 1 777 0
 724 0046 114C     		ldr	r4, .L68
 725 0048 04F1BC00 		add	r0, r4, #188
 726 004c 3146     		mov	r1, r6
 727 004e FFF7FEFF 		bl	vListInsertEnd
 728              	.LVL80:
 782:..\FreeRTOS/tasks.c **** 
 729              		.loc 1 782 0
 730 0052 D4F8EC30 		ldr	r3, [r4, #236]
 731 0056 0133     		adds	r3, r3, #1
 732 0058 C4F8EC30 		str	r3, [r4, #236]
 786:..\FreeRTOS/tasks.c **** 
 733              		.loc 1 786 0
 734 005c D4F8E430 		ldr	r3, [r4, #228]
 735 0060 0133     		adds	r3, r3, #1
 736 0062 C4F8E430 		str	r3, [r4, #228]
 790:..\FreeRTOS/tasks.c **** 
 737              		.loc 1 790 0
 738 0066 FFF7FEFF 		bl	vPortExitCritical
 739              	.LVL81:
 794:..\FreeRTOS/tasks.c **** 		{
 740              		.loc 1 794 0
 741 006a D4F8E030 		ldr	r3, [r4, #224]
 742 006e 63B1     		cbz	r3, .L61
 796:..\FreeRTOS/tasks.c **** 			{
 743              		.loc 1 796 0
 744 0070 D4F8D430 		ldr	r3, [r4, #212]
 745 0074 9D42     		cmp	r5, r3
 746 0076 02D1     		bne	.L66
 806:..\FreeRTOS/tasks.c **** 			}
 747              		.loc 1 806 0
 748 0078 FFF7FEFF 		bl	vPortYield
 749              	.LVL82:
 750 007c 70BD     		pop	{r4, r5, r6, pc}
 751              	.LVL83:
 752              	.L66:
 812:..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 75


 753              		.loc 1 812 0
 754 007e FFF7FEFF 		bl	vPortEnterCritical
 755              	.LVL84:
 814:..\FreeRTOS/tasks.c **** 				}
 756              		.loc 1 814 0
 757 0082 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 758              	.LVL85:
 816:..\FreeRTOS/tasks.c **** 			}
 759              		.loc 1 816 0
 760 0086 FFF7FEFF 		bl	vPortExitCritical
 761              	.LVL86:
 762              	.L61:
 763 008a 70BD     		pop	{r4, r5, r6, pc}
 764              	.LVL87:
 765              	.L69:
 766              		.align	2
 767              	.L68:
 768 008c 00000000 		.word	.LANCHOR0
 769              		.cfi_endproc
 770              	.LFE65:
 771              		.size	vTaskDelete, .-vTaskDelete
 772              		.section	.text.eTaskGetState,"ax",%progbits
 773              		.align	2
 774              		.global	eTaskGetState
 775              		.thumb
 776              		.thumb_func
 777              		.type	eTaskGetState, %function
 778              	eTaskGetState:
 779              	.LFB68:
 989:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 780              		.loc 1 989 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              	.LVL88:
 785 0000 38B5     		push	{r3, r4, r5, lr}
 786              		.cfi_def_cfa_offset 16
 787              		.cfi_offset 3, -16
 788              		.cfi_offset 4, -12
 789              		.cfi_offset 5, -8
 790              		.cfi_offset 14, -4
 791              	.LVL89:
 996:..\FreeRTOS/tasks.c **** 		{
 792              		.loc 1 996 0
 793 0002 154B     		ldr	r3, .L79
 794 0004 D3F8D430 		ldr	r3, [r3, #212]
 795 0008 9842     		cmp	r0, r3
 796 000a 1AD0     		beq	.L73
 797 000c 0446     		mov	r4, r0
1003:..\FreeRTOS/tasks.c **** 			{
 798              		.loc 1 1003 0
 799 000e FFF7FEFF 		bl	vPortEnterCritical
 800              	.LVL90:
1005:..\FreeRTOS/tasks.c **** 			}
 801              		.loc 1 1005 0
 802 0012 6569     		ldr	r5, [r4, #20]
 803              	.LVL91:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 76


1007:..\FreeRTOS/tasks.c **** 
 804              		.loc 1 1007 0
 805 0014 FFF7FEFF 		bl	vPortExitCritical
 806              	.LVL92:
1009:..\FreeRTOS/tasks.c **** 			{
 807              		.loc 1 1009 0
 808 0018 0F4B     		ldr	r3, .L79
 809 001a 9B6A     		ldr	r3, [r3, #40]
 810 001c 9D42     		cmp	r5, r3
 811 001e 12D0     		beq	.L74
1009:..\FreeRTOS/tasks.c **** 			{
 812              		.loc 1 1009 0 is_stmt 0 discriminator 1
 813 0020 0D4B     		ldr	r3, .L79
 814 0022 D3F8D030 		ldr	r3, [r3, #208]
 815 0026 9D42     		cmp	r5, r3
 816 0028 0FD0     		beq	.L75
1017:..\FreeRTOS/tasks.c **** 				{
 817              		.loc 1 1017 0 is_stmt 1
 818 002a 0B4B     		ldr	r3, .L79
 819 002c 9D42     		cmp	r5, r3
 820 002e 03D1     		bne	.L72
1022:..\FreeRTOS/tasks.c **** 					{
 821              		.loc 1 1022 0
 822 0030 A36A     		ldr	r3, [r4, #40]
 823 0032 63B9     		cbnz	r3, .L76
1024:..\FreeRTOS/tasks.c **** 					}
 824              		.loc 1 1024 0
 825 0034 0320     		movs	r0, #3
 826 0036 38BD     		pop	{r3, r4, r5, pc}
 827              	.LVL93:
 828              	.L72:
1034:..\FreeRTOS/tasks.c **** 				{
 829              		.loc 1 1034 0
 830 0038 084B     		ldr	r3, .L79+4
 831 003a 9D42     		cmp	r5, r3
 832 003c 09D1     		bne	.L77
1038:..\FreeRTOS/tasks.c **** 				}
 833              		.loc 1 1038 0
 834 003e 0420     		movs	r0, #4
 835 0040 38BD     		pop	{r3, r4, r5, pc}
 836              	.LVL94:
 837              	.L73:
 999:..\FreeRTOS/tasks.c **** 		}
 838              		.loc 1 999 0
 839 0042 0020     		movs	r0, #0
 840              	.LVL95:
 841 0044 38BD     		pop	{r3, r4, r5, pc}
 842              	.LVL96:
 843              	.L74:
1013:..\FreeRTOS/tasks.c **** 			}
 844              		.loc 1 1013 0
 845 0046 0220     		movs	r0, #2
 846 0048 38BD     		pop	{r3, r4, r5, pc}
 847              	.LVL97:
 848              	.L75:
 849 004a 0220     		movs	r0, #2
 850 004c 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 77


 851              	.LVL98:
 852              	.L76:
1028:..\FreeRTOS/tasks.c **** 					}
 853              		.loc 1 1028 0
 854 004e 0220     		movs	r0, #2
 855 0050 38BD     		pop	{r3, r4, r5, pc}
 856              	.LVL99:
 857              	.L77:
1046:..\FreeRTOS/tasks.c **** 			}
 858              		.loc 1 1046 0
 859 0052 0120     		movs	r0, #1
 860              	.LVL100:
1051:..\FreeRTOS/tasks.c **** 
 861              		.loc 1 1051 0
 862 0054 38BD     		pop	{r3, r4, r5, pc}
 863              	.LVL101:
 864              	.L80:
 865 0056 00BF     		.align	2
 866              	.L79:
 867 0058 00000000 		.word	.LANCHOR0
 868 005c BC000000 		.word	.LANCHOR0+188
 869              		.cfi_endproc
 870              	.LFE68:
 871              		.size	eTaskGetState, .-eTaskGetState
 872              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 873              		.align	2
 874              		.global	uxTaskPriorityGet
 875              		.thumb
 876              		.thumb_func
 877              		.type	uxTaskPriorityGet, %function
 878              	uxTaskPriorityGet:
 879              	.LFB69:
1059:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 880              		.loc 1 1059 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              	.LVL102:
 885 0000 10B5     		push	{r4, lr}
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 4, -8
 888              		.cfi_offset 14, -4
 889 0002 0446     		mov	r4, r0
1063:..\FreeRTOS/tasks.c **** 		{
 890              		.loc 1 1063 0
 891 0004 FFF7FEFF 		bl	vPortEnterCritical
 892              	.LVL103:
1067:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 893              		.loc 1 1067 0
 894 0008 14B9     		cbnz	r4, .L82
1067:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 895              		.loc 1 1067 0 is_stmt 0 discriminator 1
 896 000a 044B     		ldr	r3, .L84
 897 000c D3F8D440 		ldr	r4, [r3, #212]
 898              	.LVL104:
 899              	.L82:
1068:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 78


 900              		.loc 1 1068 0 is_stmt 1 discriminator 4
 901 0010 E46A     		ldr	r4, [r4, #44]
 902              	.LVL105:
1070:..\FreeRTOS/tasks.c **** 
 903              		.loc 1 1070 0 discriminator 4
 904 0012 FFF7FEFF 		bl	vPortExitCritical
 905              	.LVL106:
1073:..\FreeRTOS/tasks.c **** 
 906              		.loc 1 1073 0 discriminator 4
 907 0016 2046     		mov	r0, r4
 908 0018 10BD     		pop	{r4, pc}
 909              	.LVL107:
 910              	.L85:
 911 001a 00BF     		.align	2
 912              	.L84:
 913 001c 00000000 		.word	.LANCHOR0
 914              		.cfi_endproc
 915              	.LFE69:
 916              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 917              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 918              		.align	2
 919              		.global	uxTaskPriorityGetFromISR
 920              		.thumb
 921              		.thumb_func
 922              		.type	uxTaskPriorityGetFromISR, %function
 923              	uxTaskPriorityGetFromISR:
 924              	.LFB70:
1081:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 925              		.loc 1 1081 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              	.LVL108:
 930 0000 10B5     		push	{r4, lr}
 931              		.cfi_def_cfa_offset 8
 932              		.cfi_offset 4, -8
 933              		.cfi_offset 14, -4
 934 0002 0446     		mov	r4, r0
1103:..\FreeRTOS/tasks.c **** 		{
 935              		.loc 1 1103 0
 936 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 937              	.LVL109:
1107:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 938              		.loc 1 1107 0
 939 0008 14B9     		cbnz	r4, .L87
1107:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 940              		.loc 1 1107 0 is_stmt 0 discriminator 1
 941 000a 044B     		ldr	r3, .L89
 942 000c D3F8D440 		ldr	r4, [r3, #212]
 943              	.LVL110:
 944              	.L87:
1108:..\FreeRTOS/tasks.c **** 		}
 945              		.loc 1 1108 0 is_stmt 1 discriminator 4
 946 0010 E46A     		ldr	r4, [r4, #44]
 947              	.LVL111:
1110:..\FreeRTOS/tasks.c **** 
 948              		.loc 1 1110 0 discriminator 4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 79


 949 0012 FFF7FEFF 		bl	vPortClearInterruptMask
 950              	.LVL112:
1113:..\FreeRTOS/tasks.c **** 
 951              		.loc 1 1113 0 discriminator 4
 952 0016 2046     		mov	r0, r4
 953 0018 10BD     		pop	{r4, pc}
 954              	.LVL113:
 955              	.L90:
 956 001a 00BF     		.align	2
 957              	.L89:
 958 001c 00000000 		.word	.LANCHOR0
 959              		.cfi_endproc
 960              	.LFE70:
 961              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 962              		.section	.text.vTaskPrioritySet,"ax",%progbits
 963              		.align	2
 964              		.global	vTaskPrioritySet
 965              		.thumb
 966              		.thumb_func
 967              		.type	vTaskPrioritySet, %function
 968              	vTaskPrioritySet:
 969              	.LFB71:
1121:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 970              		.loc 1 1121 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              	.LVL114:
 975 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 976              		.cfi_def_cfa_offset 24
 977              		.cfi_offset 3, -24
 978              		.cfi_offset 4, -20
 979              		.cfi_offset 5, -16
 980              		.cfi_offset 6, -12
 981              		.cfi_offset 7, -8
 982              		.cfi_offset 14, -4
 983 0002 0446     		mov	r4, r0
 984 0004 0D46     		mov	r5, r1
 985              	.LVL115:
1129:..\FreeRTOS/tasks.c **** 		{
 986              		.loc 1 1129 0
 987 0006 0429     		cmp	r1, #4
 988 0008 00D9     		bls	.L92
1131:..\FreeRTOS/tasks.c **** 		}
 989              		.loc 1 1131 0
 990 000a 0425     		movs	r5, #4
 991              	.L92:
 992              	.LVL116:
1138:..\FreeRTOS/tasks.c **** 		{
 993              		.loc 1 1138 0
 994 000c FFF7FEFF 		bl	vPortEnterCritical
 995              	.LVL117:
1142:..\FreeRTOS/tasks.c **** 
 996              		.loc 1 1142 0
 997 0010 14B9     		cbnz	r4, .L93
1142:..\FreeRTOS/tasks.c **** 
 998              		.loc 1 1142 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 80


 999 0012 2E4B     		ldr	r3, .L108
 1000 0014 D3F8D440 		ldr	r4, [r3, #212]
 1001              	.LVL118:
 1002              	.L93:
1148:..\FreeRTOS/tasks.c **** 			}
 1003              		.loc 1 1148 0 is_stmt 1 discriminator 4
 1004 0018 236C     		ldr	r3, [r4, #64]
 1005              	.LVL119:
1156:..\FreeRTOS/tasks.c **** 			{
 1006              		.loc 1 1156 0 discriminator 4
 1007 001a AB42     		cmp	r3, r5
 1008 001c 53D0     		beq	.L94
1160:..\FreeRTOS/tasks.c **** 				{
 1009              		.loc 1 1160 0
 1010 001e 9D42     		cmp	r5, r3
 1011 0020 0CD9     		bls	.L95
1162:..\FreeRTOS/tasks.c **** 					{
 1012              		.loc 1 1162 0
 1013 0022 2A4A     		ldr	r2, .L108
 1014 0024 D2F8D420 		ldr	r2, [r2, #212]
 1015 0028 9442     		cmp	r4, r2
 1016 002a 0ED0     		beq	.L103
1167:..\FreeRTOS/tasks.c **** 						{
 1017              		.loc 1 1167 0
 1018 002c 274A     		ldr	r2, .L108
 1019 002e D2F8D420 		ldr	r2, [r2, #212]
 1020 0032 D26A     		ldr	r2, [r2, #44]
 1021 0034 AA42     		cmp	r2, r5
 1022 0036 0AD9     		bls	.L104
1124:..\FreeRTOS/tasks.c **** 
 1023              		.loc 1 1124 0
 1024 0038 0027     		movs	r7, #0
 1025 003a 0BE0     		b	.L96
 1026              	.L95:
1183:..\FreeRTOS/tasks.c **** 				{
 1027              		.loc 1 1183 0
 1028 003c 234A     		ldr	r2, .L108
 1029 003e D2F8D420 		ldr	r2, [r2, #212]
 1030 0042 9442     		cmp	r4, r2
 1031 0044 05D0     		beq	.L105
1124:..\FreeRTOS/tasks.c **** 
 1032              		.loc 1 1124 0
 1033 0046 0027     		movs	r7, #0
 1034 0048 04E0     		b	.L96
 1035              	.L103:
 1036 004a 0027     		movs	r7, #0
 1037 004c 02E0     		b	.L96
 1038              	.L104:
1169:..\FreeRTOS/tasks.c **** 						}
 1039              		.loc 1 1169 0
 1040 004e 0127     		movs	r7, #1
 1041 0050 00E0     		b	.L96
 1042              	.L105:
1188:..\FreeRTOS/tasks.c **** 				}
 1043              		.loc 1 1188 0
 1044 0052 0127     		movs	r7, #1
 1045              	.L96:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 81


 1046              	.LVL120:
1200:..\FreeRTOS/tasks.c **** 
 1047              		.loc 1 1200 0
 1048 0054 E66A     		ldr	r6, [r4, #44]
 1049              	.LVL121:
1206:..\FreeRTOS/tasks.c **** 					{
 1050              		.loc 1 1206 0
 1051 0056 B342     		cmp	r3, r6
 1052 0058 00D1     		bne	.L97
1208:..\FreeRTOS/tasks.c **** 					}
 1053              		.loc 1 1208 0
 1054 005a E562     		str	r5, [r4, #44]
 1055              	.L97:
1216:..\FreeRTOS/tasks.c **** 				}
 1056              		.loc 1 1216 0
 1057 005c 2564     		str	r5, [r4, #64]
1226:..\FreeRTOS/tasks.c **** 				{
 1058              		.loc 1 1226 0
 1059 005e A369     		ldr	r3, [r4, #24]
 1060              	.LVL122:
 1061 0060 002B     		cmp	r3, #0
 1062 0062 02DB     		blt	.L98
1228:..\FreeRTOS/tasks.c **** 				}
 1063              		.loc 1 1228 0
 1064 0064 C5F10505 		rsb	r5, r5, #5
 1065              	.LVL123:
 1066 0068 A561     		str	r5, [r4, #24]
 1067              	.L98:
1239:..\FreeRTOS/tasks.c **** 				{
 1068              		.loc 1 1239 0
 1069 006a 6269     		ldr	r2, [r4, #20]
 1070 006c 06EB8603 		add	r3, r6, r6, lsl #2
 1071 0070 9B00     		lsls	r3, r3, #2
 1072 0072 1749     		ldr	r1, .L108+4
 1073 0074 0B44     		add	r3, r3, r1
 1074 0076 9A42     		cmp	r2, r3
 1075 0078 01D1     		bne	.L106
 1076 007a 0123     		movs	r3, #1
 1077 007c 00E0     		b	.L99
 1078              	.L106:
 1079 007e 0023     		movs	r3, #0
 1080              	.L99:
1239:..\FreeRTOS/tasks.c **** 				{
 1081              		.loc 1 1239 0 is_stmt 0 discriminator 4
 1082 0080 F3B1     		cbz	r3, .L100
1244:..\FreeRTOS/tasks.c **** 					{
 1083              		.loc 1 1244 0 is_stmt 1
 1084 0082 251D     		adds	r5, r4, #4
 1085 0084 2846     		mov	r0, r5
 1086 0086 FFF7FEFF 		bl	uxListRemove
 1087              	.LVL124:
 1088 008a 40B9     		cbnz	r0, .L101
1249:..\FreeRTOS/tasks.c **** 					}
 1089              		.loc 1 1249 0
 1090 008c 0123     		movs	r3, #1
 1091 008e B340     		lsls	r3, r3, r6
 1092 0090 0E49     		ldr	r1, .L108
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 82


 1093 0092 D1F8E820 		ldr	r2, [r1, #232]
 1094 0096 22EA0303 		bic	r3, r2, r3
 1095 009a C1F8E830 		str	r3, [r1, #232]
 1096              	.L101:
1255:..\FreeRTOS/tasks.c **** 				}
 1097              		.loc 1 1255 0
 1098 009e E36A     		ldr	r3, [r4, #44]
 1099 00a0 0122     		movs	r2, #1
 1100 00a2 9A40     		lsls	r2, r2, r3
 1101 00a4 0948     		ldr	r0, .L108
 1102 00a6 D0F8E810 		ldr	r1, [r0, #232]
 1103 00aa 0A43     		orrs	r2, r2, r1
 1104 00ac C0F8E820 		str	r2, [r0, #232]
 1105 00b0 3030     		adds	r0, r0, #48
 1106 00b2 03EB8303 		add	r3, r3, r3, lsl #2
 1107 00b6 9B00     		lsls	r3, r3, #2
 1108 00b8 1844     		add	r0, r0, r3
 1109 00ba 2946     		mov	r1, r5
 1110 00bc FFF7FEFF 		bl	vListInsertEnd
 1111              	.LVL125:
 1112              	.L100:
1262:..\FreeRTOS/tasks.c **** 				{
 1113              		.loc 1 1262 0
 1114 00c0 0FB1     		cbz	r7, .L94
1264:..\FreeRTOS/tasks.c **** 				}
 1115              		.loc 1 1264 0
 1116 00c2 FFF7FEFF 		bl	vPortYield
 1117              	.LVL126:
 1118              	.L94:
1276:..\FreeRTOS/tasks.c **** 	}
 1119              		.loc 1 1276 0
 1120 00c6 FFF7FEFF 		bl	vPortExitCritical
 1121              	.LVL127:
 1122 00ca F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1123              	.LVL128:
 1124              	.L109:
 1125              		.align	2
 1126              	.L108:
 1127 00cc 00000000 		.word	.LANCHOR0
 1128 00d0 30000000 		.word	.LANCHOR0+48
 1129              		.cfi_endproc
 1130              	.LFE71:
 1131              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1132              		.section	.text.vTaskResume,"ax",%progbits
 1133              		.align	2
 1134              		.global	vTaskResume
 1135              		.thumb
 1136              		.thumb_func
 1137              		.type	vTaskResume, %function
 1138              	vTaskResume:
 1139              	.LFB74:
1420:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1140              		.loc 1 1420 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144              	.LVL129:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 83


1428:..\FreeRTOS/tasks.c **** 		{
 1145              		.loc 1 1428 0
 1146 0000 70B3     		cbz	r0, .L114
1428:..\FreeRTOS/tasks.c **** 		{
 1147              		.loc 1 1428 0 is_stmt 0 discriminator 1
 1148 0002 184A     		ldr	r2, .L115
 1149 0004 D2F8D420 		ldr	r2, [r2, #212]
 1150 0008 9042     		cmp	r0, r2
 1151 000a 29D0     		beq	.L114
1420:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1152              		.loc 1 1420 0 is_stmt 1
 1153 000c 70B5     		push	{r4, r5, r6, lr}
 1154              		.cfi_def_cfa_offset 16
 1155              		.cfi_offset 4, -16
 1156              		.cfi_offset 5, -12
 1157              		.cfi_offset 6, -8
 1158              		.cfi_offset 14, -4
 1159 000e 0446     		mov	r4, r0
1430:..\FreeRTOS/tasks.c **** 			{
 1160              		.loc 1 1430 0
 1161 0010 FFF7FEFF 		bl	vPortEnterCritical
 1162              	.LVL130:
1432:..\FreeRTOS/tasks.c **** 				{
 1163              		.loc 1 1432 0
 1164 0014 2046     		mov	r0, r4
 1165 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1166              	.LVL131:
 1167 001a 0128     		cmp	r0, #1
 1168 001c 1DD1     		bne	.L112
1438:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1169              		.loc 1 1438 0
 1170 001e 261D     		adds	r6, r4, #4
 1171 0020 3046     		mov	r0, r6
 1172 0022 FFF7FEFF 		bl	uxListRemove
 1173              	.LVL132:
1439:..\FreeRTOS/tasks.c **** 
 1174              		.loc 1 1439 0
 1175 0026 E36A     		ldr	r3, [r4, #44]
 1176 0028 0122     		movs	r2, #1
 1177 002a 9A40     		lsls	r2, r2, r3
 1178 002c 0D4D     		ldr	r5, .L115
 1179 002e D5F8E810 		ldr	r1, [r5, #232]
 1180 0032 0A43     		orrs	r2, r2, r1
 1181 0034 C5F8E820 		str	r2, [r5, #232]
 1182 0038 05F13000 		add	r0, r5, #48
 1183 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1184 0040 9B00     		lsls	r3, r3, #2
 1185 0042 1844     		add	r0, r0, r3
 1186 0044 3146     		mov	r1, r6
 1187 0046 FFF7FEFF 		bl	vListInsertEnd
 1188              	.LVL133:
1442:..\FreeRTOS/tasks.c **** 					{
 1189              		.loc 1 1442 0
 1190 004a E26A     		ldr	r2, [r4, #44]
 1191 004c D5F8D430 		ldr	r3, [r5, #212]
 1192 0050 DB6A     		ldr	r3, [r3, #44]
 1193 0052 9A42     		cmp	r2, r3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 84


 1194 0054 01D3     		bcc	.L112
1447:..\FreeRTOS/tasks.c **** 					}
 1195              		.loc 1 1447 0
 1196 0056 FFF7FEFF 		bl	vPortYield
 1197              	.LVL134:
 1198              	.L112:
1459:..\FreeRTOS/tasks.c **** 		}
 1199              		.loc 1 1459 0
 1200 005a FFF7FEFF 		bl	vPortExitCritical
 1201              	.LVL135:
 1202 005e 70BD     		pop	{r4, r5, r6, pc}
 1203              	.LVL136:
 1204              	.L114:
 1205              		.cfi_def_cfa_offset 0
 1206              		.cfi_restore 4
 1207              		.cfi_restore 5
 1208              		.cfi_restore 6
 1209              		.cfi_restore 14
 1210 0060 7047     		bx	lr
 1211              	.L116:
 1212 0062 00BF     		.align	2
 1213              	.L115:
 1214 0064 00000000 		.word	.LANCHOR0
 1215              		.cfi_endproc
 1216              	.LFE74:
 1217              		.size	vTaskResume, .-vTaskResume
 1218              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1219              		.align	2
 1220              		.global	xTaskResumeFromISR
 1221              		.thumb
 1222              		.thumb_func
 1223              		.type	xTaskResumeFromISR, %function
 1224              	xTaskResumeFromISR:
 1225              	.LFB75:
1474:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1226              		.loc 1 1474 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              	.LVL137:
 1231 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1232              		.cfi_def_cfa_offset 24
 1233              		.cfi_offset 3, -24
 1234              		.cfi_offset 4, -20
 1235              		.cfi_offset 5, -16
 1236              		.cfi_offset 6, -12
 1237              		.cfi_offset 7, -8
 1238              		.cfi_offset 14, -4
 1239 0002 0446     		mov	r4, r0
 1240              	.LVL138:
1499:..\FreeRTOS/tasks.c **** 		{
 1241              		.loc 1 1499 0
 1242 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 1243              	.LVL139:
 1244 0008 0546     		mov	r5, r0
 1245              	.LVL140:
1501:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 85


 1246              		.loc 1 1501 0
 1247 000a 2046     		mov	r0, r4
 1248              	.LVL141:
 1249 000c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1250              	.LVL142:
 1251 0010 0128     		cmp	r0, #1
 1252 0012 2AD1     		bne	.L121
1506:..\FreeRTOS/tasks.c **** 				{
 1253              		.loc 1 1506 0
 1254 0014 184B     		ldr	r3, .L124
 1255 0016 D3F8F030 		ldr	r3, [r3, #240]
 1256 001a FBB9     		cbnz	r3, .L119
1510:..\FreeRTOS/tasks.c **** 					{
 1257              		.loc 1 1510 0
 1258 001c E26A     		ldr	r2, [r4, #44]
 1259 001e 164B     		ldr	r3, .L124
 1260 0020 D3F8D430 		ldr	r3, [r3, #212]
 1261 0024 DB6A     		ldr	r3, [r3, #44]
 1262 0026 9A42     		cmp	r2, r3
 1263 0028 01D2     		bcs	.L122
1475:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1264              		.loc 1 1475 0
 1265 002a 0026     		movs	r6, #0
 1266 002c 00E0     		b	.L120
 1267              	.L122:
1512:..\FreeRTOS/tasks.c **** 					}
 1268              		.loc 1 1512 0
 1269 002e 0126     		movs	r6, #1
 1270              	.L120:
 1271              	.LVL143:
1519:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1272              		.loc 1 1519 0
 1273 0030 271D     		adds	r7, r4, #4
 1274 0032 3846     		mov	r0, r7
 1275 0034 FFF7FEFF 		bl	uxListRemove
 1276              	.LVL144:
1520:..\FreeRTOS/tasks.c **** 				}
 1277              		.loc 1 1520 0
 1278 0038 E36A     		ldr	r3, [r4, #44]
 1279 003a 0122     		movs	r2, #1
 1280 003c 9A40     		lsls	r2, r2, r3
 1281 003e 0E48     		ldr	r0, .L124
 1282 0040 D0F8E810 		ldr	r1, [r0, #232]
 1283 0044 0A43     		orrs	r2, r2, r1
 1284 0046 C0F8E820 		str	r2, [r0, #232]
 1285 004a 3030     		adds	r0, r0, #48
 1286 004c 03EB8303 		add	r3, r3, r3, lsl #2
 1287 0050 9B00     		lsls	r3, r3, #2
 1288 0052 1844     		add	r0, r0, r3
 1289 0054 3946     		mov	r1, r7
 1290 0056 FFF7FEFF 		bl	vListInsertEnd
 1291              	.LVL145:
 1292 005a 07E0     		b	.L118
 1293              	.LVL146:
 1294              	.L119:
1527:..\FreeRTOS/tasks.c **** 				}
 1295              		.loc 1 1527 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 86


 1296 005c 0748     		ldr	r0, .L124+4
 1297 005e 04F11801 		add	r1, r4, #24
 1298 0062 FFF7FEFF 		bl	vListInsertEnd
 1299              	.LVL147:
1475:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1300              		.loc 1 1475 0
 1301 0066 0026     		movs	r6, #0
 1302 0068 00E0     		b	.L118
 1303              	.L121:
 1304 006a 0026     		movs	r6, #0
 1305              	.LVL148:
 1306              	.L118:
1535:..\FreeRTOS/tasks.c **** 
 1307              		.loc 1 1535 0
 1308 006c 2846     		mov	r0, r5
 1309 006e FFF7FEFF 		bl	vPortClearInterruptMask
 1310              	.LVL149:
1538:..\FreeRTOS/tasks.c **** 
 1311              		.loc 1 1538 0
 1312 0072 3046     		mov	r0, r6
 1313 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1314              	.LVL150:
 1315              	.L125:
 1316 0076 00BF     		.align	2
 1317              	.L124:
 1318 0078 00000000 		.word	.LANCHOR0
 1319 007c 14000000 		.word	.LANCHOR0+20
 1320              		.cfi_endproc
 1321              	.LFE75:
 1322              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1323              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1324              		.align	2
 1325              		.global	vTaskStartScheduler
 1326              		.thumb
 1327              		.thumb_func
 1328              		.type	vTaskStartScheduler, %function
 1329              	vTaskStartScheduler:
 1330              	.LFB76:
1544:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 1331              		.loc 1 1544 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335 0000 00B5     		push	{lr}
 1336              		.cfi_def_cfa_offset 4
 1337              		.cfi_offset 14, -4
 1338 0002 85B0     		sub	sp, sp, #20
 1339              		.cfi_def_cfa_offset 24
1557:..\FreeRTOS/tasks.c **** 	}
 1340              		.loc 1 1557 0
 1341 0004 0023     		movs	r3, #0
 1342 0006 0093     		str	r3, [sp]
 1343 0008 0193     		str	r3, [sp, #4]
 1344 000a 0293     		str	r3, [sp, #8]
 1345 000c 0393     		str	r3, [sp, #12]
 1346 000e 0C48     		ldr	r0, .L129
 1347 0010 0C49     		ldr	r1, .L129+4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 87


 1348 0012 6422     		movs	r2, #100
 1349 0014 FFF7FEFF 		bl	xTaskGenericCreate
 1350              	.LVL151:
1574:..\FreeRTOS/tasks.c **** 	{
 1351              		.loc 1 1574 0
 1352 0018 0128     		cmp	r0, #1
 1353 001a 0DD1     		bne	.L126
1581:..\FreeRTOS/tasks.c **** 
 1354              		.loc 1 1581 0
 1355 001c FFF7FEFF 		bl	ulPortSetInterruptMask
 1356              	.LVL152:
1591:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1357              		.loc 1 1591 0
 1358 0020 094B     		ldr	r3, .L129+8
 1359 0022 4FF0FF32 		mov	r2, #-1
 1360 0026 DA62     		str	r2, [r3, #44]
1592:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1361              		.loc 1 1592 0
 1362 0028 0122     		movs	r2, #1
 1363 002a C3F8E020 		str	r2, [r3, #224]
1593:..\FreeRTOS/tasks.c **** 
 1364              		.loc 1 1593 0
 1365 002e 0022     		movs	r2, #0
 1366 0030 C3F8D820 		str	r2, [r3, #216]
1602:..\FreeRTOS/tasks.c **** 		{
 1367              		.loc 1 1602 0
 1368 0034 FFF7FEFF 		bl	xPortStartScheduler
 1369              	.LVL153:
 1370              	.L126:
1619:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1371              		.loc 1 1619 0
 1372 0038 05B0     		add	sp, sp, #20
 1373              		.cfi_def_cfa_offset 4
 1374              		@ sp needed
 1375 003a 5DF804FB 		ldr	pc, [sp], #4
 1376              	.L130:
 1377 003e 00BF     		.align	2
 1378              	.L129:
 1379 0040 00000000 		.word	prvIdleTask
 1380 0044 00000000 		.word	.LC0
 1381 0048 00000000 		.word	.LANCHOR0
 1382              		.cfi_endproc
 1383              	.LFE76:
 1384              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1385              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1386              		.align	2
 1387              		.global	vTaskEndScheduler
 1388              		.thumb
 1389              		.thumb_func
 1390              		.type	vTaskEndScheduler, %function
 1391              	vTaskEndScheduler:
 1392              	.LFB77:
1623:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1393              		.loc 1 1623 0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 88


 1397 0000 08B5     		push	{r3, lr}
 1398              		.cfi_def_cfa_offset 8
 1399              		.cfi_offset 3, -8
 1400              		.cfi_offset 14, -4
1627:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1401              		.loc 1 1627 0
 1402 0002 FFF7FEFF 		bl	ulPortSetInterruptMask
 1403              	.LVL154:
1628:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1404              		.loc 1 1628 0
 1405 0006 0022     		movs	r2, #0
 1406 0008 024B     		ldr	r3, .L133
 1407 000a C3F8E020 		str	r2, [r3, #224]
1629:..\FreeRTOS/tasks.c **** }
 1408              		.loc 1 1629 0
 1409 000e FFF7FEFF 		bl	vPortEndScheduler
 1410              	.LVL155:
 1411 0012 08BD     		pop	{r3, pc}
 1412              	.L134:
 1413              		.align	2
 1414              	.L133:
 1415 0014 00000000 		.word	.LANCHOR0
 1416              		.cfi_endproc
 1417              	.LFE77:
 1418              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1419              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1420              		.align	2
 1421              		.global	vTaskSuspendAll
 1422              		.thumb
 1423              		.thumb_func
 1424              		.type	vTaskSuspendAll, %function
 1425              	vTaskSuspendAll:
 1426              	.LFB78:
1634:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1427              		.loc 1 1634 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		@ link register save eliminated.
1639:..\FreeRTOS/tasks.c **** }
 1432              		.loc 1 1639 0
 1433 0000 034A     		ldr	r2, .L136
 1434 0002 D2F8F030 		ldr	r3, [r2, #240]
 1435 0006 0133     		adds	r3, r3, #1
 1436 0008 C2F8F030 		str	r3, [r2, #240]
 1437 000c 7047     		bx	lr
 1438              	.L137:
 1439 000e 00BF     		.align	2
 1440              	.L136:
 1441 0010 00000000 		.word	.LANCHOR0
 1442              		.cfi_endproc
 1443              	.LFE78:
 1444              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1445              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1446              		.align	2
 1447              		.global	xTaskGetTickCount
 1448              		.thumb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 89


 1449              		.thumb_func
 1450              		.type	xTaskGetTickCount, %function
 1451              	xTaskGetTickCount:
 1452              	.LFB80:
1765:..\FreeRTOS/tasks.c **** TickType_t xTicks;
 1453              		.loc 1 1765 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 1457              		@ link register save eliminated.
1771:..\FreeRTOS/tasks.c **** 	}
 1458              		.loc 1 1771 0
 1459 0000 014B     		ldr	r3, .L139
 1460 0002 D3F8D800 		ldr	r0, [r3, #216]
 1461              	.LVL156:
1776:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1462              		.loc 1 1776 0
 1463 0006 7047     		bx	lr
 1464              	.L140:
 1465              		.align	2
 1466              	.L139:
 1467 0008 00000000 		.word	.LANCHOR0
 1468              		.cfi_endproc
 1469              	.LFE80:
 1470              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1471              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1472              		.align	2
 1473              		.global	xTaskGetTickCountFromISR
 1474              		.thumb
 1475              		.thumb_func
 1476              		.type	xTaskGetTickCountFromISR, %function
 1477              	xTaskGetTickCountFromISR:
 1478              	.LFB81:
1780:..\FreeRTOS/tasks.c **** TickType_t xReturn;
 1479              		.loc 1 1780 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
 1484              	.LVL157:
1802:..\FreeRTOS/tasks.c **** 	}
 1485              		.loc 1 1802 0
 1486 0000 014B     		ldr	r3, .L142
 1487 0002 D3F8D800 		ldr	r0, [r3, #216]
 1488              	.LVL158:
1807:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1489              		.loc 1 1807 0
 1490 0006 7047     		bx	lr
 1491              	.L143:
 1492              		.align	2
 1493              	.L142:
 1494 0008 00000000 		.word	.LANCHOR0
 1495              		.cfi_endproc
 1496              	.LFE81:
 1497              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1498              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1499              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 90


 1500              		.global	uxTaskGetNumberOfTasks
 1501              		.thumb
 1502              		.thumb_func
 1503              		.type	uxTaskGetNumberOfTasks, %function
 1504              	uxTaskGetNumberOfTasks:
 1505              	.LFB82:
1811:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 1506              		.loc 1 1811 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
1814:..\FreeRTOS/tasks.c **** }
 1511              		.loc 1 1814 0
 1512 0000 014B     		ldr	r3, .L145
 1513 0002 D3F8DC00 		ldr	r0, [r3, #220]
1815:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1514              		.loc 1 1815 0
 1515 0006 7047     		bx	lr
 1516              	.L146:
 1517              		.align	2
 1518              	.L145:
 1519 0008 00000000 		.word	.LANCHOR0
 1520              		.cfi_endproc
 1521              	.LFE82:
 1522              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1523              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1524              		.align	2
 1525              		.global	xTaskIncrementTick
 1526              		.thumb
 1527              		.thumb_func
 1528              		.type	xTaskIncrementTick, %function
 1529              	xTaskIncrementTick:
 1530              	.LFB83:
1940:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
 1531              		.loc 1 1940 0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 1535 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1536              		.cfi_def_cfa_offset 24
 1537              		.cfi_offset 4, -24
 1538              		.cfi_offset 5, -20
 1539              		.cfi_offset 6, -16
 1540              		.cfi_offset 7, -12
 1541              		.cfi_offset 8, -8
 1542              		.cfi_offset 14, -4
 1543              	.LVL159:
1949:..\FreeRTOS/tasks.c **** 	{
 1544              		.loc 1 1949 0
 1545 0004 3E4B     		ldr	r3, .L166
 1546 0006 D3F8F030 		ldr	r3, [r3, #240]
 1547 000a 002B     		cmp	r3, #0
 1548 000c 66D1     		bne	.L148
1953:..\FreeRTOS/tasks.c **** 
 1549              		.loc 1 1953 0
 1550 000e 3C4B     		ldr	r3, .L166
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 91


 1551 0010 D3F8D820 		ldr	r2, [r3, #216]
 1552 0014 0132     		adds	r2, r2, #1
 1553 0016 C3F8D820 		str	r2, [r3, #216]
 1554              	.LBB8:
1958:..\FreeRTOS/tasks.c **** 
 1555              		.loc 1 1958 0
 1556 001a D3F8D880 		ldr	r8, [r3, #216]
 1557              	.LVL160:
1960:..\FreeRTOS/tasks.c **** 			{
 1558              		.loc 1 1960 0
 1559 001e B8F1000F 		cmp	r8, #0
 1560 0022 0CD1     		bne	.L149
 1561              	.LBB9:
1962:..\FreeRTOS/tasks.c **** 			}
 1562              		.loc 1 1962 0
 1563 0024 9A6A     		ldr	r2, [r3, #40]
 1564              	.LVL161:
 1565 0026 D3F8D010 		ldr	r1, [r3, #208]
 1566 002a 9962     		str	r1, [r3, #40]
 1567 002c C3F8D020 		str	r2, [r3, #208]
 1568 0030 D3F8F420 		ldr	r2, [r3, #244]
 1569              	.LVL162:
 1570 0034 0132     		adds	r2, r2, #1
 1571 0036 C3F8F420 		str	r2, [r3, #244]
 1572              	.LVL163:
 1573 003a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1574              	.LVL164:
 1575              	.L149:
 1576              	.LBE9:
1973:..\FreeRTOS/tasks.c **** 			{
 1577              		.loc 1 1973 0
 1578 003e 304B     		ldr	r3, .L166
 1579 0040 DB6A     		ldr	r3, [r3, #44]
 1580 0042 9845     		cmp	r8, r3
 1581 0044 03D2     		bcs	.L160
 1582              	.LBE8:
1943:..\FreeRTOS/tasks.c **** 
 1583              		.loc 1 1943 0
 1584 0046 0027     		movs	r7, #0
 1585 0048 3CE0     		b	.L151
 1586              	.LVL165:
 1587              	.L162:
 1588              	.LBB10:
2039:..\FreeRTOS/tasks.c **** 							}
 1589              		.loc 1 2039 0
 1590 004a 0127     		movs	r7, #1
 1591              	.LVL166:
 1592 004c 00E0     		b	.L150
 1593              	.LVL167:
 1594              	.L160:
 1595 004e 0027     		movs	r7, #0
 1596              	.LVL168:
 1597              	.L150:
1977:..\FreeRTOS/tasks.c **** 					{
 1598              		.loc 1 1977 0
 1599 0050 2B4B     		ldr	r3, .L166
 1600 0052 9B6A     		ldr	r3, [r3, #40]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 92


 1601 0054 1B68     		ldr	r3, [r3]
 1602 0056 0BB9     		cbnz	r3, .L161
 1603 0058 0123     		movs	r3, #1
 1604 005a 00E0     		b	.L152
 1605              	.L161:
 1606 005c 0023     		movs	r3, #0
 1607              	.L152:
1977:..\FreeRTOS/tasks.c **** 					{
 1608              		.loc 1 1977 0 is_stmt 0 discriminator 4
 1609 005e 23B1     		cbz	r3, .L153
1984:..\FreeRTOS/tasks.c **** 						break;
 1610              		.loc 1 1984 0 is_stmt 1
 1611 0060 4FF0FF32 		mov	r2, #-1
 1612 0064 264B     		ldr	r3, .L166
 1613 0066 DA62     		str	r2, [r3, #44]
1985:..\FreeRTOS/tasks.c **** 					}
 1614              		.loc 1 1985 0
 1615 0068 2CE0     		b	.L151
 1616              	.L153:
1993:..\FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1617              		.loc 1 1993 0
 1618 006a 254B     		ldr	r3, .L166
 1619 006c 9B6A     		ldr	r3, [r3, #40]
 1620 006e DB68     		ldr	r3, [r3, #12]
 1621 0070 DC68     		ldr	r4, [r3, #12]
 1622              	.LVL169:
1994:..\FreeRTOS/tasks.c **** 
 1623              		.loc 1 1994 0
 1624 0072 6368     		ldr	r3, [r4, #4]
 1625              	.LVL170:
1996:..\FreeRTOS/tasks.c **** 						{
 1626              		.loc 1 1996 0
 1627 0074 9845     		cmp	r8, r3
 1628 0076 02D2     		bcs	.L154
2003:..\FreeRTOS/tasks.c **** 							break;
 1629              		.loc 1 2003 0
 1630 0078 214A     		ldr	r2, .L166
 1631 007a D362     		str	r3, [r2, #44]
2004:..\FreeRTOS/tasks.c **** 						}
 1632              		.loc 1 2004 0
 1633 007c 22E0     		b	.L151
 1634              	.L154:
2012:..\FreeRTOS/tasks.c **** 
 1635              		.loc 1 2012 0
 1636 007e 261D     		adds	r6, r4, #4
 1637 0080 3046     		mov	r0, r6
 1638 0082 FFF7FEFF 		bl	uxListRemove
 1639              	.LVL171:
2016:..\FreeRTOS/tasks.c **** 						{
 1640              		.loc 1 2016 0
 1641 0086 A36A     		ldr	r3, [r4, #40]
 1642 0088 1BB1     		cbz	r3, .L155
2018:..\FreeRTOS/tasks.c **** 						}
 1643              		.loc 1 2018 0
 1644 008a 04F11800 		add	r0, r4, #24
 1645 008e FFF7FEFF 		bl	uxListRemove
 1646              	.LVL172:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 93


 1647              	.L155:
2027:..\FreeRTOS/tasks.c **** 
 1648              		.loc 1 2027 0
 1649 0092 E06A     		ldr	r0, [r4, #44]
 1650 0094 0123     		movs	r3, #1
 1651 0096 8340     		lsls	r3, r3, r0
 1652 0098 194D     		ldr	r5, .L166
 1653 009a D5F8E820 		ldr	r2, [r5, #232]
 1654 009e 1343     		orrs	r3, r3, r2
 1655 00a0 C5F8E830 		str	r3, [r5, #232]
 1656 00a4 05F13003 		add	r3, r5, #48
 1657 00a8 00EB8000 		add	r0, r0, r0, lsl #2
 1658 00ac 8000     		lsls	r0, r0, #2
 1659 00ae 1844     		add	r0, r0, r3
 1660 00b0 3146     		mov	r1, r6
 1661 00b2 FFF7FEFF 		bl	vListInsertEnd
 1662              	.LVL173:
2037:..\FreeRTOS/tasks.c **** 							{
 1663              		.loc 1 2037 0
 1664 00b6 E26A     		ldr	r2, [r4, #44]
 1665 00b8 D5F8D430 		ldr	r3, [r5, #212]
 1666 00bc DB6A     		ldr	r3, [r3, #44]
 1667 00be 9A42     		cmp	r2, r3
 1668 00c0 C3D2     		bcs	.L162
 1669 00c2 C5E7     		b	.L150
 1670              	.LVL174:
 1671              	.L151:
 1672              	.LBE10:
2057:..\FreeRTOS/tasks.c **** 			{
 1673              		.loc 1 2057 0
 1674 00c4 0E4A     		ldr	r2, .L166
 1675 00c6 D2F8D430 		ldr	r3, [r2, #212]
 1676 00ca DB6A     		ldr	r3, [r3, #44]
 1677 00cc 03EB8303 		add	r3, r3, r3, lsl #2
 1678 00d0 9B00     		lsls	r3, r3, #2
 1679 00d2 1344     		add	r3, r3, r2
 1680 00d4 1B6B     		ldr	r3, [r3, #48]
 1681 00d6 012B     		cmp	r3, #1
 1682 00d8 08D8     		bhi	.L163
 1683 00da 08E0     		b	.L158
 1684              	.LVL175:
 1685              	.L148:
2085:..\FreeRTOS/tasks.c **** 
 1686              		.loc 1 2085 0
 1687 00dc 084A     		ldr	r2, .L166
 1688 00de D2F8F830 		ldr	r3, [r2, #248]
 1689 00e2 0133     		adds	r3, r3, #1
 1690 00e4 C2F8F830 		str	r3, [r2, #248]
1943:..\FreeRTOS/tasks.c **** 
 1691              		.loc 1 1943 0
 1692 00e8 0027     		movs	r7, #0
 1693 00ea 00E0     		b	.L158
 1694              	.LVL176:
 1695              	.L163:
2059:..\FreeRTOS/tasks.c **** 			}
 1696              		.loc 1 2059 0
 1697 00ec 0127     		movs	r7, #1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 94


 1698              	.LVL177:
 1699              	.L158:
2098:..\FreeRTOS/tasks.c **** 		{
 1700              		.loc 1 2098 0
 1701 00ee 044B     		ldr	r3, .L166
 1702 00f0 D3F8FC30 		ldr	r3, [r3, #252]
 1703 00f4 03B1     		cbz	r3, .L159
2100:..\FreeRTOS/tasks.c **** 		}
 1704              		.loc 1 2100 0
 1705 00f6 0127     		movs	r7, #1
 1706              	.LVL178:
 1707              	.L159:
2110:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1708              		.loc 1 2110 0
 1709 00f8 3846     		mov	r0, r7
 1710 00fa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1711              	.LVL179:
 1712              	.L167:
 1713 00fe 00BF     		.align	2
 1714              	.L166:
 1715 0100 00000000 		.word	.LANCHOR0
 1716              		.cfi_endproc
 1717              	.LFE83:
 1718              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1719              		.section	.text.xTaskResumeAll,"ax",%progbits
 1720              		.align	2
 1721              		.global	xTaskResumeAll
 1722              		.thumb
 1723              		.thumb_func
 1724              		.type	xTaskResumeAll, %function
 1725              	xTaskResumeAll:
 1726              	.LFB79:
1672:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
 1727              		.loc 1 1672 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731 0000 70B5     		push	{r4, r5, r6, lr}
 1732              		.cfi_def_cfa_offset 16
 1733              		.cfi_offset 4, -16
 1734              		.cfi_offset 5, -12
 1735              		.cfi_offset 6, -8
 1736              		.cfi_offset 14, -4
 1737              	.LVL180:
1685:..\FreeRTOS/tasks.c **** 	{
 1738              		.loc 1 1685 0
 1739 0002 FFF7FEFF 		bl	vPortEnterCritical
 1740              	.LVL181:
1687:..\FreeRTOS/tasks.c **** 
 1741              		.loc 1 1687 0
 1742 0006 304B     		ldr	r3, .L180
 1743 0008 D3F8F020 		ldr	r2, [r3, #240]
 1744 000c 013A     		subs	r2, r2, #1
 1745 000e C3F8F020 		str	r2, [r3, #240]
1689:..\FreeRTOS/tasks.c **** 		{
 1746              		.loc 1 1689 0
 1747 0012 D3F8F030 		ldr	r3, [r3, #240]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 95


 1748 0016 002B     		cmp	r3, #0
 1749 0018 4ED1     		bne	.L177
1691:..\FreeRTOS/tasks.c **** 			{
 1750              		.loc 1 1691 0
 1751 001a 2B4B     		ldr	r3, .L180
 1752 001c D3F8DC30 		ldr	r3, [r3, #220]
 1753 0020 33BB     		cbnz	r3, .L171
1674:..\FreeRTOS/tasks.c **** 
 1754              		.loc 1 1674 0
 1755 0022 0024     		movs	r4, #0
 1756 0024 4BE0     		b	.L169
 1757              	.L172:
1697:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1758              		.loc 1 1697 0
 1759 0026 284C     		ldr	r4, .L180
 1760 0028 236A     		ldr	r3, [r4, #32]
 1761 002a DD68     		ldr	r5, [r3, #12]
 1762              	.LVL182:
1698:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1763              		.loc 1 1698 0
 1764 002c 05F11800 		add	r0, r5, #24
 1765 0030 FFF7FEFF 		bl	uxListRemove
 1766              	.LVL183:
1699:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1767              		.loc 1 1699 0
 1768 0034 2E1D     		adds	r6, r5, #4
 1769 0036 3046     		mov	r0, r6
 1770 0038 FFF7FEFF 		bl	uxListRemove
 1771              	.LVL184:
1700:..\FreeRTOS/tasks.c **** 
 1772              		.loc 1 1700 0
 1773 003c E86A     		ldr	r0, [r5, #44]
 1774 003e 0123     		movs	r3, #1
 1775 0040 8340     		lsls	r3, r3, r0
 1776 0042 D4F8E820 		ldr	r2, [r4, #232]
 1777 0046 1343     		orrs	r3, r3, r2
 1778 0048 C4F8E830 		str	r3, [r4, #232]
 1779 004c 04F13003 		add	r3, r4, #48
 1780 0050 00EB8000 		add	r0, r0, r0, lsl #2
 1781 0054 8000     		lsls	r0, r0, #2
 1782 0056 1844     		add	r0, r0, r3
 1783 0058 3146     		mov	r1, r6
 1784 005a FFF7FEFF 		bl	vListInsertEnd
 1785              	.LVL185:
1704:..\FreeRTOS/tasks.c **** 					{
 1786              		.loc 1 1704 0
 1787 005e EA6A     		ldr	r2, [r5, #44]
 1788 0060 D4F8D430 		ldr	r3, [r4, #212]
 1789 0064 DB6A     		ldr	r3, [r3, #44]
 1790 0066 9A42     		cmp	r2, r3
 1791 0068 02D3     		bcc	.L171
1706:..\FreeRTOS/tasks.c **** 					}
 1792              		.loc 1 1706 0
 1793 006a 0122     		movs	r2, #1
 1794 006c C4F8FC20 		str	r2, [r4, #252]
 1795              	.LVL186:
 1796              	.L171:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 96


1695:..\FreeRTOS/tasks.c **** 				{
 1797              		.loc 1 1695 0
 1798 0070 154B     		ldr	r3, .L180
 1799 0072 5B69     		ldr	r3, [r3, #20]
 1800 0074 002B     		cmp	r3, #0
 1801 0076 D6D1     		bne	.L172
1718:..\FreeRTOS/tasks.c **** 				{
 1802              		.loc 1 1718 0
 1803 0078 134B     		ldr	r3, .L180
 1804 007a D3F8F830 		ldr	r3, [r3, #248]
 1805 007e 6BB9     		cbnz	r3, .L173
 1806 0080 11E0     		b	.L174
 1807              	.L176:
1722:..\FreeRTOS/tasks.c **** 						{
 1808              		.loc 1 1722 0
 1809 0082 FFF7FEFF 		bl	xTaskIncrementTick
 1810              	.LVL187:
 1811 0086 18B1     		cbz	r0, .L175
1724:..\FreeRTOS/tasks.c **** 						}
 1812              		.loc 1 1724 0
 1813 0088 0122     		movs	r2, #1
 1814 008a 0F4B     		ldr	r3, .L180
 1815 008c C3F8FC20 		str	r2, [r3, #252]
 1816              	.L175:
1730:..\FreeRTOS/tasks.c **** 					}
 1817              		.loc 1 1730 0
 1818 0090 0D4A     		ldr	r2, .L180
 1819 0092 D2F8F830 		ldr	r3, [r2, #248]
 1820 0096 013B     		subs	r3, r3, #1
 1821 0098 C2F8F830 		str	r3, [r2, #248]
 1822              	.L173:
1720:..\FreeRTOS/tasks.c **** 					{
 1823              		.loc 1 1720 0
 1824 009c 0A4B     		ldr	r3, .L180
 1825 009e D3F8F830 		ldr	r3, [r3, #248]
 1826 00a2 002B     		cmp	r3, #0
 1827 00a4 EDD1     		bne	.L176
 1828              	.L174:
1738:..\FreeRTOS/tasks.c **** 				{
 1829              		.loc 1 1738 0
 1830 00a6 084B     		ldr	r3, .L180
 1831 00a8 D3F8FC30 		ldr	r3, [r3, #252]
 1832 00ac 012B     		cmp	r3, #1
 1833 00ae 05D1     		bne	.L178
 1834              	.LVL188:
1745:..\FreeRTOS/tasks.c **** 				}
 1835              		.loc 1 1745 0
 1836 00b0 FFF7FEFF 		bl	vPortYield
 1837              	.LVL189:
1742:..\FreeRTOS/tasks.c **** 					}
 1838              		.loc 1 1742 0
 1839 00b4 0124     		movs	r4, #1
 1840 00b6 02E0     		b	.L169
 1841              	.LVL190:
 1842              	.L177:
1674:..\FreeRTOS/tasks.c **** 
 1843              		.loc 1 1674 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 97


 1844 00b8 0024     		movs	r4, #0
 1845 00ba 00E0     		b	.L169
 1846              	.L178:
 1847 00bc 0024     		movs	r4, #0
 1848              	.LVL191:
 1849              	.L169:
1758:..\FreeRTOS/tasks.c **** 
 1850              		.loc 1 1758 0
 1851 00be FFF7FEFF 		bl	vPortExitCritical
 1852              	.LVL192:
1761:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1853              		.loc 1 1761 0
 1854 00c2 2046     		mov	r0, r4
 1855 00c4 70BD     		pop	{r4, r5, r6, pc}
 1856              	.LVL193:
 1857              	.L181:
 1858 00c6 00BF     		.align	2
 1859              	.L180:
 1860 00c8 00000000 		.word	.LANCHOR0
 1861              		.cfi_endproc
 1862              	.LFE79:
 1863              		.size	xTaskResumeAll, .-xTaskResumeAll
 1864              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1865              		.align	2
 1866              		.global	vTaskDelayUntil
 1867              		.thumb
 1868              		.thumb_func
 1869              		.type	vTaskDelayUntil, %function
 1870              	vTaskDelayUntil:
 1871              	.LFB66:
 827:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 1872              		.loc 1 827 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              	.LVL194:
 1877 0000 38B5     		push	{r3, r4, r5, lr}
 1878              		.cfi_def_cfa_offset 16
 1879              		.cfi_offset 3, -16
 1880              		.cfi_offset 4, -12
 1881              		.cfi_offset 5, -8
 1882              		.cfi_offset 14, -4
 1883 0002 0546     		mov	r5, r0
 1884 0004 0C46     		mov	r4, r1
 1885              	.LVL195:
 835:..\FreeRTOS/tasks.c **** 		{
 1886              		.loc 1 835 0
 1887 0006 FFF7FEFF 		bl	vTaskSuspendAll
 1888              	.LVL196:
 1889              	.LBB11:
 839:..\FreeRTOS/tasks.c **** 
 1890              		.loc 1 839 0
 1891 000a 1C4B     		ldr	r3, .L193
 1892 000c D3F8D820 		ldr	r2, [r3, #216]
 1893              	.LVL197:
 842:..\FreeRTOS/tasks.c **** 
 1894              		.loc 1 842 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 98


 1895 0010 2B68     		ldr	r3, [r5]
 1896 0012 1C44     		add	r4, r4, r3
 1897              	.LVL198:
 844:..\FreeRTOS/tasks.c **** 			{
 1898              		.loc 1 844 0
 1899 0014 9A42     		cmp	r2, r3
 1900 0016 05D2     		bcs	.L183
 851:..\FreeRTOS/tasks.c **** 				{
 1901              		.loc 1 851 0
 1902 0018 A342     		cmp	r3, r4
 1903 001a 09D9     		bls	.L188
 851:..\FreeRTOS/tasks.c **** 				{
 1904              		.loc 1 851 0 is_stmt 0 discriminator 1
 1905 001c 9442     		cmp	r4, r2
 1906 001e 09D8     		bhi	.L189
 1907              	.LBE11:
 829:..\FreeRTOS/tasks.c **** 
 1908              		.loc 1 829 0 is_stmt 1
 1909 0020 0023     		movs	r3, #0
 1910 0022 0CE0     		b	.L184
 1911              	.L183:
 1912              	.LBB12:
 865:..\FreeRTOS/tasks.c **** 				{
 1913              		.loc 1 865 0
 1914 0024 A342     		cmp	r3, r4
 1915 0026 07D8     		bhi	.L190
 865:..\FreeRTOS/tasks.c **** 				{
 1916              		.loc 1 865 0 is_stmt 0 discriminator 1
 1917 0028 9442     		cmp	r4, r2
 1918 002a 07D8     		bhi	.L191
 1919              	.LBE12:
 829:..\FreeRTOS/tasks.c **** 
 1920              		.loc 1 829 0 is_stmt 1
 1921 002c 0023     		movs	r3, #0
 1922 002e 06E0     		b	.L184
 1923              	.L188:
 1924 0030 0023     		movs	r3, #0
 1925 0032 04E0     		b	.L184
 1926              	.L189:
 1927              	.LBB13:
 853:..\FreeRTOS/tasks.c **** 				}
 1928              		.loc 1 853 0
 1929 0034 0123     		movs	r3, #1
 1930 0036 02E0     		b	.L184
 1931              	.L190:
 867:..\FreeRTOS/tasks.c **** 				}
 1932              		.loc 1 867 0
 1933 0038 0123     		movs	r3, #1
 1934 003a 00E0     		b	.L184
 1935              	.L191:
 1936 003c 0123     		movs	r3, #1
 1937              	.L184:
 1938              	.LVL199:
 876:..\FreeRTOS/tasks.c **** 
 1939              		.loc 1 876 0
 1940 003e 2C60     		str	r4, [r5]
 878:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 99


 1941              		.loc 1 878 0
 1942 0040 ABB1     		cbz	r3, .L185
 884:..\FreeRTOS/tasks.c **** 				{
 1943              		.loc 1 884 0
 1944 0042 0E4B     		ldr	r3, .L193
 1945              	.LVL200:
 1946 0044 D3F8D400 		ldr	r0, [r3, #212]
 1947 0048 0430     		adds	r0, r0, #4
 1948 004a FFF7FEFF 		bl	uxListRemove
 1949              	.LVL201:
 1950 004e 58B9     		cbnz	r0, .L186
 889:..\FreeRTOS/tasks.c **** 				}
 1951              		.loc 1 889 0
 1952 0050 0A4B     		ldr	r3, .L193
 1953 0052 D3F8D420 		ldr	r2, [r3, #212]
 1954 0056 D16A     		ldr	r1, [r2, #44]
 1955 0058 0122     		movs	r2, #1
 1956 005a 8A40     		lsls	r2, r2, r1
 1957 005c D3F8E810 		ldr	r1, [r3, #232]
 1958 0060 21EA0202 		bic	r2, r1, r2
 1959 0064 C3F8E820 		str	r2, [r3, #232]
 1960              	.L186:
 896:..\FreeRTOS/tasks.c **** 			}
 1961              		.loc 1 896 0
 1962 0068 2046     		mov	r0, r4
 1963 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1964              	.LVL202:
 1965              	.L185:
 1966              	.LBE13:
 903:..\FreeRTOS/tasks.c **** 
 1967              		.loc 1 903 0
 1968 006e FFF7FEFF 		bl	xTaskResumeAll
 1969              	.LVL203:
 907:..\FreeRTOS/tasks.c **** 		{
 1970              		.loc 1 907 0
 1971 0072 08B9     		cbnz	r0, .L182
 909:..\FreeRTOS/tasks.c **** 		}
 1972              		.loc 1 909 0
 1973 0074 FFF7FEFF 		bl	vPortYield
 1974              	.LVL204:
 1975              	.L182:
 1976 0078 38BD     		pop	{r3, r4, r5, pc}
 1977              	.LVL205:
 1978              	.L194:
 1979 007a 00BF     		.align	2
 1980              	.L193:
 1981 007c 00000000 		.word	.LANCHOR0
 1982              		.cfi_endproc
 1983              	.LFE66:
 1984              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 1985              		.section	.text.vTaskDelay,"ax",%progbits
 1986              		.align	2
 1987              		.global	vTaskDelay
 1988              		.thumb
 1989              		.thumb_func
 1990              		.type	vTaskDelay, %function
 1991              	vTaskDelay:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 100


 1992              	.LFB67:
 923:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 1993              		.loc 1 923 0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 0
 1996              		@ frame_needed = 0, uses_anonymous_args = 0
 1997              	.LVL206:
 1998 0000 10B5     		push	{r4, lr}
 1999              		.cfi_def_cfa_offset 8
 2000              		.cfi_offset 4, -8
 2001              		.cfi_offset 14, -4
 2002              	.LVL207:
 929:..\FreeRTOS/tasks.c **** 		{
 2003              		.loc 1 929 0
 2004 0002 F0B1     		cbz	r0, .L199
 2005 0004 0446     		mov	r4, r0
 932:..\FreeRTOS/tasks.c **** 			{
 2006              		.loc 1 932 0
 2007 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2008              	.LVL208:
 946:..\FreeRTOS/tasks.c **** 
 2009              		.loc 1 946 0
 2010 000a 104B     		ldr	r3, .L201
 2011 000c D3F8D820 		ldr	r2, [r3, #216]
 2012 0010 1444     		add	r4, r4, r2
 2013              	.LVL209:
 951:..\FreeRTOS/tasks.c **** 				{
 2014              		.loc 1 951 0
 2015 0012 D3F8D400 		ldr	r0, [r3, #212]
 2016 0016 0430     		adds	r0, r0, #4
 2017 0018 FFF7FEFF 		bl	uxListRemove
 2018              	.LVL210:
 2019 001c 58B9     		cbnz	r0, .L197
 956:..\FreeRTOS/tasks.c **** 				}
 2020              		.loc 1 956 0
 2021 001e 0B4B     		ldr	r3, .L201
 2022 0020 D3F8D420 		ldr	r2, [r3, #212]
 2023 0024 D16A     		ldr	r1, [r2, #44]
 2024 0026 0122     		movs	r2, #1
 2025 0028 8A40     		lsls	r2, r2, r1
 2026 002a D3F8E810 		ldr	r1, [r3, #232]
 2027 002e 21EA0202 		bic	r2, r1, r2
 2028 0032 C3F8E820 		str	r2, [r3, #232]
 2029              	.L197:
 962:..\FreeRTOS/tasks.c **** 			}
 2030              		.loc 1 962 0
 2031 0036 2046     		mov	r0, r4
 2032 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2033              	.LVL211:
 964:..\FreeRTOS/tasks.c **** 		}
 2034              		.loc 1 964 0
 2035 003c FFF7FEFF 		bl	xTaskResumeAll
 2036              	.LVL212:
 2037 0040 00E0     		b	.L196
 2038              	.LVL213:
 2039              	.L199:
 925:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 101


 2040              		.loc 1 925 0
 2041 0042 0020     		movs	r0, #0
 2042              	.LVL214:
 2043              	.L196:
 973:..\FreeRTOS/tasks.c **** 		{
 2044              		.loc 1 973 0
 2045 0044 08B9     		cbnz	r0, .L195
 975:..\FreeRTOS/tasks.c **** 		}
 2046              		.loc 1 975 0
 2047 0046 FFF7FEFF 		bl	vPortYield
 2048              	.LVL215:
 2049              	.L195:
 2050 004a 10BD     		pop	{r4, pc}
 2051              	.L202:
 2052              		.align	2
 2053              	.L201:
 2054 004c 00000000 		.word	.LANCHOR0
 2055              		.cfi_endproc
 2056              	.LFE67:
 2057              		.size	vTaskDelay, .-vTaskDelay
 2058              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2059              		.align	2
 2060              		.thumb
 2061              		.thumb_func
 2062              		.type	prvCheckTasksWaitingTermination, %function
 2063              	prvCheckTasksWaitingTermination:
 2064              	.LFB95:
3031:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
 2065              		.loc 1 3031 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069 0000 38B5     		push	{r3, r4, r5, lr}
 2070              		.cfi_def_cfa_offset 16
 2071              		.cfi_offset 3, -16
 2072              		.cfi_offset 4, -12
 2073              		.cfi_offset 5, -8
 2074              		.cfi_offset 14, -4
 2075              	.LBB14:
3038:..\FreeRTOS/tasks.c **** 		{
 2076              		.loc 1 3038 0
 2077 0002 1FE0     		b	.L205
 2078              	.L206:
3040:..\FreeRTOS/tasks.c **** 			{
 2079              		.loc 1 3040 0
 2080 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2081              	.LVL216:
3042:..\FreeRTOS/tasks.c **** 			}
 2082              		.loc 1 3042 0
 2083 0008 114B     		ldr	r3, .L208
 2084 000a D3F8BC40 		ldr	r4, [r3, #188]
 2085              	.LVL217:
3044:..\FreeRTOS/tasks.c **** 
 2086              		.loc 1 3044 0
 2087 000e FFF7FEFF 		bl	xTaskResumeAll
 2088              	.LVL218:
3046:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 102


 2089              		.loc 1 3046 0
 2090 0012 BCB1     		cbz	r4, .L205
 2091              	.LBB15:
3050:..\FreeRTOS/tasks.c **** 				{
 2092              		.loc 1 3050 0
 2093 0014 FFF7FEFF 		bl	vPortEnterCritical
 2094              	.LVL219:
3052:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2095              		.loc 1 3052 0
 2096 0018 0D4C     		ldr	r4, .L208
 2097              	.LVL220:
 2098 001a D4F8C830 		ldr	r3, [r4, #200]
 2099 001e DD68     		ldr	r5, [r3, #12]
 2100              	.LVL221:
3053:..\FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2101              		.loc 1 3053 0
 2102 0020 281D     		adds	r0, r5, #4
 2103 0022 FFF7FEFF 		bl	uxListRemove
 2104              	.LVL222:
3054:..\FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 2105              		.loc 1 3054 0
 2106 0026 D4F8DC30 		ldr	r3, [r4, #220]
 2107 002a 013B     		subs	r3, r3, #1
 2108 002c C4F8DC30 		str	r3, [r4, #220]
3055:..\FreeRTOS/tasks.c **** 				}
 2109              		.loc 1 3055 0
 2110 0030 D4F8EC30 		ldr	r3, [r4, #236]
 2111 0034 013B     		subs	r3, r3, #1
 2112 0036 C4F8EC30 		str	r3, [r4, #236]
3057:..\FreeRTOS/tasks.c **** 
 2113              		.loc 1 3057 0
 2114 003a FFF7FEFF 		bl	vPortExitCritical
 2115              	.LVL223:
3059:..\FreeRTOS/tasks.c **** 			}
 2116              		.loc 1 3059 0
 2117 003e 2846     		mov	r0, r5
 2118 0040 FFF7FEFF 		bl	prvDeleteTCB
 2119              	.LVL224:
 2120              	.L205:
 2121              	.LBE15:
3038:..\FreeRTOS/tasks.c **** 		{
 2122              		.loc 1 3038 0
 2123 0044 024B     		ldr	r3, .L208
 2124 0046 D3F8EC30 		ldr	r3, [r3, #236]
 2125 004a 002B     		cmp	r3, #0
 2126 004c DAD1     		bne	.L206
 2127              	.LBE14:
3068:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2128              		.loc 1 3068 0
 2129 004e 38BD     		pop	{r3, r4, r5, pc}
 2130              	.L209:
 2131              		.align	2
 2132              	.L208:
 2133 0050 00000000 		.word	.LANCHOR0
 2134              		.cfi_endproc
 2135              	.LFE95:
 2136              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 103


 2137              		.section	.text.prvIdleTask,"ax",%progbits
 2138              		.align	2
 2139              		.thumb
 2140              		.thumb_func
 2141              		.type	prvIdleTask, %function
 2142              	prvIdleTask:
 2143              	.LFB92:
2691:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
 2144              		.loc 1 2691 0
 2145              		.cfi_startproc
 2146              		@ Volatile: function does not return.
 2147              		@ args = 0, pretend = 0, frame = 0
 2148              		@ frame_needed = 0, uses_anonymous_args = 0
 2149              	.LVL225:
 2150 0000 08B5     		push	{r3, lr}
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 3, -8
 2153              		.cfi_offset 14, -4
 2154              	.LVL226:
 2155              	.L211:
2698:..\FreeRTOS/tasks.c **** 
 2156              		.loc 1 2698 0 discriminator 1
 2157 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2158              	.LVL227:
2789:..\FreeRTOS/tasks.c **** }
 2159              		.loc 1 2789 0 discriminator 1
 2160 0006 FCE7     		b	.L211
 2161              		.cfi_endproc
 2162              	.LFE92:
 2163              		.size	prvIdleTask, .-prvIdleTask
 2164              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2165              		.align	2
 2166              		.global	vTaskSwitchContext
 2167              		.thumb
 2168              		.thumb_func
 2169              		.type	vTaskSwitchContext, %function
 2170              	vTaskSwitchContext:
 2171              	.LFB84:
2204:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2172              		.loc 1 2204 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 0
 2175              		@ frame_needed = 0, uses_anonymous_args = 0
2205:..\FreeRTOS/tasks.c **** 	{
 2176              		.loc 1 2205 0
 2177 0000 274B     		ldr	r3, .L220
 2178 0002 D3F8F030 		ldr	r3, [r3, #240]
 2179 0006 23B1     		cbz	r3, .L214
2209:..\FreeRTOS/tasks.c **** 	}
 2180              		.loc 1 2209 0
 2181 0008 0122     		movs	r2, #1
 2182 000a 254B     		ldr	r3, .L220
 2183 000c C3F8FC20 		str	r2, [r3, #252]
 2184 0010 7047     		bx	lr
 2185              	.L214:
2204:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2186              		.loc 1 2204 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 104


 2187 0012 10B5     		push	{r4, lr}
 2188              		.cfi_def_cfa_offset 8
 2189              		.cfi_offset 4, -8
 2190              		.cfi_offset 14, -4
2213:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2191              		.loc 1 2213 0
 2192 0014 224B     		ldr	r3, .L220
 2193 0016 0022     		movs	r2, #0
 2194 0018 C3F8FC20 		str	r2, [r3, #252]
 2195              	.LBB16:
2244:..\FreeRTOS/tasks.c **** 
 2196              		.loc 1 2244 0
 2197 001c D3F8D430 		ldr	r3, [r3, #212]
 2198 0020 1B6B     		ldr	r3, [r3, #48]
 2199              	.LVL228:
 2200 0022 1A68     		ldr	r2, [r3]
 2201 0024 B2F1A53F 		cmp	r2, #-1515870811
 2202 0028 0BD1     		bne	.L216
2244:..\FreeRTOS/tasks.c **** 
 2203              		.loc 1 2244 0 is_stmt 0 discriminator 2
 2204 002a 5A68     		ldr	r2, [r3, #4]
 2205 002c B2F1A53F 		cmp	r2, #-1515870811
 2206 0030 07D1     		bne	.L216
2244:..\FreeRTOS/tasks.c **** 
 2207              		.loc 1 2244 0 discriminator 4
 2208 0032 9A68     		ldr	r2, [r3, #8]
 2209 0034 B2F1A53F 		cmp	r2, #-1515870811
 2210 0038 03D1     		bne	.L216
2244:..\FreeRTOS/tasks.c **** 
 2211              		.loc 1 2244 0 discriminator 6
 2212 003a DB68     		ldr	r3, [r3, #12]
 2213              	.LVL229:
 2214 003c B3F1A53F 		cmp	r3, #-1515870811
 2215 0040 07D0     		beq	.L217
 2216              	.L216:
2244:..\FreeRTOS/tasks.c **** 
 2217              		.loc 1 2244 0 discriminator 7
 2218 0042 174B     		ldr	r3, .L220
 2219 0044 D3F8D400 		ldr	r0, [r3, #212]
 2220 0048 D3F8D410 		ldr	r1, [r3, #212]
 2221 004c 3431     		adds	r1, r1, #52
 2222 004e FFF7FEFF 		bl	vApplicationStackOverflowHook
 2223              	.LVL230:
 2224              	.L217:
 2225              	.LBE16:
 2226              	.LBB17:
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2227              		.loc 1 2248 0 is_stmt 1
 2228 0052 1348     		ldr	r0, .L220
 2229 0054 D0F8E830 		ldr	r3, [r0, #232]
 2230              	.LVL231:
 2231              	.LBB18:
 2232              	.LBB19:
 2233              		.file 2 "..\\FreeRTOS\\portmacro.h"
   1:..\FreeRTOS/portmacro.h **** /*
   2:..\FreeRTOS/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:..\FreeRTOS/portmacro.h ****     All rights reserved
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 105


   4:..\FreeRTOS/portmacro.h **** 
   5:..\FreeRTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS/portmacro.h **** 
   7:..\FreeRTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS/portmacro.h **** 
   9:..\FreeRTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS/portmacro.h **** 
  13:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  14:..\FreeRTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  19:..\FreeRTOS/portmacro.h **** 
  20:..\FreeRTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS/portmacro.h **** 
  25:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  26:..\FreeRTOS/portmacro.h ****      *                                                                       *
  27:..\FreeRTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS/portmacro.h ****      *                                                                       *
  32:..\FreeRTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\FreeRTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS/portmacro.h ****      *                                                                       *
  37:..\FreeRTOS/portmacro.h ****     ***************************************************************************
  38:..\FreeRTOS/portmacro.h **** 
  39:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS/portmacro.h ****     defined configASSERT()?
  42:..\FreeRTOS/portmacro.h **** 
  43:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS/portmacro.h ****     participating in the support forum.
  46:..\FreeRTOS/portmacro.h **** 
  47:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS/portmacro.h **** 
  52:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS/portmacro.h **** 
  56:..\FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS/portmacro.h **** 
  59:..\FreeRTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 106


  61:..\FreeRTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\FreeRTOS/portmacro.h **** 
  63:..\FreeRTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS/portmacro.h **** 
  67:..\FreeRTOS/portmacro.h ****     1 tab == 4 spaces!
  68:..\FreeRTOS/portmacro.h **** */
  69:..\FreeRTOS/portmacro.h **** 
  70:..\FreeRTOS/portmacro.h **** 
  71:..\FreeRTOS/portmacro.h **** #ifndef PORTMACRO_H
  72:..\FreeRTOS/portmacro.h **** #define PORTMACRO_H
  73:..\FreeRTOS/portmacro.h **** 
  74:..\FreeRTOS/portmacro.h **** #ifdef __cplusplus
  75:..\FreeRTOS/portmacro.h **** extern "C" {
  76:..\FreeRTOS/portmacro.h **** #endif
  77:..\FreeRTOS/portmacro.h **** 
  78:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------
  79:..\FreeRTOS/portmacro.h ****  * Port specific definitions.
  80:..\FreeRTOS/portmacro.h ****  *
  81:..\FreeRTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:..\FreeRTOS/portmacro.h ****  * given hardware and compiler.
  83:..\FreeRTOS/portmacro.h ****  *
  84:..\FreeRTOS/portmacro.h ****  * These settings should not be altered.
  85:..\FreeRTOS/portmacro.h ****  *-----------------------------------------------------------
  86:..\FreeRTOS/portmacro.h ****  */
  87:..\FreeRTOS/portmacro.h **** 
  88:..\FreeRTOS/portmacro.h **** /* Type definitions. */
  89:..\FreeRTOS/portmacro.h **** #define portCHAR		char
  90:..\FreeRTOS/portmacro.h **** #define portFLOAT		float
  91:..\FreeRTOS/portmacro.h **** #define portDOUBLE		double
  92:..\FreeRTOS/portmacro.h **** #define portLONG		long
  93:..\FreeRTOS/portmacro.h **** #define portSHORT		short
  94:..\FreeRTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:..\FreeRTOS/portmacro.h **** #define portBASE_TYPE	long
  96:..\FreeRTOS/portmacro.h **** 
  97:..\FreeRTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:..\FreeRTOS/portmacro.h **** typedef long BaseType_t;
  99:..\FreeRTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 100:..\FreeRTOS/portmacro.h **** 
 101:..\FreeRTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:..\FreeRTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 103:..\FreeRTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:..\FreeRTOS/portmacro.h **** #else
 105:..\FreeRTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 106:..\FreeRTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:..\FreeRTOS/portmacro.h **** 
 108:..\FreeRTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:..\FreeRTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 110:..\FreeRTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:..\FreeRTOS/portmacro.h **** #endif
 112:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\FreeRTOS/portmacro.h **** 
 114:..\FreeRTOS/portmacro.h **** /* Architecture specifics. */
 115:..\FreeRTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:..\FreeRTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:..\FreeRTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 107


 118:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 119:..\FreeRTOS/portmacro.h **** 
 120:..\FreeRTOS/portmacro.h **** 
 121:..\FreeRTOS/portmacro.h **** /* Scheduler utilities. */
 122:..\FreeRTOS/portmacro.h **** extern void vPortYield( void );
 123:..\FreeRTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 124:..\FreeRTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 125:..\FreeRTOS/portmacro.h **** #define portYIELD()					vPortYield()
 126:..\FreeRTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 127:..\FreeRTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 128:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 129:..\FreeRTOS/portmacro.h **** 
 130:..\FreeRTOS/portmacro.h **** /* Critical section management. */
 131:..\FreeRTOS/portmacro.h **** extern void vPortEnterCritical( void );
 132:..\FreeRTOS/portmacro.h **** extern void vPortExitCritical( void );
 133:..\FreeRTOS/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 134:..\FreeRTOS/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 135:..\FreeRTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 136:..\FreeRTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 137:..\FreeRTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 138:..\FreeRTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 139:..\FreeRTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 140:..\FreeRTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 141:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 142:..\FreeRTOS/portmacro.h **** 
 143:..\FreeRTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 144:..\FreeRTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 145:..\FreeRTOS/portmacro.h **** (which build with all the ports) will build. */
 146:..\FreeRTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 147:..\FreeRTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 148:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 149:..\FreeRTOS/portmacro.h **** 
 150:..\FreeRTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 151:..\FreeRTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 152:..\FreeRTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 153:..\FreeRTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 154:..\FreeRTOS/portmacro.h **** #endif
 155:..\FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 156:..\FreeRTOS/portmacro.h **** 
 157:..\FreeRTOS/portmacro.h **** /* Architecture specific optimisations. */
 158:..\FreeRTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 159:..\FreeRTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 160:..\FreeRTOS/portmacro.h **** #endif
 161:..\FreeRTOS/portmacro.h **** 
 162:..\FreeRTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 163:..\FreeRTOS/portmacro.h **** 
 164:..\FreeRTOS/portmacro.h **** 	/* Generic helper function. */
 165:..\FreeRTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 166:..\FreeRTOS/portmacro.h **** 	{
 167:..\FreeRTOS/portmacro.h **** 	uint8_t ucReturn;
 168:..\FreeRTOS/portmacro.h **** 
 169:..\FreeRTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2234              		.loc 2 169 0
 2235              	@ 169 "..\FreeRTOS\portmacro.h" 1
 2236 0058 B3FA83F3 		clz r3, r3
 2237              	@ 0 "" 2
 2238              	.LVL232:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 108


 2239              		.thumb
 2240 005c DBB2     		uxtb	r3, r3
 2241              	.LVL233:
 2242              	.LBE19:
 2243              	.LBE18:
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2244              		.loc 1 2248 0
 2245 005e C3F11F03 		rsb	r3, r3, #31
 2246              	.LVL234:
 2247              	.LBB20:
 2248 0062 9A00     		lsls	r2, r3, #2
 2249 0064 D118     		adds	r1, r2, r3
 2250 0066 8900     		lsls	r1, r1, #2
 2251 0068 0144     		add	r1, r1, r0
 2252 006a 4C6B     		ldr	r4, [r1, #52]
 2253 006c 6468     		ldr	r4, [r4, #4]
 2254 006e 4C63     		str	r4, [r1, #52]
 2255 0070 1A44     		add	r2, r2, r3
 2256 0072 9200     		lsls	r2, r2, #2
 2257 0074 0244     		add	r2, r2, r0
 2258 0076 3832     		adds	r2, r2, #56
 2259 0078 9442     		cmp	r4, r2
 2260 007a 06D1     		bne	.L218
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2261              		.loc 1 2248 0 is_stmt 0 discriminator 1
 2262 007c 6068     		ldr	r0, [r4, #4]
 2263 007e 03EB8301 		add	r1, r3, r3, lsl #2
 2264 0082 8900     		lsls	r1, r1, #2
 2265 0084 074A     		ldr	r2, .L220+4
 2266 0086 0A44     		add	r2, r2, r1
 2267 0088 5060     		str	r0, [r2, #4]
 2268              	.L218:
2248:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2269              		.loc 1 2248 0 discriminator 3
 2270 008a 054A     		ldr	r2, .L220
 2271 008c 03EB8303 		add	r3, r3, r3, lsl #2
 2272              	.LVL235:
 2273 0090 9B00     		lsls	r3, r3, #2
 2274 0092 1344     		add	r3, r3, r2
 2275 0094 5B6B     		ldr	r3, [r3, #52]
 2276 0096 DB68     		ldr	r3, [r3, #12]
 2277 0098 C2F8D430 		str	r3, [r2, #212]
 2278 009c 10BD     		pop	{r4, pc}
 2279              	.L221:
 2280 009e 00BF     		.align	2
 2281              	.L220:
 2282 00a0 00000000 		.word	.LANCHOR0
 2283 00a4 30000000 		.word	.LANCHOR0+48
 2284              	.LBE20:
 2285              	.LBE17:
 2286              		.cfi_endproc
 2287              	.LFE84:
 2288              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2289              		.section	.text.vTaskSuspend,"ax",%progbits
 2290              		.align	2
 2291              		.global	vTaskSuspend
 2292              		.thumb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 109


 2293              		.thumb_func
 2294              		.type	vTaskSuspend, %function
 2295              	vTaskSuspend:
 2296              	.LFB72:
1285:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2297              		.loc 1 1285 0 is_stmt 1
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 0
 2300              		@ frame_needed = 0, uses_anonymous_args = 0
 2301              	.LVL236:
 2302 0000 70B5     		push	{r4, r5, r6, lr}
 2303              		.cfi_def_cfa_offset 16
 2304              		.cfi_offset 4, -16
 2305              		.cfi_offset 5, -12
 2306              		.cfi_offset 6, -8
 2307              		.cfi_offset 14, -4
 2308 0002 0446     		mov	r4, r0
1288:..\FreeRTOS/tasks.c **** 		{
 2309              		.loc 1 1288 0
 2310 0004 FFF7FEFF 		bl	vPortEnterCritical
 2311              	.LVL237:
1292:..\FreeRTOS/tasks.c **** 
 2312              		.loc 1 1292 0
 2313 0008 14B9     		cbnz	r4, .L223
1292:..\FreeRTOS/tasks.c **** 
 2314              		.loc 1 1292 0 is_stmt 0 discriminator 1
 2315 000a 244B     		ldr	r3, .L231
 2316 000c D3F8D440 		ldr	r4, [r3, #212]
 2317              	.LVL238:
 2318              	.L223:
1298:..\FreeRTOS/tasks.c **** 			{
 2319              		.loc 1 1298 0 is_stmt 1 discriminator 4
 2320 0010 261D     		adds	r6, r4, #4
 2321 0012 3046     		mov	r0, r6
 2322 0014 FFF7FEFF 		bl	uxListRemove
 2323              	.LVL239:
 2324 0018 78B9     		cbnz	r0, .L224
1300:..\FreeRTOS/tasks.c **** 			}
 2325              		.loc 1 1300 0
 2326 001a E26A     		ldr	r2, [r4, #44]
 2327 001c 02EB8203 		add	r3, r2, r2, lsl #2
 2328 0020 9B00     		lsls	r3, r3, #2
 2329 0022 1E49     		ldr	r1, .L231
 2330 0024 0B44     		add	r3, r3, r1
 2331 0026 1B6B     		ldr	r3, [r3, #48]
 2332 0028 3BB9     		cbnz	r3, .L224
1300:..\FreeRTOS/tasks.c **** 			}
 2333              		.loc 1 1300 0 is_stmt 0 discriminator 1
 2334 002a 0123     		movs	r3, #1
 2335 002c 9340     		lsls	r3, r3, r2
 2336 002e D1F8E820 		ldr	r2, [r1, #232]
 2337 0032 22EA0303 		bic	r3, r2, r3
 2338 0036 C1F8E830 		str	r3, [r1, #232]
 2339              	.L224:
1308:..\FreeRTOS/tasks.c **** 			{
 2340              		.loc 1 1308 0 is_stmt 1
 2341 003a A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 110


 2342 003c 1BB1     		cbz	r3, .L225
1310:..\FreeRTOS/tasks.c **** 			}
 2343              		.loc 1 1310 0
 2344 003e 04F11800 		add	r0, r4, #24
 2345 0042 FFF7FEFF 		bl	uxListRemove
 2346              	.LVL240:
 2347              	.L225:
1317:..\FreeRTOS/tasks.c **** 		}
 2348              		.loc 1 1317 0
 2349 0046 154D     		ldr	r5, .L231
 2350 0048 2846     		mov	r0, r5
 2351 004a 3146     		mov	r1, r6
 2352 004c FFF7FEFF 		bl	vListInsertEnd
 2353              	.LVL241:
1319:..\FreeRTOS/tasks.c **** 
 2354              		.loc 1 1319 0
 2355 0050 FFF7FEFF 		bl	vPortExitCritical
 2356              	.LVL242:
1321:..\FreeRTOS/tasks.c **** 		{
 2357              		.loc 1 1321 0
 2358 0054 D5F8D430 		ldr	r3, [r5, #212]
 2359 0058 9C42     		cmp	r4, r3
 2360 005a 13D1     		bne	.L226
1323:..\FreeRTOS/tasks.c **** 			{
 2361              		.loc 1 1323 0
 2362 005c D5F8E030 		ldr	r3, [r5, #224]
 2363 0060 13B1     		cbz	r3, .L227
1327:..\FreeRTOS/tasks.c **** 			}
 2364              		.loc 1 1327 0
 2365 0062 FFF7FEFF 		bl	vPortYield
 2366              	.LVL243:
 2367 0066 70BD     		pop	{r4, r5, r6, pc}
 2368              	.LVL244:
 2369              	.L227:
1334:..\FreeRTOS/tasks.c **** 				{
 2370              		.loc 1 1334 0
 2371 0068 0C4B     		ldr	r3, .L231
 2372 006a 1A68     		ldr	r2, [r3]
 2373 006c D3F8DC30 		ldr	r3, [r3, #220]
 2374 0070 9A42     		cmp	r2, r3
 2375 0072 04D1     		bne	.L229
1340:..\FreeRTOS/tasks.c **** 				}
 2376              		.loc 1 1340 0
 2377 0074 0022     		movs	r2, #0
 2378 0076 094B     		ldr	r3, .L231
 2379 0078 C3F8D420 		str	r2, [r3, #212]
 2380 007c 70BD     		pop	{r4, r5, r6, pc}
 2381              	.LVL245:
 2382              	.L229:
1344:..\FreeRTOS/tasks.c **** 				}
 2383              		.loc 1 1344 0
 2384 007e FFF7FEFF 		bl	vTaskSwitchContext
 2385              	.LVL246:
 2386 0082 70BD     		pop	{r4, r5, r6, pc}
 2387              	.LVL247:
 2388              	.L226:
1350:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 111


 2389              		.loc 1 1350 0
 2390 0084 054B     		ldr	r3, .L231
 2391 0086 D3F8E030 		ldr	r3, [r3, #224]
 2392 008a 2BB1     		cbz	r3, .L222
1355:..\FreeRTOS/tasks.c **** 				{
 2393              		.loc 1 1355 0
 2394 008c FFF7FEFF 		bl	vPortEnterCritical
 2395              	.LVL248:
1357:..\FreeRTOS/tasks.c **** 				}
 2396              		.loc 1 1357 0
 2397 0090 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2398              	.LVL249:
1359:..\FreeRTOS/tasks.c **** 			}
 2399              		.loc 1 1359 0
 2400 0094 FFF7FEFF 		bl	vPortExitCritical
 2401              	.LVL250:
 2402              	.L222:
 2403 0098 70BD     		pop	{r4, r5, r6, pc}
 2404              	.LVL251:
 2405              	.L232:
 2406 009a 00BF     		.align	2
 2407              	.L231:
 2408 009c 00000000 		.word	.LANCHOR0
 2409              		.cfi_endproc
 2410              	.LFE72:
 2411              		.size	vTaskSuspend, .-vTaskSuspend
 2412              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2413              		.align	2
 2414              		.global	vTaskPlaceOnEventList
 2415              		.thumb
 2416              		.thumb_func
 2417              		.type	vTaskPlaceOnEventList, %function
 2418              	vTaskPlaceOnEventList:
 2419              	.LFB85:
2263:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
 2420              		.loc 1 2263 0
 2421              		.cfi_startproc
 2422              		@ args = 0, pretend = 0, frame = 0
 2423              		@ frame_needed = 0, uses_anonymous_args = 0
 2424              	.LVL252:
 2425 0000 38B5     		push	{r3, r4, r5, lr}
 2426              		.cfi_def_cfa_offset 16
 2427              		.cfi_offset 3, -16
 2428              		.cfi_offset 4, -12
 2429              		.cfi_offset 5, -8
 2430              		.cfi_offset 14, -4
 2431 0002 0D46     		mov	r5, r1
2275:..\FreeRTOS/tasks.c **** 
 2432              		.loc 1 2275 0
 2433 0004 134C     		ldr	r4, .L238
 2434 0006 D4F8D410 		ldr	r1, [r4, #212]
 2435              	.LVL253:
 2436 000a 1831     		adds	r1, r1, #24
 2437 000c FFF7FEFF 		bl	vListInsert
 2438              	.LVL254:
2280:..\FreeRTOS/tasks.c **** 	{
 2439              		.loc 1 2280 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 112


 2440 0010 D4F8D400 		ldr	r0, [r4, #212]
 2441 0014 0430     		adds	r0, r0, #4
 2442 0016 FFF7FEFF 		bl	uxListRemove
 2443              	.LVL255:
 2444 001a 50B9     		cbnz	r0, .L234
2284:..\FreeRTOS/tasks.c **** 	}
 2445              		.loc 1 2284 0
 2446 001c D4F8D420 		ldr	r2, [r4, #212]
 2447 0020 D16A     		ldr	r1, [r2, #44]
 2448 0022 0122     		movs	r2, #1
 2449 0024 8A40     		lsls	r2, r2, r1
 2450 0026 D4F8E810 		ldr	r1, [r4, #232]
 2451 002a 21EA0202 		bic	r2, r1, r2
 2452 002e C4F8E820 		str	r2, [r4, #232]
 2453              	.L234:
2293:..\FreeRTOS/tasks.c **** 		{
 2454              		.loc 1 2293 0
 2455 0032 B5F1FF3F 		cmp	r5, #-1
 2456 0036 06D1     		bne	.L235
2298:..\FreeRTOS/tasks.c **** 		}
 2457              		.loc 1 2298 0
 2458 0038 0648     		ldr	r0, .L238
 2459 003a D0F8D410 		ldr	r1, [r0, #212]
 2460 003e 0431     		adds	r1, r1, #4
 2461 0040 FFF7FEFF 		bl	vListInsertEnd
 2462              	.LVL256:
 2463 0044 38BD     		pop	{r3, r4, r5, pc}
 2464              	.LVL257:
 2465              	.L235:
2305:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2466              		.loc 1 2305 0
 2467 0046 034B     		ldr	r3, .L238
 2468 0048 D3F8D800 		ldr	r0, [r3, #216]
 2469              	.LVL258:
2306:..\FreeRTOS/tasks.c **** 		}
 2470              		.loc 1 2306 0
 2471 004c 2844     		add	r0, r0, r5
 2472              	.LVL259:
 2473 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2474              	.LVL260:
 2475 0052 38BD     		pop	{r3, r4, r5, pc}
 2476              	.LVL261:
 2477              	.L239:
 2478              		.align	2
 2479              	.L238:
 2480 0054 00000000 		.word	.LANCHOR0
 2481              		.cfi_endproc
 2482              	.LFE85:
 2483              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2484              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2485              		.align	2
 2486              		.global	vTaskPlaceOnUnorderedEventList
 2487              		.thumb
 2488              		.thumb_func
 2489              		.type	vTaskPlaceOnUnorderedEventList, %function
 2490              	vTaskPlaceOnUnorderedEventList:
 2491              	.LFB86:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 113


2322:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
 2492              		.loc 1 2322 0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 0
 2495              		@ frame_needed = 0, uses_anonymous_args = 0
 2496              	.LVL262:
 2497 0000 38B5     		push	{r3, r4, r5, lr}
 2498              		.cfi_def_cfa_offset 16
 2499              		.cfi_offset 3, -16
 2500              		.cfi_offset 4, -12
 2501              		.cfi_offset 5, -8
 2502              		.cfi_offset 14, -4
 2503 0002 1546     		mov	r5, r2
2334:..\FreeRTOS/tasks.c **** 
 2504              		.loc 1 2334 0
 2505 0004 164C     		ldr	r4, .L245
 2506 0006 D4F8D430 		ldr	r3, [r4, #212]
 2507 000a 41F00041 		orr	r1, r1, #-2147483648
 2508              	.LVL263:
 2509 000e 9961     		str	r1, [r3, #24]
2341:..\FreeRTOS/tasks.c **** 
 2510              		.loc 1 2341 0
 2511 0010 D4F8D410 		ldr	r1, [r4, #212]
 2512 0014 1831     		adds	r1, r1, #24
 2513 0016 FFF7FEFF 		bl	vListInsertEnd
 2514              	.LVL264:
2346:..\FreeRTOS/tasks.c **** 	{
 2515              		.loc 1 2346 0
 2516 001a D4F8D400 		ldr	r0, [r4, #212]
 2517 001e 0430     		adds	r0, r0, #4
 2518 0020 FFF7FEFF 		bl	uxListRemove
 2519              	.LVL265:
 2520 0024 50B9     		cbnz	r0, .L241
2350:..\FreeRTOS/tasks.c **** 	}
 2521              		.loc 1 2350 0
 2522 0026 D4F8D420 		ldr	r2, [r4, #212]
 2523 002a D16A     		ldr	r1, [r2, #44]
 2524 002c 0122     		movs	r2, #1
 2525 002e 8A40     		lsls	r2, r2, r1
 2526 0030 D4F8E810 		ldr	r1, [r4, #232]
 2527 0034 21EA0202 		bic	r2, r1, r2
 2528 0038 C4F8E820 		str	r2, [r4, #232]
 2529              	.L241:
2359:..\FreeRTOS/tasks.c **** 		{
 2530              		.loc 1 2359 0
 2531 003c B5F1FF3F 		cmp	r5, #-1
 2532 0040 06D1     		bne	.L242
2364:..\FreeRTOS/tasks.c **** 		}
 2533              		.loc 1 2364 0
 2534 0042 0748     		ldr	r0, .L245
 2535 0044 D0F8D410 		ldr	r1, [r0, #212]
 2536 0048 0431     		adds	r1, r1, #4
 2537 004a FFF7FEFF 		bl	vListInsertEnd
 2538              	.LVL266:
 2539 004e 38BD     		pop	{r3, r4, r5, pc}
 2540              	.LVL267:
 2541              	.L242:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 114


2371:..\FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2542              		.loc 1 2371 0
 2543 0050 034B     		ldr	r3, .L245
 2544 0052 D3F8D800 		ldr	r0, [r3, #216]
 2545              	.LVL268:
2372:..\FreeRTOS/tasks.c **** 		}
 2546              		.loc 1 2372 0
 2547 0056 2844     		add	r0, r0, r5
 2548              	.LVL269:
 2549 0058 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2550              	.LVL270:
 2551 005c 38BD     		pop	{r3, r4, r5, pc}
 2552              	.LVL271:
 2553              	.L246:
 2554 005e 00BF     		.align	2
 2555              	.L245:
 2556 0060 00000000 		.word	.LANCHOR0
 2557              		.cfi_endproc
 2558              	.LFE86:
 2559              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2560              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2561              		.align	2
 2562              		.global	xTaskRemoveFromEventList
 2563              		.thumb
 2564              		.thumb_func
 2565              		.type	xTaskRemoveFromEventList, %function
 2566              	xTaskRemoveFromEventList:
 2567              	.LFB87:
2466:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2568              		.loc 1 2466 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 0
 2571              		@ frame_needed = 0, uses_anonymous_args = 0
 2572              	.LVL272:
 2573 0000 38B5     		push	{r3, r4, r5, lr}
 2574              		.cfi_def_cfa_offset 16
 2575              		.cfi_offset 3, -16
 2576              		.cfi_offset 4, -12
 2577              		.cfi_offset 5, -8
 2578              		.cfi_offset 14, -4
2483:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2579              		.loc 1 2483 0
 2580 0002 C368     		ldr	r3, [r0, #12]
 2581 0004 DC68     		ldr	r4, [r3, #12]
 2582              	.LVL273:
2485:..\FreeRTOS/tasks.c **** 
 2583              		.loc 1 2485 0
 2584 0006 04F11805 		add	r5, r4, #24
 2585 000a 2846     		mov	r0, r5
 2586              	.LVL274:
 2587 000c FFF7FEFF 		bl	uxListRemove
 2588              	.LVL275:
2487:..\FreeRTOS/tasks.c **** 	{
 2589              		.loc 1 2487 0
 2590 0010 154B     		ldr	r3, .L253
 2591 0012 D3F8F030 		ldr	r3, [r3, #240]
 2592 0016 ABB9     		cbnz	r3, .L248
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 115


2489:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2593              		.loc 1 2489 0
 2594 0018 251D     		adds	r5, r4, #4
 2595 001a 2846     		mov	r0, r5
 2596 001c FFF7FEFF 		bl	uxListRemove
 2597              	.LVL276:
2490:..\FreeRTOS/tasks.c **** 	}
 2598              		.loc 1 2490 0
 2599 0020 E36A     		ldr	r3, [r4, #44]
 2600 0022 0122     		movs	r2, #1
 2601 0024 9A40     		lsls	r2, r2, r3
 2602 0026 1048     		ldr	r0, .L253
 2603 0028 D0F8E810 		ldr	r1, [r0, #232]
 2604 002c 0A43     		orrs	r2, r2, r1
 2605 002e C0F8E820 		str	r2, [r0, #232]
 2606 0032 3030     		adds	r0, r0, #48
 2607 0034 03EB8303 		add	r3, r3, r3, lsl #2
 2608 0038 9B00     		lsls	r3, r3, #2
 2609 003a 1844     		add	r0, r0, r3
 2610 003c 2946     		mov	r1, r5
 2611 003e FFF7FEFF 		bl	vListInsertEnd
 2612              	.LVL277:
 2613 0042 03E0     		b	.L249
 2614              	.L248:
2496:..\FreeRTOS/tasks.c **** 	}
 2615              		.loc 1 2496 0
 2616 0044 0948     		ldr	r0, .L253+4
 2617 0046 2946     		mov	r1, r5
 2618 0048 FFF7FEFF 		bl	vListInsertEnd
 2619              	.LVL278:
 2620              	.L249:
2499:..\FreeRTOS/tasks.c **** 	{
 2621              		.loc 1 2499 0
 2622 004c E26A     		ldr	r2, [r4, #44]
 2623 004e 064B     		ldr	r3, .L253
 2624 0050 D3F8D430 		ldr	r3, [r3, #212]
 2625 0054 DB6A     		ldr	r3, [r3, #44]
 2626 0056 9A42     		cmp	r2, r3
 2627 0058 04D9     		bls	.L251
 2628              	.LVL279:
2508:..\FreeRTOS/tasks.c **** 	}
 2629              		.loc 1 2508 0
 2630 005a 0120     		movs	r0, #1
 2631 005c 024B     		ldr	r3, .L253
 2632 005e C3F8FC00 		str	r0, [r3, #252]
 2633 0062 38BD     		pop	{r3, r4, r5, pc}
 2634              	.LVL280:
 2635              	.L251:
2512:..\FreeRTOS/tasks.c **** 	}
 2636              		.loc 1 2512 0
 2637 0064 0020     		movs	r0, #0
 2638              	.LVL281:
2530:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2639              		.loc 1 2530 0
 2640 0066 38BD     		pop	{r3, r4, r5, pc}
 2641              	.LVL282:
 2642              	.L254:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 116


 2643              		.align	2
 2644              	.L253:
 2645 0068 00000000 		.word	.LANCHOR0
 2646 006c 14000000 		.word	.LANCHOR0+20
 2647              		.cfi_endproc
 2648              	.LFE87:
 2649              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2650              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2651              		.align	2
 2652              		.global	xTaskRemoveFromUnorderedEventList
 2653              		.thumb
 2654              		.thumb_func
 2655              		.type	xTaskRemoveFromUnorderedEventList, %function
 2656              	xTaskRemoveFromUnorderedEventList:
 2657              	.LFB88:
2534:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2658              		.loc 1 2534 0
 2659              		.cfi_startproc
 2660              		@ args = 0, pretend = 0, frame = 0
 2661              		@ frame_needed = 0, uses_anonymous_args = 0
 2662              	.LVL283:
 2663 0000 70B5     		push	{r4, r5, r6, lr}
 2664              		.cfi_def_cfa_offset 16
 2665              		.cfi_offset 4, -16
 2666              		.cfi_offset 5, -12
 2667              		.cfi_offset 6, -8
 2668              		.cfi_offset 14, -4
2543:..\FreeRTOS/tasks.c **** 
 2669              		.loc 1 2543 0
 2670 0002 41F00041 		orr	r1, r1, #-2147483648
 2671              	.LVL284:
 2672 0006 0160     		str	r1, [r0]
2547:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2673              		.loc 1 2547 0
 2674 0008 C568     		ldr	r5, [r0, #12]
 2675              	.LVL285:
2549:..\FreeRTOS/tasks.c **** 
 2676              		.loc 1 2549 0
 2677 000a FFF7FEFF 		bl	uxListRemove
 2678              	.LVL286:
2554:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2679              		.loc 1 2554 0
 2680 000e 2E1D     		adds	r6, r5, #4
 2681 0010 3046     		mov	r0, r6
 2682 0012 FFF7FEFF 		bl	uxListRemove
 2683              	.LVL287:
2555:..\FreeRTOS/tasks.c **** 
 2684              		.loc 1 2555 0
 2685 0016 E86A     		ldr	r0, [r5, #44]
 2686 0018 0123     		movs	r3, #1
 2687 001a 8340     		lsls	r3, r3, r0
 2688 001c 0D4C     		ldr	r4, .L259
 2689 001e D4F8E820 		ldr	r2, [r4, #232]
 2690 0022 1343     		orrs	r3, r3, r2
 2691 0024 C4F8E830 		str	r3, [r4, #232]
 2692 0028 04F13003 		add	r3, r4, #48
 2693 002c 00EB8000 		add	r0, r0, r0, lsl #2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 117


 2694 0030 8000     		lsls	r0, r0, #2
 2695 0032 1844     		add	r0, r0, r3
 2696 0034 3146     		mov	r1, r6
 2697 0036 FFF7FEFF 		bl	vListInsertEnd
 2698              	.LVL288:
2557:..\FreeRTOS/tasks.c **** 	{
 2699              		.loc 1 2557 0
 2700 003a EA6A     		ldr	r2, [r5, #44]
 2701 003c D4F8D430 		ldr	r3, [r4, #212]
 2702 0040 DB6A     		ldr	r3, [r3, #44]
 2703 0042 9A42     		cmp	r2, r3
 2704 0044 03D9     		bls	.L257
 2705              	.LVL289:
2567:..\FreeRTOS/tasks.c **** 	}
 2706              		.loc 1 2567 0
 2707 0046 0120     		movs	r0, #1
 2708 0048 C4F8FC00 		str	r0, [r4, #252]
 2709 004c 70BD     		pop	{r4, r5, r6, pc}
 2710              	.LVL290:
 2711              	.L257:
2571:..\FreeRTOS/tasks.c **** 	}
 2712              		.loc 1 2571 0
 2713 004e 0020     		movs	r0, #0
 2714              	.LVL291:
2575:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2715              		.loc 1 2575 0
 2716 0050 70BD     		pop	{r4, r5, r6, pc}
 2717              	.LVL292:
 2718              	.L260:
 2719 0052 00BF     		.align	2
 2720              	.L259:
 2721 0054 00000000 		.word	.LANCHOR0
 2722              		.cfi_endproc
 2723              	.LFE88:
 2724              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 2725              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2726              		.align	2
 2727              		.global	vTaskSetTimeOutState
 2728              		.thumb
 2729              		.thumb_func
 2730              		.type	vTaskSetTimeOutState, %function
 2731              	vTaskSetTimeOutState:
 2732              	.LFB89:
2579:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 2733              		.loc 1 2579 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 0
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              		@ link register save eliminated.
 2738              	.LVL293:
2581:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2739              		.loc 1 2581 0
 2740 0000 034B     		ldr	r3, .L262
 2741 0002 D3F8F420 		ldr	r2, [r3, #244]
 2742 0006 0260     		str	r2, [r0]
2582:..\FreeRTOS/tasks.c **** }
 2743              		.loc 1 2582 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 118


 2744 0008 D3F8D830 		ldr	r3, [r3, #216]
 2745 000c 4360     		str	r3, [r0, #4]
 2746 000e 7047     		bx	lr
 2747              	.L263:
 2748              		.align	2
 2749              	.L262:
 2750 0010 00000000 		.word	.LANCHOR0
 2751              		.cfi_endproc
 2752              	.LFE89:
 2753              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2754              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2755              		.align	2
 2756              		.global	xTaskCheckForTimeOut
 2757              		.thumb
 2758              		.thumb_func
 2759              		.type	xTaskCheckForTimeOut, %function
 2760              	xTaskCheckForTimeOut:
 2761              	.LFB90:
2587:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 2762              		.loc 1 2587 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 2766              	.LVL294:
 2767 0000 38B5     		push	{r3, r4, r5, lr}
 2768              		.cfi_def_cfa_offset 16
 2769              		.cfi_offset 3, -16
 2770              		.cfi_offset 4, -12
 2771              		.cfi_offset 5, -8
 2772              		.cfi_offset 14, -4
 2773 0002 0446     		mov	r4, r0
 2774 0004 0D46     		mov	r5, r1
2593:..\FreeRTOS/tasks.c **** 	{
 2775              		.loc 1 2593 0
 2776 0006 FFF7FEFF 		bl	vPortEnterCritical
 2777              	.LVL295:
 2778              	.LBB21:
2596:..\FreeRTOS/tasks.c **** 
 2779              		.loc 1 2596 0
 2780 000a 124B     		ldr	r3, .L271
 2781 000c D3F8D820 		ldr	r2, [r3, #216]
 2782              	.LVL296:
2602:..\FreeRTOS/tasks.c **** 			{
 2783              		.loc 1 2602 0
 2784 0010 2B68     		ldr	r3, [r5]
 2785 0012 B3F1FF3F 		cmp	r3, #-1
 2786 0016 14D0     		beq	.L267
2609:..\FreeRTOS/tasks.c **** 		{
 2787              		.loc 1 2609 0
 2788 0018 2068     		ldr	r0, [r4]
 2789 001a 0E49     		ldr	r1, .L271
 2790 001c D1F8F410 		ldr	r1, [r1, #244]
 2791 0020 8842     		cmp	r0, r1
 2792 0022 02D0     		beq	.L266
2609:..\FreeRTOS/tasks.c **** 		{
 2793              		.loc 1 2609 0 is_stmt 0 discriminator 1
 2794 0024 6168     		ldr	r1, [r4, #4]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 119


 2795 0026 9142     		cmp	r1, r2
 2796 0028 0DD9     		bls	.L268
 2797              	.L266:
2617:..\FreeRTOS/tasks.c **** 		{
 2798              		.loc 1 2617 0 is_stmt 1
 2799 002a 6168     		ldr	r1, [r4, #4]
 2800 002c 501A     		subs	r0, r2, r1
 2801 002e 8342     		cmp	r3, r0
 2802 0030 0BD9     		bls	.L269
2620:..\FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2803              		.loc 1 2620 0
 2804 0032 8A1A     		subs	r2, r1, r2
 2805              	.LVL297:
 2806 0034 1344     		add	r3, r3, r2
 2807 0036 2B60     		str	r3, [r5]
2621:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 2808              		.loc 1 2621 0
 2809 0038 2046     		mov	r0, r4
 2810 003a FFF7FEFF 		bl	vTaskSetTimeOutState
 2811              	.LVL298:
2622:..\FreeRTOS/tasks.c **** 		}
 2812              		.loc 1 2622 0
 2813 003e 0024     		movs	r4, #0
 2814              	.LVL299:
 2815 0040 04E0     		b	.L265
 2816              	.LVL300:
 2817              	.L267:
2604:..\FreeRTOS/tasks.c **** 			}
 2818              		.loc 1 2604 0
 2819 0042 0024     		movs	r4, #0
 2820              	.LVL301:
 2821 0044 02E0     		b	.L265
 2822              	.LVL302:
 2823              	.L268:
2615:..\FreeRTOS/tasks.c **** 		}
 2824              		.loc 1 2615 0
 2825 0046 0124     		movs	r4, #1
 2826              	.LVL303:
 2827 0048 00E0     		b	.L265
 2828              	.LVL304:
 2829              	.L269:
2626:..\FreeRTOS/tasks.c **** 		}
 2830              		.loc 1 2626 0
 2831 004a 0124     		movs	r4, #1
 2832              	.LVL305:
 2833              	.L265:
 2834              	.LBE21:
2629:..\FreeRTOS/tasks.c **** 
 2835              		.loc 1 2629 0
 2836 004c FFF7FEFF 		bl	vPortExitCritical
 2837              	.LVL306:
2632:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2838              		.loc 1 2632 0
 2839 0050 2046     		mov	r0, r4
 2840 0052 38BD     		pop	{r3, r4, r5, pc}
 2841              	.LVL307:
 2842              	.L272:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 120


 2843              		.align	2
 2844              	.L271:
 2845 0054 00000000 		.word	.LANCHOR0
 2846              		.cfi_endproc
 2847              	.LFE90:
 2848              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2849              		.section	.text.vTaskMissedYield,"ax",%progbits
 2850              		.align	2
 2851              		.global	vTaskMissedYield
 2852              		.thumb
 2853              		.thumb_func
 2854              		.type	vTaskMissedYield, %function
 2855              	vTaskMissedYield:
 2856              	.LFB91:
2636:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 2857              		.loc 1 2636 0
 2858              		.cfi_startproc
 2859              		@ args = 0, pretend = 0, frame = 0
 2860              		@ frame_needed = 0, uses_anonymous_args = 0
 2861              		@ link register save eliminated.
2637:..\FreeRTOS/tasks.c **** }
 2862              		.loc 1 2637 0
 2863 0000 0122     		movs	r2, #1
 2864 0002 024B     		ldr	r3, .L274
 2865 0004 C3F8FC20 		str	r2, [r3, #252]
 2866 0008 7047     		bx	lr
 2867              	.L275:
 2868 000a 00BF     		.align	2
 2869              	.L274:
 2870 000c 00000000 		.word	.LANCHOR0
 2871              		.cfi_endproc
 2872              	.LFE91:
 2873              		.size	vTaskMissedYield, .-vTaskMissedYield
 2874              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 2875              		.align	2
 2876              		.global	uxTaskGetStackHighWaterMark
 2877              		.thumb
 2878              		.thumb_func
 2879              		.type	uxTaskGetStackHighWaterMark, %function
 2880              	uxTaskGetStackHighWaterMark:
 2881              	.LFB99:
3284:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2882              		.loc 1 3284 0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 0
 2885              		@ frame_needed = 0, uses_anonymous_args = 0
 2886              	.LVL308:
 2887 0000 08B5     		push	{r3, lr}
 2888              		.cfi_def_cfa_offset 8
 2889              		.cfi_offset 3, -8
 2890              		.cfi_offset 14, -4
3289:..\FreeRTOS/tasks.c **** 
 2891              		.loc 1 3289 0
 2892 0002 0346     		mov	r3, r0
 2893 0004 10B9     		cbnz	r0, .L277
3289:..\FreeRTOS/tasks.c **** 
 2894              		.loc 1 3289 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 121


 2895 0006 034B     		ldr	r3, .L279
 2896 0008 D3F8D430 		ldr	r3, [r3, #212]
 2897              	.LVL309:
 2898              	.L277:
3301:..\FreeRTOS/tasks.c **** 
 2899              		.loc 1 3301 0 is_stmt 1 discriminator 4
 2900 000c 186B     		ldr	r0, [r3, #48]
 2901 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 2902              	.LVL310:
3304:..\FreeRTOS/tasks.c **** 
 2903              		.loc 1 3304 0 discriminator 4
 2904 0012 08BD     		pop	{r3, pc}
 2905              	.L280:
 2906              		.align	2
 2907              	.L279:
 2908 0014 00000000 		.word	.LANCHOR0
 2909              		.cfi_endproc
 2910              	.LFE99:
 2911              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 2912              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 2913              		.align	2
 2914              		.global	xTaskGetCurrentTaskHandle
 2915              		.thumb
 2916              		.thumb_func
 2917              		.type	xTaskGetCurrentTaskHandle, %function
 2918              	xTaskGetCurrentTaskHandle:
 2919              	.LFB102:
3367:..\FreeRTOS/tasks.c **** 	}
3368:..\FreeRTOS/tasks.c **** }
3369:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3370:..\FreeRTOS/tasks.c **** 
3371:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3372:..\FreeRTOS/tasks.c **** 
3373:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3374:..\FreeRTOS/tasks.c **** 	{
 2920              		.loc 1 3374 0
 2921              		.cfi_startproc
 2922              		@ args = 0, pretend = 0, frame = 0
 2923              		@ frame_needed = 0, uses_anonymous_args = 0
 2924              		@ link register save eliminated.
3375:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3376:..\FreeRTOS/tasks.c **** 
3377:..\FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3378:..\FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3379:..\FreeRTOS/tasks.c **** 		individual execution thread. */
3380:..\FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 2925              		.loc 1 3380 0
 2926 0000 014B     		ldr	r3, .L282
 2927 0002 D3F8D400 		ldr	r0, [r3, #212]
 2928              	.LVL311:
3381:..\FreeRTOS/tasks.c **** 
3382:..\FreeRTOS/tasks.c **** 		return xReturn;
3383:..\FreeRTOS/tasks.c **** 	}
 2929              		.loc 1 3383 0
 2930 0006 7047     		bx	lr
 2931              	.L283:
 2932              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 122


 2933              	.L282:
 2934 0008 00000000 		.word	.LANCHOR0
 2935              		.cfi_endproc
 2936              	.LFE102:
 2937              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 2938              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 2939              		.align	2
 2940              		.global	vTaskPriorityInherit
 2941              		.thumb
 2942              		.thumb_func
 2943              		.type	vTaskPriorityInherit, %function
 2944              	vTaskPriorityInherit:
 2945              	.LFB103:
3384:..\FreeRTOS/tasks.c **** 
3385:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3386:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3387:..\FreeRTOS/tasks.c **** 
3388:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3389:..\FreeRTOS/tasks.c **** 
3390:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3391:..\FreeRTOS/tasks.c **** 	{
3392:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3393:..\FreeRTOS/tasks.c **** 
3394:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3395:..\FreeRTOS/tasks.c **** 		{
3396:..\FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3397:..\FreeRTOS/tasks.c **** 		}
3398:..\FreeRTOS/tasks.c **** 		else
3399:..\FreeRTOS/tasks.c **** 		{
3400:..\FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3401:..\FreeRTOS/tasks.c **** 			{
3402:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3403:..\FreeRTOS/tasks.c **** 			}
3404:..\FreeRTOS/tasks.c **** 			else
3405:..\FreeRTOS/tasks.c **** 			{
3406:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3407:..\FreeRTOS/tasks.c **** 			}
3408:..\FreeRTOS/tasks.c **** 		}
3409:..\FreeRTOS/tasks.c **** 
3410:..\FreeRTOS/tasks.c **** 		return xReturn;
3411:..\FreeRTOS/tasks.c **** 	}
3412:..\FreeRTOS/tasks.c **** 
3413:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3414:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3415:..\FreeRTOS/tasks.c **** 
3416:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3417:..\FreeRTOS/tasks.c **** 
3418:..\FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3419:..\FreeRTOS/tasks.c **** 	{
 2946              		.loc 1 3419 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 0
 2949              		@ frame_needed = 0, uses_anonymous_args = 0
 2950              	.LVL312:
3420:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3421:..\FreeRTOS/tasks.c **** 
3422:..\FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 123


3423:..\FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3424:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 2951              		.loc 1 3424 0
 2952 0000 0028     		cmp	r0, #0
 2953 0002 50D0     		beq	.L292
3419:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 2954              		.loc 1 3419 0
 2955 0004 38B5     		push	{r3, r4, r5, lr}
 2956              		.cfi_def_cfa_offset 16
 2957              		.cfi_offset 3, -16
 2958              		.cfi_offset 4, -12
 2959              		.cfi_offset 5, -8
 2960              		.cfi_offset 14, -4
 2961 0006 0346     		mov	r3, r0
3425:..\FreeRTOS/tasks.c **** 		{
3426:..\FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3427:..\FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3428:..\FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3429:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 2962              		.loc 1 3429 0
 2963 0008 C16A     		ldr	r1, [r0, #44]
 2964 000a 274A     		ldr	r2, .L293
 2965 000c D2F8D420 		ldr	r2, [r2, #212]
 2966 0010 D26A     		ldr	r2, [r2, #44]
 2967 0012 9142     		cmp	r1, r2
 2968 0014 46D2     		bcs	.L284
3430:..\FreeRTOS/tasks.c **** 			{
3431:..\FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3432:..\FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3433:..\FreeRTOS/tasks.c **** 				not	being used for anything else. */
3434:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 2969              		.loc 1 3434 0
 2970 0016 8269     		ldr	r2, [r0, #24]
 2971 0018 002A     		cmp	r2, #0
 2972 001a 06DB     		blt	.L286
3435:..\FreeRTOS/tasks.c **** 				{
3436:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 2973              		.loc 1 3436 0
 2974 001c 224A     		ldr	r2, .L293
 2975 001e D2F8D420 		ldr	r2, [r2, #212]
 2976 0022 D26A     		ldr	r2, [r2, #44]
 2977 0024 C2F10502 		rsb	r2, r2, #5
 2978 0028 8261     		str	r2, [r0, #24]
 2979              	.L286:
3437:..\FreeRTOS/tasks.c **** 				}
3438:..\FreeRTOS/tasks.c **** 				else
3439:..\FreeRTOS/tasks.c **** 				{
3440:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3441:..\FreeRTOS/tasks.c **** 				}
3442:..\FreeRTOS/tasks.c **** 
3443:..\FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3444:..\FreeRTOS/tasks.c **** 				to be moved into a new list. */
3445:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 2980              		.loc 1 3445 0
 2981 002a 5969     		ldr	r1, [r3, #20]
 2982 002c DA6A     		ldr	r2, [r3, #44]
 2983 002e 02EB8202 		add	r2, r2, r2, lsl #2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 124


 2984 0032 9200     		lsls	r2, r2, #2
 2985 0034 1D48     		ldr	r0, .L293+4
 2986              	.LVL313:
 2987 0036 0244     		add	r2, r2, r0
 2988 0038 9142     		cmp	r1, r2
 2989 003a 01D1     		bne	.L290
 2990 003c 0122     		movs	r2, #1
 2991 003e 00E0     		b	.L287
 2992              	.L290:
 2993 0040 0022     		movs	r2, #0
 2994              	.L287:
 2995              		.loc 1 3445 0 is_stmt 0 discriminator 4
 2996 0042 52B3     		cbz	r2, .L288
 2997 0044 1D46     		mov	r5, r3
3446:..\FreeRTOS/tasks.c **** 				{
3447:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 2998              		.loc 1 3447 0 is_stmt 1
 2999 0046 1C1D     		adds	r4, r3, #4
 3000 0048 2046     		mov	r0, r4
 3001 004a FFF7FEFF 		bl	uxListRemove
 3002              	.LVL314:
 3003 004e 78B9     		cbnz	r0, .L289
3448:..\FreeRTOS/tasks.c **** 					{
3449:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3004              		.loc 1 3449 0
 3005 0050 EA6A     		ldr	r2, [r5, #44]
 3006 0052 02EB8203 		add	r3, r2, r2, lsl #2
 3007 0056 9B00     		lsls	r3, r3, #2
 3008 0058 1349     		ldr	r1, .L293
 3009 005a 0B44     		add	r3, r3, r1
 3010 005c 1B6B     		ldr	r3, [r3, #48]
 3011 005e 3BB9     		cbnz	r3, .L289
 3012              		.loc 1 3449 0 is_stmt 0 discriminator 1
 3013 0060 0123     		movs	r3, #1
 3014 0062 9340     		lsls	r3, r3, r2
 3015 0064 D1F8E820 		ldr	r2, [r1, #232]
 3016 0068 22EA0303 		bic	r3, r2, r3
 3017 006c C1F8E830 		str	r3, [r1, #232]
 3018              	.L289:
3450:..\FreeRTOS/tasks.c **** 					}
3451:..\FreeRTOS/tasks.c **** 					else
3452:..\FreeRTOS/tasks.c **** 					{
3453:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3454:..\FreeRTOS/tasks.c **** 					}
3455:..\FreeRTOS/tasks.c **** 
3456:..\FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3457:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3019              		.loc 1 3457 0 is_stmt 1
 3020 0070 0D48     		ldr	r0, .L293
 3021 0072 D0F8D430 		ldr	r3, [r0, #212]
 3022 0076 DB6A     		ldr	r3, [r3, #44]
 3023 0078 EB62     		str	r3, [r5, #44]
3458:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3024              		.loc 1 3458 0
 3025 007a 0122     		movs	r2, #1
 3026 007c 9A40     		lsls	r2, r2, r3
 3027 007e D0F8E810 		ldr	r1, [r0, #232]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 125


 3028 0082 0A43     		orrs	r2, r2, r1
 3029 0084 C0F8E820 		str	r2, [r0, #232]
 3030 0088 3030     		adds	r0, r0, #48
 3031 008a 03EB8303 		add	r3, r3, r3, lsl #2
 3032 008e 9B00     		lsls	r3, r3, #2
 3033 0090 1844     		add	r0, r0, r3
 3034 0092 2146     		mov	r1, r4
 3035 0094 FFF7FEFF 		bl	vListInsertEnd
 3036              	.LVL315:
 3037 0098 38BD     		pop	{r3, r4, r5, pc}
 3038              	.LVL316:
 3039              	.L288:
3459:..\FreeRTOS/tasks.c **** 				}
3460:..\FreeRTOS/tasks.c **** 				else
3461:..\FreeRTOS/tasks.c **** 				{
3462:..\FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3463:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3040              		.loc 1 3463 0
 3041 009a 034A     		ldr	r2, .L293
 3042 009c D2F8D420 		ldr	r2, [r2, #212]
 3043 00a0 D26A     		ldr	r2, [r2, #44]
 3044 00a2 DA62     		str	r2, [r3, #44]
 3045              	.L284:
 3046 00a4 38BD     		pop	{r3, r4, r5, pc}
 3047              	.LVL317:
 3048              	.L292:
 3049              		.cfi_def_cfa_offset 0
 3050              		.cfi_restore 3
 3051              		.cfi_restore 4
 3052              		.cfi_restore 5
 3053              		.cfi_restore 14
 3054 00a6 7047     		bx	lr
 3055              	.L294:
 3056              		.align	2
 3057              	.L293:
 3058 00a8 00000000 		.word	.LANCHOR0
 3059 00ac 30000000 		.word	.LANCHOR0+48
 3060              		.cfi_endproc
 3061              	.LFE103:
 3062              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 3063              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3064              		.align	2
 3065              		.global	xTaskPriorityDisinherit
 3066              		.thumb
 3067              		.thumb_func
 3068              		.type	xTaskPriorityDisinherit, %function
 3069              	xTaskPriorityDisinherit:
 3070              	.LFB104:
3464:..\FreeRTOS/tasks.c **** 				}
3465:..\FreeRTOS/tasks.c **** 
3466:..\FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3467:..\FreeRTOS/tasks.c **** 			}
3468:..\FreeRTOS/tasks.c **** 			else
3469:..\FreeRTOS/tasks.c **** 			{
3470:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3471:..\FreeRTOS/tasks.c **** 			}
3472:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 126


3473:..\FreeRTOS/tasks.c **** 		else
3474:..\FreeRTOS/tasks.c **** 		{
3475:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3476:..\FreeRTOS/tasks.c **** 		}
3477:..\FreeRTOS/tasks.c **** 	}
3478:..\FreeRTOS/tasks.c **** 
3479:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3480:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3481:..\FreeRTOS/tasks.c **** 
3482:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3483:..\FreeRTOS/tasks.c **** 
3484:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3485:..\FreeRTOS/tasks.c **** 	{
 3071              		.loc 1 3485 0
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 0
 3074              		@ frame_needed = 0, uses_anonymous_args = 0
 3075              	.LVL318:
3486:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3487:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3488:..\FreeRTOS/tasks.c **** 
3489:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 3076              		.loc 1 3489 0
 3077 0000 0028     		cmp	r0, #0
 3078 0002 37D0     		beq	.L298
3485:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3079              		.loc 1 3485 0
 3080 0004 38B5     		push	{r3, r4, r5, lr}
 3081              		.cfi_def_cfa_offset 16
 3082              		.cfi_offset 3, -16
 3083              		.cfi_offset 4, -12
 3084              		.cfi_offset 5, -8
 3085              		.cfi_offset 14, -4
 3086 0006 0346     		mov	r3, r0
3490:..\FreeRTOS/tasks.c **** 		{
3491:..\FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3492:..\FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3493:..\FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3494:..\FreeRTOS/tasks.c **** 			be the running state task. */
3495:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3496:..\FreeRTOS/tasks.c **** 
3497:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3498:..\FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3087              		.loc 1 3498 0
 3088 0008 426C     		ldr	r2, [r0, #68]
 3089 000a 013A     		subs	r2, r2, #1
 3090 000c 4264     		str	r2, [r0, #68]
3499:..\FreeRTOS/tasks.c **** 
3500:..\FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3501:..\FreeRTOS/tasks.c **** 			task? */
3502:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3091              		.loc 1 3502 0
 3092 000e C06A     		ldr	r0, [r0, #44]
 3093              	.LVL319:
 3094 0010 196C     		ldr	r1, [r3, #64]
 3095 0012 8842     		cmp	r0, r1
 3096 0014 30D0     		beq	.L299
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 127


3503:..\FreeRTOS/tasks.c **** 			{
3504:..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3505:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 3097              		.loc 1 3505 0
 3098 0016 8ABB     		cbnz	r2, .L300
 3099 0018 1C46     		mov	r4, r3
3506:..\FreeRTOS/tasks.c **** 				{
3507:..\FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3508:..\FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3509:..\FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3510:..\FreeRTOS/tasks.c **** 					holding	task then it must be the running state task.  Remove
3511:..\FreeRTOS/tasks.c **** 					the	holding task from the ready	list. */
3512:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3100              		.loc 1 3512 0
 3101 001a 1D1D     		adds	r5, r3, #4
 3102 001c 2846     		mov	r0, r5
 3103 001e FFF7FEFF 		bl	uxListRemove
 3104              	.LVL320:
 3105 0022 78B9     		cbnz	r0, .L297
3513:..\FreeRTOS/tasks.c **** 					{
3514:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3106              		.loc 1 3514 0
 3107 0024 E26A     		ldr	r2, [r4, #44]
 3108 0026 02EB8203 		add	r3, r2, r2, lsl #2
 3109 002a 9B00     		lsls	r3, r3, #2
 3110 002c 1449     		ldr	r1, .L302
 3111 002e 0B44     		add	r3, r3, r1
 3112 0030 1B6B     		ldr	r3, [r3, #48]
 3113 0032 3BB9     		cbnz	r3, .L297
 3114              		.loc 1 3514 0 is_stmt 0 discriminator 1
 3115 0034 0123     		movs	r3, #1
 3116 0036 9340     		lsls	r3, r3, r2
 3117 0038 D1F8E820 		ldr	r2, [r1, #232]
 3118 003c 22EA0303 		bic	r3, r2, r3
 3119 0040 C1F8E830 		str	r3, [r1, #232]
 3120              	.L297:
3515:..\FreeRTOS/tasks.c **** 					}
3516:..\FreeRTOS/tasks.c **** 					else
3517:..\FreeRTOS/tasks.c **** 					{
3518:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3519:..\FreeRTOS/tasks.c **** 					}
3520:..\FreeRTOS/tasks.c **** 
3521:..\FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3522:..\FreeRTOS/tasks.c **** 					new	ready list. */
3523:..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3524:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 3121              		.loc 1 3524 0 is_stmt 1
 3122 0044 236C     		ldr	r3, [r4, #64]
 3123 0046 E362     		str	r3, [r4, #44]
3525:..\FreeRTOS/tasks.c **** 
3526:..\FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3527:..\FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3528:..\FreeRTOS/tasks.c **** 					running to give back the mutex. */
3529:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 3124              		.loc 1 3529 0
 3125 0048 C3F10502 		rsb	r2, r3, #5
 3126 004c A261     		str	r2, [r4, #24]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 128


3530:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3127              		.loc 1 3530 0
 3128 004e 0124     		movs	r4, #1
 3129              	.LVL321:
 3130 0050 04FA03F1 		lsl	r1, r4, r3
 3131 0054 0A48     		ldr	r0, .L302
 3132 0056 D0F8E820 		ldr	r2, [r0, #232]
 3133 005a 0A43     		orrs	r2, r2, r1
 3134 005c C0F8E820 		str	r2, [r0, #232]
 3135 0060 3030     		adds	r0, r0, #48
 3136 0062 03EB8303 		add	r3, r3, r3, lsl #2
 3137 0066 9B00     		lsls	r3, r3, #2
 3138 0068 1844     		add	r0, r0, r3
 3139 006a 2946     		mov	r1, r5
 3140 006c FFF7FEFF 		bl	vListInsertEnd
 3141              	.LVL322:
3531:..\FreeRTOS/tasks.c **** 
3532:..\FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3533:..\FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3534:..\FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3535:..\FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3536:..\FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3537:..\FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3538:..\FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3539:..\FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
3540:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 3142              		.loc 1 3540 0
 3143 0070 2046     		mov	r0, r4
 3144 0072 38BD     		pop	{r3, r4, r5, pc}
 3145              	.LVL323:
 3146              	.L298:
 3147              		.cfi_def_cfa_offset 0
 3148              		.cfi_restore 3
 3149              		.cfi_restore 4
 3150              		.cfi_restore 5
 3151              		.cfi_restore 14
3487:..\FreeRTOS/tasks.c **** 
 3152              		.loc 1 3487 0
 3153 0074 0020     		movs	r0, #0
 3154              	.LVL324:
3541:..\FreeRTOS/tasks.c **** 				}
3542:..\FreeRTOS/tasks.c **** 				else
3543:..\FreeRTOS/tasks.c **** 				{
3544:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3545:..\FreeRTOS/tasks.c **** 				}
3546:..\FreeRTOS/tasks.c **** 			}
3547:..\FreeRTOS/tasks.c **** 			else
3548:..\FreeRTOS/tasks.c **** 			{
3549:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3550:..\FreeRTOS/tasks.c **** 			}
3551:..\FreeRTOS/tasks.c **** 		}
3552:..\FreeRTOS/tasks.c **** 		else
3553:..\FreeRTOS/tasks.c **** 		{
3554:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3555:..\FreeRTOS/tasks.c **** 		}
3556:..\FreeRTOS/tasks.c **** 
3557:..\FreeRTOS/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 129


3558:..\FreeRTOS/tasks.c **** 	}
 3155              		.loc 1 3558 0
 3156 0076 7047     		bx	lr
 3157              	.LVL325:
 3158              	.L299:
 3159              		.cfi_def_cfa_offset 16
 3160              		.cfi_offset 3, -16
 3161              		.cfi_offset 4, -12
 3162              		.cfi_offset 5, -8
 3163              		.cfi_offset 14, -4
3487:..\FreeRTOS/tasks.c **** 
 3164              		.loc 1 3487 0
 3165 0078 0020     		movs	r0, #0
 3166 007a 38BD     		pop	{r3, r4, r5, pc}
 3167              	.LVL326:
 3168              	.L300:
 3169 007c 0020     		movs	r0, #0
 3170              	.LVL327:
 3171              		.loc 1 3558 0
 3172 007e 38BD     		pop	{r3, r4, r5, pc}
 3173              	.LVL328:
 3174              	.L303:
 3175              		.align	2
 3176              	.L302:
 3177 0080 00000000 		.word	.LANCHOR0
 3178              		.cfi_endproc
 3179              	.LFE104:
 3180              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3181              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3182              		.align	2
 3183              		.global	uxTaskResetEventItemValue
 3184              		.thumb
 3185              		.thumb_func
 3186              		.type	uxTaskResetEventItemValue, %function
 3187              	uxTaskResetEventItemValue:
 3188              	.LFB105:
3559:..\FreeRTOS/tasks.c **** 
3560:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3561:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3562:..\FreeRTOS/tasks.c **** 
3563:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3564:..\FreeRTOS/tasks.c **** 
3565:..\FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3566:..\FreeRTOS/tasks.c **** 	{
3567:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3568:..\FreeRTOS/tasks.c **** 
3569:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3570:..\FreeRTOS/tasks.c **** 		{
3571:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3572:..\FreeRTOS/tasks.c **** 
3573:..\FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3574:..\FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3575:..\FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3576:..\FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3577:..\FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3578:..\FreeRTOS/tasks.c **** 			critical section. */
3579:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 130


3580:..\FreeRTOS/tasks.c **** 			{
3581:..\FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3582:..\FreeRTOS/tasks.c **** 			}
3583:..\FreeRTOS/tasks.c **** 		}
3584:..\FreeRTOS/tasks.c **** 		else
3585:..\FreeRTOS/tasks.c **** 		{
3586:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3587:..\FreeRTOS/tasks.c **** 		}
3588:..\FreeRTOS/tasks.c **** 	}
3589:..\FreeRTOS/tasks.c **** 
3590:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3591:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:..\FreeRTOS/tasks.c **** 
3593:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3594:..\FreeRTOS/tasks.c **** 
3595:..\FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3596:..\FreeRTOS/tasks.c **** 	{
3597:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:..\FreeRTOS/tasks.c **** 		{
3599:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3600:..\FreeRTOS/tasks.c **** 			{
3601:..\FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3602:..\FreeRTOS/tasks.c **** 
3603:..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3604:..\FreeRTOS/tasks.c **** 				{
3605:..\FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3606:..\FreeRTOS/tasks.c **** 				}
3607:..\FreeRTOS/tasks.c **** 				else
3608:..\FreeRTOS/tasks.c **** 				{
3609:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3610:..\FreeRTOS/tasks.c **** 				}
3611:..\FreeRTOS/tasks.c **** 			}
3612:..\FreeRTOS/tasks.c **** 			else
3613:..\FreeRTOS/tasks.c **** 			{
3614:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3615:..\FreeRTOS/tasks.c **** 			}
3616:..\FreeRTOS/tasks.c **** 		}
3617:..\FreeRTOS/tasks.c **** 		else
3618:..\FreeRTOS/tasks.c **** 		{
3619:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3620:..\FreeRTOS/tasks.c **** 		}
3621:..\FreeRTOS/tasks.c **** 	}
3622:..\FreeRTOS/tasks.c **** 
3623:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3624:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:..\FreeRTOS/tasks.c **** 
3626:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3627:..\FreeRTOS/tasks.c **** 
3628:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3629:..\FreeRTOS/tasks.c **** 	{
3630:..\FreeRTOS/tasks.c **** 	size_t x;
3631:..\FreeRTOS/tasks.c **** 
3632:..\FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
3633:..\FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3634:..\FreeRTOS/tasks.c **** 
3635:..\FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3636:..\FreeRTOS/tasks.c **** 		printed out. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 131


3637:..\FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3638:..\FreeRTOS/tasks.c **** 		{
3639:..\FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
3640:..\FreeRTOS/tasks.c **** 		}
3641:..\FreeRTOS/tasks.c **** 
3642:..\FreeRTOS/tasks.c **** 		/* Terminate. */
3643:..\FreeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
3644:..\FreeRTOS/tasks.c **** 
3645:..\FreeRTOS/tasks.c **** 		/* Return the new end of string. */
3646:..\FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
3647:..\FreeRTOS/tasks.c **** 	}
3648:..\FreeRTOS/tasks.c **** 
3649:..\FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3650:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3651:..\FreeRTOS/tasks.c **** 
3652:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3653:..\FreeRTOS/tasks.c **** 
3654:..\FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3655:..\FreeRTOS/tasks.c **** 	{
3656:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3657:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3658:..\FreeRTOS/tasks.c **** 	char cStatus;
3659:..\FreeRTOS/tasks.c **** 
3660:..\FreeRTOS/tasks.c **** 		/*
3661:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3662:..\FreeRTOS/tasks.c **** 		 *
3663:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3664:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3665:..\FreeRTOS/tasks.c **** 		 * scheduler.
3666:..\FreeRTOS/tasks.c **** 		 *
3667:..\FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3668:..\FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3669:..\FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3670:..\FreeRTOS/tasks.c **** 		 *
3671:..\FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3672:..\FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3673:..\FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3674:..\FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3675:..\FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3676:..\FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3677:..\FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3678:..\FreeRTOS/tasks.c **** 		 *
3679:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3680:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3681:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3682:..\FreeRTOS/tasks.c **** 		 */
3683:..\FreeRTOS/tasks.c **** 
3684:..\FreeRTOS/tasks.c **** 
3685:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3686:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3687:..\FreeRTOS/tasks.c **** 
3688:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3689:..\FreeRTOS/tasks.c **** 		function is executing. */
3690:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3691:..\FreeRTOS/tasks.c **** 
3692:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3693:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 132


3694:..\FreeRTOS/tasks.c **** 
3695:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3696:..\FreeRTOS/tasks.c **** 		{
3697:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3698:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3699:..\FreeRTOS/tasks.c **** 
3700:..\FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3701:..\FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3702:..\FreeRTOS/tasks.c **** 			{
3703:..\FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3704:..\FreeRTOS/tasks.c **** 				{
3705:..\FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3706:..\FreeRTOS/tasks.c **** 										break;
3707:..\FreeRTOS/tasks.c **** 
3708:..\FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3709:..\FreeRTOS/tasks.c **** 										break;
3710:..\FreeRTOS/tasks.c **** 
3711:..\FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3712:..\FreeRTOS/tasks.c **** 										break;
3713:..\FreeRTOS/tasks.c **** 
3714:..\FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
3715:..\FreeRTOS/tasks.c **** 										break;
3716:..\FreeRTOS/tasks.c **** 
3717:..\FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
3718:..\FreeRTOS/tasks.c **** 										to prevent static checking errors. */
3719:..\FreeRTOS/tasks.c **** 										cStatus = 0x00;
3720:..\FreeRTOS/tasks.c **** 										break;
3721:..\FreeRTOS/tasks.c **** 				}
3722:..\FreeRTOS/tasks.c **** 
3723:..\FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3724:..\FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
3725:..\FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3726:..\FreeRTOS/tasks.c **** 
3727:..\FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
3728:..\FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
3729:..\FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3730:..\FreeRTOS/tasks.c **** 			}
3731:..\FreeRTOS/tasks.c **** 
3732:..\FreeRTOS/tasks.c **** 			/* Free the array again. */
3733:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3734:..\FreeRTOS/tasks.c **** 		}
3735:..\FreeRTOS/tasks.c **** 		else
3736:..\FreeRTOS/tasks.c **** 		{
3737:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3738:..\FreeRTOS/tasks.c **** 		}
3739:..\FreeRTOS/tasks.c **** 	}
3740:..\FreeRTOS/tasks.c **** 
3741:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3742:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3743:..\FreeRTOS/tasks.c **** 
3744:..\FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3745:..\FreeRTOS/tasks.c **** 
3746:..\FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3747:..\FreeRTOS/tasks.c **** 	{
3748:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3749:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3750:..\FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 133


3751:..\FreeRTOS/tasks.c **** 
3752:..\FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3753:..\FreeRTOS/tasks.c **** 		{
3754:..\FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3755:..\FreeRTOS/tasks.c **** 		}
3756:..\FreeRTOS/tasks.c **** 		#endif
3757:..\FreeRTOS/tasks.c **** 
3758:..\FreeRTOS/tasks.c **** 		/*
3759:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3760:..\FreeRTOS/tasks.c **** 		 *
3761:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3762:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3763:..\FreeRTOS/tasks.c **** 		 * scheduler.
3764:..\FreeRTOS/tasks.c **** 		 *
3765:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3766:..\FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3767:..\FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3768:..\FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3769:..\FreeRTOS/tasks.c **** 		 *
3770:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3771:..\FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3772:..\FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3773:..\FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3774:..\FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3775:..\FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3776:..\FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3777:..\FreeRTOS/tasks.c **** 		 *
3778:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3779:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3780:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3781:..\FreeRTOS/tasks.c **** 		 */
3782:..\FreeRTOS/tasks.c **** 
3783:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3784:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3785:..\FreeRTOS/tasks.c **** 
3786:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3787:..\FreeRTOS/tasks.c **** 		function is executing. */
3788:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3789:..\FreeRTOS/tasks.c **** 
3790:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3791:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3792:..\FreeRTOS/tasks.c **** 
3793:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3794:..\FreeRTOS/tasks.c **** 		{
3795:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3796:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3797:..\FreeRTOS/tasks.c **** 
3798:..\FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3799:..\FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3800:..\FreeRTOS/tasks.c **** 
3801:..\FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3802:..\FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3803:..\FreeRTOS/tasks.c **** 			{
3804:..\FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3805:..\FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3806:..\FreeRTOS/tasks.c **** 				{
3807:..\FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 134


3808:..\FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3809:..\FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3810:..\FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3811:..\FreeRTOS/tasks.c **** 
3812:..\FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
3813:..\FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
3814:..\FreeRTOS/tasks.c **** 					easily. */
3815:..\FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3816:..\FreeRTOS/tasks.c **** 
3817:..\FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3818:..\FreeRTOS/tasks.c **** 					{
3819:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3820:..\FreeRTOS/tasks.c **** 						{
3821:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3822:..\FreeRTOS/tasks.c **** 						}
3823:..\FreeRTOS/tasks.c **** 						#else
3824:..\FreeRTOS/tasks.c **** 						{
3825:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3826:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
3827:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3828:..\FreeRTOS/tasks.c **** 						}
3829:..\FreeRTOS/tasks.c **** 						#endif
3830:..\FreeRTOS/tasks.c **** 					}
3831:..\FreeRTOS/tasks.c **** 					else
3832:..\FreeRTOS/tasks.c **** 					{
3833:..\FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3834:..\FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3835:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3836:..\FreeRTOS/tasks.c **** 						{
3837:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3838:..\FreeRTOS/tasks.c **** 						}
3839:..\FreeRTOS/tasks.c **** 						#else
3840:..\FreeRTOS/tasks.c **** 						{
3841:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3842:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
3843:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3844:..\FreeRTOS/tasks.c **** 						}
3845:..\FreeRTOS/tasks.c **** 						#endif
3846:..\FreeRTOS/tasks.c **** 					}
3847:..\FreeRTOS/tasks.c **** 
3848:..\FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3849:..\FreeRTOS/tasks.c **** 				}
3850:..\FreeRTOS/tasks.c **** 			}
3851:..\FreeRTOS/tasks.c **** 			else
3852:..\FreeRTOS/tasks.c **** 			{
3853:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3854:..\FreeRTOS/tasks.c **** 			}
3855:..\FreeRTOS/tasks.c **** 
3856:..\FreeRTOS/tasks.c **** 			/* Free the array again. */
3857:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3858:..\FreeRTOS/tasks.c **** 		}
3859:..\FreeRTOS/tasks.c **** 		else
3860:..\FreeRTOS/tasks.c **** 		{
3861:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3862:..\FreeRTOS/tasks.c **** 		}
3863:..\FreeRTOS/tasks.c **** 	}
3864:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 135


3865:..\FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
3866:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3867:..\FreeRTOS/tasks.c **** 
3868:..\FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
3869:..\FreeRTOS/tasks.c **** {
 3189              		.loc 1 3869 0
 3190              		.cfi_startproc
 3191              		@ args = 0, pretend = 0, frame = 0
 3192              		@ frame_needed = 0, uses_anonymous_args = 0
 3193              		@ link register save eliminated.
3870:..\FreeRTOS/tasks.c **** TickType_t uxReturn;
3871:..\FreeRTOS/tasks.c **** 
3872:..\FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 3194              		.loc 1 3872 0
 3195 0000 064B     		ldr	r3, .L305
 3196 0002 D3F8D420 		ldr	r2, [r3, #212]
 3197 0006 9069     		ldr	r0, [r2, #24]
 3198              	.LVL329:
3873:..\FreeRTOS/tasks.c **** 
3874:..\FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3875:..\FreeRTOS/tasks.c **** 	queues and semaphores. */
3876:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 3199              		.loc 1 3876 0
 3200 0008 D3F8D420 		ldr	r2, [r3, #212]
 3201 000c D3F8D430 		ldr	r3, [r3, #212]
 3202 0010 DB6A     		ldr	r3, [r3, #44]
 3203 0012 C3F10503 		rsb	r3, r3, #5
 3204 0016 9361     		str	r3, [r2, #24]
3877:..\FreeRTOS/tasks.c **** 
3878:..\FreeRTOS/tasks.c **** 	return uxReturn;
3879:..\FreeRTOS/tasks.c **** }
 3205              		.loc 1 3879 0
 3206 0018 7047     		bx	lr
 3207              	.L306:
 3208 001a 00BF     		.align	2
 3209              	.L305:
 3210 001c 00000000 		.word	.LANCHOR0
 3211              		.cfi_endproc
 3212              	.LFE105:
 3213              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3214              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3215              		.align	2
 3216              		.global	pvTaskIncrementMutexHeldCount
 3217              		.thumb
 3218              		.thumb_func
 3219              		.type	pvTaskIncrementMutexHeldCount, %function
 3220              	pvTaskIncrementMutexHeldCount:
 3221              	.LFB106:
3880:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3881:..\FreeRTOS/tasks.c **** 
3882:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3883:..\FreeRTOS/tasks.c **** 
3884:..\FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3885:..\FreeRTOS/tasks.c **** 	{
 3222              		.loc 1 3885 0
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 136


 3225              		@ frame_needed = 0, uses_anonymous_args = 0
 3226              		@ link register save eliminated.
3886:..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3887:..\FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3888:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 3227              		.loc 1 3888 0
 3228 0000 064B     		ldr	r3, .L309
 3229 0002 D3F8D430 		ldr	r3, [r3, #212]
 3230 0006 2BB1     		cbz	r3, .L308
3889:..\FreeRTOS/tasks.c **** 		{
3890:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 3231              		.loc 1 3890 0
 3232 0008 044B     		ldr	r3, .L309
 3233 000a D3F8D420 		ldr	r2, [r3, #212]
 3234 000e 536C     		ldr	r3, [r2, #68]
 3235 0010 0133     		adds	r3, r3, #1
 3236 0012 5364     		str	r3, [r2, #68]
 3237              	.L308:
3891:..\FreeRTOS/tasks.c **** 		}
3892:..\FreeRTOS/tasks.c **** 
3893:..\FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 3238              		.loc 1 3893 0
 3239 0014 014B     		ldr	r3, .L309
 3240 0016 D3F8D400 		ldr	r0, [r3, #212]
3894:..\FreeRTOS/tasks.c **** 	}
 3241              		.loc 1 3894 0
 3242 001a 7047     		bx	lr
 3243              	.L310:
 3244              		.align	2
 3245              	.L309:
 3246 001c 00000000 		.word	.LANCHOR0
 3247              		.cfi_endproc
 3248              	.LFE106:
 3249              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3250              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3251              		.align	2
 3252              		.global	ulTaskNotifyTake
 3253              		.thumb
 3254              		.thumb_func
 3255              		.type	ulTaskNotifyTake, %function
 3256              	ulTaskNotifyTake:
 3257              	.LFB107:
3895:..\FreeRTOS/tasks.c **** 
3896:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3897:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3898:..\FreeRTOS/tasks.c **** 
3899:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3900:..\FreeRTOS/tasks.c **** 
3901:..\FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3902:..\FreeRTOS/tasks.c **** 	{
 3258              		.loc 1 3902 0
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 0
 3261              		@ frame_needed = 0, uses_anonymous_args = 0
 3262              	.LVL330:
 3263 0000 38B5     		push	{r3, r4, r5, lr}
 3264              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 137


 3265              		.cfi_offset 3, -16
 3266              		.cfi_offset 4, -12
 3267              		.cfi_offset 5, -8
 3268              		.cfi_offset 14, -4
 3269 0002 0546     		mov	r5, r0
 3270 0004 0C46     		mov	r4, r1
3903:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
3904:..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
3905:..\FreeRTOS/tasks.c **** 
3906:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3271              		.loc 1 3906 0
 3272 0006 FFF7FEFF 		bl	vPortEnterCritical
 3273              	.LVL331:
3907:..\FreeRTOS/tasks.c **** 		{
3908:..\FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3909:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 3274              		.loc 1 3909 0
 3275 000a 284B     		ldr	r3, .L319
 3276 000c D3F8D430 		ldr	r3, [r3, #212]
 3277 0010 9B6C     		ldr	r3, [r3, #72]
 3278 0012 5BBB     		cbnz	r3, .L312
3910:..\FreeRTOS/tasks.c **** 			{
3911:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
3912:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 3279              		.loc 1 3912 0
 3280 0014 254B     		ldr	r3, .L319
 3281 0016 D3F8D430 		ldr	r3, [r3, #212]
 3282 001a 0122     		movs	r2, #1
 3283 001c 83F84C20 		strb	r2, [r3, #76]
3913:..\FreeRTOS/tasks.c **** 
3914:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 3284              		.loc 1 3914 0
 3285 0020 24B3     		cbz	r4, .L312
3915:..\FreeRTOS/tasks.c **** 				{
3916:..\FreeRTOS/tasks.c **** 					/* The task is going to block.  First it must be removed
3917:..\FreeRTOS/tasks.c **** 					from the ready list. */
3918:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3286              		.loc 1 3918 0
 3287 0022 224B     		ldr	r3, .L319
 3288 0024 D3F8D400 		ldr	r0, [r3, #212]
 3289 0028 0430     		adds	r0, r0, #4
 3290 002a FFF7FEFF 		bl	uxListRemove
 3291              	.LVL332:
 3292 002e 58B9     		cbnz	r0, .L313
3919:..\FreeRTOS/tasks.c **** 					{
3920:..\FreeRTOS/tasks.c **** 						/* The current task must be in a ready list, so there is
3921:..\FreeRTOS/tasks.c **** 						no need to check, and the port reset macro can be called
3922:..\FreeRTOS/tasks.c **** 						directly. */
3923:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3293              		.loc 1 3923 0
 3294 0030 1E4B     		ldr	r3, .L319
 3295 0032 D3F8D420 		ldr	r2, [r3, #212]
 3296 0036 D16A     		ldr	r1, [r2, #44]
 3297 0038 0122     		movs	r2, #1
 3298 003a 8A40     		lsls	r2, r2, r1
 3299 003c D3F8E810 		ldr	r1, [r3, #232]
 3300 0040 21EA0202 		bic	r2, r1, r2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 138


 3301 0044 C3F8E820 		str	r2, [r3, #232]
 3302              	.L313:
3924:..\FreeRTOS/tasks.c **** 					}
3925:..\FreeRTOS/tasks.c **** 					else
3926:..\FreeRTOS/tasks.c **** 					{
3927:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3928:..\FreeRTOS/tasks.c **** 					}
3929:..\FreeRTOS/tasks.c **** 
3930:..\FreeRTOS/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3931:..\FreeRTOS/tasks.c **** 					{
3932:..\FreeRTOS/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 3303              		.loc 1 3932 0
 3304 0048 B4F1FF3F 		cmp	r4, #-1
 3305 004c 06D1     		bne	.L314
3933:..\FreeRTOS/tasks.c **** 						{
3934:..\FreeRTOS/tasks.c **** 							/* Add the task to the suspended task list instead
3935:..\FreeRTOS/tasks.c **** 							of a delayed task list to ensure the task is not
3936:..\FreeRTOS/tasks.c **** 							woken by a timing event.  It will block
3937:..\FreeRTOS/tasks.c **** 							indefinitely. */
3938:..\FreeRTOS/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3306              		.loc 1 3938 0
 3307 004e 1748     		ldr	r0, .L319
 3308 0050 D0F8D410 		ldr	r1, [r0, #212]
 3309 0054 0431     		adds	r1, r1, #4
 3310 0056 FFF7FEFF 		bl	vListInsertEnd
 3311              	.LVL333:
 3312 005a 05E0     		b	.L315
 3313              	.L314:
3939:..\FreeRTOS/tasks.c **** 						}
3940:..\FreeRTOS/tasks.c **** 						else
3941:..\FreeRTOS/tasks.c **** 						{
3942:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
3943:..\FreeRTOS/tasks.c **** 							woken if no notification events occur.  This may
3944:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3945:..\FreeRTOS/tasks.c **** 							handle it. */
3946:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 3314              		.loc 1 3946 0
 3315 005c 134B     		ldr	r3, .L319
 3316 005e D3F8D800 		ldr	r0, [r3, #216]
 3317              	.LVL334:
3947:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 3318              		.loc 1 3947 0
 3319 0062 2044     		add	r0, r0, r4
 3320              	.LVL335:
 3321 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3322              	.LVL336:
 3323              	.L315:
3948:..\FreeRTOS/tasks.c **** 						}
3949:..\FreeRTOS/tasks.c **** 					}
3950:..\FreeRTOS/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3951:..\FreeRTOS/tasks.c **** 					{
3952:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
3953:..\FreeRTOS/tasks.c **** 							woken if the event does not occur.  This may
3954:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3955:..\FreeRTOS/tasks.c **** 							handle it. */
3956:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3957:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 139


3958:..\FreeRTOS/tasks.c **** 					}
3959:..\FreeRTOS/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3960:..\FreeRTOS/tasks.c **** 
3961:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3962:..\FreeRTOS/tasks.c **** 
3963:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
3964:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
3965:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
3966:..\FreeRTOS/tasks.c **** 					application code should ever do. */
3967:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 3324              		.loc 1 3967 0
 3325 0068 FFF7FEFF 		bl	vPortYield
 3326              	.LVL337:
 3327              	.L312:
3968:..\FreeRTOS/tasks.c **** 				}
3969:..\FreeRTOS/tasks.c **** 				else
3970:..\FreeRTOS/tasks.c **** 				{
3971:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3972:..\FreeRTOS/tasks.c **** 				}
3973:..\FreeRTOS/tasks.c **** 			}
3974:..\FreeRTOS/tasks.c **** 			else
3975:..\FreeRTOS/tasks.c **** 			{
3976:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3977:..\FreeRTOS/tasks.c **** 			}
3978:..\FreeRTOS/tasks.c **** 		}
3979:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3328              		.loc 1 3979 0
 3329 006c FFF7FEFF 		bl	vPortExitCritical
 3330              	.LVL338:
3980:..\FreeRTOS/tasks.c **** 
3981:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3331              		.loc 1 3981 0
 3332 0070 FFF7FEFF 		bl	vPortEnterCritical
 3333              	.LVL339:
3982:..\FreeRTOS/tasks.c **** 		{
3983:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
3984:..\FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 3334              		.loc 1 3984 0
 3335 0074 0D4B     		ldr	r3, .L319
 3336 0076 D3F8D430 		ldr	r3, [r3, #212]
 3337 007a 9C6C     		ldr	r4, [r3, #72]
 3338              	.LVL340:
3985:..\FreeRTOS/tasks.c **** 
3986:..\FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
 3339              		.loc 1 3986 0
 3340 007c 64B1     		cbz	r4, .L316
3987:..\FreeRTOS/tasks.c **** 			{
3988:..\FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 3341              		.loc 1 3988 0
 3342 007e 2DB1     		cbz	r5, .L317
3989:..\FreeRTOS/tasks.c **** 				{
3990:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 3343              		.loc 1 3990 0
 3344 0080 0A4B     		ldr	r3, .L319
 3345 0082 D3F8D430 		ldr	r3, [r3, #212]
 3346 0086 0022     		movs	r2, #0
 3347 0088 9A64     		str	r2, [r3, #72]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 140


 3348 008a 05E0     		b	.L316
 3349              	.L317:
3991:..\FreeRTOS/tasks.c **** 				}
3992:..\FreeRTOS/tasks.c **** 				else
3993:..\FreeRTOS/tasks.c **** 				{
3994:..\FreeRTOS/tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
 3350              		.loc 1 3994 0
 3351 008c 074B     		ldr	r3, .L319
 3352 008e D3F8D420 		ldr	r2, [r3, #212]
 3353 0092 936C     		ldr	r3, [r2, #72]
 3354 0094 013B     		subs	r3, r3, #1
 3355 0096 9364     		str	r3, [r2, #72]
 3356              	.L316:
3995:..\FreeRTOS/tasks.c **** 				}
3996:..\FreeRTOS/tasks.c **** 			}
3997:..\FreeRTOS/tasks.c **** 			else
3998:..\FreeRTOS/tasks.c **** 			{
3999:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4000:..\FreeRTOS/tasks.c **** 			}
4001:..\FreeRTOS/tasks.c **** 
4002:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 3357              		.loc 1 4002 0
 3358 0098 044B     		ldr	r3, .L319
 3359 009a D3F8D430 		ldr	r3, [r3, #212]
 3360 009e 0022     		movs	r2, #0
 3361 00a0 83F84C20 		strb	r2, [r3, #76]
4003:..\FreeRTOS/tasks.c **** 		}
4004:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3362              		.loc 1 4004 0
 3363 00a4 FFF7FEFF 		bl	vPortExitCritical
 3364              	.LVL341:
4005:..\FreeRTOS/tasks.c **** 
4006:..\FreeRTOS/tasks.c **** 		return ulReturn;
4007:..\FreeRTOS/tasks.c **** 	}
 3365              		.loc 1 4007 0
 3366 00a8 2046     		mov	r0, r4
 3367 00aa 38BD     		pop	{r3, r4, r5, pc}
 3368              	.LVL342:
 3369              	.L320:
 3370              		.align	2
 3371              	.L319:
 3372 00ac 00000000 		.word	.LANCHOR0
 3373              		.cfi_endproc
 3374              	.LFE107:
 3375              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3376              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3377              		.align	2
 3378              		.global	xTaskNotifyWait
 3379              		.thumb
 3380              		.thumb_func
 3381              		.type	xTaskNotifyWait, %function
 3382              	xTaskNotifyWait:
 3383              	.LFB108:
4008:..\FreeRTOS/tasks.c **** 
4009:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4010:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4011:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 141


4012:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4013:..\FreeRTOS/tasks.c **** 
4014:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4015:..\FreeRTOS/tasks.c **** 	{
 3384              		.loc 1 4015 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
 3388              	.LVL343:
 3389 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3390              		.cfi_def_cfa_offset 24
 3391              		.cfi_offset 3, -24
 3392              		.cfi_offset 4, -20
 3393              		.cfi_offset 5, -16
 3394              		.cfi_offset 6, -12
 3395              		.cfi_offset 7, -8
 3396              		.cfi_offset 14, -4
 3397 0002 0746     		mov	r7, r0
 3398 0004 0C46     		mov	r4, r1
 3399 0006 1546     		mov	r5, r2
 3400 0008 1E46     		mov	r6, r3
4016:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
4017:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4018:..\FreeRTOS/tasks.c **** 
4019:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3401              		.loc 1 4019 0
 3402 000a FFF7FEFF 		bl	vPortEnterCritical
 3403              	.LVL344:
4020:..\FreeRTOS/tasks.c **** 		{
4021:..\FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4022:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 3404              		.loc 1 4022 0
 3405 000e 304B     		ldr	r3, .L330
 3406 0010 D3F8D430 		ldr	r3, [r3, #212]
 3407 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3408 0018 DBB2     		uxtb	r3, r3
 3409 001a 022B     		cmp	r3, #2
 3410 001c 31D0     		beq	.L322
4023:..\FreeRTOS/tasks.c **** 			{
4024:..\FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4025:..\FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4026:..\FreeRTOS/tasks.c **** 				clear the value to zero. */
4027:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 3411              		.loc 1 4027 0
 3412 001e 2C4B     		ldr	r3, .L330
 3413 0020 D3F8D420 		ldr	r2, [r3, #212]
 3414 0024 906C     		ldr	r0, [r2, #72]
 3415 0026 20EA0700 		bic	r0, r0, r7
 3416 002a 9064     		str	r0, [r2, #72]
4028:..\FreeRTOS/tasks.c **** 
4029:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4030:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 3417              		.loc 1 4030 0
 3418 002c D3F8D430 		ldr	r3, [r3, #212]
 3419 0030 0122     		movs	r2, #1
 3420 0032 83F84C20 		strb	r2, [r3, #76]
4031:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 142


4032:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 3421              		.loc 1 4032 0
 3422 0036 26B3     		cbz	r6, .L322
4033:..\FreeRTOS/tasks.c **** 				{
4034:..\FreeRTOS/tasks.c **** 					/* The task is going to block.  First it must be removed
4035:..\FreeRTOS/tasks.c **** 					from the	ready list. */
4036:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3423              		.loc 1 4036 0
 3424 0038 254B     		ldr	r3, .L330
 3425 003a D3F8D400 		ldr	r0, [r3, #212]
 3426 003e 0430     		adds	r0, r0, #4
 3427 0040 FFF7FEFF 		bl	uxListRemove
 3428              	.LVL345:
 3429 0044 58B9     		cbnz	r0, .L323
4037:..\FreeRTOS/tasks.c **** 					{
4038:..\FreeRTOS/tasks.c **** 						/* The current task must be in a ready list, so there is
4039:..\FreeRTOS/tasks.c **** 						no need to check, and the port reset macro can be called
4040:..\FreeRTOS/tasks.c **** 						directly. */
4041:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3430              		.loc 1 4041 0
 3431 0046 224B     		ldr	r3, .L330
 3432 0048 D3F8D420 		ldr	r2, [r3, #212]
 3433 004c D16A     		ldr	r1, [r2, #44]
 3434 004e 0122     		movs	r2, #1
 3435 0050 8A40     		lsls	r2, r2, r1
 3436 0052 D3F8E810 		ldr	r1, [r3, #232]
 3437 0056 21EA0202 		bic	r2, r1, r2
 3438 005a C3F8E820 		str	r2, [r3, #232]
 3439              	.L323:
4042:..\FreeRTOS/tasks.c **** 					}
4043:..\FreeRTOS/tasks.c **** 					else
4044:..\FreeRTOS/tasks.c **** 					{
4045:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4046:..\FreeRTOS/tasks.c **** 					}
4047:..\FreeRTOS/tasks.c **** 
4048:..\FreeRTOS/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4049:..\FreeRTOS/tasks.c **** 					{
4050:..\FreeRTOS/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 3440              		.loc 1 4050 0
 3441 005e B6F1FF3F 		cmp	r6, #-1
 3442 0062 06D1     		bne	.L324
4051:..\FreeRTOS/tasks.c **** 						{
4052:..\FreeRTOS/tasks.c **** 							/* Add the task to the suspended task list instead
4053:..\FreeRTOS/tasks.c **** 							of a delayed task list to ensure the task is not
4054:..\FreeRTOS/tasks.c **** 							woken by a timing event.  It will block
4055:..\FreeRTOS/tasks.c **** 							indefinitely. */
4056:..\FreeRTOS/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3443              		.loc 1 4056 0
 3444 0064 1A48     		ldr	r0, .L330
 3445 0066 D0F8D410 		ldr	r1, [r0, #212]
 3446 006a 0431     		adds	r1, r1, #4
 3447 006c FFF7FEFF 		bl	vListInsertEnd
 3448              	.LVL346:
 3449 0070 05E0     		b	.L325
 3450              	.L324:
4057:..\FreeRTOS/tasks.c **** 						}
4058:..\FreeRTOS/tasks.c **** 						else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 143


4059:..\FreeRTOS/tasks.c **** 						{
4060:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
4061:..\FreeRTOS/tasks.c **** 							woken if no notification events occur.  This may
4062:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4063:..\FreeRTOS/tasks.c **** 							handle it. */
4064:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 3451              		.loc 1 4064 0
 3452 0072 174B     		ldr	r3, .L330
 3453 0074 D3F8D800 		ldr	r0, [r3, #216]
 3454              	.LVL347:
4065:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 3455              		.loc 1 4065 0
 3456 0078 3044     		add	r0, r0, r6
 3457              	.LVL348:
 3458 007a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3459              	.LVL349:
 3460              	.L325:
4066:..\FreeRTOS/tasks.c **** 						}
4067:..\FreeRTOS/tasks.c **** 					}
4068:..\FreeRTOS/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4069:..\FreeRTOS/tasks.c **** 					{
4070:..\FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
4071:..\FreeRTOS/tasks.c **** 							woken if the event does not occur.  This may
4072:..\FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4073:..\FreeRTOS/tasks.c **** 							handle it. */
4074:..\FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4075:..\FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4076:..\FreeRTOS/tasks.c **** 					}
4077:..\FreeRTOS/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
4078:..\FreeRTOS/tasks.c **** 
4079:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4080:..\FreeRTOS/tasks.c **** 
4081:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4082:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4083:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4084:..\FreeRTOS/tasks.c **** 					application code should ever do. */
4085:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 3461              		.loc 1 4085 0
 3462 007e FFF7FEFF 		bl	vPortYield
 3463              	.LVL350:
 3464              	.L322:
4086:..\FreeRTOS/tasks.c **** 				}
4087:..\FreeRTOS/tasks.c **** 				else
4088:..\FreeRTOS/tasks.c **** 				{
4089:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4090:..\FreeRTOS/tasks.c **** 				}
4091:..\FreeRTOS/tasks.c **** 			}
4092:..\FreeRTOS/tasks.c **** 			else
4093:..\FreeRTOS/tasks.c **** 			{
4094:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4095:..\FreeRTOS/tasks.c **** 			}
4096:..\FreeRTOS/tasks.c **** 		}
4097:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3465              		.loc 1 4097 0
 3466 0082 FFF7FEFF 		bl	vPortExitCritical
 3467              	.LVL351:
4098:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 144


4099:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3468              		.loc 1 4099 0
 3469 0086 FFF7FEFF 		bl	vPortEnterCritical
 3470              	.LVL352:
4100:..\FreeRTOS/tasks.c **** 		{
4101:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4102:..\FreeRTOS/tasks.c **** 
4103:..\FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
 3471              		.loc 1 4103 0
 3472 008a 25B1     		cbz	r5, .L326
4104:..\FreeRTOS/tasks.c **** 			{
4105:..\FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4106:..\FreeRTOS/tasks.c **** 				have changed. */
4107:..\FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 3473              		.loc 1 4107 0
 3474 008c 104B     		ldr	r3, .L330
 3475 008e D3F8D430 		ldr	r3, [r3, #212]
 3476 0092 9B6C     		ldr	r3, [r3, #72]
 3477 0094 2B60     		str	r3, [r5]
 3478              	.L326:
4108:..\FreeRTOS/tasks.c **** 			}
4109:..\FreeRTOS/tasks.c **** 
4110:..\FreeRTOS/tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4111:..\FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4112:..\FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4113:..\FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4114:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 3479              		.loc 1 4114 0
 3480 0096 0E4B     		ldr	r3, .L330
 3481 0098 D3F8D430 		ldr	r3, [r3, #212]
 3482 009c 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3483 00a0 DBB2     		uxtb	r3, r3
 3484 00a2 012B     		cmp	r3, #1
 3485 00a4 08D0     		beq	.L328
4115:..\FreeRTOS/tasks.c **** 			{
4116:..\FreeRTOS/tasks.c **** 				/* A notification was not received. */
4117:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4118:..\FreeRTOS/tasks.c **** 			}
4119:..\FreeRTOS/tasks.c **** 			else
4120:..\FreeRTOS/tasks.c **** 			{
4121:..\FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4122:..\FreeRTOS/tasks.c **** 				received while the task was waiting. */
4123:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 3486              		.loc 1 4123 0
 3487 00a6 0A4B     		ldr	r3, .L330
 3488 00a8 D3F8D430 		ldr	r3, [r3, #212]
 3489 00ac 996C     		ldr	r1, [r3, #72]
 3490 00ae 21EA0401 		bic	r1, r1, r4
 3491 00b2 9964     		str	r1, [r3, #72]
 3492              	.LVL353:
4124:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 3493              		.loc 1 4124 0
 3494 00b4 0124     		movs	r4, #1
 3495              	.LVL354:
 3496 00b6 00E0     		b	.L327
 3497              	.LVL355:
 3498              	.L328:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 145


4117:..\FreeRTOS/tasks.c **** 			}
 3499              		.loc 1 4117 0
 3500 00b8 0024     		movs	r4, #0
 3501              	.LVL356:
 3502              	.L327:
4125:..\FreeRTOS/tasks.c **** 			}
4126:..\FreeRTOS/tasks.c **** 
4127:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 3503              		.loc 1 4127 0
 3504 00ba 054B     		ldr	r3, .L330
 3505 00bc D3F8D430 		ldr	r3, [r3, #212]
 3506 00c0 0022     		movs	r2, #0
 3507 00c2 83F84C20 		strb	r2, [r3, #76]
4128:..\FreeRTOS/tasks.c **** 		}
4129:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3508              		.loc 1 4129 0
 3509 00c6 FFF7FEFF 		bl	vPortExitCritical
 3510              	.LVL357:
4130:..\FreeRTOS/tasks.c **** 
4131:..\FreeRTOS/tasks.c **** 		return xReturn;
4132:..\FreeRTOS/tasks.c **** 	}
 3511              		.loc 1 4132 0
 3512 00ca 2046     		mov	r0, r4
 3513 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3514              	.LVL358:
 3515              	.L331:
 3516 00ce 00BF     		.align	2
 3517              	.L330:
 3518 00d0 00000000 		.word	.LANCHOR0
 3519              		.cfi_endproc
 3520              	.LFE108:
 3521              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3522              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3523              		.align	2
 3524              		.global	xTaskGenericNotify
 3525              		.thumb
 3526              		.thumb_func
 3527              		.type	xTaskGenericNotify, %function
 3528              	xTaskGenericNotify:
 3529              	.LFB109:
4133:..\FreeRTOS/tasks.c **** 
4134:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4135:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4136:..\FreeRTOS/tasks.c **** 
4137:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4138:..\FreeRTOS/tasks.c **** 
4139:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4140:..\FreeRTOS/tasks.c **** 	{
 3530              		.loc 1 4140 0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 0
 3533              		@ frame_needed = 0, uses_anonymous_args = 0
 3534              	.LVL359:
 3535 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3536              		.cfi_def_cfa_offset 24
 3537              		.cfi_offset 3, -24
 3538              		.cfi_offset 4, -20
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 146


 3539              		.cfi_offset 5, -16
 3540              		.cfi_offset 6, -12
 3541              		.cfi_offset 7, -8
 3542              		.cfi_offset 14, -4
 3543 0002 0446     		mov	r4, r0
 3544 0004 0F46     		mov	r7, r1
 3545 0006 1546     		mov	r5, r2
 3546 0008 1E46     		mov	r6, r3
 3547              	.LVL360:
4141:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4142:..\FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4143:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4144:..\FreeRTOS/tasks.c **** 
4145:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4146:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4147:..\FreeRTOS/tasks.c **** 
4148:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3548              		.loc 1 4148 0
 3549 000a FFF7FEFF 		bl	vPortEnterCritical
 3550              	.LVL361:
4149:..\FreeRTOS/tasks.c **** 		{
4150:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 3551              		.loc 1 4150 0
 3552 000e 0EB1     		cbz	r6, .L333
4151:..\FreeRTOS/tasks.c **** 			{
4152:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 3553              		.loc 1 4152 0
 3554 0010 A36C     		ldr	r3, [r4, #72]
 3555 0012 3360     		str	r3, [r6]
 3556              	.L333:
4153:..\FreeRTOS/tasks.c **** 			}
4154:..\FreeRTOS/tasks.c **** 
4155:..\FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 3557              		.loc 1 4155 0
 3558 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3559 0018 DBB2     		uxtb	r3, r3
 3560              	.LVL362:
4156:..\FreeRTOS/tasks.c **** 
4157:..\FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3561              		.loc 1 4157 0
 3562 001a 0222     		movs	r2, #2
 3563 001c 84F84C20 		strb	r2, [r4, #76]
4158:..\FreeRTOS/tasks.c **** 
4159:..\FreeRTOS/tasks.c **** 			switch( eAction )
 3564              		.loc 1 4159 0
 3565 0020 6A1E     		subs	r2, r5, #1
 3566 0022 032A     		cmp	r2, #3
 3567 0024 15D8     		bhi	.L341
 3568 0026 DFE802F0 		tbb	[pc, r2]
 3569              	.L336:
 3570 002a 02       		.byte	(.L335-.L336)/2
 3571 002b 07       		.byte	(.L337-.L336)/2
 3572 002c 0C       		.byte	(.L338-.L336)/2
 3573 002d 0F       		.byte	(.L339-.L336)/2
 3574              		.p2align 1
 3575              	.L335:
4160:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 147


4161:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4162:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 3576              		.loc 1 4162 0
 3577 002e A26C     		ldr	r2, [r4, #72]
 3578 0030 1743     		orrs	r7, r7, r2
 3579              	.LVL363:
 3580 0032 A764     		str	r7, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3581              		.loc 1 4143 0
 3582 0034 0125     		movs	r5, #1
4163:..\FreeRTOS/tasks.c **** 					break;
 3583              		.loc 1 4163 0
 3584 0036 0FE0     		b	.L334
 3585              	.LVL364:
 3586              	.L337:
4164:..\FreeRTOS/tasks.c **** 
4165:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4166:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 3587              		.loc 1 4166 0
 3588 0038 A26C     		ldr	r2, [r4, #72]
 3589 003a 0132     		adds	r2, r2, #1
 3590 003c A264     		str	r2, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3591              		.loc 1 4143 0
 3592 003e 0125     		movs	r5, #1
4167:..\FreeRTOS/tasks.c **** 					break;
 3593              		.loc 1 4167 0
 3594 0040 0AE0     		b	.L334
 3595              	.L338:
4168:..\FreeRTOS/tasks.c **** 
4169:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4170:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 3596              		.loc 1 4170 0
 3597 0042 A764     		str	r7, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3598              		.loc 1 4143 0
 3599 0044 0125     		movs	r5, #1
4171:..\FreeRTOS/tasks.c **** 					break;
 3600              		.loc 1 4171 0
 3601 0046 07E0     		b	.L334
 3602              	.L339:
4172:..\FreeRTOS/tasks.c **** 
4173:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4174:..\FreeRTOS/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 3603              		.loc 1 4174 0
 3604 0048 022B     		cmp	r3, #2
 3605 004a 04D0     		beq	.L342
4175:..\FreeRTOS/tasks.c **** 					{
4176:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 3606              		.loc 1 4176 0
 3607 004c A764     		str	r7, [r4, #72]
4143:..\FreeRTOS/tasks.c **** 
 3608              		.loc 1 4143 0
 3609 004e 0125     		movs	r5, #1
 3610 0050 02E0     		b	.L334
 3611              	.L341:
 3612 0052 0125     		movs	r5, #1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 148


 3613 0054 00E0     		b	.L334
 3614              	.L342:
4177:..\FreeRTOS/tasks.c **** 					}
4178:..\FreeRTOS/tasks.c **** 					else
4179:..\FreeRTOS/tasks.c **** 					{
4180:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4181:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
 3615              		.loc 1 4181 0
 3616 0056 0025     		movs	r5, #0
 3617              	.LVL365:
 3618              	.L334:
4182:..\FreeRTOS/tasks.c **** 					}
4183:..\FreeRTOS/tasks.c **** 					break;
4184:..\FreeRTOS/tasks.c **** 
4185:..\FreeRTOS/tasks.c **** 				case eNoAction:
4186:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4187:..\FreeRTOS/tasks.c **** 					updated. */
4188:..\FreeRTOS/tasks.c **** 					break;
4189:..\FreeRTOS/tasks.c **** 			}
4190:..\FreeRTOS/tasks.c **** 
4191:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4192:..\FreeRTOS/tasks.c **** 
4193:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4194:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4195:..\FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3619              		.loc 1 4195 0
 3620 0058 012B     		cmp	r3, #1
 3621 005a 1DD1     		bne	.L340
4196:..\FreeRTOS/tasks.c **** 			{
4197:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3622              		.loc 1 4197 0
 3623 005c 271D     		adds	r7, r4, #4
 3624 005e 3846     		mov	r0, r7
 3625 0060 FFF7FEFF 		bl	uxListRemove
 3626              	.LVL366:
4198:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3627              		.loc 1 4198 0
 3628 0064 E36A     		ldr	r3, [r4, #44]
 3629 0066 0122     		movs	r2, #1
 3630 0068 9A40     		lsls	r2, r2, r3
 3631 006a 0D4E     		ldr	r6, .L344
 3632              	.LVL367:
 3633 006c D6F8E810 		ldr	r1, [r6, #232]
 3634 0070 0A43     		orrs	r2, r2, r1
 3635 0072 C6F8E820 		str	r2, [r6, #232]
 3636 0076 06F13000 		add	r0, r6, #48
 3637 007a 03EB8303 		add	r3, r3, r3, lsl #2
 3638 007e 9B00     		lsls	r3, r3, #2
 3639 0080 1844     		add	r0, r0, r3
 3640 0082 3946     		mov	r1, r7
 3641 0084 FFF7FEFF 		bl	vListInsertEnd
 3642              	.LVL368:
4199:..\FreeRTOS/tasks.c **** 
4200:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4201:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4202:..\FreeRTOS/tasks.c **** 
4203:..\FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 149


4204:..\FreeRTOS/tasks.c **** 				{
4205:..\FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4206:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4207:..\FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4208:..\FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4209:..\FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4210:..\FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4211:..\FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4212:..\FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4213:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4214:..\FreeRTOS/tasks.c **** 					earliest possible time. */
4215:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4216:..\FreeRTOS/tasks.c **** 				}
4217:..\FreeRTOS/tasks.c **** 				#endif
4218:..\FreeRTOS/tasks.c **** 
4219:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3643              		.loc 1 4219 0
 3644 0088 E26A     		ldr	r2, [r4, #44]
 3645 008a D6F8D430 		ldr	r3, [r6, #212]
 3646 008e DB6A     		ldr	r3, [r3, #44]
 3647 0090 9A42     		cmp	r2, r3
 3648 0092 01D9     		bls	.L340
4220:..\FreeRTOS/tasks.c **** 				{
4221:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4222:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4223:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3649              		.loc 1 4223 0
 3650 0094 FFF7FEFF 		bl	vPortYield
 3651              	.LVL369:
 3652              	.L340:
4224:..\FreeRTOS/tasks.c **** 				}
4225:..\FreeRTOS/tasks.c **** 				else
4226:..\FreeRTOS/tasks.c **** 				{
4227:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4228:..\FreeRTOS/tasks.c **** 				}
4229:..\FreeRTOS/tasks.c **** 			}
4230:..\FreeRTOS/tasks.c **** 			else
4231:..\FreeRTOS/tasks.c **** 			{
4232:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4233:..\FreeRTOS/tasks.c **** 			}
4234:..\FreeRTOS/tasks.c **** 		}
4235:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3653              		.loc 1 4235 0
 3654 0098 FFF7FEFF 		bl	vPortExitCritical
 3655              	.LVL370:
4236:..\FreeRTOS/tasks.c **** 
4237:..\FreeRTOS/tasks.c **** 		return xReturn;
4238:..\FreeRTOS/tasks.c **** 	}
 3656              		.loc 1 4238 0
 3657 009c 2846     		mov	r0, r5
 3658 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3659              	.LVL371:
 3660              	.L345:
 3661              		.align	2
 3662              	.L344:
 3663 00a0 00000000 		.word	.LANCHOR0
 3664              		.cfi_endproc
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 150


 3665              	.LFE109:
 3666              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3667              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3668              		.align	2
 3669              		.global	xTaskGenericNotifyFromISR
 3670              		.thumb
 3671              		.thumb_func
 3672              		.type	xTaskGenericNotifyFromISR, %function
 3673              	xTaskGenericNotifyFromISR:
 3674              	.LFB110:
4239:..\FreeRTOS/tasks.c **** 
4240:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4241:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4242:..\FreeRTOS/tasks.c **** 
4243:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4244:..\FreeRTOS/tasks.c **** 
4245:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4246:..\FreeRTOS/tasks.c **** 	{
 3675              		.loc 1 4246 0
 3676              		.cfi_startproc
 3677              		@ args = 4, pretend = 0, frame = 0
 3678              		@ frame_needed = 0, uses_anonymous_args = 0
 3679              	.LVL372:
 3680 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3681              		.cfi_def_cfa_offset 24
 3682              		.cfi_offset 4, -24
 3683              		.cfi_offset 5, -20
 3684              		.cfi_offset 6, -16
 3685              		.cfi_offset 7, -12
 3686              		.cfi_offset 8, -8
 3687              		.cfi_offset 14, -4
 3688 0004 0446     		mov	r4, r0
 3689 0006 8846     		mov	r8, r1
 3690 0008 1546     		mov	r5, r2
 3691 000a 1E46     		mov	r6, r3
 3692              	.LVL373:
4247:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4248:..\FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4249:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4250:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4251:..\FreeRTOS/tasks.c **** 
4252:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4253:..\FreeRTOS/tasks.c **** 
4254:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4255:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4256:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4257:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4258:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4259:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4260:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4261:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4262:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4263:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4264:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4265:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4266:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4267:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 151


4268:..\FreeRTOS/tasks.c **** 		provided on the following link:
4269:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4270:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4271:..\FreeRTOS/tasks.c **** 
4272:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4273:..\FreeRTOS/tasks.c **** 
4274:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3693              		.loc 1 4274 0
 3694 000c FFF7FEFF 		bl	ulPortSetInterruptMask
 3695              	.LVL374:
 3696 0010 0746     		mov	r7, r0
 3697              	.LVL375:
4275:..\FreeRTOS/tasks.c **** 		{
4276:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 3698              		.loc 1 4276 0
 3699 0012 0EB1     		cbz	r6, .L347
4277:..\FreeRTOS/tasks.c **** 			{
4278:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 3700              		.loc 1 4278 0
 3701 0014 A36C     		ldr	r3, [r4, #72]
 3702 0016 3360     		str	r3, [r6]
 3703              	.L347:
4279:..\FreeRTOS/tasks.c **** 			}
4280:..\FreeRTOS/tasks.c **** 
4281:..\FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 3704              		.loc 1 4281 0
 3705 0018 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3706 001c DBB2     		uxtb	r3, r3
 3707              	.LVL376:
4282:..\FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3708              		.loc 1 4282 0
 3709 001e 0222     		movs	r2, #2
 3710 0020 84F84C20 		strb	r2, [r4, #76]
4283:..\FreeRTOS/tasks.c **** 
4284:..\FreeRTOS/tasks.c **** 			switch( eAction )
 3711              		.loc 1 4284 0
 3712 0024 6A1E     		subs	r2, r5, #1
 3713 0026 032A     		cmp	r2, #3
 3714 0028 18D8     		bhi	.L357
 3715 002a DFE802F0 		tbb	[pc, r2]
 3716              	.L350:
 3717 002e 02       		.byte	(.L349-.L350)/2
 3718 002f 08       		.byte	(.L351-.L350)/2
 3719 0030 0D       		.byte	(.L352-.L350)/2
 3720 0031 11       		.byte	(.L353-.L350)/2
 3721              		.p2align 1
 3722              	.L349:
4285:..\FreeRTOS/tasks.c **** 			{
4286:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4287:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 3723              		.loc 1 4287 0
 3724 0032 A26C     		ldr	r2, [r4, #72]
 3725 0034 42EA0802 		orr	r2, r2, r8
 3726 0038 A264     		str	r2, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3727              		.loc 1 4249 0
 3728 003a 0125     		movs	r5, #1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 152


4288:..\FreeRTOS/tasks.c **** 					break;
 3729              		.loc 1 4288 0
 3730 003c 11E0     		b	.L348
 3731              	.L351:
4289:..\FreeRTOS/tasks.c **** 
4290:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4291:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 3732              		.loc 1 4291 0
 3733 003e A26C     		ldr	r2, [r4, #72]
 3734 0040 0132     		adds	r2, r2, #1
 3735 0042 A264     		str	r2, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3736              		.loc 1 4249 0
 3737 0044 0125     		movs	r5, #1
4292:..\FreeRTOS/tasks.c **** 					break;
 3738              		.loc 1 4292 0
 3739 0046 0CE0     		b	.L348
 3740              	.L352:
4293:..\FreeRTOS/tasks.c **** 
4294:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4295:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 3741              		.loc 1 4295 0
 3742 0048 C4F84880 		str	r8, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3743              		.loc 1 4249 0
 3744 004c 0125     		movs	r5, #1
4296:..\FreeRTOS/tasks.c **** 					break;
 3745              		.loc 1 4296 0
 3746 004e 08E0     		b	.L348
 3747              	.L353:
4297:..\FreeRTOS/tasks.c **** 
4298:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4299:..\FreeRTOS/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 3748              		.loc 1 4299 0
 3749 0050 022B     		cmp	r3, #2
 3750 0052 05D0     		beq	.L358
4300:..\FreeRTOS/tasks.c **** 					{
4301:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 3751              		.loc 1 4301 0
 3752 0054 C4F84880 		str	r8, [r4, #72]
4249:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3753              		.loc 1 4249 0
 3754 0058 0125     		movs	r5, #1
 3755 005a 02E0     		b	.L348
 3756              	.L357:
 3757 005c 0125     		movs	r5, #1
 3758 005e 00E0     		b	.L348
 3759              	.L358:
4302:..\FreeRTOS/tasks.c **** 					}
4303:..\FreeRTOS/tasks.c **** 					else
4304:..\FreeRTOS/tasks.c **** 					{
4305:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4306:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
 3760              		.loc 1 4306 0
 3761 0060 0025     		movs	r5, #0
 3762              	.L348:
 3763              	.LVL377:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 153


4307:..\FreeRTOS/tasks.c **** 					}
4308:..\FreeRTOS/tasks.c **** 					break;
4309:..\FreeRTOS/tasks.c **** 
4310:..\FreeRTOS/tasks.c **** 				case eNoAction :
4311:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4312:..\FreeRTOS/tasks.c **** 					updated. */
4313:..\FreeRTOS/tasks.c **** 					break;
4314:..\FreeRTOS/tasks.c **** 			}
4315:..\FreeRTOS/tasks.c **** 
4316:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4317:..\FreeRTOS/tasks.c **** 
4318:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4319:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4320:..\FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3764              		.loc 1 4320 0
 3765 0062 012B     		cmp	r3, #1
 3766 0064 2AD1     		bne	.L354
4321:..\FreeRTOS/tasks.c **** 			{
4322:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4323:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4324:..\FreeRTOS/tasks.c **** 
4325:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3767              		.loc 1 4325 0
 3768 0066 184B     		ldr	r3, .L360
 3769              	.LVL378:
 3770 0068 D3F8F030 		ldr	r3, [r3, #240]
 3771 006c ABB9     		cbnz	r3, .L355
4326:..\FreeRTOS/tasks.c **** 				{
4327:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3772              		.loc 1 4327 0
 3773 006e 261D     		adds	r6, r4, #4
 3774              	.LVL379:
 3775 0070 3046     		mov	r0, r6
 3776              	.LVL380:
 3777 0072 FFF7FEFF 		bl	uxListRemove
 3778              	.LVL381:
4328:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3779              		.loc 1 4328 0
 3780 0076 E36A     		ldr	r3, [r4, #44]
 3781 0078 0122     		movs	r2, #1
 3782 007a 9A40     		lsls	r2, r2, r3
 3783 007c 1248     		ldr	r0, .L360
 3784 007e D0F8E810 		ldr	r1, [r0, #232]
 3785 0082 0A43     		orrs	r2, r2, r1
 3786 0084 C0F8E820 		str	r2, [r0, #232]
 3787 0088 3030     		adds	r0, r0, #48
 3788 008a 03EB8303 		add	r3, r3, r3, lsl #2
 3789 008e 9B00     		lsls	r3, r3, #2
 3790 0090 1844     		add	r0, r0, r3
 3791 0092 3146     		mov	r1, r6
 3792 0094 FFF7FEFF 		bl	vListInsertEnd
 3793              	.LVL382:
 3794 0098 04E0     		b	.L356
 3795              	.LVL383:
 3796              	.L355:
4329:..\FreeRTOS/tasks.c **** 				}
4330:..\FreeRTOS/tasks.c **** 				else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 154


4331:..\FreeRTOS/tasks.c **** 				{
4332:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4333:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4334:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 3797              		.loc 1 4334 0
 3798 009a 0C48     		ldr	r0, .L360+4
 3799              	.LVL384:
 3800 009c 04F11801 		add	r1, r4, #24
 3801 00a0 FFF7FEFF 		bl	vListInsertEnd
 3802              	.LVL385:
 3803              	.L356:
4335:..\FreeRTOS/tasks.c **** 				}
4336:..\FreeRTOS/tasks.c **** 
4337:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3804              		.loc 1 4337 0
 3805 00a4 E26A     		ldr	r2, [r4, #44]
 3806 00a6 084B     		ldr	r3, .L360
 3807 00a8 D3F8D430 		ldr	r3, [r3, #212]
 3808 00ac DB6A     		ldr	r3, [r3, #44]
 3809 00ae 9A42     		cmp	r2, r3
 3810 00b0 04D9     		bls	.L354
4338:..\FreeRTOS/tasks.c **** 				{
4339:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4340:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4341:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 3811              		.loc 1 4341 0
 3812 00b2 069B     		ldr	r3, [sp, #24]
 3813 00b4 13B1     		cbz	r3, .L354
4342:..\FreeRTOS/tasks.c **** 					{
4343:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 3814              		.loc 1 4343 0
 3815 00b6 0123     		movs	r3, #1
 3816 00b8 069A     		ldr	r2, [sp, #24]
 3817 00ba 1360     		str	r3, [r2]
 3818              	.L354:
4344:..\FreeRTOS/tasks.c **** 					}
4345:..\FreeRTOS/tasks.c **** 				}
4346:..\FreeRTOS/tasks.c **** 				else
4347:..\FreeRTOS/tasks.c **** 				{
4348:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4349:..\FreeRTOS/tasks.c **** 				}
4350:..\FreeRTOS/tasks.c **** 			}
4351:..\FreeRTOS/tasks.c **** 		}
4352:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 3819              		.loc 1 4352 0
 3820 00bc 3846     		mov	r0, r7
 3821 00be FFF7FEFF 		bl	vPortClearInterruptMask
 3822              	.LVL386:
4353:..\FreeRTOS/tasks.c **** 
4354:..\FreeRTOS/tasks.c **** 		return xReturn;
4355:..\FreeRTOS/tasks.c **** 	}
 3823              		.loc 1 4355 0
 3824 00c2 2846     		mov	r0, r5
 3825 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3826              	.LVL387:
 3827              	.L361:
 3828              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 155


 3829              	.L360:
 3830 00c8 00000000 		.word	.LANCHOR0
 3831 00cc 14000000 		.word	.LANCHOR0+20
 3832              		.cfi_endproc
 3833              	.LFE110:
 3834              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 3835              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 3836              		.align	2
 3837              		.global	vTaskNotifyGiveFromISR
 3838              		.thumb
 3839              		.thumb_func
 3840              		.type	vTaskNotifyGiveFromISR, %function
 3841              	vTaskNotifyGiveFromISR:
 3842              	.LFB111:
4356:..\FreeRTOS/tasks.c **** 
4357:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4358:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4359:..\FreeRTOS/tasks.c **** 
4360:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4361:..\FreeRTOS/tasks.c **** 
4362:..\FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4363:..\FreeRTOS/tasks.c **** 	{
 3843              		.loc 1 4363 0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
 3847              	.LVL388:
 3848 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3849              		.cfi_def_cfa_offset 24
 3850              		.cfi_offset 3, -24
 3851              		.cfi_offset 4, -20
 3852              		.cfi_offset 5, -16
 3853              		.cfi_offset 6, -12
 3854              		.cfi_offset 7, -8
 3855              		.cfi_offset 14, -4
 3856 0002 0446     		mov	r4, r0
 3857 0004 0E46     		mov	r6, r1
 3858              	.LVL389:
4364:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4365:..\FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4366:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4367:..\FreeRTOS/tasks.c **** 
4368:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4369:..\FreeRTOS/tasks.c **** 
4370:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4371:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4372:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4373:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4374:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4375:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4376:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4377:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4378:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4379:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4380:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4381:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4382:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 156


4383:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4384:..\FreeRTOS/tasks.c **** 		provided on the following link:
4385:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4386:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4387:..\FreeRTOS/tasks.c **** 
4388:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4389:..\FreeRTOS/tasks.c **** 
4390:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3859              		.loc 1 4390 0
 3860 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 3861              	.LVL390:
 3862 000a 0546     		mov	r5, r0
 3863              	.LVL391:
4391:..\FreeRTOS/tasks.c **** 		{
4392:..\FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 3864              		.loc 1 4392 0
 3865 000c 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3866 0010 DBB2     		uxtb	r3, r3
 3867              	.LVL392:
4393:..\FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3868              		.loc 1 4393 0
 3869 0012 0222     		movs	r2, #2
 3870 0014 84F84C20 		strb	r2, [r4, #76]
4394:..\FreeRTOS/tasks.c **** 
4395:..\FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4396:..\FreeRTOS/tasks.c **** 			semaphore. */
4397:..\FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 3871              		.loc 1 4397 0
 3872 0018 A26C     		ldr	r2, [r4, #72]
 3873 001a 0132     		adds	r2, r2, #1
 3874 001c A264     		str	r2, [r4, #72]
4398:..\FreeRTOS/tasks.c **** 
4399:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4400:..\FreeRTOS/tasks.c **** 
4401:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4402:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4403:..\FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3875              		.loc 1 4403 0
 3876 001e 012B     		cmp	r3, #1
 3877 0020 28D1     		bne	.L363
4404:..\FreeRTOS/tasks.c **** 			{
4405:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4406:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4407:..\FreeRTOS/tasks.c **** 
4408:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3878              		.loc 1 4408 0
 3879 0022 164B     		ldr	r3, .L367
 3880              	.LVL393:
 3881 0024 D3F8F030 		ldr	r3, [r3, #240]
 3882 0028 ABB9     		cbnz	r3, .L364
4409:..\FreeRTOS/tasks.c **** 				{
4410:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3883              		.loc 1 4410 0
 3884 002a 271D     		adds	r7, r4, #4
 3885 002c 3846     		mov	r0, r7
 3886              	.LVL394:
 3887 002e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 157


 3888              	.LVL395:
4411:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3889              		.loc 1 4411 0
 3890 0032 E36A     		ldr	r3, [r4, #44]
 3891 0034 0122     		movs	r2, #1
 3892 0036 9A40     		lsls	r2, r2, r3
 3893 0038 1048     		ldr	r0, .L367
 3894 003a D0F8E810 		ldr	r1, [r0, #232]
 3895 003e 0A43     		orrs	r2, r2, r1
 3896 0040 C0F8E820 		str	r2, [r0, #232]
 3897 0044 3030     		adds	r0, r0, #48
 3898 0046 03EB8303 		add	r3, r3, r3, lsl #2
 3899 004a 9B00     		lsls	r3, r3, #2
 3900 004c 1844     		add	r0, r0, r3
 3901 004e 3946     		mov	r1, r7
 3902 0050 FFF7FEFF 		bl	vListInsertEnd
 3903              	.LVL396:
 3904 0054 04E0     		b	.L365
 3905              	.LVL397:
 3906              	.L364:
4412:..\FreeRTOS/tasks.c **** 				}
4413:..\FreeRTOS/tasks.c **** 				else
4414:..\FreeRTOS/tasks.c **** 				{
4415:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4416:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4417:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 3907              		.loc 1 4417 0
 3908 0056 0A48     		ldr	r0, .L367+4
 3909              	.LVL398:
 3910 0058 04F11801 		add	r1, r4, #24
 3911 005c FFF7FEFF 		bl	vListInsertEnd
 3912              	.LVL399:
 3913              	.L365:
4418:..\FreeRTOS/tasks.c **** 				}
4419:..\FreeRTOS/tasks.c **** 
4420:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3914              		.loc 1 4420 0
 3915 0060 E26A     		ldr	r2, [r4, #44]
 3916 0062 064B     		ldr	r3, .L367
 3917 0064 D3F8D430 		ldr	r3, [r3, #212]
 3918 0068 DB6A     		ldr	r3, [r3, #44]
 3919 006a 9A42     		cmp	r2, r3
 3920 006c 02D9     		bls	.L363
4421:..\FreeRTOS/tasks.c **** 				{
4422:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4423:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4424:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 3921              		.loc 1 4424 0
 3922 006e 0EB1     		cbz	r6, .L363
4425:..\FreeRTOS/tasks.c **** 					{
4426:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 3923              		.loc 1 4426 0
 3924 0070 0123     		movs	r3, #1
 3925 0072 3360     		str	r3, [r6]
 3926              	.L363:
4427:..\FreeRTOS/tasks.c **** 					}
4428:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 158


4429:..\FreeRTOS/tasks.c **** 				else
4430:..\FreeRTOS/tasks.c **** 				{
4431:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:..\FreeRTOS/tasks.c **** 				}
4433:..\FreeRTOS/tasks.c **** 			}
4434:..\FreeRTOS/tasks.c **** 		}
4435:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 3927              		.loc 1 4435 0
 3928 0074 2846     		mov	r0, r5
 3929 0076 FFF7FEFF 		bl	vPortClearInterruptMask
 3930              	.LVL400:
 3931 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3932              	.LVL401:
 3933              	.L368:
 3934              		.align	2
 3935              	.L367:
 3936 007c 00000000 		.word	.LANCHOR0
 3937 0080 14000000 		.word	.LANCHOR0+20
 3938              		.cfi_endproc
 3939              	.LFE111:
 3940              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 3941              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 3942              		.align	2
 3943              		.global	xTaskNotifyStateClear
 3944              		.thumb
 3945              		.thumb_func
 3946              		.type	xTaskNotifyStateClear, %function
 3947              	xTaskNotifyStateClear:
 3948              	.LFB112:
4436:..\FreeRTOS/tasks.c **** 	}
4437:..\FreeRTOS/tasks.c **** 
4438:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4439:..\FreeRTOS/tasks.c **** 
4440:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4441:..\FreeRTOS/tasks.c **** 
4442:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4443:..\FreeRTOS/tasks.c **** 
4444:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4445:..\FreeRTOS/tasks.c **** 	{
 3949              		.loc 1 4445 0
 3950              		.cfi_startproc
 3951              		@ args = 0, pretend = 0, frame = 0
 3952              		@ frame_needed = 0, uses_anonymous_args = 0
 3953              	.LVL402:
 3954 0000 10B5     		push	{r4, lr}
 3955              		.cfi_def_cfa_offset 8
 3956              		.cfi_offset 4, -8
 3957              		.cfi_offset 14, -4
 3958              	.LVL403:
4446:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
4447:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4448:..\FreeRTOS/tasks.c **** 
4449:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
4450:..\FreeRTOS/tasks.c **** 
4451:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4452:..\FreeRTOS/tasks.c **** 		its notification state cleared. */
4453:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 159


 3959              		.loc 1 4453 0
 3960 0002 0446     		mov	r4, r0
 3961 0004 10B9     		cbnz	r0, .L370
 3962              		.loc 1 4453 0 is_stmt 0 discriminator 1
 3963 0006 0A4B     		ldr	r3, .L374
 3964 0008 D3F8D440 		ldr	r4, [r3, #212]
 3965              	.LVL404:
 3966              	.L370:
4454:..\FreeRTOS/tasks.c **** 
4455:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 3967              		.loc 1 4455 0 is_stmt 1 discriminator 4
 3968 000c FFF7FEFF 		bl	vPortEnterCritical
 3969              	.LVL405:
4456:..\FreeRTOS/tasks.c **** 		{
4457:..\FreeRTOS/tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 3970              		.loc 1 4457 0 discriminator 4
 3971 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3972 0014 DBB2     		uxtb	r3, r3
 3973 0016 022B     		cmp	r3, #2
 3974 0018 04D1     		bne	.L372
4458:..\FreeRTOS/tasks.c **** 			{
4459:..\FreeRTOS/tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
 3975              		.loc 1 4459 0
 3976 001a 0023     		movs	r3, #0
 3977 001c 84F84C30 		strb	r3, [r4, #76]
 3978              	.LVL406:
4460:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 3979              		.loc 1 4460 0
 3980 0020 0124     		movs	r4, #1
 3981              	.LVL407:
 3982 0022 00E0     		b	.L371
 3983              	.LVL408:
 3984              	.L372:
4461:..\FreeRTOS/tasks.c **** 			}
4462:..\FreeRTOS/tasks.c **** 			else
4463:..\FreeRTOS/tasks.c **** 			{
4464:..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
 3985              		.loc 1 4464 0
 3986 0024 0024     		movs	r4, #0
 3987              	.LVL409:
 3988              	.L371:
4465:..\FreeRTOS/tasks.c **** 			}
4466:..\FreeRTOS/tasks.c **** 		}
4467:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 3989              		.loc 1 4467 0
 3990 0026 FFF7FEFF 		bl	vPortExitCritical
 3991              	.LVL410:
4468:..\FreeRTOS/tasks.c **** 
4469:..\FreeRTOS/tasks.c **** 		return xReturn;
4470:..\FreeRTOS/tasks.c **** 	}
 3992              		.loc 1 4470 0
 3993 002a 2046     		mov	r0, r4
 3994 002c 10BD     		pop	{r4, pc}
 3995              	.LVL411:
 3996              	.L375:
 3997 002e 00BF     		.align	2
 3998              	.L374:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 160


 3999 0030 00000000 		.word	.LANCHOR0
 4000              		.cfi_endproc
 4001              	.LFE112:
 4002              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4003              		.global	pxCurrentTCB
 4004              		.section	.rodata.str1.4,"aMS",%progbits,1
 4005              		.align	2
 4006              	.LC0:
 4007 0000 49444C45 		.ascii	"IDLE\000"
 4007      00
 4008 0005 000000   		.bss
 4009              		.align	2
 4010              		.set	.LANCHOR0,. + 0
 4011              		.type	xSuspendedTaskList, %object
 4012              		.size	xSuspendedTaskList, 20
 4013              	xSuspendedTaskList:
 4014 0000 00000000 		.space	20
 4014      00000000 
 4014      00000000 
 4014      00000000 
 4014      00000000 
 4015              		.type	xPendingReadyList, %object
 4016              		.size	xPendingReadyList, 20
 4017              	xPendingReadyList:
 4018 0014 00000000 		.space	20
 4018      00000000 
 4018      00000000 
 4018      00000000 
 4018      00000000 
 4019              		.type	pxDelayedTaskList, %object
 4020              		.size	pxDelayedTaskList, 4
 4021              	pxDelayedTaskList:
 4022 0028 00000000 		.space	4
 4023              		.type	xNextTaskUnblockTime, %object
 4024              		.size	xNextTaskUnblockTime, 4
 4025              	xNextTaskUnblockTime:
 4026 002c 00000000 		.space	4
 4027              		.type	pxReadyTasksLists, %object
 4028              		.size	pxReadyTasksLists, 100
 4029              	pxReadyTasksLists:
 4030 0030 00000000 		.space	100
 4030      00000000 
 4030      00000000 
 4030      00000000 
 4030      00000000 
 4031              		.type	xDelayedTaskList1, %object
 4032              		.size	xDelayedTaskList1, 20
 4033              	xDelayedTaskList1:
 4034 0094 00000000 		.space	20
 4034      00000000 
 4034      00000000 
 4034      00000000 
 4034      00000000 
 4035              		.type	xDelayedTaskList2, %object
 4036              		.size	xDelayedTaskList2, 20
 4037              	xDelayedTaskList2:
 4038 00a8 00000000 		.space	20
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 161


 4038      00000000 
 4038      00000000 
 4038      00000000 
 4038      00000000 
 4039              		.type	xTasksWaitingTermination, %object
 4040              		.size	xTasksWaitingTermination, 20
 4041              	xTasksWaitingTermination:
 4042 00bc 00000000 		.space	20
 4042      00000000 
 4042      00000000 
 4042      00000000 
 4042      00000000 
 4043              		.type	pxOverflowDelayedTaskList, %object
 4044              		.size	pxOverflowDelayedTaskList, 4
 4045              	pxOverflowDelayedTaskList:
 4046 00d0 00000000 		.space	4
 4047              		.type	pxCurrentTCB, %object
 4048              		.size	pxCurrentTCB, 4
 4049              	pxCurrentTCB:
 4050 00d4 00000000 		.space	4
 4051              		.type	xTickCount, %object
 4052              		.size	xTickCount, 4
 4053              	xTickCount:
 4054 00d8 00000000 		.space	4
 4055              		.type	uxCurrentNumberOfTasks, %object
 4056              		.size	uxCurrentNumberOfTasks, 4
 4057              	uxCurrentNumberOfTasks:
 4058 00dc 00000000 		.space	4
 4059              		.type	xSchedulerRunning, %object
 4060              		.size	xSchedulerRunning, 4
 4061              	xSchedulerRunning:
 4062 00e0 00000000 		.space	4
 4063              		.type	uxTaskNumber, %object
 4064              		.size	uxTaskNumber, 4
 4065              	uxTaskNumber:
 4066 00e4 00000000 		.space	4
 4067              		.type	uxTopReadyPriority, %object
 4068              		.size	uxTopReadyPriority, 4
 4069              	uxTopReadyPriority:
 4070 00e8 00000000 		.space	4
 4071              		.type	uxTasksDeleted, %object
 4072              		.size	uxTasksDeleted, 4
 4073              	uxTasksDeleted:
 4074 00ec 00000000 		.space	4
 4075              		.type	uxSchedulerSuspended, %object
 4076              		.size	uxSchedulerSuspended, 4
 4077              	uxSchedulerSuspended:
 4078 00f0 00000000 		.space	4
 4079              		.type	xNumOfOverflows, %object
 4080              		.size	xNumOfOverflows, 4
 4081              	xNumOfOverflows:
 4082 00f4 00000000 		.space	4
 4083              		.type	uxPendedTicks, %object
 4084              		.size	uxPendedTicks, 4
 4085              	uxPendedTicks:
 4086 00f8 00000000 		.space	4
 4087              		.type	xYieldPending, %object
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 162


 4088              		.size	xYieldPending, 4
 4089              	xYieldPending:
 4090 00fc 00000000 		.space	4
 4091              		.text
 4092              	.Letext0:
 4093              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 4094              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 4095              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 4096              		.file 6 "..\\FreeRTOS\\projdefs.h"
 4097              		.file 7 "..\\FreeRTOS\\list.h"
 4098              		.file 8 "..\\FreeRTOS\\task.h"
 4099              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 4100              		.file 10 "..\\FreeRTOS\\portable.h"
 4101              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 4102              		.section	.debug_info,"",%progbits
 4103              	.Ldebug_info0:
 4104 0000 FE1E0000 		.4byte	0x1efe
 4105 0004 0400     		.2byte	0x4
 4106 0006 00000000 		.4byte	.Ldebug_abbrev0
 4107 000a 04       		.byte	0x4
 4108 000b 01       		.uleb128 0x1
 4109 000c E80B0000 		.4byte	.LASF225
 4110 0010 01       		.byte	0x1
 4111 0011 19070000 		.4byte	.LASF226
 4112 0015 7F080000 		.4byte	.LASF227
 4113 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4114 001d 00000000 		.4byte	0
 4115 0021 00000000 		.4byte	.Ldebug_line0
 4116 0025 02       		.uleb128 0x2
 4117 0026 2A040000 		.4byte	.LASF2
 4118 002a 03       		.byte	0x3
 4119 002b D4       		.byte	0xd4
 4120 002c 30000000 		.4byte	0x30
 4121 0030 03       		.uleb128 0x3
 4122 0031 04       		.byte	0x4
 4123 0032 07       		.byte	0x7
 4124 0033 F0000000 		.4byte	.LASF0
 4125 0037 04       		.uleb128 0x4
 4126 0038 04       		.byte	0x4
 4127 0039 05       		.byte	0x5
 4128 003a 696E7400 		.ascii	"int\000"
 4129 003e 03       		.uleb128 0x3
 4130 003f 01       		.byte	0x1
 4131 0040 06       		.byte	0x6
 4132 0041 C30D0000 		.4byte	.LASF1
 4133 0045 02       		.uleb128 0x2
 4134 0046 B40A0000 		.4byte	.LASF3
 4135 004a 04       		.byte	0x4
 4136 004b 1D       		.byte	0x1d
 4137 004c 50000000 		.4byte	0x50
 4138 0050 03       		.uleb128 0x3
 4139 0051 01       		.byte	0x1
 4140 0052 08       		.byte	0x8
 4141 0053 8E0B0000 		.4byte	.LASF4
 4142 0057 03       		.uleb128 0x3
 4143 0058 02       		.byte	0x2
 4144 0059 05       		.byte	0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 163


 4145 005a 72090000 		.4byte	.LASF5
 4146 005e 02       		.uleb128 0x2
 4147 005f 9D030000 		.4byte	.LASF6
 4148 0063 04       		.byte	0x4
 4149 0064 2B       		.byte	0x2b
 4150 0065 69000000 		.4byte	0x69
 4151 0069 03       		.uleb128 0x3
 4152 006a 02       		.byte	0x2
 4153 006b 07       		.byte	0x7
 4154 006c CF0D0000 		.4byte	.LASF7
 4155 0070 02       		.uleb128 0x2
 4156 0071 4E010000 		.4byte	.LASF8
 4157 0075 04       		.byte	0x4
 4158 0076 3F       		.byte	0x3f
 4159 0077 7B000000 		.4byte	0x7b
 4160 007b 03       		.uleb128 0x3
 4161 007c 04       		.byte	0x4
 4162 007d 05       		.byte	0x5
 4163 007e A8090000 		.4byte	.LASF9
 4164 0082 02       		.uleb128 0x2
 4165 0083 DD0B0000 		.4byte	.LASF10
 4166 0087 04       		.byte	0x4
 4167 0088 41       		.byte	0x41
 4168 0089 8D000000 		.4byte	0x8d
 4169 008d 03       		.uleb128 0x3
 4170 008e 04       		.byte	0x4
 4171 008f 07       		.byte	0x7
 4172 0090 240B0000 		.4byte	.LASF11
 4173 0094 03       		.uleb128 0x3
 4174 0095 08       		.byte	0x8
 4175 0096 05       		.byte	0x5
 4176 0097 88060000 		.4byte	.LASF12
 4177 009b 03       		.uleb128 0x3
 4178 009c 08       		.byte	0x8
 4179 009d 07       		.byte	0x7
 4180 009e 0C030000 		.4byte	.LASF13
 4181 00a2 03       		.uleb128 0x3
 4182 00a3 04       		.byte	0x4
 4183 00a4 07       		.byte	0x7
 4184 00a5 FC0A0000 		.4byte	.LASF14
 4185 00a9 05       		.uleb128 0x5
 4186 00aa 04       		.byte	0x4
 4187 00ab 06       		.uleb128 0x6
 4188 00ac 04       		.byte	0x4
 4189 00ad B1000000 		.4byte	0xb1
 4190 00b1 03       		.uleb128 0x3
 4191 00b2 01       		.byte	0x1
 4192 00b3 08       		.byte	0x8
 4193 00b4 71050000 		.4byte	.LASF15
 4194 00b8 06       		.uleb128 0x6
 4195 00b9 04       		.byte	0x4
 4196 00ba BE000000 		.4byte	0xbe
 4197 00be 07       		.uleb128 0x7
 4198 00bf B1000000 		.4byte	0xb1
 4199 00c3 02       		.uleb128 0x2
 4200 00c4 1D060000 		.4byte	.LASF16
 4201 00c8 05       		.byte	0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 164


 4202 00c9 15       		.byte	0x15
 4203 00ca 45000000 		.4byte	0x45
 4204 00ce 02       		.uleb128 0x2
 4205 00cf F0080000 		.4byte	.LASF17
 4206 00d3 05       		.byte	0x5
 4207 00d4 21       		.byte	0x21
 4208 00d5 5E000000 		.4byte	0x5e
 4209 00d9 02       		.uleb128 0x2
 4210 00da 440B0000 		.4byte	.LASF18
 4211 00de 05       		.byte	0x5
 4212 00df 2C       		.byte	0x2c
 4213 00e0 70000000 		.4byte	0x70
 4214 00e4 02       		.uleb128 0x2
 4215 00e5 89020000 		.4byte	.LASF19
 4216 00e9 05       		.byte	0x5
 4217 00ea 2D       		.byte	0x2d
 4218 00eb 82000000 		.4byte	0x82
 4219 00ef 03       		.uleb128 0x3
 4220 00f0 04       		.byte	0x4
 4221 00f1 04       		.byte	0x4
 4222 00f2 C1020000 		.4byte	.LASF20
 4223 00f6 03       		.uleb128 0x3
 4224 00f7 08       		.byte	0x8
 4225 00f8 04       		.byte	0x4
 4226 00f9 0A0E0000 		.4byte	.LASF21
 4227 00fd 08       		.uleb128 0x8
 4228 00fe E4000000 		.4byte	0xe4
 4229 0102 02       		.uleb128 0x2
 4230 0103 2D070000 		.4byte	.LASF22
 4231 0107 06       		.byte	0x6
 4232 0108 4D       		.byte	0x4d
 4233 0109 0D010000 		.4byte	0x10d
 4234 010d 06       		.uleb128 0x6
 4235 010e 04       		.byte	0x4
 4236 010f 13010000 		.4byte	0x113
 4237 0113 09       		.uleb128 0x9
 4238 0114 1E010000 		.4byte	0x11e
 4239 0118 0A       		.uleb128 0xa
 4240 0119 A9000000 		.4byte	0xa9
 4241 011d 00       		.byte	0
 4242 011e 02       		.uleb128 0x2
 4243 011f 38010000 		.4byte	.LASF23
 4244 0123 02       		.byte	0x2
 4245 0124 61       		.byte	0x61
 4246 0125 E4000000 		.4byte	0xe4
 4247 0129 02       		.uleb128 0x2
 4248 012a C7060000 		.4byte	.LASF24
 4249 012e 02       		.byte	0x2
 4250 012f 62       		.byte	0x62
 4251 0130 7B000000 		.4byte	0x7b
 4252 0134 02       		.uleb128 0x2
 4253 0135 AB050000 		.4byte	.LASF25
 4254 0139 02       		.byte	0x2
 4255 013a 63       		.byte	0x63
 4256 013b 8D000000 		.4byte	0x8d
 4257 013f 02       		.uleb128 0x2
 4258 0140 2B080000 		.4byte	.LASF26
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 165


 4259 0144 02       		.byte	0x2
 4260 0145 69       		.byte	0x69
 4261 0146 E4000000 		.4byte	0xe4
 4262 014a 06       		.uleb128 0x6
 4263 014b 04       		.byte	0x4
 4264 014c C3000000 		.4byte	0xc3
 4265 0150 0B       		.uleb128 0xb
 4266 0151 58010000 		.4byte	.LASF33
 4267 0155 14       		.byte	0x14
 4268 0156 07       		.byte	0x7
 4269 0157 B5       		.byte	0xb5
 4270 0158 99010000 		.4byte	0x199
 4271 015c 0C       		.uleb128 0xc
 4272 015d 9D090000 		.4byte	.LASF27
 4273 0161 07       		.byte	0x7
 4274 0162 B8       		.byte	0xb8
 4275 0163 3F010000 		.4byte	0x13f
 4276 0167 00       		.byte	0
 4277 0168 0C       		.uleb128 0xc
 4278 0169 3C070000 		.4byte	.LASF28
 4279 016d 07       		.byte	0x7
 4280 016e B9       		.byte	0xb9
 4281 016f 99010000 		.4byte	0x199
 4282 0173 04       		.byte	0x4
 4283 0174 0C       		.uleb128 0xc
 4284 0175 79030000 		.4byte	.LASF29
 4285 0179 07       		.byte	0x7
 4286 017a BA       		.byte	0xba
 4287 017b 99010000 		.4byte	0x199
 4288 017f 08       		.byte	0x8
 4289 0180 0C       		.uleb128 0xc
 4290 0181 050D0000 		.4byte	.LASF30
 4291 0185 07       		.byte	0x7
 4292 0186 BB       		.byte	0xbb
 4293 0187 A9000000 		.4byte	0xa9
 4294 018b 0C       		.byte	0xc
 4295 018c 0C       		.uleb128 0xc
 4296 018d 3B090000 		.4byte	.LASF31
 4297 0191 07       		.byte	0x7
 4298 0192 BC       		.byte	0xbc
 4299 0193 A9000000 		.4byte	0xa9
 4300 0197 10       		.byte	0x10
 4301 0198 00       		.byte	0
 4302 0199 06       		.uleb128 0x6
 4303 019a 04       		.byte	0x4
 4304 019b 50010000 		.4byte	0x150
 4305 019f 02       		.uleb128 0x2
 4306 01a0 76050000 		.4byte	.LASF32
 4307 01a4 07       		.byte	0x7
 4308 01a5 BF       		.byte	0xbf
 4309 01a6 50010000 		.4byte	0x150
 4310 01aa 0B       		.uleb128 0xb
 4311 01ab 3C040000 		.4byte	.LASF34
 4312 01af 0C       		.byte	0xc
 4313 01b0 07       		.byte	0x7
 4314 01b1 C1       		.byte	0xc1
 4315 01b2 DB010000 		.4byte	0x1db
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 166


 4316 01b6 0C       		.uleb128 0xc
 4317 01b7 9D090000 		.4byte	.LASF27
 4318 01bb 07       		.byte	0x7
 4319 01bc C4       		.byte	0xc4
 4320 01bd 3F010000 		.4byte	0x13f
 4321 01c1 00       		.byte	0
 4322 01c2 0C       		.uleb128 0xc
 4323 01c3 3C070000 		.4byte	.LASF28
 4324 01c7 07       		.byte	0x7
 4325 01c8 C5       		.byte	0xc5
 4326 01c9 99010000 		.4byte	0x199
 4327 01cd 04       		.byte	0x4
 4328 01ce 0C       		.uleb128 0xc
 4329 01cf 79030000 		.4byte	.LASF29
 4330 01d3 07       		.byte	0x7
 4331 01d4 C6       		.byte	0xc6
 4332 01d5 99010000 		.4byte	0x199
 4333 01d9 08       		.byte	0x8
 4334 01da 00       		.byte	0
 4335 01db 02       		.uleb128 0x2
 4336 01dc 0E060000 		.4byte	.LASF35
 4337 01e0 07       		.byte	0x7
 4338 01e1 C8       		.byte	0xc8
 4339 01e2 AA010000 		.4byte	0x1aa
 4340 01e6 0B       		.uleb128 0xb
 4341 01e7 66040000 		.4byte	.LASF36
 4342 01eb 14       		.byte	0x14
 4343 01ec 07       		.byte	0x7
 4344 01ed CD       		.byte	0xcd
 4345 01ee 17020000 		.4byte	0x217
 4346 01f2 0C       		.uleb128 0xc
 4347 01f3 0B000000 		.4byte	.LASF37
 4348 01f7 07       		.byte	0x7
 4349 01f8 D0       		.byte	0xd0
 4350 01f9 34010000 		.4byte	0x134
 4351 01fd 00       		.byte	0
 4352 01fe 0C       		.uleb128 0xc
 4353 01ff 1B010000 		.4byte	.LASF38
 4354 0203 07       		.byte	0x7
 4355 0204 D1       		.byte	0xd1
 4356 0205 17020000 		.4byte	0x217
 4357 0209 04       		.byte	0x4
 4358 020a 0C       		.uleb128 0xc
 4359 020b D0050000 		.4byte	.LASF39
 4360 020f 07       		.byte	0x7
 4361 0210 D2       		.byte	0xd2
 4362 0211 DB010000 		.4byte	0x1db
 4363 0215 08       		.byte	0x8
 4364 0216 00       		.byte	0
 4365 0217 06       		.uleb128 0x6
 4366 0218 04       		.byte	0x4
 4367 0219 9F010000 		.4byte	0x19f
 4368 021d 02       		.uleb128 0x2
 4369 021e 24080000 		.4byte	.LASF40
 4370 0222 07       		.byte	0x7
 4371 0223 D4       		.byte	0xd4
 4372 0224 E6010000 		.4byte	0x1e6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 167


 4373 0228 02       		.uleb128 0x2
 4374 0229 CC070000 		.4byte	.LASF41
 4375 022d 08       		.byte	0x8
 4376 022e 67       		.byte	0x67
 4377 022f A9000000 		.4byte	0xa9
 4378 0233 0D       		.uleb128 0xd
 4379 0234 01       		.byte	0x1
 4380 0235 08       		.byte	0x8
 4381 0236 71       		.byte	0x71
 4382 0237 5A020000 		.4byte	0x25a
 4383 023b 0E       		.uleb128 0xe
 4384 023c 670B0000 		.4byte	.LASF42
 4385 0240 00       		.sleb128 0
 4386 0241 0E       		.uleb128 0xe
 4387 0242 25060000 		.4byte	.LASF43
 4388 0246 01       		.sleb128 1
 4389 0247 0E       		.uleb128 0xe
 4390 0248 1A0D0000 		.4byte	.LASF44
 4391 024c 02       		.sleb128 2
 4392 024d 0E       		.uleb128 0xe
 4393 024e 64000000 		.4byte	.LASF45
 4394 0252 03       		.sleb128 3
 4395 0253 0E       		.uleb128 0xe
 4396 0254 96060000 		.4byte	.LASF46
 4397 0258 04       		.sleb128 4
 4398 0259 00       		.byte	0
 4399 025a 02       		.uleb128 0x2
 4400 025b 0C080000 		.4byte	.LASF47
 4401 025f 08       		.byte	0x8
 4402 0260 77       		.byte	0x77
 4403 0261 33020000 		.4byte	0x233
 4404 0265 0D       		.uleb128 0xd
 4405 0266 01       		.byte	0x1
 4406 0267 08       		.byte	0x8
 4407 0268 7B       		.byte	0x7b
 4408 0269 8C020000 		.4byte	0x28c
 4409 026d 0E       		.uleb128 0xe
 4410 026e D3000000 		.4byte	.LASF48
 4411 0272 00       		.sleb128 0
 4412 0273 0E       		.uleb128 0xe
 4413 0274 4A080000 		.4byte	.LASF49
 4414 0278 01       		.sleb128 1
 4415 0279 0E       		.uleb128 0xe
 4416 027a 31040000 		.4byte	.LASF50
 4417 027e 02       		.sleb128 2
 4418 027f 0E       		.uleb128 0xe
 4419 0280 F5020000 		.4byte	.LASF51
 4420 0284 03       		.sleb128 3
 4421 0285 0E       		.uleb128 0xe
 4422 0286 81050000 		.4byte	.LASF52
 4423 028a 04       		.sleb128 4
 4424 028b 00       		.byte	0
 4425 028c 02       		.uleb128 0x2
 4426 028d 1C040000 		.4byte	.LASF53
 4427 0291 08       		.byte	0x8
 4428 0292 81       		.byte	0x81
 4429 0293 65020000 		.4byte	0x265
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 168


 4430 0297 0B       		.uleb128 0xb
 4431 0298 44010000 		.4byte	.LASF54
 4432 029c 08       		.byte	0x8
 4433 029d 08       		.byte	0x8
 4434 029e 86       		.byte	0x86
 4435 029f BC020000 		.4byte	0x2bc
 4436 02a3 0C       		.uleb128 0xc
 4437 02a4 E8010000 		.4byte	.LASF55
 4438 02a8 08       		.byte	0x8
 4439 02a9 88       		.byte	0x88
 4440 02aa 29010000 		.4byte	0x129
 4441 02ae 00       		.byte	0
 4442 02af 0C       		.uleb128 0xc
 4443 02b0 FB060000 		.4byte	.LASF56
 4444 02b4 08       		.byte	0x8
 4445 02b5 89       		.byte	0x89
 4446 02b6 3F010000 		.4byte	0x13f
 4447 02ba 04       		.byte	0x4
 4448 02bb 00       		.byte	0
 4449 02bc 02       		.uleb128 0x2
 4450 02bd B5070000 		.4byte	.LASF57
 4451 02c1 08       		.byte	0x8
 4452 02c2 8A       		.byte	0x8a
 4453 02c3 97020000 		.4byte	0x297
 4454 02c7 0B       		.uleb128 0xb
 4455 02c8 E1080000 		.4byte	.LASF58
 4456 02cc 0C       		.byte	0xc
 4457 02cd 08       		.byte	0x8
 4458 02ce 8F       		.byte	0x8f
 4459 02cf F8020000 		.4byte	0x2f8
 4460 02d3 0C       		.uleb128 0xc
 4461 02d4 790B0000 		.4byte	.LASF59
 4462 02d8 08       		.byte	0x8
 4463 02d9 91       		.byte	0x91
 4464 02da A9000000 		.4byte	0xa9
 4465 02de 00       		.byte	0
 4466 02df 0C       		.uleb128 0xc
 4467 02e0 B7060000 		.4byte	.LASF60
 4468 02e4 08       		.byte	0x8
 4469 02e5 92       		.byte	0x92
 4470 02e6 E4000000 		.4byte	0xe4
 4471 02ea 04       		.byte	0x4
 4472 02eb 0C       		.uleb128 0xc
 4473 02ec 1B020000 		.4byte	.LASF61
 4474 02f0 08       		.byte	0x8
 4475 02f1 93       		.byte	0x93
 4476 02f2 E4000000 		.4byte	0xe4
 4477 02f6 08       		.byte	0x8
 4478 02f7 00       		.byte	0
 4479 02f8 02       		.uleb128 0x2
 4480 02f9 4E060000 		.4byte	.LASF62
 4481 02fd 08       		.byte	0x8
 4482 02fe 94       		.byte	0x94
 4483 02ff C7020000 		.4byte	0x2c7
 4484 0303 07       		.uleb128 0x7
 4485 0304 B8000000 		.4byte	0xb8
 4486 0308 06       		.uleb128 0x6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 169


 4487 0309 04       		.byte	0x4
 4488 030a 1E010000 		.4byte	0x11e
 4489 030e 0D       		.uleb128 0xd
 4490 030f 01       		.byte	0x1
 4491 0310 01       		.byte	0x1
 4492 0311 7B       		.byte	0x7b
 4493 0312 29030000 		.4byte	0x329
 4494 0316 0E       		.uleb128 0xe
 4495 0317 BE0A0000 		.4byte	.LASF63
 4496 031b 00       		.sleb128 0
 4497 031c 0E       		.uleb128 0xe
 4498 031d 60070000 		.4byte	.LASF64
 4499 0321 01       		.sleb128 1
 4500 0322 0E       		.uleb128 0xe
 4501 0323 75010000 		.4byte	.LASF65
 4502 0327 02       		.sleb128 2
 4503 0328 00       		.byte	0
 4504 0329 02       		.uleb128 0x2
 4505 032a 17080000 		.4byte	.LASF66
 4506 032e 01       		.byte	0x1
 4507 032f 7F       		.byte	0x7f
 4508 0330 0E030000 		.4byte	0x30e
 4509 0334 0B       		.uleb128 0xb
 4510 0335 7A000000 		.4byte	.LASF67
 4511 0339 50       		.byte	0x50
 4512 033a 01       		.byte	0x1
 4513 033b 86       		.byte	0x86
 4514 033c B9030000 		.4byte	0x3b9
 4515 0340 0C       		.uleb128 0xc
 4516 0341 350E0000 		.4byte	.LASF68
 4517 0345 01       		.byte	0x1
 4518 0346 88       		.byte	0x88
 4519 0347 B9030000 		.4byte	0x3b9
 4520 034b 00       		.byte	0
 4521 034c 0C       		.uleb128 0xc
 4522 034d F7010000 		.4byte	.LASF69
 4523 0351 01       		.byte	0x1
 4524 0352 8F       		.byte	0x8f
 4525 0353 9F010000 		.4byte	0x19f
 4526 0357 04       		.byte	0x4
 4527 0358 0C       		.uleb128 0xc
 4528 0359 CD0C0000 		.4byte	.LASF70
 4529 035d 01       		.byte	0x1
 4530 035e 90       		.byte	0x90
 4531 035f 9F010000 		.4byte	0x19f
 4532 0363 18       		.byte	0x18
 4533 0364 0C       		.uleb128 0xc
 4534 0365 41000000 		.4byte	.LASF71
 4535 0369 01       		.byte	0x1
 4536 036a 91       		.byte	0x91
 4537 036b 34010000 		.4byte	0x134
 4538 036f 2C       		.byte	0x2c
 4539 0370 0C       		.uleb128 0xc
 4540 0371 430A0000 		.4byte	.LASF72
 4541 0375 01       		.byte	0x1
 4542 0376 92       		.byte	0x92
 4543 0377 08030000 		.4byte	0x308
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 170


 4544 037b 30       		.byte	0x30
 4545 037c 0C       		.uleb128 0xc
 4546 037d 00000000 		.4byte	.LASF73
 4547 0381 01       		.byte	0x1
 4548 0382 93       		.byte	0x93
 4549 0383 C4030000 		.4byte	0x3c4
 4550 0387 34       		.byte	0x34
 4551 0388 0C       		.uleb128 0xc
 4552 0389 AE0C0000 		.4byte	.LASF74
 4553 038d 01       		.byte	0x1
 4554 038e A3       		.byte	0xa3
 4555 038f 34010000 		.4byte	0x134
 4556 0393 40       		.byte	0x40
 4557 0394 0C       		.uleb128 0xc
 4558 0395 32050000 		.4byte	.LASF75
 4559 0399 01       		.byte	0x1
 4560 039a A4       		.byte	0xa4
 4561 039b 34010000 		.4byte	0x134
 4562 039f 44       		.byte	0x44
 4563 03a0 0C       		.uleb128 0xc
 4564 03a1 22050000 		.4byte	.LASF76
 4565 03a5 01       		.byte	0x1
 4566 03a6 BF       		.byte	0xbf
 4567 03a7 FD000000 		.4byte	0xfd
 4568 03ab 48       		.byte	0x48
 4569 03ac 0C       		.uleb128 0xc
 4570 03ad 5E020000 		.4byte	.LASF77
 4571 03b1 01       		.byte	0x1
 4572 03b2 C0       		.byte	0xc0
 4573 03b3 D4030000 		.4byte	0x3d4
 4574 03b7 4C       		.byte	0x4c
 4575 03b8 00       		.byte	0
 4576 03b9 06       		.uleb128 0x6
 4577 03ba 04       		.byte	0x4
 4578 03bb BF030000 		.4byte	0x3bf
 4579 03bf 08       		.uleb128 0x8
 4580 03c0 1E010000 		.4byte	0x11e
 4581 03c4 0F       		.uleb128 0xf
 4582 03c5 B1000000 		.4byte	0xb1
 4583 03c9 D4030000 		.4byte	0x3d4
 4584 03cd 10       		.uleb128 0x10
 4585 03ce A2000000 		.4byte	0xa2
 4586 03d2 0B       		.byte	0xb
 4587 03d3 00       		.byte	0
 4588 03d4 08       		.uleb128 0x8
 4589 03d5 29030000 		.4byte	0x329
 4590 03d9 02       		.uleb128 0x2
 4591 03da 6B020000 		.4byte	.LASF78
 4592 03de 01       		.byte	0x1
 4593 03df C3       		.byte	0xc3
 4594 03e0 34030000 		.4byte	0x334
 4595 03e4 02       		.uleb128 0x2
 4596 03e5 F20C0000 		.4byte	.LASF79
 4597 03e9 01       		.byte	0x1
 4598 03ea C7       		.byte	0xc7
 4599 03eb D9030000 		.4byte	0x3d9
 4600 03ef 11       		.uleb128 0x11
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 171


 4601 03f0 9F060000 		.4byte	.LASF228
 4602 03f4 02       		.byte	0x2
 4603 03f5 A5       		.byte	0xa5
 4604 03f6 C3000000 		.4byte	0xc3
 4605 03fa 03       		.byte	0x3
 4606 03fb 16040000 		.4byte	0x416
 4607 03ff 12       		.uleb128 0x12
 4608 0400 BB010000 		.4byte	.LASF229
 4609 0404 02       		.byte	0x2
 4610 0405 A5       		.byte	0xa5
 4611 0406 E4000000 		.4byte	0xe4
 4612 040a 13       		.uleb128 0x13
 4613 040b D60A0000 		.4byte	.LASF230
 4614 040f 02       		.byte	0x2
 4615 0410 A7       		.byte	0xa7
 4616 0411 C3000000 		.4byte	0xc3
 4617 0415 00       		.byte	0
 4618 0416 14       		.uleb128 0x14
 4619 0417 0E0A0000 		.4byte	.LASF82
 4620 041b 01       		.byte	0x1
 4621 041c 5D05     		.2byte	0x55d
 4622 041e 29010000 		.4byte	0x129
 4623 0422 00000000 		.4byte	.LFB73
 4624 0426 38000000 		.4byte	.LFE73-.LFB73
 4625 042a 01       		.uleb128 0x1
 4626 042b 9C       		.byte	0x9c
 4627 042c 61040000 		.4byte	0x461
 4628 0430 15       		.uleb128 0x15
 4629 0431 44080000 		.4byte	.LASF84
 4630 0435 01       		.byte	0x1
 4631 0436 5D05     		.2byte	0x55d
 4632 0438 61040000 		.4byte	0x461
 4633 043c 00000000 		.4byte	.LLST0
 4634 0440 16       		.uleb128 0x16
 4635 0441 F40A0000 		.4byte	.LASF80
 4636 0445 01       		.byte	0x1
 4637 0446 5F05     		.2byte	0x55f
 4638 0448 29010000 		.4byte	0x129
 4639 044c 6C000000 		.4byte	.LLST1
 4640 0450 16       		.uleb128 0x16
 4641 0451 040E0000 		.4byte	.LASF81
 4642 0455 01       		.byte	0x1
 4643 0456 6005     		.2byte	0x560
 4644 0458 66040000 		.4byte	0x466
 4645 045c 00000000 		.4byte	.LLST0
 4646 0460 00       		.byte	0
 4647 0461 07       		.uleb128 0x7
 4648 0462 28020000 		.4byte	0x228
 4649 0466 07       		.uleb128 0x7
 4650 0467 6B040000 		.4byte	0x46b
 4651 046b 06       		.uleb128 0x6
 4652 046c 04       		.byte	0x4
 4653 046d 71040000 		.4byte	0x471
 4654 0471 07       		.uleb128 0x7
 4655 0472 E4030000 		.4byte	0x3e4
 4656 0476 14       		.uleb128 0x14
 4657 0477 5A0D0000 		.4byte	.LASF83
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 172


 4658 047b 01       		.byte	0x1
 4659 047c BF0C     		.2byte	0xcbf
 4660 047e CE000000 		.4byte	0xce
 4661 0482 00000000 		.4byte	.LFB98
 4662 0486 14000000 		.4byte	.LFE98-.LFB98
 4663 048a 01       		.uleb128 0x1
 4664 048b 9C       		.byte	0x9c
 4665 048c B1040000 		.4byte	0x4b1
 4666 0490 15       		.uleb128 0x15
 4667 0491 AE010000 		.4byte	.LASF85
 4668 0495 01       		.byte	0x1
 4669 0496 BF0C     		.2byte	0xcbf
 4670 0498 B1040000 		.4byte	0x4b1
 4671 049c 8B000000 		.4byte	.LLST3
 4672 04a0 16       		.uleb128 0x16
 4673 04a1 AD070000 		.4byte	.LASF86
 4674 04a5 01       		.byte	0x1
 4675 04a6 C10C     		.2byte	0xcc1
 4676 04a8 E4000000 		.4byte	0xe4
 4677 04ac A9000000 		.4byte	.LLST4
 4678 04b0 00       		.byte	0
 4679 04b1 06       		.uleb128 0x6
 4680 04b2 04       		.byte	0x4
 4681 04b3 B7040000 		.4byte	0x4b7
 4682 04b7 07       		.uleb128 0x7
 4683 04b8 C3000000 		.4byte	0xc3
 4684 04bc 17       		.uleb128 0x17
 4685 04bd DF060000 		.4byte	.LASF87
 4686 04c1 01       		.byte	0x1
 4687 04c2 130D     		.2byte	0xd13
 4688 04c4 00000000 		.4byte	.LFB101
 4689 04c8 2C000000 		.4byte	.LFE101-.LFB101
 4690 04cc 01       		.uleb128 0x1
 4691 04cd 9C       		.byte	0x9c
 4692 04ce E3040000 		.4byte	0x4e3
 4693 04d2 16       		.uleb128 0x16
 4694 04d3 040E0000 		.4byte	.LASF81
 4695 04d7 01       		.byte	0x1
 4696 04d8 150D     		.2byte	0xd15
 4697 04da E3040000 		.4byte	0x4e3
 4698 04de D7000000 		.4byte	.LLST5
 4699 04e2 00       		.byte	0
 4700 04e3 06       		.uleb128 0x6
 4701 04e4 04       		.byte	0x4
 4702 04e5 E4030000 		.4byte	0x3e4
 4703 04e9 17       		.uleb128 0x17
 4704 04ea 0D0D0000 		.4byte	.LASF88
 4705 04ee 01       		.byte	0x1
 4706 04ef EF0C     		.2byte	0xcef
 4707 04f1 00000000 		.4byte	.LFB100
 4708 04f5 12000000 		.4byte	.LFE100-.LFB100
 4709 04f9 01       		.uleb128 0x1
 4710 04fa 9C       		.byte	0x9c
 4711 04fb 29050000 		.4byte	0x529
 4712 04ff 15       		.uleb128 0x15
 4713 0500 040E0000 		.4byte	.LASF81
 4714 0504 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 173


 4715 0505 EF0C     		.2byte	0xcef
 4716 0507 E3040000 		.4byte	0x4e3
 4717 050b EA000000 		.4byte	.LLST6
 4718 050f 18       		.uleb128 0x18
 4719 0510 0A000000 		.4byte	.LVL18
 4720 0514 DA1D0000 		.4byte	0x1dda
 4721 0518 19       		.uleb128 0x19
 4722 0519 10000000 		.4byte	.LVL19
 4723 051d DA1D0000 		.4byte	0x1dda
 4724 0521 1A       		.uleb128 0x1a
 4725 0522 01       		.uleb128 0x1
 4726 0523 50       		.byte	0x50
 4727 0524 02       		.uleb128 0x2
 4728 0525 74       		.byte	0x74
 4729 0526 00       		.sleb128 0
 4730 0527 00       		.byte	0
 4731 0528 00       		.byte	0
 4732 0529 14       		.uleb128 0x14
 4733 052a 30020000 		.4byte	.LASF89
 4734 052e 01       		.byte	0x1
 4735 052f 1D0C     		.2byte	0xc1d
 4736 0531 E3040000 		.4byte	0x4e3
 4737 0535 00000000 		.4byte	.LFB97
 4738 0539 3A000000 		.4byte	.LFE97-.LFB97
 4739 053d 01       		.uleb128 0x1
 4740 053e 9C       		.byte	0x9c
 4741 053f E2050000 		.4byte	0x5e2
 4742 0543 15       		.uleb128 0x15
 4743 0544 D6020000 		.4byte	.LASF90
 4744 0548 01       		.byte	0x1
 4745 0549 1D0C     		.2byte	0xc1d
 4746 054b E2050000 		.4byte	0x5e2
 4747 054f 08010000 		.4byte	.LLST7
 4748 0553 15       		.uleb128 0x15
 4749 0554 260E0000 		.4byte	.LASF91
 4750 0558 01       		.byte	0x1
 4751 0559 1D0C     		.2byte	0xc1d
 4752 055b E7050000 		.4byte	0x5e7
 4753 055f 29010000 		.4byte	.LLST8
 4754 0563 16       		.uleb128 0x16
 4755 0564 3A060000 		.4byte	.LASF92
 4756 0568 01       		.byte	0x1
 4757 0569 1F0C     		.2byte	0xc1f
 4758 056b E3040000 		.4byte	0x4e3
 4759 056f 55010000 		.4byte	.LLST9
 4760 0573 1B       		.uleb128 0x1b
 4761 0574 04000000 		.4byte	.LBB7
 4762 0578 26000000 		.4byte	.LBE7-.LBB7
 4763 057c C9050000 		.4byte	0x5c9
 4764 0580 1C       		.uleb128 0x1c
 4765 0581 430A0000 		.4byte	.LASF72
 4766 0585 01       		.byte	0x1
 4767 0586 3B0C     		.2byte	0xc3b
 4768 0588 08030000 		.4byte	0x308
 4769 058c 01       		.uleb128 0x1
 4770 058d 54       		.byte	0x54
 4771 058e 1D       		.uleb128 0x1d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 174


 4772 058f 0E000000 		.4byte	.LVL22
 4773 0593 EB1D0000 		.4byte	0x1deb
 4774 0597 A4050000 		.4byte	0x5a4
 4775 059b 1A       		.uleb128 0x1a
 4776 059c 01       		.uleb128 0x1
 4777 059d 50       		.byte	0x50
 4778 059e 04       		.uleb128 0x4
 4779 059f 76       		.byte	0x76
 4780 05a0 00       		.sleb128 0
 4781 05a1 32       		.byte	0x32
 4782 05a2 24       		.byte	0x24
 4783 05a3 00       		.byte	0
 4784 05a4 1D       		.uleb128 0x1d
 4785 05a5 18000000 		.4byte	.LVL24
 4786 05a9 EB1D0000 		.4byte	0x1deb
 4787 05ad B8050000 		.4byte	0x5b8
 4788 05b1 1A       		.uleb128 0x1a
 4789 05b2 01       		.uleb128 0x1
 4790 05b3 50       		.byte	0x50
 4791 05b4 02       		.uleb128 0x2
 4792 05b5 08       		.byte	0x8
 4793 05b6 50       		.byte	0x50
 4794 05b7 00       		.byte	0
 4795 05b8 19       		.uleb128 0x19
 4796 05b9 26000000 		.4byte	.LVL26
 4797 05bd DA1D0000 		.4byte	0x1dda
 4798 05c1 1A       		.uleb128 0x1a
 4799 05c2 01       		.uleb128 0x1
 4800 05c3 50       		.byte	0x50
 4801 05c4 02       		.uleb128 0x2
 4802 05c5 74       		.byte	0x74
 4803 05c6 00       		.sleb128 0
 4804 05c7 00       		.byte	0
 4805 05c8 00       		.byte	0
 4806 05c9 19       		.uleb128 0x19
 4807 05ca 36000000 		.4byte	.LVL29
 4808 05ce 001E0000 		.4byte	0x1e00
 4809 05d2 1A       		.uleb128 0x1a
 4810 05d3 01       		.uleb128 0x1
 4811 05d4 52       		.byte	0x52
 4812 05d5 04       		.uleb128 0x4
 4813 05d6 76       		.byte	0x76
 4814 05d7 00       		.sleb128 0
 4815 05d8 32       		.byte	0x32
 4816 05d9 24       		.byte	0x24
 4817 05da 1A       		.uleb128 0x1a
 4818 05db 01       		.uleb128 0x1
 4819 05dc 51       		.byte	0x51
 4820 05dd 02       		.uleb128 0x2
 4821 05de 08       		.byte	0x8
 4822 05df A5       		.byte	0xa5
 4823 05e0 00       		.byte	0
 4824 05e1 00       		.byte	0
 4825 05e2 07       		.uleb128 0x7
 4826 05e3 CE000000 		.4byte	0xce
 4827 05e7 07       		.uleb128 0x7
 4828 05e8 08030000 		.4byte	0x308
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 175


 4829 05ec 17       		.uleb128 0x17
 4830 05ed 53080000 		.4byte	.LASF93
 4831 05f1 01       		.byte	0x1
 4832 05f2 110B     		.2byte	0xb11
 4833 05f4 00000000 		.4byte	.LFB93
 4834 05f8 50000000 		.4byte	.LFE93-.LFB93
 4835 05fc 01       		.uleb128 0x1
 4836 05fd 9C       		.byte	0x9c
 4837 05fe 84060000 		.4byte	0x684
 4838 0602 15       		.uleb128 0x15
 4839 0603 040E0000 		.4byte	.LASF81
 4840 0607 01       		.byte	0x1
 4841 0608 110B     		.2byte	0xb11
 4842 060a 84060000 		.4byte	0x684
 4843 060e 7E010000 		.4byte	.LLST10
 4844 0612 15       		.uleb128 0x15
 4845 0613 C2040000 		.4byte	.LASF94
 4846 0617 01       		.byte	0x1
 4847 0618 110B     		.2byte	0xb11
 4848 061a 03030000 		.4byte	0x303
 4849 061e 9C010000 		.4byte	.LLST11
 4850 0622 15       		.uleb128 0x15
 4851 0623 41000000 		.4byte	.LASF71
 4852 0627 01       		.byte	0x1
 4853 0628 110B     		.2byte	0xb11
 4854 062a 34010000 		.4byte	0x134
 4855 062e BD010000 		.4byte	.LLST12
 4856 0632 15       		.uleb128 0x15
 4857 0633 750D0000 		.4byte	.LASF95
 4858 0637 01       		.byte	0x1
 4859 0638 110B     		.2byte	0xb11
 4860 063a 89060000 		.4byte	0x689
 4861 063e DB010000 		.4byte	.LLST13
 4862 0642 1E       		.uleb128 0x1e
 4863 0643 D6020000 		.4byte	.LASF90
 4864 0647 01       		.byte	0x1
 4865 0648 110B     		.2byte	0xb11
 4866 064a E2050000 		.4byte	0x5e2
 4867 064e 02       		.uleb128 0x2
 4868 064f 91       		.byte	0x91
 4869 0650 00       		.sleb128 0
 4870 0651 1F       		.uleb128 0x1f
 4871 0652 7800     		.ascii	"x\000"
 4872 0654 01       		.byte	0x1
 4873 0655 130B     		.2byte	0xb13
 4874 0657 34010000 		.4byte	0x134
 4875 065b FC010000 		.4byte	.LLST14
 4876 065f 1D       		.uleb128 0x1d
 4877 0660 36000000 		.4byte	.LVL37
 4878 0664 1F1E0000 		.4byte	0x1e1f
 4879 0668 73060000 		.4byte	0x673
 4880 066c 1A       		.uleb128 0x1a
 4881 066d 01       		.uleb128 0x1
 4882 066e 50       		.byte	0x50
 4883 066f 02       		.uleb128 0x2
 4884 0670 74       		.byte	0x74
 4885 0671 04       		.sleb128 4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 176


 4886 0672 00       		.byte	0
 4887 0673 19       		.uleb128 0x19
 4888 0674 3E000000 		.4byte	.LVL38
 4889 0678 1F1E0000 		.4byte	0x1e1f
 4890 067c 1A       		.uleb128 0x1a
 4891 067d 01       		.uleb128 0x1
 4892 067e 50       		.byte	0x50
 4893 067f 02       		.uleb128 0x2
 4894 0680 74       		.byte	0x74
 4895 0681 18       		.sleb128 24
 4896 0682 00       		.byte	0
 4897 0683 00       		.byte	0
 4898 0684 07       		.uleb128 0x7
 4899 0685 E3040000 		.4byte	0x4e3
 4900 0689 07       		.uleb128 0x7
 4901 068a 8E060000 		.4byte	0x68e
 4902 068e 06       		.uleb128 0x6
 4903 068f 04       		.byte	0x4
 4904 0690 94060000 		.4byte	0x694
 4905 0694 07       		.uleb128 0x7
 4906 0695 F8020000 		.4byte	0x2f8
 4907 0699 17       		.uleb128 0x17
 4908 069a 4E0E0000 		.4byte	.LASF96
 4909 069e 01       		.byte	0x1
 4910 069f B60B     		.2byte	0xbb6
 4911 06a1 00000000 		.4byte	.LFB94
 4912 06a5 58000000 		.4byte	.LFE94-.LFB94
 4913 06a9 01       		.uleb128 0x1
 4914 06aa 9C       		.byte	0x9c
 4915 06ab 42070000 		.4byte	0x742
 4916 06af 16       		.uleb128 0x16
 4917 06b0 41000000 		.4byte	.LASF71
 4918 06b4 01       		.byte	0x1
 4919 06b5 B80B     		.2byte	0xbb8
 4920 06b7 34010000 		.4byte	0x134
 4921 06bb 1B020000 		.4byte	.LLST15
 4922 06bf 1D       		.uleb128 0x1d
 4923 06c0 14000000 		.4byte	.LVL42
 4924 06c4 361E0000 		.4byte	0x1e36
 4925 06c8 E0060000 		.4byte	0x6e0
 4926 06cc 1A       		.uleb128 0x1a
 4927 06cd 01       		.uleb128 0x1
 4928 06ce 50       		.byte	0x50
 4929 06cf 0F       		.uleb128 0xf
 4930 06d0 74       		.byte	0x74
 4931 06d1 00       		.sleb128 0
 4932 06d2 32       		.byte	0x32
 4933 06d3 24       		.byte	0x24
 4934 06d4 74       		.byte	0x74
 4935 06d5 00       		.sleb128 0
 4936 06d6 22       		.byte	0x22
 4937 06d7 32       		.byte	0x32
 4938 06d8 24       		.byte	0x24
 4939 06d9 03       		.byte	0x3
 4940 06da 30000000 		.4byte	.LANCHOR0+48
 4941 06de 22       		.byte	0x22
 4942 06df 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 177


 4943 06e0 1D       		.uleb128 0x1d
 4944 06e1 26000000 		.4byte	.LVL45
 4945 06e5 361E0000 		.4byte	0x1e36
 4946 06e9 F4060000 		.4byte	0x6f4
 4947 06ed 1A       		.uleb128 0x1a
 4948 06ee 01       		.uleb128 0x1
 4949 06ef 50       		.byte	0x50
 4950 06f0 02       		.uleb128 0x2
 4951 06f1 76       		.byte	0x76
 4952 06f2 00       		.sleb128 0
 4953 06f3 00       		.byte	0
 4954 06f4 1D       		.uleb128 0x1d
 4955 06f5 30000000 		.4byte	.LVL46
 4956 06f9 361E0000 		.4byte	0x1e36
 4957 06fd 08070000 		.4byte	0x708
 4958 0701 1A       		.uleb128 0x1a
 4959 0702 01       		.uleb128 0x1
 4960 0703 50       		.byte	0x50
 4961 0704 02       		.uleb128 0x2
 4962 0705 75       		.byte	0x75
 4963 0706 00       		.sleb128 0
 4964 0707 00       		.byte	0
 4965 0708 1D       		.uleb128 0x1d
 4966 0709 38000000 		.4byte	.LVL47
 4967 070d 361E0000 		.4byte	0x1e36
 4968 0711 1C070000 		.4byte	0x71c
 4969 0715 1A       		.uleb128 0x1a
 4970 0716 01       		.uleb128 0x1
 4971 0717 50       		.byte	0x50
 4972 0718 02       		.uleb128 0x2
 4973 0719 74       		.byte	0x74
 4974 071a 14       		.sleb128 20
 4975 071b 00       		.byte	0
 4976 071c 1D       		.uleb128 0x1d
 4977 071d 40000000 		.4byte	.LVL48
 4978 0721 361E0000 		.4byte	0x1e36
 4979 0725 31070000 		.4byte	0x731
 4980 0729 1A       		.uleb128 0x1a
 4981 072a 01       		.uleb128 0x1
 4982 072b 50       		.byte	0x50
 4983 072c 03       		.uleb128 0x3
 4984 072d 74       		.byte	0x74
 4985 072e BC01     		.sleb128 188
 4986 0730 00       		.byte	0
 4987 0731 19       		.uleb128 0x19
 4988 0732 46000000 		.4byte	.LVL49
 4989 0736 361E0000 		.4byte	0x1e36
 4990 073a 1A       		.uleb128 0x1a
 4991 073b 01       		.uleb128 0x1
 4992 073c 50       		.byte	0x50
 4993 073d 02       		.uleb128 0x2
 4994 073e 74       		.byte	0x74
 4995 073f 00       		.sleb128 0
 4996 0740 00       		.byte	0
 4997 0741 00       		.byte	0
 4998 0742 17       		.uleb128 0x17
 4999 0743 7E0D0000 		.4byte	.LASF97
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 178


 5000 0747 01       		.byte	0x1
 5001 0748 FF0B     		.2byte	0xbff
 5002 074a 00000000 		.4byte	.LFB96
 5003 074e 44000000 		.4byte	.LFE96-.LFB96
 5004 0752 01       		.uleb128 0x1
 5005 0753 9C       		.byte	0x9c
 5006 0754 7B070000 		.4byte	0x77b
 5007 0758 15       		.uleb128 0x15
 5008 0759 E20D0000 		.4byte	.LASF98
 5009 075d 01       		.byte	0x1
 5010 075e FF0B     		.2byte	0xbff
 5011 0760 7B070000 		.4byte	0x77b
 5012 0764 3A020000 		.4byte	.LLST16
 5013 0768 18       		.uleb128 0x18
 5014 0769 24000000 		.4byte	.LVL52
 5015 076d 481E0000 		.4byte	0x1e48
 5016 0771 18       		.uleb128 0x18
 5017 0772 34000000 		.4byte	.LVL55
 5018 0776 481E0000 		.4byte	0x1e48
 5019 077a 00       		.byte	0
 5020 077b 07       		.uleb128 0x7
 5021 077c 3F010000 		.4byte	0x13f
 5022 0780 20       		.uleb128 0x20
 5023 0781 05090000 		.4byte	.LASF103
 5024 0785 01       		.byte	0x1
 5025 0786 2702     		.2byte	0x227
 5026 0788 29010000 		.4byte	0x129
 5027 078c 00000000 		.4byte	.LFB64
 5028 0790 F4000000 		.4byte	.LFE64-.LFB64
 5029 0794 01       		.uleb128 0x1
 5030 0795 9C       		.byte	0x9c
 5031 0796 ED080000 		.4byte	0x8ed
 5032 079a 15       		.uleb128 0x15
 5033 079b 43060000 		.4byte	.LASF99
 5034 079f 01       		.byte	0x1
 5035 07a0 2702     		.2byte	0x227
 5036 07a2 02010000 		.4byte	0x102
 5037 07a6 7C020000 		.4byte	.LLST17
 5038 07aa 15       		.uleb128 0x15
 5039 07ab C2040000 		.4byte	.LASF94
 5040 07af 01       		.byte	0x1
 5041 07b0 2702     		.2byte	0x227
 5042 07b2 03030000 		.4byte	0x303
 5043 07b6 A8020000 		.4byte	.LLST18
 5044 07ba 15       		.uleb128 0x15
 5045 07bb D6020000 		.4byte	.LASF90
 5046 07bf 01       		.byte	0x1
 5047 07c0 2702     		.2byte	0x227
 5048 07c2 E2050000 		.4byte	0x5e2
 5049 07c6 D4020000 		.4byte	.LLST19
 5050 07ca 15       		.uleb128 0x15
 5051 07cb 90090000 		.4byte	.LASF100
 5052 07cf 01       		.byte	0x1
 5053 07d0 2702     		.2byte	0x227
 5054 07d2 ED080000 		.4byte	0x8ed
 5055 07d6 F5020000 		.4byte	.LLST20
 5056 07da 15       		.uleb128 0x15
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 179


 5057 07db 41000000 		.4byte	.LASF71
 5058 07df 01       		.byte	0x1
 5059 07e0 2702     		.2byte	0x227
 5060 07e2 34010000 		.4byte	0x134
 5061 07e6 21030000 		.4byte	.LLST21
 5062 07ea 15       		.uleb128 0x15
 5063 07eb 750E0000 		.4byte	.LASF101
 5064 07ef 01       		.byte	0x1
 5065 07f0 2702     		.2byte	0x227
 5066 07f2 F2080000 		.4byte	0x8f2
 5067 07f6 41030000 		.4byte	.LLST22
 5068 07fa 15       		.uleb128 0x15
 5069 07fb 260E0000 		.4byte	.LASF91
 5070 07ff 01       		.byte	0x1
 5071 0800 2702     		.2byte	0x227
 5072 0802 E7050000 		.4byte	0x5e7
 5073 0806 61030000 		.4byte	.LLST23
 5074 080a 15       		.uleb128 0x15
 5075 080b 750D0000 		.4byte	.LASF95
 5076 080f 01       		.byte	0x1
 5077 0810 2702     		.2byte	0x227
 5078 0812 89060000 		.4byte	0x689
 5079 0816 81030000 		.4byte	.LLST24
 5080 081a 16       		.uleb128 0x16
 5081 081b F40A0000 		.4byte	.LASF80
 5082 081f 01       		.byte	0x1
 5083 0820 2902     		.2byte	0x229
 5084 0822 29010000 		.4byte	0x129
 5085 0826 A1030000 		.4byte	.LLST25
 5086 082a 16       		.uleb128 0x16
 5087 082b 3A060000 		.4byte	.LASF92
 5088 082f 01       		.byte	0x1
 5089 0830 2A02     		.2byte	0x22a
 5090 0832 E3040000 		.4byte	0x4e3
 5091 0836 CB030000 		.4byte	.LLST26
 5092 083a 16       		.uleb128 0x16
 5093 083b 350E0000 		.4byte	.LASF68
 5094 083f 01       		.byte	0x1
 5095 0840 2B02     		.2byte	0x22b
 5096 0842 08030000 		.4byte	0x308
 5097 0846 F4030000 		.4byte	.LLST27
 5098 084a 1D       		.uleb128 0x1d
 5099 084b 18000000 		.4byte	.LVL60
 5100 084f 29050000 		.4byte	0x529
 5101 0853 65080000 		.4byte	0x865
 5102 0857 1A       		.uleb128 0x1a
 5103 0858 01       		.uleb128 0x1
 5104 0859 51       		.byte	0x51
 5105 085a 03       		.uleb128 0x3
 5106 085b 91       		.byte	0x91
 5107 085c 08       		.sleb128 8
 5108 085d 06       		.byte	0x6
 5109 085e 1A       		.uleb128 0x1a
 5110 085f 01       		.uleb128 0x1
 5111 0860 50       		.byte	0x50
 5112 0861 02       		.uleb128 0x2
 5113 0862 76       		.byte	0x76
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 180


 5114 0863 00       		.sleb128 0
 5115 0864 00       		.byte	0
 5116 0865 1D       		.uleb128 0x1d
 5117 0866 3A000000 		.4byte	.LVL63
 5118 086a EC050000 		.4byte	0x5ec
 5119 086e 94080000 		.4byte	0x894
 5120 0872 1A       		.uleb128 0x1a
 5121 0873 01       		.uleb128 0x1
 5122 0874 53       		.byte	0x53
 5123 0875 03       		.uleb128 0x3
 5124 0876 91       		.byte	0x91
 5125 0877 0C       		.sleb128 12
 5126 0878 06       		.byte	0x6
 5127 0879 1A       		.uleb128 0x1a
 5128 087a 01       		.uleb128 0x1
 5129 087b 52       		.byte	0x52
 5130 087c 03       		.uleb128 0x3
 5131 087d 91       		.byte	0x91
 5132 087e 00       		.sleb128 0
 5133 087f 06       		.byte	0x6
 5134 0880 1A       		.uleb128 0x1a
 5135 0881 01       		.uleb128 0x1
 5136 0882 51       		.byte	0x51
 5137 0883 02       		.uleb128 0x2
 5138 0884 7A       		.byte	0x7a
 5139 0885 00       		.sleb128 0
 5140 0886 1A       		.uleb128 0x1a
 5141 0887 01       		.uleb128 0x1
 5142 0888 50       		.byte	0x50
 5143 0889 02       		.uleb128 0x2
 5144 088a 74       		.byte	0x74
 5145 088b 00       		.sleb128 0
 5146 088c 1A       		.uleb128 0x1a
 5147 088d 02       		.uleb128 0x2
 5148 088e 7D       		.byte	0x7d
 5149 088f 00       		.sleb128 0
 5150 0890 02       		.uleb128 0x2
 5151 0891 76       		.byte	0x76
 5152 0892 00       		.sleb128 0
 5153 0893 00       		.byte	0
 5154 0894 1D       		.uleb128 0x1d
 5155 0895 44000000 		.4byte	.LVL64
 5156 0899 5F1E0000 		.4byte	0x1e5f
 5157 089d B4080000 		.4byte	0x8b4
 5158 08a1 1A       		.uleb128 0x1a
 5159 08a2 01       		.uleb128 0x1
 5160 08a3 52       		.byte	0x52
 5161 08a4 02       		.uleb128 0x2
 5162 08a5 78       		.byte	0x78
 5163 08a6 00       		.sleb128 0
 5164 08a7 1A       		.uleb128 0x1a
 5165 08a8 01       		.uleb128 0x1
 5166 08a9 51       		.byte	0x51
 5167 08aa 02       		.uleb128 0x2
 5168 08ab 79       		.byte	0x79
 5169 08ac 00       		.sleb128 0
 5170 08ad 1A       		.uleb128 0x1a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 181


 5171 08ae 01       		.uleb128 0x1
 5172 08af 50       		.byte	0x50
 5173 08b0 02       		.uleb128 0x2
 5174 08b1 75       		.byte	0x75
 5175 08b2 00       		.sleb128 0
 5176 08b3 00       		.byte	0
 5177 08b4 18       		.uleb128 0x18
 5178 08b5 4E000000 		.4byte	.LVL65
 5179 08b9 7E1E0000 		.4byte	0x1e7e
 5180 08bd 18       		.uleb128 0x18
 5181 08be 72000000 		.4byte	.LVL66
 5182 08c2 99060000 		.4byte	0x699
 5183 08c6 1D       		.uleb128 0x1d
 5184 08c7 BE000000 		.4byte	.LVL68
 5185 08cb 851E0000 		.4byte	0x1e85
 5186 08cf DA080000 		.4byte	0x8da
 5187 08d3 1A       		.uleb128 0x1a
 5188 08d4 01       		.uleb128 0x1
 5189 08d5 51       		.byte	0x51
 5190 08d6 02       		.uleb128 0x2
 5191 08d7 74       		.byte	0x74
 5192 08d8 04       		.sleb128 4
 5193 08d9 00       		.byte	0
 5194 08da 18       		.uleb128 0x18
 5195 08db C2000000 		.4byte	.LVL69
 5196 08df 9C1E0000 		.4byte	0x1e9c
 5197 08e3 18       		.uleb128 0x18
 5198 08e4 E8000000 		.4byte	.LVL73
 5199 08e8 A31E0000 		.4byte	0x1ea3
 5200 08ec 00       		.byte	0
 5201 08ed 07       		.uleb128 0x7
 5202 08ee A9000000 		.4byte	0xa9
 5203 08f2 07       		.uleb128 0x7
 5204 08f3 F7080000 		.4byte	0x8f7
 5205 08f7 06       		.uleb128 0x6
 5206 08f8 04       		.byte	0x4
 5207 08f9 28020000 		.4byte	0x228
 5208 08fd 21       		.uleb128 0x21
 5209 08fe F9080000 		.4byte	.LASF111
 5210 0902 01       		.byte	0x1
 5211 0903 E802     		.2byte	0x2e8
 5212 0905 00000000 		.4byte	.LFB65
 5213 0909 90000000 		.4byte	.LFE65-.LFB65
 5214 090d 01       		.uleb128 0x1
 5215 090e 9C       		.byte	0x9c
 5216 090f AD090000 		.4byte	0x9ad
 5217 0913 15       		.uleb128 0x15
 5218 0914 4B0A0000 		.4byte	.LASF102
 5219 0918 01       		.byte	0x1
 5220 0919 E802     		.2byte	0x2e8
 5221 091b 28020000 		.4byte	0x228
 5222 091f 07040000 		.4byte	.LLST28
 5223 0923 16       		.uleb128 0x16
 5224 0924 040E0000 		.4byte	.LASF81
 5225 0928 01       		.byte	0x1
 5226 0929 EA02     		.2byte	0x2ea
 5227 092b E3040000 		.4byte	0x4e3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 182


 5228 092f 25040000 		.4byte	.LLST29
 5229 0933 18       		.uleb128 0x18
 5230 0934 08000000 		.4byte	.LVL76
 5231 0938 7E1E0000 		.4byte	0x1e7e
 5232 093c 1D       		.uleb128 0x1d
 5233 093d 18000000 		.4byte	.LVL78
 5234 0941 AA1E0000 		.4byte	0x1eaa
 5235 0945 50090000 		.4byte	0x950
 5236 0949 1A       		.uleb128 0x1a
 5237 094a 01       		.uleb128 0x1
 5238 094b 50       		.byte	0x50
 5239 094c 02       		.uleb128 0x2
 5240 094d 76       		.byte	0x76
 5241 094e 00       		.sleb128 0
 5242 094f 00       		.byte	0
 5243 0950 1D       		.uleb128 0x1d
 5244 0951 46000000 		.4byte	.LVL79
 5245 0955 AA1E0000 		.4byte	0x1eaa
 5246 0959 64090000 		.4byte	0x964
 5247 095d 1A       		.uleb128 0x1a
 5248 095e 01       		.uleb128 0x1
 5249 095f 50       		.byte	0x50
 5250 0960 02       		.uleb128 0x2
 5251 0961 75       		.byte	0x75
 5252 0962 18       		.sleb128 24
 5253 0963 00       		.byte	0
 5254 0964 1D       		.uleb128 0x1d
 5255 0965 52000000 		.4byte	.LVL80
 5256 0969 851E0000 		.4byte	0x1e85
 5257 096d 7F090000 		.4byte	0x97f
 5258 0971 1A       		.uleb128 0x1a
 5259 0972 01       		.uleb128 0x1
 5260 0973 51       		.byte	0x51
 5261 0974 02       		.uleb128 0x2
 5262 0975 76       		.byte	0x76
 5263 0976 00       		.sleb128 0
 5264 0977 1A       		.uleb128 0x1a
 5265 0978 01       		.uleb128 0x1
 5266 0979 50       		.byte	0x50
 5267 097a 03       		.uleb128 0x3
 5268 097b 74       		.byte	0x74
 5269 097c BC01     		.sleb128 188
 5270 097e 00       		.byte	0
 5271 097f 18       		.uleb128 0x18
 5272 0980 6A000000 		.4byte	.LVL81
 5273 0984 9C1E0000 		.4byte	0x1e9c
 5274 0988 18       		.uleb128 0x18
 5275 0989 7C000000 		.4byte	.LVL82
 5276 098d A31E0000 		.4byte	0x1ea3
 5277 0991 18       		.uleb128 0x18
 5278 0992 82000000 		.4byte	.LVL84
 5279 0996 7E1E0000 		.4byte	0x1e7e
 5280 099a 18       		.uleb128 0x18
 5281 099b 86000000 		.4byte	.LVL85
 5282 099f BC040000 		.4byte	0x4bc
 5283 09a3 18       		.uleb128 0x18
 5284 09a4 8A000000 		.4byte	.LVL86
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 183


 5285 09a8 9C1E0000 		.4byte	0x1e9c
 5286 09ac 00       		.byte	0
 5287 09ad 20       		.uleb128 0x20
 5288 09ae 2C060000 		.4byte	.LASF104
 5289 09b2 01       		.byte	0x1
 5290 09b3 DC03     		.2byte	0x3dc
 5291 09b5 5A020000 		.4byte	0x25a
 5292 09b9 00000000 		.4byte	.LFB68
 5293 09bd 60000000 		.4byte	.LFE68-.LFB68
 5294 09c1 01       		.uleb128 0x1
 5295 09c2 9C       		.byte	0x9c
 5296 09c3 180A0000 		.4byte	0xa18
 5297 09c7 15       		.uleb128 0x15
 5298 09c8 44080000 		.4byte	.LASF84
 5299 09cc 01       		.byte	0x1
 5300 09cd DC03     		.2byte	0x3dc
 5301 09cf 28020000 		.4byte	0x228
 5302 09d3 38040000 		.4byte	.LLST30
 5303 09d7 1C       		.uleb128 0x1c
 5304 09d8 28020000 		.4byte	.LASF105
 5305 09dc 01       		.byte	0x1
 5306 09dd DE03     		.2byte	0x3de
 5307 09df 5A020000 		.4byte	0x25a
 5308 09e3 01       		.uleb128 0x1
 5309 09e4 50       		.byte	0x50
 5310 09e5 16       		.uleb128 0x16
 5311 09e6 58000000 		.4byte	.LASF106
 5312 09ea 01       		.byte	0x1
 5313 09eb DF03     		.2byte	0x3df
 5314 09ed 180A0000 		.4byte	0xa18
 5315 09f1 88040000 		.4byte	.LLST31
 5316 09f5 16       		.uleb128 0x16
 5317 09f6 040E0000 		.4byte	.LASF81
 5318 09fa 01       		.byte	0x1
 5319 09fb E003     		.2byte	0x3e0
 5320 09fd 66040000 		.4byte	0x466
 5321 0a01 A6040000 		.4byte	.LLST32
 5322 0a05 18       		.uleb128 0x18
 5323 0a06 12000000 		.4byte	.LVL90
 5324 0a0a 7E1E0000 		.4byte	0x1e7e
 5325 0a0e 18       		.uleb128 0x18
 5326 0a0f 18000000 		.4byte	.LVL92
 5327 0a13 9C1E0000 		.4byte	0x1e9c
 5328 0a17 00       		.byte	0
 5329 0a18 06       		.uleb128 0x6
 5330 0a19 04       		.byte	0x4
 5331 0a1a 1D020000 		.4byte	0x21d
 5332 0a1e 20       		.uleb128 0x20
 5333 0a1f 7E040000 		.4byte	.LASF107
 5334 0a23 01       		.byte	0x1
 5335 0a24 2204     		.2byte	0x422
 5336 0a26 34010000 		.4byte	0x134
 5337 0a2a 00000000 		.4byte	.LFB69
 5338 0a2e 20000000 		.4byte	.LFE69-.LFB69
 5339 0a32 01       		.uleb128 0x1
 5340 0a33 9C       		.byte	0x9c
 5341 0a34 7B0A0000 		.4byte	0xa7b
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 184


 5342 0a38 15       		.uleb128 0x15
 5343 0a39 44080000 		.4byte	.LASF84
 5344 0a3d 01       		.byte	0x1
 5345 0a3e 2204     		.2byte	0x422
 5346 0a40 28020000 		.4byte	0x228
 5347 0a44 F6040000 		.4byte	.LLST33
 5348 0a48 16       		.uleb128 0x16
 5349 0a49 040E0000 		.4byte	.LASF81
 5350 0a4d 01       		.byte	0x1
 5351 0a4e 2404     		.2byte	0x424
 5352 0a50 E3040000 		.4byte	0x4e3
 5353 0a54 14050000 		.4byte	.LLST34
 5354 0a58 16       		.uleb128 0x16
 5355 0a59 55020000 		.4byte	.LASF108
 5356 0a5d 01       		.byte	0x1
 5357 0a5e 2504     		.2byte	0x425
 5358 0a60 34010000 		.4byte	0x134
 5359 0a64 27050000 		.4byte	.LLST35
 5360 0a68 18       		.uleb128 0x18
 5361 0a69 08000000 		.4byte	.LVL103
 5362 0a6d 7E1E0000 		.4byte	0x1e7e
 5363 0a71 18       		.uleb128 0x18
 5364 0a72 16000000 		.4byte	.LVL106
 5365 0a76 9C1E0000 		.4byte	0x1e9c
 5366 0a7a 00       		.byte	0
 5367 0a7b 20       		.uleb128 0x20
 5368 0a7c 94070000 		.4byte	.LASF109
 5369 0a80 01       		.byte	0x1
 5370 0a81 3804     		.2byte	0x438
 5371 0a83 34010000 		.4byte	0x134
 5372 0a87 00000000 		.4byte	.LFB70
 5373 0a8b 20000000 		.4byte	.LFE70-.LFB70
 5374 0a8f 01       		.uleb128 0x1
 5375 0a90 9C       		.byte	0x9c
 5376 0a91 E80A0000 		.4byte	0xae8
 5377 0a95 15       		.uleb128 0x15
 5378 0a96 44080000 		.4byte	.LASF84
 5379 0a9a 01       		.byte	0x1
 5380 0a9b 3804     		.2byte	0x438
 5381 0a9d 28020000 		.4byte	0x228
 5382 0aa1 45050000 		.4byte	.LLST36
 5383 0aa5 16       		.uleb128 0x16
 5384 0aa6 040E0000 		.4byte	.LASF81
 5385 0aaa 01       		.byte	0x1
 5386 0aab 3A04     		.2byte	0x43a
 5387 0aad E3040000 		.4byte	0x4e3
 5388 0ab1 63050000 		.4byte	.LLST37
 5389 0ab5 16       		.uleb128 0x16
 5390 0ab6 55020000 		.4byte	.LASF108
 5391 0aba 01       		.byte	0x1
 5392 0abb 3B04     		.2byte	0x43b
 5393 0abd 34010000 		.4byte	0x134
 5394 0ac1 76050000 		.4byte	.LLST38
 5395 0ac5 16       		.uleb128 0x16
 5396 0ac6 3C030000 		.4byte	.LASF110
 5397 0aca 01       		.byte	0x1
 5398 0acb 3B04     		.2byte	0x43b
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 185


 5399 0acd 34010000 		.4byte	0x134
 5400 0ad1 94050000 		.4byte	.LLST39
 5401 0ad5 18       		.uleb128 0x18
 5402 0ad6 08000000 		.4byte	.LVL109
 5403 0ada C01E0000 		.4byte	0x1ec0
 5404 0ade 18       		.uleb128 0x18
 5405 0adf 16000000 		.4byte	.LVL112
 5406 0ae3 CB1E0000 		.4byte	0x1ecb
 5407 0ae7 00       		.byte	0
 5408 0ae8 21       		.uleb128 0x21
 5409 0ae9 FB070000 		.4byte	.LASF112
 5410 0aed 01       		.byte	0x1
 5411 0aee 6004     		.2byte	0x460
 5412 0af0 00000000 		.4byte	.LFB71
 5413 0af4 D4000000 		.4byte	.LFE71-.LFB71
 5414 0af8 01       		.uleb128 0x1
 5415 0af9 9C       		.byte	0x9c
 5416 0afa A20B0000 		.4byte	0xba2
 5417 0afe 15       		.uleb128 0x15
 5418 0aff 44080000 		.4byte	.LASF84
 5419 0b03 01       		.byte	0x1
 5420 0b04 6004     		.2byte	0x460
 5421 0b06 28020000 		.4byte	0x228
 5422 0b0a A7050000 		.4byte	.LLST40
 5423 0b0e 15       		.uleb128 0x15
 5424 0b0f 0B070000 		.4byte	.LASF113
 5425 0b13 01       		.byte	0x1
 5426 0b14 6004     		.2byte	0x460
 5427 0b16 34010000 		.4byte	0x134
 5428 0b1a C5050000 		.4byte	.LLST41
 5429 0b1e 16       		.uleb128 0x16
 5430 0b1f 040E0000 		.4byte	.LASF81
 5431 0b23 01       		.byte	0x1
 5432 0b24 6204     		.2byte	0x462
 5433 0b26 E3040000 		.4byte	0x4e3
 5434 0b2a F0050000 		.4byte	.LLST42
 5435 0b2e 16       		.uleb128 0x16
 5436 0b2f AC0E0000 		.4byte	.LASF114
 5437 0b33 01       		.byte	0x1
 5438 0b34 6304     		.2byte	0x463
 5439 0b36 34010000 		.4byte	0x134
 5440 0b3a 03060000 		.4byte	.LLST43
 5441 0b3e 16       		.uleb128 0x16
 5442 0b3f DC0C0000 		.4byte	.LASF115
 5443 0b43 01       		.byte	0x1
 5444 0b44 6304     		.2byte	0x463
 5445 0b46 34010000 		.4byte	0x134
 5446 0b4a 16060000 		.4byte	.LLST44
 5447 0b4e 16       		.uleb128 0x16
 5448 0b4f 9F020000 		.4byte	.LASF116
 5449 0b53 01       		.byte	0x1
 5450 0b54 6404     		.2byte	0x464
 5451 0b56 29010000 		.4byte	0x129
 5452 0b5a 29060000 		.4byte	.LLST45
 5453 0b5e 18       		.uleb128 0x18
 5454 0b5f 10000000 		.4byte	.LVL117
 5455 0b63 7E1E0000 		.4byte	0x1e7e
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 186


 5456 0b67 1D       		.uleb128 0x1d
 5457 0b68 8A000000 		.4byte	.LVL124
 5458 0b6c AA1E0000 		.4byte	0x1eaa
 5459 0b70 7B0B0000 		.4byte	0xb7b
 5460 0b74 1A       		.uleb128 0x1a
 5461 0b75 01       		.uleb128 0x1
 5462 0b76 50       		.byte	0x50
 5463 0b77 02       		.uleb128 0x2
 5464 0b78 75       		.byte	0x75
 5465 0b79 00       		.sleb128 0
 5466 0b7a 00       		.byte	0
 5467 0b7b 1D       		.uleb128 0x1d
 5468 0b7c C0000000 		.4byte	.LVL125
 5469 0b80 851E0000 		.4byte	0x1e85
 5470 0b84 8F0B0000 		.4byte	0xb8f
 5471 0b88 1A       		.uleb128 0x1a
 5472 0b89 01       		.uleb128 0x1
 5473 0b8a 51       		.byte	0x51
 5474 0b8b 02       		.uleb128 0x2
 5475 0b8c 75       		.byte	0x75
 5476 0b8d 00       		.sleb128 0
 5477 0b8e 00       		.byte	0
 5478 0b8f 18       		.uleb128 0x18
 5479 0b90 C6000000 		.4byte	.LVL126
 5480 0b94 A31E0000 		.4byte	0x1ea3
 5481 0b98 18       		.uleb128 0x18
 5482 0b99 CA000000 		.4byte	.LVL127
 5483 0b9d 9C1E0000 		.4byte	0x1e9c
 5484 0ba1 00       		.byte	0
 5485 0ba2 21       		.uleb128 0x21
 5486 0ba3 420E0000 		.4byte	.LASF117
 5487 0ba7 01       		.byte	0x1
 5488 0ba8 8B05     		.2byte	0x58b
 5489 0baa 00000000 		.4byte	.LFB74
 5490 0bae 68000000 		.4byte	.LFE74-.LFB74
 5491 0bb2 01       		.uleb128 0x1
 5492 0bb3 9C       		.byte	0x9c
 5493 0bb4 300C0000 		.4byte	0xc30
 5494 0bb8 15       		.uleb128 0x15
 5495 0bb9 47020000 		.4byte	.LASF118
 5496 0bbd 01       		.byte	0x1
 5497 0bbe 8B05     		.2byte	0x58b
 5498 0bc0 28020000 		.4byte	0x228
 5499 0bc4 48060000 		.4byte	.LLST46
 5500 0bc8 16       		.uleb128 0x16
 5501 0bc9 040E0000 		.4byte	.LASF81
 5502 0bcd 01       		.byte	0x1
 5503 0bce 8D05     		.2byte	0x58d
 5504 0bd0 84060000 		.4byte	0x684
 5505 0bd4 48060000 		.4byte	.LLST46
 5506 0bd8 18       		.uleb128 0x18
 5507 0bd9 14000000 		.4byte	.LVL130
 5508 0bdd 7E1E0000 		.4byte	0x1e7e
 5509 0be1 1D       		.uleb128 0x1d
 5510 0be2 1A000000 		.4byte	.LVL131
 5511 0be6 16040000 		.4byte	0x416
 5512 0bea F50B0000 		.4byte	0xbf5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 187


 5513 0bee 1A       		.uleb128 0x1a
 5514 0bef 01       		.uleb128 0x1
 5515 0bf0 50       		.byte	0x50
 5516 0bf1 02       		.uleb128 0x2
 5517 0bf2 74       		.byte	0x74
 5518 0bf3 00       		.sleb128 0
 5519 0bf4 00       		.byte	0
 5520 0bf5 1D       		.uleb128 0x1d
 5521 0bf6 26000000 		.4byte	.LVL132
 5522 0bfa AA1E0000 		.4byte	0x1eaa
 5523 0bfe 090C0000 		.4byte	0xc09
 5524 0c02 1A       		.uleb128 0x1a
 5525 0c03 01       		.uleb128 0x1
 5526 0c04 50       		.byte	0x50
 5527 0c05 02       		.uleb128 0x2
 5528 0c06 76       		.byte	0x76
 5529 0c07 00       		.sleb128 0
 5530 0c08 00       		.byte	0
 5531 0c09 1D       		.uleb128 0x1d
 5532 0c0a 4A000000 		.4byte	.LVL133
 5533 0c0e 851E0000 		.4byte	0x1e85
 5534 0c12 1D0C0000 		.4byte	0xc1d
 5535 0c16 1A       		.uleb128 0x1a
 5536 0c17 01       		.uleb128 0x1
 5537 0c18 51       		.byte	0x51
 5538 0c19 02       		.uleb128 0x2
 5539 0c1a 76       		.byte	0x76
 5540 0c1b 00       		.sleb128 0
 5541 0c1c 00       		.byte	0
 5542 0c1d 18       		.uleb128 0x18
 5543 0c1e 5A000000 		.4byte	.LVL134
 5544 0c22 A31E0000 		.4byte	0x1ea3
 5545 0c26 18       		.uleb128 0x18
 5546 0c27 5E000000 		.4byte	.LVL135
 5547 0c2b 9C1E0000 		.4byte	0x1e9c
 5548 0c2f 00       		.byte	0
 5549 0c30 20       		.uleb128 0x20
 5550 0c31 A8030000 		.4byte	.LASF119
 5551 0c35 01       		.byte	0x1
 5552 0c36 C105     		.2byte	0x5c1
 5553 0c38 29010000 		.4byte	0x129
 5554 0c3c 00000000 		.4byte	.LFB75
 5555 0c40 80000000 		.4byte	.LFE75-.LFB75
 5556 0c44 01       		.uleb128 0x1
 5557 0c45 9C       		.byte	0x9c
 5558 0c46 FD0C0000 		.4byte	0xcfd
 5559 0c4a 15       		.uleb128 0x15
 5560 0c4b 47020000 		.4byte	.LASF118
 5561 0c4f 01       		.byte	0x1
 5562 0c50 C105     		.2byte	0x5c1
 5563 0c52 28020000 		.4byte	0x228
 5564 0c56 71060000 		.4byte	.LLST48
 5565 0c5a 16       		.uleb128 0x16
 5566 0c5b 9F020000 		.4byte	.LASF116
 5567 0c5f 01       		.byte	0x1
 5568 0c60 C305     		.2byte	0x5c3
 5569 0c62 29010000 		.4byte	0x129
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 188


 5570 0c66 9D060000 		.4byte	.LLST49
 5571 0c6a 16       		.uleb128 0x16
 5572 0c6b 040E0000 		.4byte	.LASF81
 5573 0c6f 01       		.byte	0x1
 5574 0c70 C405     		.2byte	0x5c4
 5575 0c72 84060000 		.4byte	0x684
 5576 0c76 DE060000 		.4byte	.LLST50
 5577 0c7a 16       		.uleb128 0x16
 5578 0c7b 72020000 		.4byte	.LASF120
 5579 0c7f 01       		.byte	0x1
 5580 0c80 C505     		.2byte	0x5c5
 5581 0c82 34010000 		.4byte	0x134
 5582 0c86 0A070000 		.4byte	.LLST51
 5583 0c8a 18       		.uleb128 0x18
 5584 0c8b 08000000 		.4byte	.LVL139
 5585 0c8f C01E0000 		.4byte	0x1ec0
 5586 0c93 1D       		.uleb128 0x1d
 5587 0c94 10000000 		.4byte	.LVL142
 5588 0c98 16040000 		.4byte	0x416
 5589 0c9c A70C0000 		.4byte	0xca7
 5590 0ca0 1A       		.uleb128 0x1a
 5591 0ca1 01       		.uleb128 0x1
 5592 0ca2 50       		.byte	0x50
 5593 0ca3 02       		.uleb128 0x2
 5594 0ca4 74       		.byte	0x74
 5595 0ca5 00       		.sleb128 0
 5596 0ca6 00       		.byte	0
 5597 0ca7 1D       		.uleb128 0x1d
 5598 0ca8 38000000 		.4byte	.LVL144
 5599 0cac AA1E0000 		.4byte	0x1eaa
 5600 0cb0 BB0C0000 		.4byte	0xcbb
 5601 0cb4 1A       		.uleb128 0x1a
 5602 0cb5 01       		.uleb128 0x1
 5603 0cb6 50       		.byte	0x50
 5604 0cb7 02       		.uleb128 0x2
 5605 0cb8 77       		.byte	0x77
 5606 0cb9 00       		.sleb128 0
 5607 0cba 00       		.byte	0
 5608 0cbb 1D       		.uleb128 0x1d
 5609 0cbc 5A000000 		.4byte	.LVL145
 5610 0cc0 851E0000 		.4byte	0x1e85
 5611 0cc4 CF0C0000 		.4byte	0xccf
 5612 0cc8 1A       		.uleb128 0x1a
 5613 0cc9 01       		.uleb128 0x1
 5614 0cca 51       		.byte	0x51
 5615 0ccb 02       		.uleb128 0x2
 5616 0ccc 77       		.byte	0x77
 5617 0ccd 00       		.sleb128 0
 5618 0cce 00       		.byte	0
 5619 0ccf 1D       		.uleb128 0x1d
 5620 0cd0 66000000 		.4byte	.LVL147
 5621 0cd4 851E0000 		.4byte	0x1e85
 5622 0cd8 EC0C0000 		.4byte	0xcec
 5623 0cdc 1A       		.uleb128 0x1a
 5624 0cdd 01       		.uleb128 0x1
 5625 0cde 51       		.byte	0x51
 5626 0cdf 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 189


 5627 0ce0 74       		.byte	0x74
 5628 0ce1 18       		.sleb128 24
 5629 0ce2 1A       		.uleb128 0x1a
 5630 0ce3 01       		.uleb128 0x1
 5631 0ce4 50       		.byte	0x50
 5632 0ce5 05       		.uleb128 0x5
 5633 0ce6 03       		.byte	0x3
 5634 0ce7 14000000 		.4byte	.LANCHOR0+20
 5635 0ceb 00       		.byte	0
 5636 0cec 19       		.uleb128 0x19
 5637 0ced 72000000 		.4byte	.LVL149
 5638 0cf1 CB1E0000 		.4byte	0x1ecb
 5639 0cf5 1A       		.uleb128 0x1a
 5640 0cf6 01       		.uleb128 0x1
 5641 0cf7 50       		.byte	0x50
 5642 0cf8 02       		.uleb128 0x2
 5643 0cf9 75       		.byte	0x75
 5644 0cfa 00       		.sleb128 0
 5645 0cfb 00       		.byte	0
 5646 0cfc 00       		.byte	0
 5647 0cfd 21       		.uleb128 0x21
 5648 0cfe 530B0000 		.4byte	.LASF121
 5649 0d02 01       		.byte	0x1
 5650 0d03 0706     		.2byte	0x607
 5651 0d05 00000000 		.4byte	.LFB76
 5652 0d09 4C000000 		.4byte	.LFE76-.LFB76
 5653 0d0d 01       		.uleb128 0x1
 5654 0d0e 9C       		.byte	0x9c
 5655 0d0f 790D0000 		.4byte	0xd79
 5656 0d13 16       		.uleb128 0x16
 5657 0d14 F40A0000 		.4byte	.LASF80
 5658 0d18 01       		.byte	0x1
 5659 0d19 0906     		.2byte	0x609
 5660 0d1b 29010000 		.4byte	0x129
 5661 0d1f 28070000 		.4byte	.LLST52
 5662 0d23 1D       		.uleb128 0x1d
 5663 0d24 18000000 		.4byte	.LVL151
 5664 0d28 80070000 		.4byte	0x780
 5665 0d2c 660D0000 		.4byte	0xd66
 5666 0d30 1A       		.uleb128 0x1a
 5667 0d31 01       		.uleb128 0x1
 5668 0d32 53       		.byte	0x53
 5669 0d33 01       		.uleb128 0x1
 5670 0d34 30       		.byte	0x30
 5671 0d35 1A       		.uleb128 0x1a
 5672 0d36 01       		.uleb128 0x1
 5673 0d37 52       		.byte	0x52
 5674 0d38 02       		.uleb128 0x2
 5675 0d39 08       		.byte	0x8
 5676 0d3a 64       		.byte	0x64
 5677 0d3b 1A       		.uleb128 0x1a
 5678 0d3c 01       		.uleb128 0x1
 5679 0d3d 51       		.byte	0x51
 5680 0d3e 05       		.uleb128 0x5
 5681 0d3f 03       		.byte	0x3
 5682 0d40 00000000 		.4byte	.LC0
 5683 0d44 1A       		.uleb128 0x1a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 190


 5684 0d45 01       		.uleb128 0x1
 5685 0d46 50       		.byte	0x50
 5686 0d47 05       		.uleb128 0x5
 5687 0d48 03       		.byte	0x3
 5688 0d49 00000000 		.4byte	prvIdleTask
 5689 0d4d 1A       		.uleb128 0x1a
 5690 0d4e 02       		.uleb128 0x2
 5691 0d4f 7D       		.byte	0x7d
 5692 0d50 0C       		.sleb128 12
 5693 0d51 01       		.uleb128 0x1
 5694 0d52 30       		.byte	0x30
 5695 0d53 1A       		.uleb128 0x1a
 5696 0d54 02       		.uleb128 0x2
 5697 0d55 7D       		.byte	0x7d
 5698 0d56 08       		.sleb128 8
 5699 0d57 01       		.uleb128 0x1
 5700 0d58 30       		.byte	0x30
 5701 0d59 1A       		.uleb128 0x1a
 5702 0d5a 02       		.uleb128 0x2
 5703 0d5b 7D       		.byte	0x7d
 5704 0d5c 04       		.sleb128 4
 5705 0d5d 01       		.uleb128 0x1
 5706 0d5e 30       		.byte	0x30
 5707 0d5f 1A       		.uleb128 0x1a
 5708 0d60 02       		.uleb128 0x2
 5709 0d61 7D       		.byte	0x7d
 5710 0d62 00       		.sleb128 0
 5711 0d63 01       		.uleb128 0x1
 5712 0d64 30       		.byte	0x30
 5713 0d65 00       		.byte	0
 5714 0d66 18       		.uleb128 0x18
 5715 0d67 20000000 		.4byte	.LVL152
 5716 0d6b C01E0000 		.4byte	0x1ec0
 5717 0d6f 18       		.uleb128 0x18
 5718 0d70 38000000 		.4byte	.LVL153
 5719 0d74 DC1E0000 		.4byte	0x1edc
 5720 0d78 00       		.byte	0
 5721 0d79 21       		.uleb128 0x21
 5722 0d7a 6C040000 		.4byte	.LASF122
 5723 0d7e 01       		.byte	0x1
 5724 0d7f 5606     		.2byte	0x656
 5725 0d81 00000000 		.4byte	.LFB77
 5726 0d85 18000000 		.4byte	.LFE77-.LFB77
 5727 0d89 01       		.uleb128 0x1
 5728 0d8a 9C       		.byte	0x9c
 5729 0d8b A20D0000 		.4byte	0xda2
 5730 0d8f 18       		.uleb128 0x18
 5731 0d90 06000000 		.4byte	.LVL154
 5732 0d94 C01E0000 		.4byte	0x1ec0
 5733 0d98 18       		.uleb128 0x18
 5734 0d99 12000000 		.4byte	.LVL155
 5735 0d9d E71E0000 		.4byte	0x1ee7
 5736 0da1 00       		.byte	0
 5737 0da2 22       		.uleb128 0x22
 5738 0da3 C8030000 		.4byte	.LASF160
 5739 0da7 01       		.byte	0x1
 5740 0da8 6106     		.2byte	0x661
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 191


 5741 0daa 00000000 		.4byte	.LFB78
 5742 0dae 14000000 		.4byte	.LFE78-.LFB78
 5743 0db2 01       		.uleb128 0x1
 5744 0db3 9C       		.byte	0x9c
 5745 0db4 20       		.uleb128 0x20
 5746 0db5 6D080000 		.4byte	.LASF123
 5747 0db9 01       		.byte	0x1
 5748 0dba E406     		.2byte	0x6e4
 5749 0dbc 3F010000 		.4byte	0x13f
 5750 0dc0 00000000 		.4byte	.LFB80
 5751 0dc4 0C000000 		.4byte	.LFE80-.LFB80
 5752 0dc8 01       		.uleb128 0x1
 5753 0dc9 9C       		.byte	0x9c
 5754 0dca DD0D0000 		.4byte	0xddd
 5755 0dce 1C       		.uleb128 0x1c
 5756 0dcf 4C0B0000 		.4byte	.LASF124
 5757 0dd3 01       		.byte	0x1
 5758 0dd4 E606     		.2byte	0x6e6
 5759 0dd6 3F010000 		.4byte	0x13f
 5760 0dda 01       		.uleb128 0x1
 5761 0ddb 50       		.byte	0x50
 5762 0ddc 00       		.byte	0
 5763 0ddd 20       		.uleb128 0x20
 5764 0dde 23030000 		.4byte	.LASF125
 5765 0de2 01       		.byte	0x1
 5766 0de3 F306     		.2byte	0x6f3
 5767 0de5 3F010000 		.4byte	0x13f
 5768 0de9 00000000 		.4byte	.LFB81
 5769 0ded 0C000000 		.4byte	.LFE81-.LFB81
 5770 0df1 01       		.uleb128 0x1
 5771 0df2 9C       		.byte	0x9c
 5772 0df3 130E0000 		.4byte	0xe13
 5773 0df7 1C       		.uleb128 0x1c
 5774 0df8 F40A0000 		.4byte	.LASF80
 5775 0dfc 01       		.byte	0x1
 5776 0dfd F506     		.2byte	0x6f5
 5777 0dff 3F010000 		.4byte	0x13f
 5778 0e03 01       		.uleb128 0x1
 5779 0e04 50       		.byte	0x50
 5780 0e05 23       		.uleb128 0x23
 5781 0e06 72020000 		.4byte	.LASF120
 5782 0e0a 01       		.byte	0x1
 5783 0e0b F606     		.2byte	0x6f6
 5784 0e0d 34010000 		.4byte	0x134
 5785 0e11 00       		.byte	0
 5786 0e12 00       		.byte	0
 5787 0e13 24       		.uleb128 0x24
 5788 0e14 A2000000 		.4byte	.LASF169
 5789 0e18 01       		.byte	0x1
 5790 0e19 1207     		.2byte	0x712
 5791 0e1b 34010000 		.4byte	0x134
 5792 0e1f 00000000 		.4byte	.LFB82
 5793 0e23 0C000000 		.4byte	.LFE82-.LFB82
 5794 0e27 01       		.uleb128 0x1
 5795 0e28 9C       		.byte	0x9c
 5796 0e29 20       		.uleb128 0x20
 5797 0e2a F4030000 		.4byte	.LASF126
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 192


 5798 0e2e 01       		.byte	0x1
 5799 0e2f 9307     		.2byte	0x793
 5800 0e31 29010000 		.4byte	0x129
 5801 0e35 00000000 		.4byte	.LFB83
 5802 0e39 04010000 		.4byte	.LFE83-.LFB83
 5803 0e3d 01       		.uleb128 0x1
 5804 0e3e 9C       		.byte	0x9c
 5805 0e3f E90E0000 		.4byte	0xee9
 5806 0e43 16       		.uleb128 0x16
 5807 0e44 040E0000 		.4byte	.LASF81
 5808 0e48 01       		.byte	0x1
 5809 0e49 9507     		.2byte	0x795
 5810 0e4b E3040000 		.4byte	0x4e3
 5811 0e4f 3B070000 		.4byte	.LLST53
 5812 0e53 16       		.uleb128 0x16
 5813 0e54 9D090000 		.4byte	.LASF27
 5814 0e58 01       		.byte	0x1
 5815 0e59 9607     		.2byte	0x796
 5816 0e5b 3F010000 		.4byte	0x13f
 5817 0e5f 59070000 		.4byte	.LLST54
 5818 0e63 16       		.uleb128 0x16
 5819 0e64 250A0000 		.4byte	.LASF127
 5820 0e68 01       		.byte	0x1
 5821 0e69 9707     		.2byte	0x797
 5822 0e6b 29010000 		.4byte	0x129
 5823 0e6f 6C070000 		.4byte	.LLST55
 5824 0e73 25       		.uleb128 0x25
 5825 0e74 00000000 		.4byte	.Ldebug_ranges0+0
 5826 0e78 16       		.uleb128 0x16
 5827 0e79 90040000 		.4byte	.LASF128
 5828 0e7d 01       		.byte	0x1
 5829 0e7e A607     		.2byte	0x7a6
 5830 0e80 7B070000 		.4byte	0x77b
 5831 0e84 C4070000 		.4byte	.LLST56
 5832 0e88 1B       		.uleb128 0x1b
 5833 0e89 24000000 		.4byte	.LBB9
 5834 0e8d 1A000000 		.4byte	.LBE9-.LBB9
 5835 0e91 AF0E0000 		.4byte	0xeaf
 5836 0e95 16       		.uleb128 0x16
 5837 0e96 870B0000 		.4byte	.LASF129
 5838 0e9a 01       		.byte	0x1
 5839 0e9b AA07     		.2byte	0x7aa
 5840 0e9d 180A0000 		.4byte	0xa18
 5841 0ea1 E2070000 		.4byte	.LLST57
 5842 0ea5 18       		.uleb128 0x18
 5843 0ea6 3E000000 		.4byte	.LVL164
 5844 0eaa BC040000 		.4byte	0x4bc
 5845 0eae 00       		.byte	0
 5846 0eaf 1D       		.uleb128 0x1d
 5847 0eb0 86000000 		.4byte	.LVL171
 5848 0eb4 AA1E0000 		.4byte	0x1eaa
 5849 0eb8 C30E0000 		.4byte	0xec3
 5850 0ebc 1A       		.uleb128 0x1a
 5851 0ebd 01       		.uleb128 0x1
 5852 0ebe 50       		.byte	0x50
 5853 0ebf 02       		.uleb128 0x2
 5854 0ec0 76       		.byte	0x76
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 193


 5855 0ec1 00       		.sleb128 0
 5856 0ec2 00       		.byte	0
 5857 0ec3 1D       		.uleb128 0x1d
 5858 0ec4 92000000 		.4byte	.LVL172
 5859 0ec8 AA1E0000 		.4byte	0x1eaa
 5860 0ecc D70E0000 		.4byte	0xed7
 5861 0ed0 1A       		.uleb128 0x1a
 5862 0ed1 01       		.uleb128 0x1
 5863 0ed2 50       		.byte	0x50
 5864 0ed3 02       		.uleb128 0x2
 5865 0ed4 74       		.byte	0x74
 5866 0ed5 18       		.sleb128 24
 5867 0ed6 00       		.byte	0
 5868 0ed7 19       		.uleb128 0x19
 5869 0ed8 B6000000 		.4byte	.LVL173
 5870 0edc 851E0000 		.4byte	0x1e85
 5871 0ee0 1A       		.uleb128 0x1a
 5872 0ee1 01       		.uleb128 0x1
 5873 0ee2 51       		.byte	0x51
 5874 0ee3 02       		.uleb128 0x2
 5875 0ee4 76       		.byte	0x76
 5876 0ee5 00       		.sleb128 0
 5877 0ee6 00       		.byte	0
 5878 0ee7 00       		.byte	0
 5879 0ee8 00       		.byte	0
 5880 0ee9 20       		.uleb128 0x20
 5881 0eea D6090000 		.4byte	.LASF130
 5882 0eee 01       		.byte	0x1
 5883 0eef 8706     		.2byte	0x687
 5884 0ef1 29010000 		.4byte	0x129
 5885 0ef5 00000000 		.4byte	.LFB79
 5886 0ef9 CC000000 		.4byte	.LFE79-.LFB79
 5887 0efd 01       		.uleb128 0x1
 5888 0efe 9C       		.byte	0x9c
 5889 0eff 840F0000 		.4byte	0xf84
 5890 0f03 16       		.uleb128 0x16
 5891 0f04 040E0000 		.4byte	.LASF81
 5892 0f08 01       		.byte	0x1
 5893 0f09 8906     		.2byte	0x689
 5894 0f0b E3040000 		.4byte	0x4e3
 5895 0f0f 04080000 		.4byte	.LLST58
 5896 0f13 16       		.uleb128 0x16
 5897 0f14 300D0000 		.4byte	.LASF131
 5898 0f18 01       		.byte	0x1
 5899 0f19 8A06     		.2byte	0x68a
 5900 0f1b 29010000 		.4byte	0x129
 5901 0f1f 17080000 		.4byte	.LLST59
 5902 0f23 18       		.uleb128 0x18
 5903 0f24 06000000 		.4byte	.LVL181
 5904 0f28 7E1E0000 		.4byte	0x1e7e
 5905 0f2c 1D       		.uleb128 0x1d
 5906 0f2d 34000000 		.4byte	.LVL183
 5907 0f31 AA1E0000 		.4byte	0x1eaa
 5908 0f35 400F0000 		.4byte	0xf40
 5909 0f39 1A       		.uleb128 0x1a
 5910 0f3a 01       		.uleb128 0x1
 5911 0f3b 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 194


 5912 0f3c 02       		.uleb128 0x2
 5913 0f3d 75       		.byte	0x75
 5914 0f3e 18       		.sleb128 24
 5915 0f3f 00       		.byte	0
 5916 0f40 1D       		.uleb128 0x1d
 5917 0f41 3C000000 		.4byte	.LVL184
 5918 0f45 AA1E0000 		.4byte	0x1eaa
 5919 0f49 540F0000 		.4byte	0xf54
 5920 0f4d 1A       		.uleb128 0x1a
 5921 0f4e 01       		.uleb128 0x1
 5922 0f4f 50       		.byte	0x50
 5923 0f50 02       		.uleb128 0x2
 5924 0f51 76       		.byte	0x76
 5925 0f52 00       		.sleb128 0
 5926 0f53 00       		.byte	0
 5927 0f54 1D       		.uleb128 0x1d
 5928 0f55 5E000000 		.4byte	.LVL185
 5929 0f59 851E0000 		.4byte	0x1e85
 5930 0f5d 680F0000 		.4byte	0xf68
 5931 0f61 1A       		.uleb128 0x1a
 5932 0f62 01       		.uleb128 0x1
 5933 0f63 51       		.byte	0x51
 5934 0f64 02       		.uleb128 0x2
 5935 0f65 76       		.byte	0x76
 5936 0f66 00       		.sleb128 0
 5937 0f67 00       		.byte	0
 5938 0f68 18       		.uleb128 0x18
 5939 0f69 86000000 		.4byte	.LVL187
 5940 0f6d 290E0000 		.4byte	0xe29
 5941 0f71 18       		.uleb128 0x18
 5942 0f72 B4000000 		.4byte	.LVL189
 5943 0f76 A31E0000 		.4byte	0x1ea3
 5944 0f7a 18       		.uleb128 0x18
 5945 0f7b C2000000 		.4byte	.LVL192
 5946 0f7f 9C1E0000 		.4byte	0x1e9c
 5947 0f83 00       		.byte	0
 5948 0f84 21       		.uleb128 0x21
 5949 0f85 BD0C0000 		.4byte	.LASF132
 5950 0f89 01       		.byte	0x1
 5951 0f8a 3A03     		.2byte	0x33a
 5952 0f8c 00000000 		.4byte	.LFB66
 5953 0f90 80000000 		.4byte	.LFE66-.LFB66
 5954 0f94 01       		.uleb128 0x1
 5955 0f95 9C       		.byte	0x9c
 5956 0f96 39100000 		.4byte	0x1039
 5957 0f9a 15       		.uleb128 0x15
 5958 0f9b A10A0000 		.4byte	.LASF133
 5959 0f9f 01       		.byte	0x1
 5960 0fa0 3A03     		.2byte	0x33a
 5961 0fa2 39100000 		.4byte	0x1039
 5962 0fa6 59080000 		.4byte	.LLST60
 5963 0faa 15       		.uleb128 0x15
 5964 0fab B40D0000 		.4byte	.LASF134
 5965 0faf 01       		.byte	0x1
 5966 0fb0 3A03     		.2byte	0x33a
 5967 0fb2 7B070000 		.4byte	0x77b
 5968 0fb6 85080000 		.4byte	.LLST61
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 195


 5969 0fba 16       		.uleb128 0x16
 5970 0fbb E20D0000 		.4byte	.LASF98
 5971 0fbf 01       		.byte	0x1
 5972 0fc0 3C03     		.2byte	0x33c
 5973 0fc2 3F010000 		.4byte	0x13f
 5974 0fc6 B1080000 		.4byte	.LLST62
 5975 0fca 16       		.uleb128 0x16
 5976 0fcb 300D0000 		.4byte	.LASF131
 5977 0fcf 01       		.byte	0x1
 5978 0fd0 3D03     		.2byte	0x33d
 5979 0fd2 29010000 		.4byte	0x129
 5980 0fd6 C4080000 		.4byte	.LLST63
 5981 0fda 16       		.uleb128 0x16
 5982 0fdb B7050000 		.4byte	.LASF135
 5983 0fdf 01       		.byte	0x1
 5984 0fe0 3D03     		.2byte	0x33d
 5985 0fe2 29010000 		.4byte	0x129
 5986 0fe6 D7080000 		.4byte	.LLST64
 5987 0fea 26       		.uleb128 0x26
 5988 0feb 18000000 		.4byte	.Ldebug_ranges0+0x18
 5989 0fef 1D100000 		.4byte	0x101d
 5990 0ff3 16       		.uleb128 0x16
 5991 0ff4 90040000 		.4byte	.LASF128
 5992 0ff8 01       		.byte	0x1
 5993 0ff9 4703     		.2byte	0x347
 5994 0ffb 7B070000 		.4byte	0x77b
 5995 0fff F6080000 		.4byte	.LLST65
 5996 1003 18       		.uleb128 0x18
 5997 1004 4E000000 		.4byte	.LVL201
 5998 1008 AA1E0000 		.4byte	0x1eaa
 5999 100c 19       		.uleb128 0x19
 6000 100d 6E000000 		.4byte	.LVL202
 6001 1011 42070000 		.4byte	0x742
 6002 1015 1A       		.uleb128 0x1a
 6003 1016 01       		.uleb128 0x1
 6004 1017 50       		.byte	0x50
 6005 1018 02       		.uleb128 0x2
 6006 1019 74       		.byte	0x74
 6007 101a 00       		.sleb128 0
 6008 101b 00       		.byte	0
 6009 101c 00       		.byte	0
 6010 101d 18       		.uleb128 0x18
 6011 101e 0A000000 		.4byte	.LVL196
 6012 1022 A20D0000 		.4byte	0xda2
 6013 1026 18       		.uleb128 0x18
 6014 1027 72000000 		.4byte	.LVL203
 6015 102b E90E0000 		.4byte	0xee9
 6016 102f 18       		.uleb128 0x18
 6017 1030 78000000 		.4byte	.LVL204
 6018 1034 A31E0000 		.4byte	0x1ea3
 6019 1038 00       		.byte	0
 6020 1039 07       		.uleb128 0x7
 6021 103a 3E100000 		.4byte	0x103e
 6022 103e 06       		.uleb128 0x6
 6023 103f 04       		.byte	0x4
 6024 1040 3F010000 		.4byte	0x13f
 6025 1044 21       		.uleb128 0x21
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 196


 6026 1045 F9040000 		.4byte	.LASF136
 6027 1049 01       		.byte	0x1
 6028 104a 9A03     		.2byte	0x39a
 6029 104c 00000000 		.4byte	.LFB67
 6030 1050 50000000 		.4byte	.LFE67-.LFB67
 6031 1054 01       		.uleb128 0x1
 6032 1055 9C       		.byte	0x9c
 6033 1056 C3100000 		.4byte	0x10c3
 6034 105a 15       		.uleb128 0x15
 6035 105b 86070000 		.4byte	.LASF137
 6036 105f 01       		.byte	0x1
 6037 1060 9A03     		.2byte	0x39a
 6038 1062 7B070000 		.4byte	0x77b
 6039 1066 09090000 		.4byte	.LLST66
 6040 106a 16       		.uleb128 0x16
 6041 106b E20D0000 		.4byte	.LASF98
 6042 106f 01       		.byte	0x1
 6043 1070 9C03     		.2byte	0x39c
 6044 1072 3F010000 		.4byte	0x13f
 6045 1076 4E090000 		.4byte	.LLST67
 6046 107a 16       		.uleb128 0x16
 6047 107b 300D0000 		.4byte	.LASF131
 6048 107f 01       		.byte	0x1
 6049 1080 9D03     		.2byte	0x39d
 6050 1082 29010000 		.4byte	0x129
 6051 1086 61090000 		.4byte	.LLST68
 6052 108a 18       		.uleb128 0x18
 6053 108b 0A000000 		.4byte	.LVL208
 6054 108f A20D0000 		.4byte	0xda2
 6055 1093 18       		.uleb128 0x18
 6056 1094 1C000000 		.4byte	.LVL210
 6057 1098 AA1E0000 		.4byte	0x1eaa
 6058 109c 1D       		.uleb128 0x1d
 6059 109d 3C000000 		.4byte	.LVL211
 6060 10a1 42070000 		.4byte	0x742
 6061 10a5 B0100000 		.4byte	0x10b0
 6062 10a9 1A       		.uleb128 0x1a
 6063 10aa 01       		.uleb128 0x1
 6064 10ab 50       		.byte	0x50
 6065 10ac 02       		.uleb128 0x2
 6066 10ad 74       		.byte	0x74
 6067 10ae 00       		.sleb128 0
 6068 10af 00       		.byte	0
 6069 10b0 18       		.uleb128 0x18
 6070 10b1 40000000 		.4byte	.LVL212
 6071 10b5 E90E0000 		.4byte	0xee9
 6072 10b9 18       		.uleb128 0x18
 6073 10ba 4A000000 		.4byte	.LVL215
 6074 10be A31E0000 		.4byte	0x1ea3
 6075 10c2 00       		.byte	0
 6076 10c3 17       		.uleb128 0x17
 6077 10c4 830E0000 		.4byte	.LASF138
 6078 10c8 01       		.byte	0x1
 6079 10c9 D60B     		.2byte	0xbd6
 6080 10cb 00000000 		.4byte	.LFB95
 6081 10cf 54000000 		.4byte	.LFE95-.LFB95
 6082 10d3 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 197


 6083 10d4 9C       		.byte	0x9c
 6084 10d5 5A110000 		.4byte	0x115a
 6085 10d9 27       		.uleb128 0x27
 6086 10da 02000000 		.4byte	.LBB14
 6087 10de 4C000000 		.4byte	.LBE14-.LBB14
 6088 10e2 16       		.uleb128 0x16
 6089 10e3 D9050000 		.4byte	.LASF139
 6090 10e7 01       		.byte	0x1
 6091 10e8 DA0B     		.2byte	0xbda
 6092 10ea 29010000 		.4byte	0x129
 6093 10ee 97090000 		.4byte	.LLST69
 6094 10f2 1B       		.uleb128 0x1b
 6095 10f3 14000000 		.4byte	.LBB15
 6096 10f7 30000000 		.4byte	.LBE15-.LBB15
 6097 10fb 46110000 		.4byte	0x1146
 6098 10ff 16       		.uleb128 0x16
 6099 1100 040E0000 		.4byte	.LASF81
 6100 1104 01       		.byte	0x1
 6101 1105 E80B     		.2byte	0xbe8
 6102 1107 E3040000 		.4byte	0x4e3
 6103 110b B1090000 		.4byte	.LLST70
 6104 110f 18       		.uleb128 0x18
 6105 1110 18000000 		.4byte	.LVL219
 6106 1114 7E1E0000 		.4byte	0x1e7e
 6107 1118 1D       		.uleb128 0x1d
 6108 1119 26000000 		.4byte	.LVL222
 6109 111d AA1E0000 		.4byte	0x1eaa
 6110 1121 2C110000 		.4byte	0x112c
 6111 1125 1A       		.uleb128 0x1a
 6112 1126 01       		.uleb128 0x1
 6113 1127 50       		.byte	0x50
 6114 1128 02       		.uleb128 0x2
 6115 1129 75       		.byte	0x75
 6116 112a 04       		.sleb128 4
 6117 112b 00       		.byte	0
 6118 112c 18       		.uleb128 0x18
 6119 112d 3E000000 		.4byte	.LVL223
 6120 1131 9C1E0000 		.4byte	0x1e9c
 6121 1135 19       		.uleb128 0x19
 6122 1136 44000000 		.4byte	.LVL224
 6123 113a E9040000 		.4byte	0x4e9
 6124 113e 1A       		.uleb128 0x1a
 6125 113f 01       		.uleb128 0x1
 6126 1140 50       		.byte	0x50
 6127 1141 02       		.uleb128 0x2
 6128 1142 75       		.byte	0x75
 6129 1143 00       		.sleb128 0
 6130 1144 00       		.byte	0
 6131 1145 00       		.byte	0
 6132 1146 18       		.uleb128 0x18
 6133 1147 08000000 		.4byte	.LVL216
 6134 114b A20D0000 		.4byte	0xda2
 6135 114f 18       		.uleb128 0x18
 6136 1150 12000000 		.4byte	.LVL218
 6137 1154 E90E0000 		.4byte	0xee9
 6138 1158 00       		.byte	0
 6139 1159 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 198


 6140 115a 17       		.uleb128 0x17
 6141 115b C4050000 		.4byte	.LASF140
 6142 115f 01       		.byte	0x1
 6143 1160 820A     		.2byte	0xa82
 6144 1162 00000000 		.4byte	.LFB92
 6145 1166 08000000 		.4byte	.LFE92-.LFB92
 6146 116a 01       		.uleb128 0x1
 6147 116b 9C       		.byte	0x9c
 6148 116c 8A110000 		.4byte	0x118a
 6149 1170 15       		.uleb128 0x15
 6150 1171 90090000 		.4byte	.LASF100
 6151 1175 01       		.byte	0x1
 6152 1176 820A     		.2byte	0xa82
 6153 1178 A9000000 		.4byte	0xa9
 6154 117c C4090000 		.4byte	.LLST71
 6155 1180 18       		.uleb128 0x18
 6156 1181 06000000 		.4byte	.LVL227
 6157 1185 C3100000 		.4byte	0x10c3
 6158 1189 00       		.byte	0
 6159 118a 21       		.uleb128 0x21
 6160 118b 18090000 		.4byte	.LASF141
 6161 118f 01       		.byte	0x1
 6162 1190 9B08     		.2byte	0x89b
 6163 1192 00000000 		.4byte	.LFB84
 6164 1196 A8000000 		.4byte	.LFE84-.LFB84
 6165 119a 01       		.uleb128 0x1
 6166 119b 9C       		.byte	0x9c
 6167 119c 3E120000 		.4byte	0x123e
 6168 11a0 1B       		.uleb128 0x1b
 6169 11a1 1C000000 		.4byte	.LBB16
 6170 11a5 36000000 		.4byte	.LBE16-.LBB16
 6171 11a9 D8110000 		.4byte	0x11d8
 6172 11ad 16       		.uleb128 0x16
 6173 11ae 700B0000 		.4byte	.LASF142
 6174 11b2 01       		.byte	0x1
 6175 11b3 C408     		.2byte	0x8c4
 6176 11b5 3E120000 		.4byte	0x123e
 6177 11b9 E5090000 		.4byte	.LLST72
 6178 11bd 28       		.uleb128 0x28
 6179 11be D2060000 		.4byte	.LASF143
 6180 11c2 01       		.byte	0x1
 6181 11c3 C408     		.2byte	0x8c4
 6182 11c5 49120000 		.4byte	0x1249
 6183 11c9 A5CB96AD 		.sleb128 -1515870811
 6183      7A
 6184 11ce 18       		.uleb128 0x18
 6185 11cf 52000000 		.4byte	.LVL230
 6186 11d3 EE1E0000 		.4byte	0x1eee
 6187 11d7 00       		.byte	0
 6188 11d8 27       		.uleb128 0x27
 6189 11d9 52000000 		.4byte	.LBB17
 6190 11dd 56000000 		.4byte	.LBE17-.LBB17
 6191 11e1 16       		.uleb128 0x16
 6192 11e2 A00C0000 		.4byte	.LASF144
 6193 11e6 01       		.byte	0x1
 6194 11e7 C808     		.2byte	0x8c8
 6195 11e9 34010000 		.4byte	0x134
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 199


 6196 11ed F8090000 		.4byte	.LLST73
 6197 11f1 29       		.uleb128 0x29
 6198 11f2 EF030000 		.4byte	0x3ef
 6199 11f6 58000000 		.4byte	.LBB18
 6200 11fa 06000000 		.4byte	.LBE18-.LBB18
 6201 11fe 01       		.byte	0x1
 6202 11ff C808     		.2byte	0x8c8
 6203 1201 22120000 		.4byte	0x1222
 6204 1205 2A       		.uleb128 0x2a
 6205 1206 FF030000 		.4byte	0x3ff
 6206 120a 0B0A0000 		.4byte	.LLST74
 6207 120e 27       		.uleb128 0x27
 6208 120f 58000000 		.4byte	.LBB19
 6209 1213 06000000 		.4byte	.LBE19-.LBB19
 6210 1217 2B       		.uleb128 0x2b
 6211 1218 0A040000 		.4byte	0x40a
 6212 121c 1E0A0000 		.4byte	.LLST75
 6213 1220 00       		.byte	0
 6214 1221 00       		.byte	0
 6215 1222 27       		.uleb128 0x27
 6216 1223 62000000 		.4byte	.LBB20
 6217 1227 46000000 		.4byte	.LBE20-.LBB20
 6218 122b 16       		.uleb128 0x16
 6219 122c 4C000000 		.4byte	.LASF145
 6220 1230 01       		.byte	0x1
 6221 1231 C808     		.2byte	0x8c8
 6222 1233 4E120000 		.4byte	0x124e
 6223 1237 310A0000 		.4byte	.LLST76
 6224 123b 00       		.byte	0
 6225 123c 00       		.byte	0
 6226 123d 00       		.byte	0
 6227 123e 07       		.uleb128 0x7
 6228 123f 43120000 		.4byte	0x1243
 6229 1243 06       		.uleb128 0x6
 6230 1244 04       		.byte	0x4
 6231 1245 49120000 		.4byte	0x1249
 6232 1249 07       		.uleb128 0x7
 6233 124a E4000000 		.4byte	0xe4
 6234 124e 07       		.uleb128 0x7
 6235 124f 180A0000 		.4byte	0xa18
 6236 1253 21       		.uleb128 0x21
 6237 1254 230D0000 		.4byte	.LASF146
 6238 1258 01       		.byte	0x1
 6239 1259 0405     		.2byte	0x504
 6240 125b 00000000 		.4byte	.LFB72
 6241 125f A0000000 		.4byte	.LFE72-.LFB72
 6242 1263 01       		.uleb128 0x1
 6243 1264 9C       		.byte	0x9c
 6244 1265 0B130000 		.4byte	0x130b
 6245 1269 15       		.uleb128 0x15
 6246 126a 610A0000 		.4byte	.LASF147
 6247 126e 01       		.byte	0x1
 6248 126f 0405     		.2byte	0x504
 6249 1271 28020000 		.4byte	0x228
 6250 1275 4E0A0000 		.4byte	.LLST77
 6251 1279 16       		.uleb128 0x16
 6252 127a 040E0000 		.4byte	.LASF81
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 200


 6253 127e 01       		.byte	0x1
 6254 127f 0605     		.2byte	0x506
 6255 1281 E3040000 		.4byte	0x4e3
 6256 1285 6C0A0000 		.4byte	.LLST78
 6257 1289 18       		.uleb128 0x18
 6258 128a 08000000 		.4byte	.LVL237
 6259 128e 7E1E0000 		.4byte	0x1e7e
 6260 1292 1D       		.uleb128 0x1d
 6261 1293 18000000 		.4byte	.LVL239
 6262 1297 AA1E0000 		.4byte	0x1eaa
 6263 129b A6120000 		.4byte	0x12a6
 6264 129f 1A       		.uleb128 0x1a
 6265 12a0 01       		.uleb128 0x1
 6266 12a1 50       		.byte	0x50
 6267 12a2 02       		.uleb128 0x2
 6268 12a3 76       		.byte	0x76
 6269 12a4 00       		.sleb128 0
 6270 12a5 00       		.byte	0
 6271 12a6 1D       		.uleb128 0x1d
 6272 12a7 46000000 		.4byte	.LVL240
 6273 12ab AA1E0000 		.4byte	0x1eaa
 6274 12af BA120000 		.4byte	0x12ba
 6275 12b3 1A       		.uleb128 0x1a
 6276 12b4 01       		.uleb128 0x1
 6277 12b5 50       		.byte	0x50
 6278 12b6 02       		.uleb128 0x2
 6279 12b7 74       		.byte	0x74
 6280 12b8 18       		.sleb128 24
 6281 12b9 00       		.byte	0
 6282 12ba 1D       		.uleb128 0x1d
 6283 12bb 50000000 		.4byte	.LVL241
 6284 12bf 851E0000 		.4byte	0x1e85
 6285 12c3 D4120000 		.4byte	0x12d4
 6286 12c7 1A       		.uleb128 0x1a
 6287 12c8 01       		.uleb128 0x1
 6288 12c9 51       		.byte	0x51
 6289 12ca 02       		.uleb128 0x2
 6290 12cb 76       		.byte	0x76
 6291 12cc 00       		.sleb128 0
 6292 12cd 1A       		.uleb128 0x1a
 6293 12ce 01       		.uleb128 0x1
 6294 12cf 50       		.byte	0x50
 6295 12d0 02       		.uleb128 0x2
 6296 12d1 75       		.byte	0x75
 6297 12d2 00       		.sleb128 0
 6298 12d3 00       		.byte	0
 6299 12d4 18       		.uleb128 0x18
 6300 12d5 54000000 		.4byte	.LVL242
 6301 12d9 9C1E0000 		.4byte	0x1e9c
 6302 12dd 18       		.uleb128 0x18
 6303 12de 66000000 		.4byte	.LVL243
 6304 12e2 A31E0000 		.4byte	0x1ea3
 6305 12e6 18       		.uleb128 0x18
 6306 12e7 82000000 		.4byte	.LVL246
 6307 12eb 8A110000 		.4byte	0x118a
 6308 12ef 18       		.uleb128 0x18
 6309 12f0 90000000 		.4byte	.LVL248
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 201


 6310 12f4 7E1E0000 		.4byte	0x1e7e
 6311 12f8 18       		.uleb128 0x18
 6312 12f9 94000000 		.4byte	.LVL249
 6313 12fd BC040000 		.4byte	0x4bc
 6314 1301 18       		.uleb128 0x18
 6315 1302 98000000 		.4byte	.LVL250
 6316 1306 9C1E0000 		.4byte	0x1e9c
 6317 130a 00       		.byte	0
 6318 130b 21       		.uleb128 0x21
 6319 130c E3040000 		.4byte	.LASF148
 6320 1310 01       		.byte	0x1
 6321 1311 D608     		.2byte	0x8d6
 6322 1313 00000000 		.4byte	.LFB85
 6323 1317 58000000 		.4byte	.LFE85-.LFB85
 6324 131b 01       		.uleb128 0x1
 6325 131c 9C       		.byte	0x9c
 6326 131d 8D130000 		.4byte	0x138d
 6327 1321 15       		.uleb128 0x15
 6328 1322 FD000000 		.4byte	.LASF149
 6329 1326 01       		.byte	0x1
 6330 1327 D608     		.2byte	0x8d6
 6331 1329 4E120000 		.4byte	0x124e
 6332 132d 7F0A0000 		.4byte	.LLST79
 6333 1331 15       		.uleb128 0x15
 6334 1332 F80C0000 		.4byte	.LASF150
 6335 1336 01       		.byte	0x1
 6336 1337 D608     		.2byte	0x8d6
 6337 1339 7B070000 		.4byte	0x77b
 6338 133d A00A0000 		.4byte	.LLST80
 6339 1341 16       		.uleb128 0x16
 6340 1342 E20D0000 		.4byte	.LASF98
 6341 1346 01       		.byte	0x1
 6342 1347 D808     		.2byte	0x8d8
 6343 1349 3F010000 		.4byte	0x13f
 6344 134d CC0A0000 		.4byte	.LLST81
 6345 1351 1D       		.uleb128 0x1d
 6346 1352 10000000 		.4byte	.LVL254
 6347 1356 481E0000 		.4byte	0x1e48
 6348 135a 66130000 		.4byte	0x1366
 6349 135e 1A       		.uleb128 0x1a
 6350 135f 01       		.uleb128 0x1
 6351 1360 50       		.byte	0x50
 6352 1361 03       		.uleb128 0x3
 6353 1362 F3       		.byte	0xf3
 6354 1363 01       		.uleb128 0x1
 6355 1364 50       		.byte	0x50
 6356 1365 00       		.byte	0
 6357 1366 18       		.uleb128 0x18
 6358 1367 1A000000 		.4byte	.LVL255
 6359 136b AA1E0000 		.4byte	0x1eaa
 6360 136f 1D       		.uleb128 0x1d
 6361 1370 44000000 		.4byte	.LVL256
 6362 1374 851E0000 		.4byte	0x1e85
 6363 1378 83130000 		.4byte	0x1383
 6364 137c 1A       		.uleb128 0x1a
 6365 137d 01       		.uleb128 0x1
 6366 137e 50       		.byte	0x50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 202


 6367 137f 02       		.uleb128 0x2
 6368 1380 74       		.byte	0x74
 6369 1381 00       		.sleb128 0
 6370 1382 00       		.byte	0
 6371 1383 18       		.uleb128 0x18
 6372 1384 52000000 		.4byte	.LVL260
 6373 1388 42070000 		.4byte	0x742
 6374 138c 00       		.byte	0
 6375 138d 21       		.uleb128 0x21
 6376 138e 9C0B0000 		.4byte	.LASF151
 6377 1392 01       		.byte	0x1
 6378 1393 1109     		.2byte	0x911
 6379 1395 00000000 		.4byte	.LFB86
 6380 1399 64000000 		.4byte	.LFE86-.LFB86
 6381 139d 01       		.uleb128 0x1
 6382 139e 9C       		.byte	0x9c
 6383 139f 1F140000 		.4byte	0x141f
 6384 13a3 15       		.uleb128 0x15
 6385 13a4 FD000000 		.4byte	.LASF149
 6386 13a8 01       		.byte	0x1
 6387 13a9 1109     		.2byte	0x911
 6388 13ab 180A0000 		.4byte	0xa18
 6389 13af EF0A0000 		.4byte	.LLST82
 6390 13b3 15       		.uleb128 0x15
 6391 13b4 9D090000 		.4byte	.LASF27
 6392 13b8 01       		.byte	0x1
 6393 13b9 1109     		.2byte	0x911
 6394 13bb 7B070000 		.4byte	0x77b
 6395 13bf 100B0000 		.4byte	.LLST83
 6396 13c3 15       		.uleb128 0x15
 6397 13c4 F80C0000 		.4byte	.LASF150
 6398 13c8 01       		.byte	0x1
 6399 13c9 1109     		.2byte	0x911
 6400 13cb 7B070000 		.4byte	0x77b
 6401 13cf 310B0000 		.4byte	.LLST84
 6402 13d3 16       		.uleb128 0x16
 6403 13d4 E20D0000 		.4byte	.LASF98
 6404 13d8 01       		.byte	0x1
 6405 13d9 1309     		.2byte	0x913
 6406 13db 3F010000 		.4byte	0x13f
 6407 13df 5D0B0000 		.4byte	.LLST85
 6408 13e3 1D       		.uleb128 0x1d
 6409 13e4 1A000000 		.4byte	.LVL264
 6410 13e8 851E0000 		.4byte	0x1e85
 6411 13ec F8130000 		.4byte	0x13f8
 6412 13f0 1A       		.uleb128 0x1a
 6413 13f1 01       		.uleb128 0x1
 6414 13f2 50       		.byte	0x50
 6415 13f3 03       		.uleb128 0x3
 6416 13f4 F3       		.byte	0xf3
 6417 13f5 01       		.uleb128 0x1
 6418 13f6 50       		.byte	0x50
 6419 13f7 00       		.byte	0
 6420 13f8 18       		.uleb128 0x18
 6421 13f9 24000000 		.4byte	.LVL265
 6422 13fd AA1E0000 		.4byte	0x1eaa
 6423 1401 1D       		.uleb128 0x1d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 203


 6424 1402 4E000000 		.4byte	.LVL266
 6425 1406 851E0000 		.4byte	0x1e85
 6426 140a 15140000 		.4byte	0x1415
 6427 140e 1A       		.uleb128 0x1a
 6428 140f 01       		.uleb128 0x1
 6429 1410 50       		.byte	0x50
 6430 1411 02       		.uleb128 0x2
 6431 1412 74       		.byte	0x74
 6432 1413 00       		.sleb128 0
 6433 1414 00       		.byte	0
 6434 1415 18       		.uleb128 0x18
 6435 1416 5C000000 		.4byte	.LVL270
 6436 141a 42070000 		.4byte	0x742
 6437 141e 00       		.byte	0
 6438 141f 20       		.uleb128 0x20
 6439 1420 58050000 		.4byte	.LASF152
 6440 1424 01       		.byte	0x1
 6441 1425 A109     		.2byte	0x9a1
 6442 1427 29010000 		.4byte	0x129
 6443 142b 00000000 		.4byte	.LFB87
 6444 142f 70000000 		.4byte	.LFE87-.LFB87
 6445 1433 01       		.uleb128 0x1
 6446 1434 9C       		.byte	0x9c
 6447 1435 BF140000 		.4byte	0x14bf
 6448 1439 15       		.uleb128 0x15
 6449 143a FD000000 		.4byte	.LASF149
 6450 143e 01       		.byte	0x1
 6451 143f A109     		.2byte	0x9a1
 6452 1441 BF140000 		.4byte	0x14bf
 6453 1445 800B0000 		.4byte	.LLST86
 6454 1449 16       		.uleb128 0x16
 6455 144a C7020000 		.4byte	.LASF153
 6456 144e 01       		.byte	0x1
 6457 144f A309     		.2byte	0x9a3
 6458 1451 E3040000 		.4byte	0x4e3
 6459 1455 A10B0000 		.4byte	.LLST87
 6460 1459 16       		.uleb128 0x16
 6461 145a F40A0000 		.4byte	.LASF80
 6462 145e 01       		.byte	0x1
 6463 145f A409     		.2byte	0x9a4
 6464 1461 29010000 		.4byte	0x129
 6465 1465 B40B0000 		.4byte	.LLST88
 6466 1469 1D       		.uleb128 0x1d
 6467 146a 10000000 		.4byte	.LVL275
 6468 146e AA1E0000 		.4byte	0x1eaa
 6469 1472 7D140000 		.4byte	0x147d
 6470 1476 1A       		.uleb128 0x1a
 6471 1477 01       		.uleb128 0x1
 6472 1478 50       		.byte	0x50
 6473 1479 02       		.uleb128 0x2
 6474 147a 75       		.byte	0x75
 6475 147b 00       		.sleb128 0
 6476 147c 00       		.byte	0
 6477 147d 1D       		.uleb128 0x1d
 6478 147e 20000000 		.4byte	.LVL276
 6479 1482 AA1E0000 		.4byte	0x1eaa
 6480 1486 91140000 		.4byte	0x1491
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 204


 6481 148a 1A       		.uleb128 0x1a
 6482 148b 01       		.uleb128 0x1
 6483 148c 50       		.byte	0x50
 6484 148d 02       		.uleb128 0x2
 6485 148e 75       		.byte	0x75
 6486 148f 00       		.sleb128 0
 6487 1490 00       		.byte	0
 6488 1491 1D       		.uleb128 0x1d
 6489 1492 42000000 		.4byte	.LVL277
 6490 1496 851E0000 		.4byte	0x1e85
 6491 149a A5140000 		.4byte	0x14a5
 6492 149e 1A       		.uleb128 0x1a
 6493 149f 01       		.uleb128 0x1
 6494 14a0 51       		.byte	0x51
 6495 14a1 02       		.uleb128 0x2
 6496 14a2 75       		.byte	0x75
 6497 14a3 00       		.sleb128 0
 6498 14a4 00       		.byte	0
 6499 14a5 19       		.uleb128 0x19
 6500 14a6 4C000000 		.4byte	.LVL278
 6501 14aa 851E0000 		.4byte	0x1e85
 6502 14ae 1A       		.uleb128 0x1a
 6503 14af 01       		.uleb128 0x1
 6504 14b0 51       		.byte	0x51
 6505 14b1 02       		.uleb128 0x2
 6506 14b2 75       		.byte	0x75
 6507 14b3 00       		.sleb128 0
 6508 14b4 1A       		.uleb128 0x1a
 6509 14b5 01       		.uleb128 0x1
 6510 14b6 50       		.byte	0x50
 6511 14b7 05       		.uleb128 0x5
 6512 14b8 03       		.byte	0x3
 6513 14b9 14000000 		.4byte	.LANCHOR0+20
 6514 14bd 00       		.byte	0
 6515 14be 00       		.byte	0
 6516 14bf 07       		.uleb128 0x7
 6517 14c0 C4140000 		.4byte	0x14c4
 6518 14c4 06       		.uleb128 0x6
 6519 14c5 04       		.byte	0x4
 6520 14c6 CA140000 		.4byte	0x14ca
 6521 14ca 07       		.uleb128 0x7
 6522 14cb 1D020000 		.4byte	0x21d
 6523 14cf 20       		.uleb128 0x20
 6524 14d0 BB0B0000 		.4byte	.LASF154
 6525 14d4 01       		.byte	0x1
 6526 14d5 E509     		.2byte	0x9e5
 6527 14d7 29010000 		.4byte	0x129
 6528 14db 00000000 		.4byte	.LFB88
 6529 14df 58000000 		.4byte	.LFE88-.LFB88
 6530 14e3 01       		.uleb128 0x1
 6531 14e4 9C       		.byte	0x9c
 6532 14e5 63150000 		.4byte	0x1563
 6533 14e9 15       		.uleb128 0x15
 6534 14ea 650E0000 		.4byte	.LASF155
 6535 14ee 01       		.byte	0x1
 6536 14ef E509     		.2byte	0x9e5
 6537 14f1 17020000 		.4byte	0x217
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 205


 6538 14f5 D30B0000 		.4byte	.LLST89
 6539 14f9 15       		.uleb128 0x15
 6540 14fa 9D090000 		.4byte	.LASF27
 6541 14fe 01       		.byte	0x1
 6542 14ff E509     		.2byte	0x9e5
 6543 1501 7B070000 		.4byte	0x77b
 6544 1505 F40B0000 		.4byte	.LLST90
 6545 1509 16       		.uleb128 0x16
 6546 150a C7020000 		.4byte	.LASF153
 6547 150e 01       		.byte	0x1
 6548 150f E709     		.2byte	0x9e7
 6549 1511 E3040000 		.4byte	0x4e3
 6550 1515 150C0000 		.4byte	.LLST91
 6551 1519 16       		.uleb128 0x16
 6552 151a F40A0000 		.4byte	.LASF80
 6553 151e 01       		.byte	0x1
 6554 151f E809     		.2byte	0x9e8
 6555 1521 29010000 		.4byte	0x129
 6556 1525 280C0000 		.4byte	.LLST92
 6557 1529 1D       		.uleb128 0x1d
 6558 152a 0E000000 		.4byte	.LVL286
 6559 152e AA1E0000 		.4byte	0x1eaa
 6560 1532 3E150000 		.4byte	0x153e
 6561 1536 1A       		.uleb128 0x1a
 6562 1537 01       		.uleb128 0x1
 6563 1538 50       		.byte	0x50
 6564 1539 03       		.uleb128 0x3
 6565 153a F3       		.byte	0xf3
 6566 153b 01       		.uleb128 0x1
 6567 153c 50       		.byte	0x50
 6568 153d 00       		.byte	0
 6569 153e 1D       		.uleb128 0x1d
 6570 153f 16000000 		.4byte	.LVL287
 6571 1543 AA1E0000 		.4byte	0x1eaa
 6572 1547 52150000 		.4byte	0x1552
 6573 154b 1A       		.uleb128 0x1a
 6574 154c 01       		.uleb128 0x1
 6575 154d 50       		.byte	0x50
 6576 154e 02       		.uleb128 0x2
 6577 154f 76       		.byte	0x76
 6578 1550 00       		.sleb128 0
 6579 1551 00       		.byte	0
 6580 1552 19       		.uleb128 0x19
 6581 1553 3A000000 		.4byte	.LVL288
 6582 1557 851E0000 		.4byte	0x1e85
 6583 155b 1A       		.uleb128 0x1a
 6584 155c 01       		.uleb128 0x1
 6585 155d 51       		.byte	0x51
 6586 155e 02       		.uleb128 0x2
 6587 155f 76       		.byte	0x76
 6588 1560 00       		.sleb128 0
 6589 1561 00       		.byte	0
 6590 1562 00       		.byte	0
 6591 1563 21       		.uleb128 0x21
 6592 1564 7F010000 		.4byte	.LASF156
 6593 1568 01       		.byte	0x1
 6594 1569 120A     		.2byte	0xa12
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 206


 6595 156b 00000000 		.4byte	.LFB89
 6596 156f 14000000 		.4byte	.LFE89-.LFB89
 6597 1573 01       		.uleb128 0x1
 6598 1574 9C       		.byte	0x9c
 6599 1575 88150000 		.4byte	0x1588
 6600 1579 1E       		.uleb128 0x1e
 6601 157a 7C070000 		.4byte	.LASF157
 6602 157e 01       		.byte	0x1
 6603 157f 120A     		.2byte	0xa12
 6604 1581 88150000 		.4byte	0x1588
 6605 1585 01       		.uleb128 0x1
 6606 1586 50       		.byte	0x50
 6607 1587 00       		.byte	0
 6608 1588 07       		.uleb128 0x7
 6609 1589 8D150000 		.4byte	0x158d
 6610 158d 06       		.uleb128 0x6
 6611 158e 04       		.byte	0x4
 6612 158f BC020000 		.4byte	0x2bc
 6613 1593 20       		.uleb128 0x20
 6614 1594 700A0000 		.4byte	.LASF158
 6615 1598 01       		.byte	0x1
 6616 1599 1A0A     		.2byte	0xa1a
 6617 159b 29010000 		.4byte	0x129
 6618 159f 00000000 		.4byte	.LFB90
 6619 15a3 58000000 		.4byte	.LFE90-.LFB90
 6620 15a7 01       		.uleb128 0x1
 6621 15a8 9C       		.byte	0x9c
 6622 15a9 1E160000 		.4byte	0x161e
 6623 15ad 15       		.uleb128 0x15
 6624 15ae 7C070000 		.4byte	.LASF157
 6625 15b2 01       		.byte	0x1
 6626 15b3 1A0A     		.2byte	0xa1a
 6627 15b5 88150000 		.4byte	0x1588
 6628 15b9 470C0000 		.4byte	.LLST93
 6629 15bd 15       		.uleb128 0x15
 6630 15be 860C0000 		.4byte	.LASF159
 6631 15c2 01       		.byte	0x1
 6632 15c3 1A0A     		.2byte	0xa1a
 6633 15c5 39100000 		.4byte	0x1039
 6634 15c9 BE0C0000 		.4byte	.LLST94
 6635 15cd 16       		.uleb128 0x16
 6636 15ce F40A0000 		.4byte	.LASF80
 6637 15d2 01       		.byte	0x1
 6638 15d3 1C0A     		.2byte	0xa1c
 6639 15d5 29010000 		.4byte	0x129
 6640 15d9 EA0C0000 		.4byte	.LLST95
 6641 15dd 1B       		.uleb128 0x1b
 6642 15de 0A000000 		.4byte	.LBB21
 6643 15e2 42000000 		.4byte	.LBE21-.LBB21
 6644 15e6 0B160000 		.4byte	0x160b
 6645 15ea 16       		.uleb128 0x16
 6646 15eb 90040000 		.4byte	.LASF128
 6647 15ef 01       		.byte	0x1
 6648 15f0 240A     		.2byte	0xa24
 6649 15f2 7B070000 		.4byte	0x77b
 6650 15f6 140D0000 		.4byte	.LLST96
 6651 15fa 19       		.uleb128 0x19
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 207


 6652 15fb 3E000000 		.4byte	.LVL298
 6653 15ff 63150000 		.4byte	0x1563
 6654 1603 1A       		.uleb128 0x1a
 6655 1604 01       		.uleb128 0x1
 6656 1605 50       		.byte	0x50
 6657 1606 02       		.uleb128 0x2
 6658 1607 74       		.byte	0x74
 6659 1608 00       		.sleb128 0
 6660 1609 00       		.byte	0
 6661 160a 00       		.byte	0
 6662 160b 18       		.uleb128 0x18
 6663 160c 0A000000 		.4byte	.LVL295
 6664 1610 7E1E0000 		.4byte	0x1e7e
 6665 1614 18       		.uleb128 0x18
 6666 1615 50000000 		.4byte	.LVL306
 6667 1619 9C1E0000 		.4byte	0x1e9c
 6668 161d 00       		.byte	0
 6669 161e 22       		.uleb128 0x22
 6670 161f 050B0000 		.4byte	.LASF161
 6671 1623 01       		.byte	0x1
 6672 1624 4B0A     		.2byte	0xa4b
 6673 1626 00000000 		.4byte	.LFB91
 6674 162a 10000000 		.4byte	.LFE91-.LFB91
 6675 162e 01       		.uleb128 0x1
 6676 162f 9C       		.byte	0x9c
 6677 1630 20       		.uleb128 0x20
 6678 1631 D8030000 		.4byte	.LASF162
 6679 1635 01       		.byte	0x1
 6680 1636 D30C     		.2byte	0xcd3
 6681 1638 34010000 		.4byte	0x134
 6682 163c 00000000 		.4byte	.LFB99
 6683 1640 18000000 		.4byte	.LFE99-.LFB99
 6684 1644 01       		.uleb128 0x1
 6685 1645 9C       		.byte	0x9c
 6686 1646 92160000 		.4byte	0x1692
 6687 164a 15       		.uleb128 0x15
 6688 164b 44080000 		.4byte	.LASF84
 6689 164f 01       		.byte	0x1
 6690 1650 D30C     		.2byte	0xcd3
 6691 1652 28020000 		.4byte	0x228
 6692 1656 320D0000 		.4byte	.LLST97
 6693 165a 16       		.uleb128 0x16
 6694 165b 040E0000 		.4byte	.LASF81
 6695 165f 01       		.byte	0x1
 6696 1660 D50C     		.2byte	0xcd5
 6697 1662 E3040000 		.4byte	0x4e3
 6698 1666 450D0000 		.4byte	.LLST98
 6699 166a 16       		.uleb128 0x16
 6700 166b 360B0000 		.4byte	.LASF163
 6701 166f 01       		.byte	0x1
 6702 1670 D60C     		.2byte	0xcd6
 6703 1672 4A010000 		.4byte	0x14a
 6704 1676 580D0000 		.4byte	.LLST99
 6705 167a 1C       		.uleb128 0x1c
 6706 167b 55020000 		.4byte	.LASF108
 6707 167f 01       		.byte	0x1
 6708 1680 D70C     		.2byte	0xcd7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 208


 6709 1682 34010000 		.4byte	0x134
 6710 1686 01       		.uleb128 0x1
 6711 1687 50       		.byte	0x50
 6712 1688 18       		.uleb128 0x18
 6713 1689 12000000 		.4byte	.LVL310
 6714 168d 76040000 		.4byte	0x476
 6715 1691 00       		.byte	0
 6716 1692 20       		.uleb128 0x20
 6717 1693 400D0000 		.4byte	.LASF164
 6718 1697 01       		.byte	0x1
 6719 1698 2D0D     		.2byte	0xd2d
 6720 169a 28020000 		.4byte	0x228
 6721 169e 00000000 		.4byte	.LFB102
 6722 16a2 0C000000 		.4byte	.LFE102-.LFB102
 6723 16a6 01       		.uleb128 0x1
 6724 16a7 9C       		.byte	0x9c
 6725 16a8 BB160000 		.4byte	0x16bb
 6726 16ac 1C       		.uleb128 0x1c
 6727 16ad F40A0000 		.4byte	.LASF80
 6728 16b1 01       		.byte	0x1
 6729 16b2 2F0D     		.2byte	0xd2f
 6730 16b4 28020000 		.4byte	0x228
 6731 16b8 01       		.uleb128 0x1
 6732 16b9 50       		.byte	0x50
 6733 16ba 00       		.byte	0
 6734 16bb 21       		.uleb128 0x21
 6735 16bc 23010000 		.4byte	.LASF165
 6736 16c0 01       		.byte	0x1
 6737 16c1 5A0D     		.2byte	0xd5a
 6738 16c3 00000000 		.4byte	.LFB103
 6739 16c7 B0000000 		.4byte	.LFE103-.LFB103
 6740 16cb 01       		.uleb128 0x1
 6741 16cc 9C       		.byte	0x9c
 6742 16cd 16170000 		.4byte	0x1716
 6743 16d1 15       		.uleb128 0x15
 6744 16d2 350A0000 		.4byte	.LASF166
 6745 16d6 01       		.byte	0x1
 6746 16d7 5A0D     		.2byte	0xd5a
 6747 16d9 61040000 		.4byte	0x461
 6748 16dd 6C0D0000 		.4byte	.LLST100
 6749 16e1 16       		.uleb128 0x16
 6750 16e2 040E0000 		.4byte	.LASF81
 6751 16e6 01       		.byte	0x1
 6752 16e7 5C0D     		.2byte	0xd5c
 6753 16e9 84060000 		.4byte	0x684
 6754 16ed 6C0D0000 		.4byte	.LLST100
 6755 16f1 1D       		.uleb128 0x1d
 6756 16f2 4E000000 		.4byte	.LVL314
 6757 16f6 AA1E0000 		.4byte	0x1eaa
 6758 16fa 05170000 		.4byte	0x1705
 6759 16fe 1A       		.uleb128 0x1a
 6760 16ff 01       		.uleb128 0x1
 6761 1700 50       		.byte	0x50
 6762 1701 02       		.uleb128 0x2
 6763 1702 74       		.byte	0x74
 6764 1703 00       		.sleb128 0
 6765 1704 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 209


 6766 1705 19       		.uleb128 0x19
 6767 1706 98000000 		.4byte	.LVL315
 6768 170a 851E0000 		.4byte	0x1e85
 6769 170e 1A       		.uleb128 0x1a
 6770 170f 01       		.uleb128 0x1
 6771 1710 51       		.byte	0x51
 6772 1711 02       		.uleb128 0x2
 6773 1712 74       		.byte	0x74
 6774 1713 00       		.sleb128 0
 6775 1714 00       		.byte	0
 6776 1715 00       		.byte	0
 6777 1716 20       		.uleb128 0x20
 6778 1717 40050000 		.4byte	.LASF167
 6779 171b 01       		.byte	0x1
 6780 171c 9C0D     		.2byte	0xd9c
 6781 171e 29010000 		.4byte	0x129
 6782 1722 00000000 		.4byte	.LFB104
 6783 1726 84000000 		.4byte	.LFE104-.LFB104
 6784 172a 01       		.uleb128 0x1
 6785 172b 9C       		.byte	0x9c
 6786 172c 85170000 		.4byte	0x1785
 6787 1730 15       		.uleb128 0x15
 6788 1731 350A0000 		.4byte	.LASF166
 6789 1735 01       		.byte	0x1
 6790 1736 9C0D     		.2byte	0xd9c
 6791 1738 61040000 		.4byte	0x461
 6792 173c AB0D0000 		.4byte	.LLST102
 6793 1740 16       		.uleb128 0x16
 6794 1741 040E0000 		.4byte	.LASF81
 6795 1745 01       		.byte	0x1
 6796 1746 9E0D     		.2byte	0xd9e
 6797 1748 84060000 		.4byte	0x684
 6798 174c AB0D0000 		.4byte	.LLST102
 6799 1750 16       		.uleb128 0x16
 6800 1751 F40A0000 		.4byte	.LASF80
 6801 1755 01       		.byte	0x1
 6802 1756 9F0D     		.2byte	0xd9f
 6803 1758 29010000 		.4byte	0x129
 6804 175c 130E0000 		.4byte	.LLST104
 6805 1760 1D       		.uleb128 0x1d
 6806 1761 22000000 		.4byte	.LVL320
 6807 1765 AA1E0000 		.4byte	0x1eaa
 6808 1769 74170000 		.4byte	0x1774
 6809 176d 1A       		.uleb128 0x1a
 6810 176e 01       		.uleb128 0x1
 6811 176f 50       		.byte	0x50
 6812 1770 02       		.uleb128 0x2
 6813 1771 75       		.byte	0x75
 6814 1772 00       		.sleb128 0
 6815 1773 00       		.byte	0
 6816 1774 19       		.uleb128 0x19
 6817 1775 70000000 		.4byte	.LVL322
 6818 1779 851E0000 		.4byte	0x1e85
 6819 177d 1A       		.uleb128 0x1a
 6820 177e 01       		.uleb128 0x1
 6821 177f 51       		.byte	0x51
 6822 1780 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 210


 6823 1781 75       		.byte	0x75
 6824 1782 00       		.sleb128 0
 6825 1783 00       		.byte	0
 6826 1784 00       		.byte	0
 6827 1785 20       		.uleb128 0x20
 6828 1786 E1070000 		.4byte	.LASF168
 6829 178a 01       		.byte	0x1
 6830 178b 1C0F     		.2byte	0xf1c
 6831 178d 3F010000 		.4byte	0x13f
 6832 1791 00000000 		.4byte	.LFB105
 6833 1795 20000000 		.4byte	.LFE105-.LFB105
 6834 1799 01       		.uleb128 0x1
 6835 179a 9C       		.byte	0x9c
 6836 179b AE170000 		.4byte	0x17ae
 6837 179f 1C       		.uleb128 0x1c
 6838 17a0 55020000 		.4byte	.LASF108
 6839 17a4 01       		.byte	0x1
 6840 17a5 1E0F     		.2byte	0xf1e
 6841 17a7 3F010000 		.4byte	0x13f
 6842 17ab 01       		.uleb128 0x1
 6843 17ac 50       		.byte	0x50
 6844 17ad 00       		.byte	0
 6845 17ae 24       		.uleb128 0x24
 6846 17af 04050000 		.4byte	.LASF170
 6847 17b3 01       		.byte	0x1
 6848 17b4 2C0F     		.2byte	0xf2c
 6849 17b6 A9000000 		.4byte	0xa9
 6850 17ba 00000000 		.4byte	.LFB106
 6851 17be 20000000 		.4byte	.LFE106-.LFB106
 6852 17c2 01       		.uleb128 0x1
 6853 17c3 9C       		.byte	0x9c
 6854 17c4 20       		.uleb128 0x20
 6855 17c5 E6050000 		.4byte	.LASF171
 6856 17c9 01       		.byte	0x1
 6857 17ca 3D0F     		.2byte	0xf3d
 6858 17cc E4000000 		.4byte	0xe4
 6859 17d0 00000000 		.4byte	.LFB107
 6860 17d4 B0000000 		.4byte	.LFE107-.LFB107
 6861 17d8 01       		.uleb128 0x1
 6862 17d9 9C       		.byte	0x9c
 6863 17da 75180000 		.4byte	0x1875
 6864 17de 15       		.uleb128 0x15
 6865 17df E3020000 		.4byte	.LASF172
 6866 17e3 01       		.byte	0x1
 6867 17e4 3D0F     		.2byte	0xf3d
 6868 17e6 29010000 		.4byte	0x129
 6869 17ea 610E0000 		.4byte	.LLST105
 6870 17ee 15       		.uleb128 0x15
 6871 17ef F80C0000 		.4byte	.LASF150
 6872 17f3 01       		.byte	0x1
 6873 17f4 3D0F     		.2byte	0xf3d
 6874 17f6 3F010000 		.4byte	0x13f
 6875 17fa 8D0E0000 		.4byte	.LLST106
 6876 17fe 16       		.uleb128 0x16
 6877 17ff E20D0000 		.4byte	.LASF98
 6878 1803 01       		.byte	0x1
 6879 1804 3F0F     		.2byte	0xf3f
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 211


 6880 1806 3F010000 		.4byte	0x13f
 6881 180a B90E0000 		.4byte	.LLST107
 6882 180e 16       		.uleb128 0x16
 6883 180f A30E0000 		.4byte	.LASF173
 6884 1813 01       		.byte	0x1
 6885 1814 400F     		.2byte	0xf40
 6886 1816 E4000000 		.4byte	0xe4
 6887 181a DC0E0000 		.4byte	.LLST108
 6888 181e 18       		.uleb128 0x18
 6889 181f 0A000000 		.4byte	.LVL331
 6890 1823 7E1E0000 		.4byte	0x1e7e
 6891 1827 18       		.uleb128 0x18
 6892 1828 2E000000 		.4byte	.LVL332
 6893 182c AA1E0000 		.4byte	0x1eaa
 6894 1830 1D       		.uleb128 0x1d
 6895 1831 5A000000 		.4byte	.LVL333
 6896 1835 851E0000 		.4byte	0x1e85
 6897 1839 47180000 		.4byte	0x1847
 6898 183d 1A       		.uleb128 0x1a
 6899 183e 01       		.uleb128 0x1
 6900 183f 50       		.byte	0x50
 6901 1840 05       		.uleb128 0x5
 6902 1841 03       		.byte	0x3
 6903 1842 00000000 		.4byte	.LANCHOR0
 6904 1846 00       		.byte	0
 6905 1847 18       		.uleb128 0x18
 6906 1848 68000000 		.4byte	.LVL336
 6907 184c 42070000 		.4byte	0x742
 6908 1850 18       		.uleb128 0x18
 6909 1851 6C000000 		.4byte	.LVL337
 6910 1855 A31E0000 		.4byte	0x1ea3
 6911 1859 18       		.uleb128 0x18
 6912 185a 70000000 		.4byte	.LVL338
 6913 185e 9C1E0000 		.4byte	0x1e9c
 6914 1862 18       		.uleb128 0x18
 6915 1863 74000000 		.4byte	.LVL339
 6916 1867 7E1E0000 		.4byte	0x1e7e
 6917 186b 18       		.uleb128 0x18
 6918 186c A8000000 		.4byte	.LVL341
 6919 1870 9C1E0000 		.4byte	0x1e9c
 6920 1874 00       		.byte	0
 6921 1875 20       		.uleb128 0x20
 6922 1876 9B050000 		.4byte	.LASF174
 6923 187a 01       		.byte	0x1
 6924 187b AE0F     		.2byte	0xfae
 6925 187d 29010000 		.4byte	0x129
 6926 1881 00000000 		.4byte	.LFB108
 6927 1885 D4000000 		.4byte	.LFE108-.LFB108
 6928 1889 01       		.uleb128 0x1
 6929 188a 9C       		.byte	0x9c
 6930 188b 46190000 		.4byte	0x1946
 6931 188f 15       		.uleb128 0x15
 6932 1890 52030000 		.4byte	.LASF175
 6933 1894 01       		.byte	0x1
 6934 1895 AE0F     		.2byte	0xfae
 6935 1897 E4000000 		.4byte	0xe4
 6936 189b FA0E0000 		.4byte	.LLST109
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 212


 6937 189f 15       		.uleb128 0x15
 6938 18a0 8E000000 		.4byte	.LASF176
 6939 18a4 01       		.byte	0x1
 6940 18a5 AE0F     		.2byte	0xfae
 6941 18a7 E4000000 		.4byte	0xe4
 6942 18ab 260F0000 		.4byte	.LLST110
 6943 18af 15       		.uleb128 0x15
 6944 18b0 DF0A0000 		.4byte	.LASF177
 6945 18b4 01       		.byte	0x1
 6946 18b5 AE0F     		.2byte	0xfae
 6947 18b7 46190000 		.4byte	0x1946
 6948 18bb 6B0F0000 		.4byte	.LLST111
 6949 18bf 15       		.uleb128 0x15
 6950 18c0 F80C0000 		.4byte	.LASF150
 6951 18c4 01       		.byte	0x1
 6952 18c5 AE0F     		.2byte	0xfae
 6953 18c7 3F010000 		.4byte	0x13f
 6954 18cb 970F0000 		.4byte	.LLST112
 6955 18cf 16       		.uleb128 0x16
 6956 18d0 E20D0000 		.4byte	.LASF98
 6957 18d4 01       		.byte	0x1
 6958 18d5 B00F     		.2byte	0xfb0
 6959 18d7 3F010000 		.4byte	0x13f
 6960 18db C30F0000 		.4byte	.LLST113
 6961 18df 16       		.uleb128 0x16
 6962 18e0 F40A0000 		.4byte	.LASF80
 6963 18e4 01       		.byte	0x1
 6964 18e5 B10F     		.2byte	0xfb1
 6965 18e7 29010000 		.4byte	0x129
 6966 18eb E60F0000 		.4byte	.LLST114
 6967 18ef 18       		.uleb128 0x18
 6968 18f0 0E000000 		.4byte	.LVL344
 6969 18f4 7E1E0000 		.4byte	0x1e7e
 6970 18f8 18       		.uleb128 0x18
 6971 18f9 44000000 		.4byte	.LVL345
 6972 18fd AA1E0000 		.4byte	0x1eaa
 6973 1901 1D       		.uleb128 0x1d
 6974 1902 70000000 		.4byte	.LVL346
 6975 1906 851E0000 		.4byte	0x1e85
 6976 190a 18190000 		.4byte	0x1918
 6977 190e 1A       		.uleb128 0x1a
 6978 190f 01       		.uleb128 0x1
 6979 1910 50       		.byte	0x50
 6980 1911 05       		.uleb128 0x5
 6981 1912 03       		.byte	0x3
 6982 1913 00000000 		.4byte	.LANCHOR0
 6983 1917 00       		.byte	0
 6984 1918 18       		.uleb128 0x18
 6985 1919 7E000000 		.4byte	.LVL349
 6986 191d 42070000 		.4byte	0x742
 6987 1921 18       		.uleb128 0x18
 6988 1922 82000000 		.4byte	.LVL350
 6989 1926 A31E0000 		.4byte	0x1ea3
 6990 192a 18       		.uleb128 0x18
 6991 192b 86000000 		.4byte	.LVL351
 6992 192f 9C1E0000 		.4byte	0x1e9c
 6993 1933 18       		.uleb128 0x18
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 213


 6994 1934 8A000000 		.4byte	.LVL352
 6995 1938 7E1E0000 		.4byte	0x1e7e
 6996 193c 18       		.uleb128 0x18
 6997 193d CA000000 		.4byte	.LVL357
 6998 1941 9C1E0000 		.4byte	0x1e9c
 6999 1945 00       		.byte	0
 7000 1946 06       		.uleb128 0x6
 7001 1947 04       		.byte	0x4
 7002 1948 E4000000 		.4byte	0xe4
 7003 194c 20       		.uleb128 0x20
 7004 194d AE020000 		.4byte	.LASF178
 7005 1951 01       		.byte	0x1
 7006 1952 2B10     		.2byte	0x102b
 7007 1954 29010000 		.4byte	0x129
 7008 1958 00000000 		.4byte	.LFB109
 7009 195c A4000000 		.4byte	.LFE109-.LFB109
 7010 1960 01       		.uleb128 0x1
 7011 1961 9C       		.byte	0x9c
 7012 1962 1A1A0000 		.4byte	0x1a1a
 7013 1966 15       		.uleb128 0x15
 7014 1967 36080000 		.4byte	.LASF179
 7015 196b 01       		.byte	0x1
 7016 196c 2B10     		.2byte	0x102b
 7017 196e 28020000 		.4byte	0x228
 7018 1972 10100000 		.4byte	.LLST115
 7019 1976 15       		.uleb128 0x15
 7020 1977 590A0000 		.4byte	.LASF180
 7021 197b 01       		.byte	0x1
 7022 197c 2B10     		.2byte	0x102b
 7023 197e E4000000 		.4byte	0xe4
 7024 1982 3C100000 		.4byte	.LLST116
 7025 1986 15       		.uleb128 0x15
 7026 1987 D9070000 		.4byte	.LASF181
 7027 198b 01       		.byte	0x1
 7028 198c 2B10     		.2byte	0x102b
 7029 198e 8C020000 		.4byte	0x28c
 7030 1992 81100000 		.4byte	.LLST117
 7031 1996 15       		.uleb128 0x15
 7032 1997 43070000 		.4byte	.LASF182
 7033 199b 01       		.byte	0x1
 7034 199c 2B10     		.2byte	0x102b
 7035 199e 46190000 		.4byte	0x1946
 7036 19a2 A2100000 		.4byte	.LLST118
 7037 19a6 16       		.uleb128 0x16
 7038 19a7 040E0000 		.4byte	.LASF81
 7039 19ab 01       		.byte	0x1
 7040 19ac 2D10     		.2byte	0x102d
 7041 19ae E3040000 		.4byte	0x4e3
 7042 19b2 CE100000 		.4byte	.LLST119
 7043 19b6 16       		.uleb128 0x16
 7044 19b7 07040000 		.4byte	.LASF183
 7045 19bb 01       		.byte	0x1
 7046 19bc 2E10     		.2byte	0x102e
 7047 19be 29030000 		.4byte	0x329
 7048 19c2 FA100000 		.4byte	.LLST120
 7049 19c6 16       		.uleb128 0x16
 7050 19c7 F40A0000 		.4byte	.LASF80
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 214


 7051 19cb 01       		.byte	0x1
 7052 19cc 2F10     		.2byte	0x102f
 7053 19ce 29010000 		.4byte	0x129
 7054 19d2 0D110000 		.4byte	.LLST121
 7055 19d6 18       		.uleb128 0x18
 7056 19d7 0E000000 		.4byte	.LVL361
 7057 19db 7E1E0000 		.4byte	0x1e7e
 7058 19df 1D       		.uleb128 0x1d
 7059 19e0 64000000 		.4byte	.LVL366
 7060 19e4 AA1E0000 		.4byte	0x1eaa
 7061 19e8 F3190000 		.4byte	0x19f3
 7062 19ec 1A       		.uleb128 0x1a
 7063 19ed 01       		.uleb128 0x1
 7064 19ee 50       		.byte	0x50
 7065 19ef 02       		.uleb128 0x2
 7066 19f0 77       		.byte	0x77
 7067 19f1 00       		.sleb128 0
 7068 19f2 00       		.byte	0
 7069 19f3 1D       		.uleb128 0x1d
 7070 19f4 88000000 		.4byte	.LVL368
 7071 19f8 851E0000 		.4byte	0x1e85
 7072 19fc 071A0000 		.4byte	0x1a07
 7073 1a00 1A       		.uleb128 0x1a
 7074 1a01 01       		.uleb128 0x1
 7075 1a02 51       		.byte	0x51
 7076 1a03 02       		.uleb128 0x2
 7077 1a04 77       		.byte	0x77
 7078 1a05 00       		.sleb128 0
 7079 1a06 00       		.byte	0
 7080 1a07 18       		.uleb128 0x18
 7081 1a08 98000000 		.4byte	.LVL369
 7082 1a0c A31E0000 		.4byte	0x1ea3
 7083 1a10 18       		.uleb128 0x18
 7084 1a11 9C000000 		.4byte	.LVL370
 7085 1a15 9C1E0000 		.4byte	0x1e9c
 7086 1a19 00       		.byte	0
 7087 1a1a 20       		.uleb128 0x20
 7088 1a1b 94010000 		.4byte	.LASF184
 7089 1a1f 01       		.byte	0x1
 7090 1a20 9510     		.2byte	0x1095
 7091 1a22 29010000 		.4byte	0x129
 7092 1a26 00000000 		.4byte	.LFB110
 7093 1a2a D0000000 		.4byte	.LFE110-.LFB110
 7094 1a2e 01       		.uleb128 0x1
 7095 1a2f 9C       		.byte	0x9c
 7096 1a30 231B0000 		.4byte	0x1b23
 7097 1a34 15       		.uleb128 0x15
 7098 1a35 36080000 		.4byte	.LASF179
 7099 1a39 01       		.byte	0x1
 7100 1a3a 9510     		.2byte	0x1095
 7101 1a3c 28020000 		.4byte	0x228
 7102 1a40 37110000 		.4byte	.LLST122
 7103 1a44 15       		.uleb128 0x15
 7104 1a45 590A0000 		.4byte	.LASF180
 7105 1a49 01       		.byte	0x1
 7106 1a4a 9510     		.2byte	0x1095
 7107 1a4c E4000000 		.4byte	0xe4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 215


 7108 1a50 63110000 		.4byte	.LLST123
 7109 1a54 15       		.uleb128 0x15
 7110 1a55 D9070000 		.4byte	.LASF181
 7111 1a59 01       		.byte	0x1
 7112 1a5a 9510     		.2byte	0x1095
 7113 1a5c 8C020000 		.4byte	0x28c
 7114 1a60 8F110000 		.4byte	.LLST124
 7115 1a64 15       		.uleb128 0x15
 7116 1a65 43070000 		.4byte	.LASF182
 7117 1a69 01       		.byte	0x1
 7118 1a6a 9510     		.2byte	0x1095
 7119 1a6c 46190000 		.4byte	0x1946
 7120 1a70 B0110000 		.4byte	.LLST125
 7121 1a74 15       		.uleb128 0x15
 7122 1a75 B9000000 		.4byte	.LASF185
 7123 1a79 01       		.byte	0x1
 7124 1a7a 9510     		.2byte	0x1095
 7125 1a7c 231B0000 		.4byte	0x1b23
 7126 1a80 F5110000 		.4byte	.LLST126
 7127 1a84 16       		.uleb128 0x16
 7128 1a85 040E0000 		.4byte	.LASF81
 7129 1a89 01       		.byte	0x1
 7130 1a8a 9710     		.2byte	0x1097
 7131 1a8c E3040000 		.4byte	0x4e3
 7132 1a90 15120000 		.4byte	.LLST127
 7133 1a94 16       		.uleb128 0x16
 7134 1a95 07040000 		.4byte	.LASF183
 7135 1a99 01       		.byte	0x1
 7136 1a9a 9810     		.2byte	0x1098
 7137 1a9c 29030000 		.4byte	0x329
 7138 1aa0 41120000 		.4byte	.LLST128
 7139 1aa4 16       		.uleb128 0x16
 7140 1aa5 F40A0000 		.4byte	.LASF80
 7141 1aa9 01       		.byte	0x1
 7142 1aaa 9910     		.2byte	0x1099
 7143 1aac 29010000 		.4byte	0x129
 7144 1ab0 54120000 		.4byte	.LLST129
 7145 1ab4 16       		.uleb128 0x16
 7146 1ab5 72020000 		.4byte	.LASF120
 7147 1ab9 01       		.byte	0x1
 7148 1aba 9A10     		.2byte	0x109a
 7149 1abc 34010000 		.4byte	0x134
 7150 1ac0 7E120000 		.4byte	.LLST130
 7151 1ac4 18       		.uleb128 0x18
 7152 1ac5 10000000 		.4byte	.LVL374
 7153 1ac9 C01E0000 		.4byte	0x1ec0
 7154 1acd 1D       		.uleb128 0x1d
 7155 1ace 76000000 		.4byte	.LVL381
 7156 1ad2 AA1E0000 		.4byte	0x1eaa
 7157 1ad6 E11A0000 		.4byte	0x1ae1
 7158 1ada 1A       		.uleb128 0x1a
 7159 1adb 01       		.uleb128 0x1
 7160 1adc 50       		.byte	0x50
 7161 1add 02       		.uleb128 0x2
 7162 1ade 76       		.byte	0x76
 7163 1adf 00       		.sleb128 0
 7164 1ae0 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 216


 7165 1ae1 1D       		.uleb128 0x1d
 7166 1ae2 98000000 		.4byte	.LVL382
 7167 1ae6 851E0000 		.4byte	0x1e85
 7168 1aea F51A0000 		.4byte	0x1af5
 7169 1aee 1A       		.uleb128 0x1a
 7170 1aef 01       		.uleb128 0x1
 7171 1af0 51       		.byte	0x51
 7172 1af1 02       		.uleb128 0x2
 7173 1af2 76       		.byte	0x76
 7174 1af3 00       		.sleb128 0
 7175 1af4 00       		.byte	0
 7176 1af5 1D       		.uleb128 0x1d
 7177 1af6 A4000000 		.4byte	.LVL385
 7178 1afa 851E0000 		.4byte	0x1e85
 7179 1afe 121B0000 		.4byte	0x1b12
 7180 1b02 1A       		.uleb128 0x1a
 7181 1b03 01       		.uleb128 0x1
 7182 1b04 51       		.byte	0x51
 7183 1b05 02       		.uleb128 0x2
 7184 1b06 74       		.byte	0x74
 7185 1b07 18       		.sleb128 24
 7186 1b08 1A       		.uleb128 0x1a
 7187 1b09 01       		.uleb128 0x1
 7188 1b0a 50       		.byte	0x50
 7189 1b0b 05       		.uleb128 0x5
 7190 1b0c 03       		.byte	0x3
 7191 1b0d 14000000 		.4byte	.LANCHOR0+20
 7192 1b11 00       		.byte	0
 7193 1b12 19       		.uleb128 0x19
 7194 1b13 C2000000 		.4byte	.LVL386
 7195 1b17 CB1E0000 		.4byte	0x1ecb
 7196 1b1b 1A       		.uleb128 0x1a
 7197 1b1c 01       		.uleb128 0x1
 7198 1b1d 50       		.byte	0x50
 7199 1b1e 02       		.uleb128 0x2
 7200 1b1f 77       		.byte	0x77
 7201 1b20 00       		.sleb128 0
 7202 1b21 00       		.byte	0
 7203 1b22 00       		.byte	0
 7204 1b23 06       		.uleb128 0x6
 7205 1b24 04       		.byte	0x4
 7206 1b25 29010000 		.4byte	0x129
 7207 1b29 21       		.uleb128 0x21
 7208 1b2a E5090000 		.4byte	.LASF186
 7209 1b2e 01       		.byte	0x1
 7210 1b2f 0A11     		.2byte	0x110a
 7211 1b31 00000000 		.4byte	.LFB111
 7212 1b35 84000000 		.4byte	.LFE111-.LFB111
 7213 1b39 01       		.uleb128 0x1
 7214 1b3a 9C       		.byte	0x9c
 7215 1b3b EE1B0000 		.4byte	0x1bee
 7216 1b3f 15       		.uleb128 0x15
 7217 1b40 36080000 		.4byte	.LASF179
 7218 1b44 01       		.byte	0x1
 7219 1b45 0A11     		.2byte	0x110a
 7220 1b47 28020000 		.4byte	0x228
 7221 1b4b B2120000 		.4byte	.LLST131
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 217


 7222 1b4f 15       		.uleb128 0x15
 7223 1b50 B9000000 		.4byte	.LASF185
 7224 1b54 01       		.byte	0x1
 7225 1b55 0A11     		.2byte	0x110a
 7226 1b57 231B0000 		.4byte	0x1b23
 7227 1b5b DE120000 		.4byte	.LLST132
 7228 1b5f 16       		.uleb128 0x16
 7229 1b60 040E0000 		.4byte	.LASF81
 7230 1b64 01       		.byte	0x1
 7231 1b65 0C11     		.2byte	0x110c
 7232 1b67 E3040000 		.4byte	0x4e3
 7233 1b6b 0A130000 		.4byte	.LLST133
 7234 1b6f 16       		.uleb128 0x16
 7235 1b70 07040000 		.4byte	.LASF183
 7236 1b74 01       		.byte	0x1
 7237 1b75 0D11     		.2byte	0x110d
 7238 1b77 29030000 		.4byte	0x329
 7239 1b7b 36130000 		.4byte	.LLST134
 7240 1b7f 16       		.uleb128 0x16
 7241 1b80 72020000 		.4byte	.LASF120
 7242 1b84 01       		.byte	0x1
 7243 1b85 0E11     		.2byte	0x110e
 7244 1b87 34010000 		.4byte	0x134
 7245 1b8b 49130000 		.4byte	.LLST135
 7246 1b8f 18       		.uleb128 0x18
 7247 1b90 0A000000 		.4byte	.LVL390
 7248 1b94 C01E0000 		.4byte	0x1ec0
 7249 1b98 1D       		.uleb128 0x1d
 7250 1b99 32000000 		.4byte	.LVL395
 7251 1b9d AA1E0000 		.4byte	0x1eaa
 7252 1ba1 AC1B0000 		.4byte	0x1bac
 7253 1ba5 1A       		.uleb128 0x1a
 7254 1ba6 01       		.uleb128 0x1
 7255 1ba7 50       		.byte	0x50
 7256 1ba8 02       		.uleb128 0x2
 7257 1ba9 77       		.byte	0x77
 7258 1baa 00       		.sleb128 0
 7259 1bab 00       		.byte	0
 7260 1bac 1D       		.uleb128 0x1d
 7261 1bad 54000000 		.4byte	.LVL396
 7262 1bb1 851E0000 		.4byte	0x1e85
 7263 1bb5 C01B0000 		.4byte	0x1bc0
 7264 1bb9 1A       		.uleb128 0x1a
 7265 1bba 01       		.uleb128 0x1
 7266 1bbb 51       		.byte	0x51
 7267 1bbc 02       		.uleb128 0x2
 7268 1bbd 77       		.byte	0x77
 7269 1bbe 00       		.sleb128 0
 7270 1bbf 00       		.byte	0
 7271 1bc0 1D       		.uleb128 0x1d
 7272 1bc1 60000000 		.4byte	.LVL399
 7273 1bc5 851E0000 		.4byte	0x1e85
 7274 1bc9 DD1B0000 		.4byte	0x1bdd
 7275 1bcd 1A       		.uleb128 0x1a
 7276 1bce 01       		.uleb128 0x1
 7277 1bcf 51       		.byte	0x51
 7278 1bd0 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 218


 7279 1bd1 74       		.byte	0x74
 7280 1bd2 18       		.sleb128 24
 7281 1bd3 1A       		.uleb128 0x1a
 7282 1bd4 01       		.uleb128 0x1
 7283 1bd5 50       		.byte	0x50
 7284 1bd6 05       		.uleb128 0x5
 7285 1bd7 03       		.byte	0x3
 7286 1bd8 14000000 		.4byte	.LANCHOR0+20
 7287 1bdc 00       		.byte	0
 7288 1bdd 19       		.uleb128 0x19
 7289 1bde 7A000000 		.4byte	.LVL400
 7290 1be2 CB1E0000 		.4byte	0x1ecb
 7291 1be6 1A       		.uleb128 0x1a
 7292 1be7 01       		.uleb128 0x1
 7293 1be8 50       		.byte	0x50
 7294 1be9 02       		.uleb128 0x2
 7295 1bea 75       		.byte	0x75
 7296 1beb 00       		.sleb128 0
 7297 1bec 00       		.byte	0
 7298 1bed 00       		.byte	0
 7299 1bee 20       		.uleb128 0x20
 7300 1bef EE0D0000 		.4byte	.LASF187
 7301 1bf3 01       		.byte	0x1
 7302 1bf4 5C11     		.2byte	0x115c
 7303 1bf6 29010000 		.4byte	0x129
 7304 1bfa 00000000 		.4byte	.LFB112
 7305 1bfe 34000000 		.4byte	.LFE112-.LFB112
 7306 1c02 01       		.uleb128 0x1
 7307 1c03 9C       		.byte	0x9c
 7308 1c04 4B1C0000 		.4byte	0x1c4b
 7309 1c08 15       		.uleb128 0x15
 7310 1c09 44080000 		.4byte	.LASF84
 7311 1c0d 01       		.byte	0x1
 7312 1c0e 5C11     		.2byte	0x115c
 7313 1c10 28020000 		.4byte	0x228
 7314 1c14 7D130000 		.4byte	.LLST136
 7315 1c18 16       		.uleb128 0x16
 7316 1c19 040E0000 		.4byte	.LASF81
 7317 1c1d 01       		.byte	0x1
 7318 1c1e 5E11     		.2byte	0x115e
 7319 1c20 E3040000 		.4byte	0x4e3
 7320 1c24 90130000 		.4byte	.LLST137
 7321 1c28 16       		.uleb128 0x16
 7322 1c29 F40A0000 		.4byte	.LASF80
 7323 1c2d 01       		.byte	0x1
 7324 1c2e 5F11     		.2byte	0x115f
 7325 1c30 29010000 		.4byte	0x129
 7326 1c34 B9130000 		.4byte	.LLST138
 7327 1c38 18       		.uleb128 0x18
 7328 1c39 10000000 		.4byte	.LVL405
 7329 1c3d 7E1E0000 		.4byte	0x1e7e
 7330 1c41 18       		.uleb128 0x18
 7331 1c42 2A000000 		.4byte	.LVL410
 7332 1c46 9C1E0000 		.4byte	0x1e9c
 7333 1c4a 00       		.byte	0
 7334 1c4b 0F       		.uleb128 0xf
 7335 1c4c 1D020000 		.4byte	0x21d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 219


 7336 1c50 5B1C0000 		.4byte	0x1c5b
 7337 1c54 10       		.uleb128 0x10
 7338 1c55 A2000000 		.4byte	0xa2
 7339 1c59 04       		.byte	0x4
 7340 1c5a 00       		.byte	0
 7341 1c5b 2C       		.uleb128 0x2c
 7342 1c5c 63010000 		.4byte	.LASF188
 7343 1c60 01       		.byte	0x1
 7344 1c61 D7       		.byte	0xd7
 7345 1c62 4B1C0000 		.4byte	0x1c4b
 7346 1c66 05       		.uleb128 0x5
 7347 1c67 03       		.byte	0x3
 7348 1c68 30000000 		.4byte	pxReadyTasksLists
 7349 1c6c 2C       		.uleb128 0x2c
 7350 1c6d C4010000 		.4byte	.LASF189
 7351 1c71 01       		.byte	0x1
 7352 1c72 D8       		.byte	0xd8
 7353 1c73 1D020000 		.4byte	0x21d
 7354 1c77 05       		.uleb128 0x5
 7355 1c78 03       		.byte	0x3
 7356 1c79 94000000 		.4byte	xDelayedTaskList1
 7357 1c7d 2C       		.uleb128 0x2c
 7358 1c7e D6010000 		.4byte	.LASF190
 7359 1c82 01       		.byte	0x1
 7360 1c83 D9       		.byte	0xd9
 7361 1c84 1D020000 		.4byte	0x21d
 7362 1c88 05       		.uleb128 0x5
 7363 1c89 03       		.byte	0x3
 7364 1c8a A8000000 		.4byte	xDelayedTaskList2
 7365 1c8e 2C       		.uleb128 0x2c
 7366 1c8f FC090000 		.4byte	.LASF191
 7367 1c93 01       		.byte	0x1
 7368 1c94 DA       		.byte	0xda
 7369 1c95 9F1C0000 		.4byte	0x1c9f
 7370 1c99 05       		.uleb128 0x5
 7371 1c9a 03       		.byte	0x3
 7372 1c9b 28000000 		.4byte	pxDelayedTaskList
 7373 1c9f 08       		.uleb128 0x8
 7374 1ca0 180A0000 		.4byte	0xa18
 7375 1ca4 2C       		.uleb128 0x2c
 7376 1ca5 C9040000 		.4byte	.LASF192
 7377 1ca9 01       		.byte	0x1
 7378 1caa DB       		.byte	0xdb
 7379 1cab 9F1C0000 		.4byte	0x1c9f
 7380 1caf 05       		.uleb128 0x5
 7381 1cb0 03       		.byte	0x3
 7382 1cb1 D0000000 		.4byte	pxOverflowDelayedTaskList
 7383 1cb5 2C       		.uleb128 0x2c
 7384 1cb6 67030000 		.4byte	.LASF193
 7385 1cba 01       		.byte	0x1
 7386 1cbb DC       		.byte	0xdc
 7387 1cbc 1D020000 		.4byte	0x21d
 7388 1cc0 05       		.uleb128 0x5
 7389 1cc1 03       		.byte	0x3
 7390 1cc2 14000000 		.4byte	xPendingReadyList
 7391 1cc6 2C       		.uleb128 0x2c
 7392 1cc7 84030000 		.4byte	.LASF194
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 220


 7393 1ccb 01       		.byte	0x1
 7394 1ccc E0       		.byte	0xe0
 7395 1ccd 1D020000 		.4byte	0x21d
 7396 1cd1 05       		.uleb128 0x5
 7397 1cd2 03       		.byte	0x3
 7398 1cd3 BC000000 		.4byte	xTasksWaitingTermination
 7399 1cd7 2C       		.uleb128 0x2c
 7400 1cd8 4C040000 		.4byte	.LASF195
 7401 1cdc 01       		.byte	0x1
 7402 1cdd E1       		.byte	0xe1
 7403 1cde E81C0000 		.4byte	0x1ce8
 7404 1ce2 05       		.uleb128 0x5
 7405 1ce3 03       		.byte	0x3
 7406 1ce4 EC000000 		.4byte	uxTasksDeleted
 7407 1ce8 08       		.uleb128 0x8
 7408 1ce9 34010000 		.4byte	0x134
 7409 1ced 2C       		.uleb128 0x2c
 7410 1cee AF040000 		.4byte	.LASF196
 7411 1cf2 01       		.byte	0x1
 7412 1cf3 E7       		.byte	0xe7
 7413 1cf4 1D020000 		.4byte	0x21d
 7414 1cf8 05       		.uleb128 0x5
 7415 1cf9 03       		.byte	0x3
 7416 1cfa 00000000 		.4byte	xSuspendedTaskList
 7417 1cfe 2C       		.uleb128 0x2c
 7418 1cff 9D0D0000 		.4byte	.LASF197
 7419 1d03 01       		.byte	0x1
 7420 1d04 F2       		.byte	0xf2
 7421 1d05 E81C0000 		.4byte	0x1ce8
 7422 1d09 05       		.uleb128 0x5
 7423 1d0a 03       		.byte	0x3
 7424 1d0b DC000000 		.4byte	uxCurrentNumberOfTasks
 7425 1d0f 2C       		.uleb128 0x2c
 7426 1d10 5B040000 		.4byte	.LASF198
 7427 1d14 01       		.byte	0x1
 7428 1d15 F3       		.byte	0xf3
 7429 1d16 201D0000 		.4byte	0x1d20
 7430 1d1a 05       		.uleb128 0x5
 7431 1d1b 03       		.byte	0x3
 7432 1d1c D8000000 		.4byte	xTickCount
 7433 1d20 08       		.uleb128 0x8
 7434 1d21 3F010000 		.4byte	0x13f
 7435 1d25 2C       		.uleb128 0x2c
 7436 1d26 DD000000 		.4byte	.LASF199
 7437 1d2a 01       		.byte	0x1
 7438 1d2b F4       		.byte	0xf4
 7439 1d2c E81C0000 		.4byte	0x1ce8
 7440 1d30 05       		.uleb128 0x5
 7441 1d31 03       		.byte	0x3
 7442 1d32 E8000000 		.4byte	uxTopReadyPriority
 7443 1d36 2C       		.uleb128 0x2c
 7444 1d37 09010000 		.4byte	.LASF200
 7445 1d3b 01       		.byte	0x1
 7446 1d3c F5       		.byte	0xf5
 7447 1d3d 471D0000 		.4byte	0x1d47
 7448 1d41 05       		.uleb128 0x5
 7449 1d42 03       		.byte	0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 221


 7450 1d43 E0000000 		.4byte	xSchedulerRunning
 7451 1d47 08       		.uleb128 0x8
 7452 1d48 29010000 		.4byte	0x129
 7453 1d4c 2C       		.uleb128 0x2c
 7454 1d4d 160B0000 		.4byte	.LASF201
 7455 1d51 01       		.byte	0x1
 7456 1d52 F6       		.byte	0xf6
 7457 1d53 E81C0000 		.4byte	0x1ce8
 7458 1d57 05       		.uleb128 0x5
 7459 1d58 03       		.byte	0x3
 7460 1d59 F8000000 		.4byte	uxPendedTicks
 7461 1d5d 2C       		.uleb128 0x2c
 7462 1d5e C20E0000 		.4byte	.LASF202
 7463 1d62 01       		.byte	0x1
 7464 1d63 F7       		.byte	0xf7
 7465 1d64 471D0000 		.4byte	0x1d47
 7466 1d68 05       		.uleb128 0x5
 7467 1d69 03       		.byte	0x3
 7468 1d6a FC000000 		.4byte	xYieldPending
 7469 1d6e 2C       		.uleb128 0x2c
 7470 1d6f 2B090000 		.4byte	.LASF203
 7471 1d73 01       		.byte	0x1
 7472 1d74 F8       		.byte	0xf8
 7473 1d75 471D0000 		.4byte	0x1d47
 7474 1d79 05       		.uleb128 0x5
 7475 1d7a 03       		.byte	0x3
 7476 1d7b F4000000 		.4byte	xNumOfOverflows
 7477 1d7f 2C       		.uleb128 0x2c
 7478 1d80 BF070000 		.4byte	.LASF204
 7479 1d84 01       		.byte	0x1
 7480 1d85 F9       		.byte	0xf9
 7481 1d86 34010000 		.4byte	0x134
 7482 1d8a 05       		.uleb128 0x5
 7483 1d8b 03       		.byte	0x3
 7484 1d8c E4000000 		.4byte	uxTaskNumber
 7485 1d90 2C       		.uleb128 0x2c
 7486 1d91 5D060000 		.4byte	.LASF205
 7487 1d95 01       		.byte	0x1
 7488 1d96 FA       		.byte	0xfa
 7489 1d97 201D0000 		.4byte	0x1d20
 7490 1d9b 05       		.uleb128 0x5
 7491 1d9c 03       		.byte	0x3
 7492 1d9d 2C000000 		.4byte	xNextTaskUnblockTime
 7493 1da1 1C       		.uleb128 0x1c
 7494 1da2 110E0000 		.4byte	.LASF206
 7495 1da6 01       		.byte	0x1
 7496 1da7 0401     		.2byte	0x104
 7497 1da9 E81C0000 		.4byte	0x1ce8
 7498 1dad 05       		.uleb128 0x5
 7499 1dae 03       		.byte	0x3
 7500 1daf F0000000 		.4byte	uxSchedulerSuspended
 7501 1db3 2D       		.uleb128 0x2d
 7502 1db4 B1090000 		.4byte	.LASF207
 7503 1db8 09       		.byte	0x9
 7504 1db9 5506     		.2byte	0x655
 7505 1dbb BF1D0000 		.4byte	0x1dbf
 7506 1dbf 08       		.uleb128 0x8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 222


 7507 1dc0 D9000000 		.4byte	0xd9
 7508 1dc4 2E       		.uleb128 0x2e
 7509 1dc5 47090000 		.4byte	.LASF208
 7510 1dc9 01       		.byte	0x1
 7511 1dca D4       		.byte	0xd4
 7512 1dcb D51D0000 		.4byte	0x1dd5
 7513 1dcf 05       		.uleb128 0x5
 7514 1dd0 03       		.byte	0x3
 7515 1dd1 00000000 		.4byte	pxCurrentTCB
 7516 1dd5 08       		.uleb128 0x8
 7517 1dd6 E3040000 		.4byte	0x4e3
 7518 1dda 2F       		.uleb128 0x2f
 7519 1ddb 970A0000 		.4byte	.LASF211
 7520 1ddf 0A       		.byte	0xa
 7521 1de0 AC       		.byte	0xac
 7522 1de1 EB1D0000 		.4byte	0x1deb
 7523 1de5 0A       		.uleb128 0xa
 7524 1de6 A9000000 		.4byte	0xa9
 7525 1dea 00       		.byte	0
 7526 1deb 30       		.uleb128 0x30
 7527 1dec BB030000 		.4byte	.LASF209
 7528 1df0 0A       		.byte	0xa
 7529 1df1 AB       		.byte	0xab
 7530 1df2 A9000000 		.4byte	0xa9
 7531 1df6 001E0000 		.4byte	0x1e00
 7532 1dfa 0A       		.uleb128 0xa
 7533 1dfb 25000000 		.4byte	0x25
 7534 1dff 00       		.byte	0
 7535 1e00 30       		.uleb128 0x30
 7536 1e01 75070000 		.4byte	.LASF210
 7537 1e05 0B       		.byte	0xb
 7538 1e06 19       		.byte	0x19
 7539 1e07 A9000000 		.4byte	0xa9
 7540 1e0b 1F1E0000 		.4byte	0x1e1f
 7541 1e0f 0A       		.uleb128 0xa
 7542 1e10 A9000000 		.4byte	0xa9
 7543 1e14 0A       		.uleb128 0xa
 7544 1e15 37000000 		.4byte	0x37
 7545 1e19 0A       		.uleb128 0xa
 7546 1e1a 25000000 		.4byte	0x25
 7547 1e1e 00       		.byte	0
 7548 1e1f 31       		.uleb128 0x31
 7549 1e20 7C090000 		.4byte	.LASF212
 7550 1e24 07       		.byte	0x7
 7551 1e25 8D01     		.2byte	0x18d
 7552 1e27 311E0000 		.4byte	0x1e31
 7553 1e2b 0A       		.uleb128 0xa
 7554 1e2c 311E0000 		.4byte	0x1e31
 7555 1e30 00       		.byte	0
 7556 1e31 07       		.uleb128 0x7
 7557 1e32 17020000 		.4byte	0x217
 7558 1e36 31       		.uleb128 0x31
 7559 1e37 760C0000 		.4byte	.LASF213
 7560 1e3b 07       		.byte	0x7
 7561 1e3c 8201     		.2byte	0x182
 7562 1e3e 481E0000 		.4byte	0x1e48
 7563 1e42 0A       		.uleb128 0xa
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 223


 7564 1e43 4E120000 		.4byte	0x124e
 7565 1e47 00       		.byte	0
 7566 1e48 31       		.uleb128 0x31
 7567 1e49 940C0000 		.4byte	.LASF214
 7568 1e4d 07       		.byte	0x7
 7569 1e4e 9A01     		.2byte	0x19a
 7570 1e50 5F1E0000 		.4byte	0x1e5f
 7571 1e54 0A       		.uleb128 0xa
 7572 1e55 4E120000 		.4byte	0x124e
 7573 1e59 0A       		.uleb128 0xa
 7574 1e5a 311E0000 		.4byte	0x1e31
 7575 1e5e 00       		.byte	0
 7576 1e5f 30       		.uleb128 0x30
 7577 1e60 72060000 		.4byte	.LASF215
 7578 1e64 0A       		.byte	0xa
 7579 1e65 90       		.byte	0x90
 7580 1e66 08030000 		.4byte	0x308
 7581 1e6a 7E1E0000 		.4byte	0x1e7e
 7582 1e6e 0A       		.uleb128 0xa
 7583 1e6f 08030000 		.4byte	0x308
 7584 1e73 0A       		.uleb128 0xa
 7585 1e74 02010000 		.4byte	0x102
 7586 1e78 0A       		.uleb128 0xa
 7587 1e79 A9000000 		.4byte	0xa9
 7588 1e7d 00       		.byte	0
 7589 1e7e 32       		.uleb128 0x32
 7590 1e7f 08020000 		.4byte	.LASF217
 7591 1e83 02       		.byte	0x2
 7592 1e84 83       		.byte	0x83
 7593 1e85 31       		.uleb128 0x31
 7594 1e86 A0040000 		.4byte	.LASF216
 7595 1e8a 07       		.byte	0x7
 7596 1e8b AF01     		.2byte	0x1af
 7597 1e8d 9C1E0000 		.4byte	0x1e9c
 7598 1e91 0A       		.uleb128 0xa
 7599 1e92 4E120000 		.4byte	0x124e
 7600 1e96 0A       		.uleb128 0xa
 7601 1e97 311E0000 		.4byte	0x1e31
 7602 1e9b 00       		.byte	0
 7603 1e9c 32       		.uleb128 0x32
 7604 1e9d 1B000000 		.4byte	.LASF218
 7605 1ea1 02       		.byte	0x2
 7606 1ea2 84       		.byte	0x84
 7607 1ea3 32       		.uleb128 0x32
 7608 1ea4 6F000000 		.4byte	.LASF219
 7609 1ea8 02       		.byte	0x2
 7610 1ea9 7A       		.byte	0x7a
 7611 1eaa 33       		.uleb128 0x33
 7612 1eab 92020000 		.4byte	.LASF220
 7613 1eaf 07       		.byte	0x7
 7614 1eb0 BE01     		.2byte	0x1be
 7615 1eb2 34010000 		.4byte	0x134
 7616 1eb6 C01E0000 		.4byte	0x1ec0
 7617 1eba 0A       		.uleb128 0xa
 7618 1ebb 311E0000 		.4byte	0x1e31
 7619 1ebf 00       		.byte	0
 7620 1ec0 34       		.uleb128 0x34
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 224


 7621 1ec1 F7050000 		.4byte	.LASF222
 7622 1ec5 02       		.byte	0x2
 7623 1ec6 85       		.byte	0x85
 7624 1ec7 E4000000 		.4byte	0xe4
 7625 1ecb 2F       		.uleb128 0x2f
 7626 1ecc BE090000 		.4byte	.LASF221
 7627 1ed0 02       		.byte	0x2
 7628 1ed1 86       		.byte	0x86
 7629 1ed2 DC1E0000 		.4byte	0x1edc
 7630 1ed6 0A       		.uleb128 0xa
 7631 1ed7 E4000000 		.4byte	0xe4
 7632 1edb 00       		.byte	0
 7633 1edc 34       		.uleb128 0x34
 7634 1edd 2D000000 		.4byte	.LASF223
 7635 1ee1 0A       		.byte	0xa
 7636 1ee2 B5       		.byte	0xb5
 7637 1ee3 29010000 		.4byte	0x129
 7638 1ee7 32       		.uleb128 0x32
 7639 1ee8 850A0000 		.4byte	.LASF224
 7640 1eec 0A       		.byte	0xa
 7641 1eed BC       		.byte	0xbc
 7642 1eee 35       		.uleb128 0x35
 7643 1eef 54090000 		.4byte	.LASF231
 7644 1ef3 01       		.byte	0x1
 7645 1ef4 A301     		.2byte	0x1a3
 7646 1ef6 0A       		.uleb128 0xa
 7647 1ef7 28020000 		.4byte	0x228
 7648 1efb 0A       		.uleb128 0xa
 7649 1efc AB000000 		.4byte	0xab
 7650 1f00 00       		.byte	0
 7651 1f01 00       		.byte	0
 7652              		.section	.debug_abbrev,"",%progbits
 7653              	.Ldebug_abbrev0:
 7654 0000 01       		.uleb128 0x1
 7655 0001 11       		.uleb128 0x11
 7656 0002 01       		.byte	0x1
 7657 0003 25       		.uleb128 0x25
 7658 0004 0E       		.uleb128 0xe
 7659 0005 13       		.uleb128 0x13
 7660 0006 0B       		.uleb128 0xb
 7661 0007 03       		.uleb128 0x3
 7662 0008 0E       		.uleb128 0xe
 7663 0009 1B       		.uleb128 0x1b
 7664 000a 0E       		.uleb128 0xe
 7665 000b 55       		.uleb128 0x55
 7666 000c 17       		.uleb128 0x17
 7667 000d 11       		.uleb128 0x11
 7668 000e 01       		.uleb128 0x1
 7669 000f 10       		.uleb128 0x10
 7670 0010 17       		.uleb128 0x17
 7671 0011 00       		.byte	0
 7672 0012 00       		.byte	0
 7673 0013 02       		.uleb128 0x2
 7674 0014 16       		.uleb128 0x16
 7675 0015 00       		.byte	0
 7676 0016 03       		.uleb128 0x3
 7677 0017 0E       		.uleb128 0xe
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 225


 7678 0018 3A       		.uleb128 0x3a
 7679 0019 0B       		.uleb128 0xb
 7680 001a 3B       		.uleb128 0x3b
 7681 001b 0B       		.uleb128 0xb
 7682 001c 49       		.uleb128 0x49
 7683 001d 13       		.uleb128 0x13
 7684 001e 00       		.byte	0
 7685 001f 00       		.byte	0
 7686 0020 03       		.uleb128 0x3
 7687 0021 24       		.uleb128 0x24
 7688 0022 00       		.byte	0
 7689 0023 0B       		.uleb128 0xb
 7690 0024 0B       		.uleb128 0xb
 7691 0025 3E       		.uleb128 0x3e
 7692 0026 0B       		.uleb128 0xb
 7693 0027 03       		.uleb128 0x3
 7694 0028 0E       		.uleb128 0xe
 7695 0029 00       		.byte	0
 7696 002a 00       		.byte	0
 7697 002b 04       		.uleb128 0x4
 7698 002c 24       		.uleb128 0x24
 7699 002d 00       		.byte	0
 7700 002e 0B       		.uleb128 0xb
 7701 002f 0B       		.uleb128 0xb
 7702 0030 3E       		.uleb128 0x3e
 7703 0031 0B       		.uleb128 0xb
 7704 0032 03       		.uleb128 0x3
 7705 0033 08       		.uleb128 0x8
 7706 0034 00       		.byte	0
 7707 0035 00       		.byte	0
 7708 0036 05       		.uleb128 0x5
 7709 0037 0F       		.uleb128 0xf
 7710 0038 00       		.byte	0
 7711 0039 0B       		.uleb128 0xb
 7712 003a 0B       		.uleb128 0xb
 7713 003b 00       		.byte	0
 7714 003c 00       		.byte	0
 7715 003d 06       		.uleb128 0x6
 7716 003e 0F       		.uleb128 0xf
 7717 003f 00       		.byte	0
 7718 0040 0B       		.uleb128 0xb
 7719 0041 0B       		.uleb128 0xb
 7720 0042 49       		.uleb128 0x49
 7721 0043 13       		.uleb128 0x13
 7722 0044 00       		.byte	0
 7723 0045 00       		.byte	0
 7724 0046 07       		.uleb128 0x7
 7725 0047 26       		.uleb128 0x26
 7726 0048 00       		.byte	0
 7727 0049 49       		.uleb128 0x49
 7728 004a 13       		.uleb128 0x13
 7729 004b 00       		.byte	0
 7730 004c 00       		.byte	0
 7731 004d 08       		.uleb128 0x8
 7732 004e 35       		.uleb128 0x35
 7733 004f 00       		.byte	0
 7734 0050 49       		.uleb128 0x49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 226


 7735 0051 13       		.uleb128 0x13
 7736 0052 00       		.byte	0
 7737 0053 00       		.byte	0
 7738 0054 09       		.uleb128 0x9
 7739 0055 15       		.uleb128 0x15
 7740 0056 01       		.byte	0x1
 7741 0057 27       		.uleb128 0x27
 7742 0058 19       		.uleb128 0x19
 7743 0059 01       		.uleb128 0x1
 7744 005a 13       		.uleb128 0x13
 7745 005b 00       		.byte	0
 7746 005c 00       		.byte	0
 7747 005d 0A       		.uleb128 0xa
 7748 005e 05       		.uleb128 0x5
 7749 005f 00       		.byte	0
 7750 0060 49       		.uleb128 0x49
 7751 0061 13       		.uleb128 0x13
 7752 0062 00       		.byte	0
 7753 0063 00       		.byte	0
 7754 0064 0B       		.uleb128 0xb
 7755 0065 13       		.uleb128 0x13
 7756 0066 01       		.byte	0x1
 7757 0067 03       		.uleb128 0x3
 7758 0068 0E       		.uleb128 0xe
 7759 0069 0B       		.uleb128 0xb
 7760 006a 0B       		.uleb128 0xb
 7761 006b 3A       		.uleb128 0x3a
 7762 006c 0B       		.uleb128 0xb
 7763 006d 3B       		.uleb128 0x3b
 7764 006e 0B       		.uleb128 0xb
 7765 006f 01       		.uleb128 0x1
 7766 0070 13       		.uleb128 0x13
 7767 0071 00       		.byte	0
 7768 0072 00       		.byte	0
 7769 0073 0C       		.uleb128 0xc
 7770 0074 0D       		.uleb128 0xd
 7771 0075 00       		.byte	0
 7772 0076 03       		.uleb128 0x3
 7773 0077 0E       		.uleb128 0xe
 7774 0078 3A       		.uleb128 0x3a
 7775 0079 0B       		.uleb128 0xb
 7776 007a 3B       		.uleb128 0x3b
 7777 007b 0B       		.uleb128 0xb
 7778 007c 49       		.uleb128 0x49
 7779 007d 13       		.uleb128 0x13
 7780 007e 38       		.uleb128 0x38
 7781 007f 0B       		.uleb128 0xb
 7782 0080 00       		.byte	0
 7783 0081 00       		.byte	0
 7784 0082 0D       		.uleb128 0xd
 7785 0083 04       		.uleb128 0x4
 7786 0084 01       		.byte	0x1
 7787 0085 0B       		.uleb128 0xb
 7788 0086 0B       		.uleb128 0xb
 7789 0087 3A       		.uleb128 0x3a
 7790 0088 0B       		.uleb128 0xb
 7791 0089 3B       		.uleb128 0x3b
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 227


 7792 008a 0B       		.uleb128 0xb
 7793 008b 01       		.uleb128 0x1
 7794 008c 13       		.uleb128 0x13
 7795 008d 00       		.byte	0
 7796 008e 00       		.byte	0
 7797 008f 0E       		.uleb128 0xe
 7798 0090 28       		.uleb128 0x28
 7799 0091 00       		.byte	0
 7800 0092 03       		.uleb128 0x3
 7801 0093 0E       		.uleb128 0xe
 7802 0094 1C       		.uleb128 0x1c
 7803 0095 0D       		.uleb128 0xd
 7804 0096 00       		.byte	0
 7805 0097 00       		.byte	0
 7806 0098 0F       		.uleb128 0xf
 7807 0099 01       		.uleb128 0x1
 7808 009a 01       		.byte	0x1
 7809 009b 49       		.uleb128 0x49
 7810 009c 13       		.uleb128 0x13
 7811 009d 01       		.uleb128 0x1
 7812 009e 13       		.uleb128 0x13
 7813 009f 00       		.byte	0
 7814 00a0 00       		.byte	0
 7815 00a1 10       		.uleb128 0x10
 7816 00a2 21       		.uleb128 0x21
 7817 00a3 00       		.byte	0
 7818 00a4 49       		.uleb128 0x49
 7819 00a5 13       		.uleb128 0x13
 7820 00a6 2F       		.uleb128 0x2f
 7821 00a7 0B       		.uleb128 0xb
 7822 00a8 00       		.byte	0
 7823 00a9 00       		.byte	0
 7824 00aa 11       		.uleb128 0x11
 7825 00ab 2E       		.uleb128 0x2e
 7826 00ac 01       		.byte	0x1
 7827 00ad 03       		.uleb128 0x3
 7828 00ae 0E       		.uleb128 0xe
 7829 00af 3A       		.uleb128 0x3a
 7830 00b0 0B       		.uleb128 0xb
 7831 00b1 3B       		.uleb128 0x3b
 7832 00b2 0B       		.uleb128 0xb
 7833 00b3 27       		.uleb128 0x27
 7834 00b4 19       		.uleb128 0x19
 7835 00b5 49       		.uleb128 0x49
 7836 00b6 13       		.uleb128 0x13
 7837 00b7 20       		.uleb128 0x20
 7838 00b8 0B       		.uleb128 0xb
 7839 00b9 01       		.uleb128 0x1
 7840 00ba 13       		.uleb128 0x13
 7841 00bb 00       		.byte	0
 7842 00bc 00       		.byte	0
 7843 00bd 12       		.uleb128 0x12
 7844 00be 05       		.uleb128 0x5
 7845 00bf 00       		.byte	0
 7846 00c0 03       		.uleb128 0x3
 7847 00c1 0E       		.uleb128 0xe
 7848 00c2 3A       		.uleb128 0x3a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 228


 7849 00c3 0B       		.uleb128 0xb
 7850 00c4 3B       		.uleb128 0x3b
 7851 00c5 0B       		.uleb128 0xb
 7852 00c6 49       		.uleb128 0x49
 7853 00c7 13       		.uleb128 0x13
 7854 00c8 00       		.byte	0
 7855 00c9 00       		.byte	0
 7856 00ca 13       		.uleb128 0x13
 7857 00cb 34       		.uleb128 0x34
 7858 00cc 00       		.byte	0
 7859 00cd 03       		.uleb128 0x3
 7860 00ce 0E       		.uleb128 0xe
 7861 00cf 3A       		.uleb128 0x3a
 7862 00d0 0B       		.uleb128 0xb
 7863 00d1 3B       		.uleb128 0x3b
 7864 00d2 0B       		.uleb128 0xb
 7865 00d3 49       		.uleb128 0x49
 7866 00d4 13       		.uleb128 0x13
 7867 00d5 00       		.byte	0
 7868 00d6 00       		.byte	0
 7869 00d7 14       		.uleb128 0x14
 7870 00d8 2E       		.uleb128 0x2e
 7871 00d9 01       		.byte	0x1
 7872 00da 03       		.uleb128 0x3
 7873 00db 0E       		.uleb128 0xe
 7874 00dc 3A       		.uleb128 0x3a
 7875 00dd 0B       		.uleb128 0xb
 7876 00de 3B       		.uleb128 0x3b
 7877 00df 05       		.uleb128 0x5
 7878 00e0 27       		.uleb128 0x27
 7879 00e1 19       		.uleb128 0x19
 7880 00e2 49       		.uleb128 0x49
 7881 00e3 13       		.uleb128 0x13
 7882 00e4 11       		.uleb128 0x11
 7883 00e5 01       		.uleb128 0x1
 7884 00e6 12       		.uleb128 0x12
 7885 00e7 06       		.uleb128 0x6
 7886 00e8 40       		.uleb128 0x40
 7887 00e9 18       		.uleb128 0x18
 7888 00ea 9742     		.uleb128 0x2117
 7889 00ec 19       		.uleb128 0x19
 7890 00ed 01       		.uleb128 0x1
 7891 00ee 13       		.uleb128 0x13
 7892 00ef 00       		.byte	0
 7893 00f0 00       		.byte	0
 7894 00f1 15       		.uleb128 0x15
 7895 00f2 05       		.uleb128 0x5
 7896 00f3 00       		.byte	0
 7897 00f4 03       		.uleb128 0x3
 7898 00f5 0E       		.uleb128 0xe
 7899 00f6 3A       		.uleb128 0x3a
 7900 00f7 0B       		.uleb128 0xb
 7901 00f8 3B       		.uleb128 0x3b
 7902 00f9 05       		.uleb128 0x5
 7903 00fa 49       		.uleb128 0x49
 7904 00fb 13       		.uleb128 0x13
 7905 00fc 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 229


 7906 00fd 17       		.uleb128 0x17
 7907 00fe 00       		.byte	0
 7908 00ff 00       		.byte	0
 7909 0100 16       		.uleb128 0x16
 7910 0101 34       		.uleb128 0x34
 7911 0102 00       		.byte	0
 7912 0103 03       		.uleb128 0x3
 7913 0104 0E       		.uleb128 0xe
 7914 0105 3A       		.uleb128 0x3a
 7915 0106 0B       		.uleb128 0xb
 7916 0107 3B       		.uleb128 0x3b
 7917 0108 05       		.uleb128 0x5
 7918 0109 49       		.uleb128 0x49
 7919 010a 13       		.uleb128 0x13
 7920 010b 02       		.uleb128 0x2
 7921 010c 17       		.uleb128 0x17
 7922 010d 00       		.byte	0
 7923 010e 00       		.byte	0
 7924 010f 17       		.uleb128 0x17
 7925 0110 2E       		.uleb128 0x2e
 7926 0111 01       		.byte	0x1
 7927 0112 03       		.uleb128 0x3
 7928 0113 0E       		.uleb128 0xe
 7929 0114 3A       		.uleb128 0x3a
 7930 0115 0B       		.uleb128 0xb
 7931 0116 3B       		.uleb128 0x3b
 7932 0117 05       		.uleb128 0x5
 7933 0118 27       		.uleb128 0x27
 7934 0119 19       		.uleb128 0x19
 7935 011a 11       		.uleb128 0x11
 7936 011b 01       		.uleb128 0x1
 7937 011c 12       		.uleb128 0x12
 7938 011d 06       		.uleb128 0x6
 7939 011e 40       		.uleb128 0x40
 7940 011f 18       		.uleb128 0x18
 7941 0120 9742     		.uleb128 0x2117
 7942 0122 19       		.uleb128 0x19
 7943 0123 01       		.uleb128 0x1
 7944 0124 13       		.uleb128 0x13
 7945 0125 00       		.byte	0
 7946 0126 00       		.byte	0
 7947 0127 18       		.uleb128 0x18
 7948 0128 898201   		.uleb128 0x4109
 7949 012b 00       		.byte	0
 7950 012c 11       		.uleb128 0x11
 7951 012d 01       		.uleb128 0x1
 7952 012e 31       		.uleb128 0x31
 7953 012f 13       		.uleb128 0x13
 7954 0130 00       		.byte	0
 7955 0131 00       		.byte	0
 7956 0132 19       		.uleb128 0x19
 7957 0133 898201   		.uleb128 0x4109
 7958 0136 01       		.byte	0x1
 7959 0137 11       		.uleb128 0x11
 7960 0138 01       		.uleb128 0x1
 7961 0139 31       		.uleb128 0x31
 7962 013a 13       		.uleb128 0x13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 230


 7963 013b 00       		.byte	0
 7964 013c 00       		.byte	0
 7965 013d 1A       		.uleb128 0x1a
 7966 013e 8A8201   		.uleb128 0x410a
 7967 0141 00       		.byte	0
 7968 0142 02       		.uleb128 0x2
 7969 0143 18       		.uleb128 0x18
 7970 0144 9142     		.uleb128 0x2111
 7971 0146 18       		.uleb128 0x18
 7972 0147 00       		.byte	0
 7973 0148 00       		.byte	0
 7974 0149 1B       		.uleb128 0x1b
 7975 014a 0B       		.uleb128 0xb
 7976 014b 01       		.byte	0x1
 7977 014c 11       		.uleb128 0x11
 7978 014d 01       		.uleb128 0x1
 7979 014e 12       		.uleb128 0x12
 7980 014f 06       		.uleb128 0x6
 7981 0150 01       		.uleb128 0x1
 7982 0151 13       		.uleb128 0x13
 7983 0152 00       		.byte	0
 7984 0153 00       		.byte	0
 7985 0154 1C       		.uleb128 0x1c
 7986 0155 34       		.uleb128 0x34
 7987 0156 00       		.byte	0
 7988 0157 03       		.uleb128 0x3
 7989 0158 0E       		.uleb128 0xe
 7990 0159 3A       		.uleb128 0x3a
 7991 015a 0B       		.uleb128 0xb
 7992 015b 3B       		.uleb128 0x3b
 7993 015c 05       		.uleb128 0x5
 7994 015d 49       		.uleb128 0x49
 7995 015e 13       		.uleb128 0x13
 7996 015f 02       		.uleb128 0x2
 7997 0160 18       		.uleb128 0x18
 7998 0161 00       		.byte	0
 7999 0162 00       		.byte	0
 8000 0163 1D       		.uleb128 0x1d
 8001 0164 898201   		.uleb128 0x4109
 8002 0167 01       		.byte	0x1
 8003 0168 11       		.uleb128 0x11
 8004 0169 01       		.uleb128 0x1
 8005 016a 31       		.uleb128 0x31
 8006 016b 13       		.uleb128 0x13
 8007 016c 01       		.uleb128 0x1
 8008 016d 13       		.uleb128 0x13
 8009 016e 00       		.byte	0
 8010 016f 00       		.byte	0
 8011 0170 1E       		.uleb128 0x1e
 8012 0171 05       		.uleb128 0x5
 8013 0172 00       		.byte	0
 8014 0173 03       		.uleb128 0x3
 8015 0174 0E       		.uleb128 0xe
 8016 0175 3A       		.uleb128 0x3a
 8017 0176 0B       		.uleb128 0xb
 8018 0177 3B       		.uleb128 0x3b
 8019 0178 05       		.uleb128 0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 231


 8020 0179 49       		.uleb128 0x49
 8021 017a 13       		.uleb128 0x13
 8022 017b 02       		.uleb128 0x2
 8023 017c 18       		.uleb128 0x18
 8024 017d 00       		.byte	0
 8025 017e 00       		.byte	0
 8026 017f 1F       		.uleb128 0x1f
 8027 0180 34       		.uleb128 0x34
 8028 0181 00       		.byte	0
 8029 0182 03       		.uleb128 0x3
 8030 0183 08       		.uleb128 0x8
 8031 0184 3A       		.uleb128 0x3a
 8032 0185 0B       		.uleb128 0xb
 8033 0186 3B       		.uleb128 0x3b
 8034 0187 05       		.uleb128 0x5
 8035 0188 49       		.uleb128 0x49
 8036 0189 13       		.uleb128 0x13
 8037 018a 02       		.uleb128 0x2
 8038 018b 17       		.uleb128 0x17
 8039 018c 00       		.byte	0
 8040 018d 00       		.byte	0
 8041 018e 20       		.uleb128 0x20
 8042 018f 2E       		.uleb128 0x2e
 8043 0190 01       		.byte	0x1
 8044 0191 3F       		.uleb128 0x3f
 8045 0192 19       		.uleb128 0x19
 8046 0193 03       		.uleb128 0x3
 8047 0194 0E       		.uleb128 0xe
 8048 0195 3A       		.uleb128 0x3a
 8049 0196 0B       		.uleb128 0xb
 8050 0197 3B       		.uleb128 0x3b
 8051 0198 05       		.uleb128 0x5
 8052 0199 27       		.uleb128 0x27
 8053 019a 19       		.uleb128 0x19
 8054 019b 49       		.uleb128 0x49
 8055 019c 13       		.uleb128 0x13
 8056 019d 11       		.uleb128 0x11
 8057 019e 01       		.uleb128 0x1
 8058 019f 12       		.uleb128 0x12
 8059 01a0 06       		.uleb128 0x6
 8060 01a1 40       		.uleb128 0x40
 8061 01a2 18       		.uleb128 0x18
 8062 01a3 9742     		.uleb128 0x2117
 8063 01a5 19       		.uleb128 0x19
 8064 01a6 01       		.uleb128 0x1
 8065 01a7 13       		.uleb128 0x13
 8066 01a8 00       		.byte	0
 8067 01a9 00       		.byte	0
 8068 01aa 21       		.uleb128 0x21
 8069 01ab 2E       		.uleb128 0x2e
 8070 01ac 01       		.byte	0x1
 8071 01ad 3F       		.uleb128 0x3f
 8072 01ae 19       		.uleb128 0x19
 8073 01af 03       		.uleb128 0x3
 8074 01b0 0E       		.uleb128 0xe
 8075 01b1 3A       		.uleb128 0x3a
 8076 01b2 0B       		.uleb128 0xb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 232


 8077 01b3 3B       		.uleb128 0x3b
 8078 01b4 05       		.uleb128 0x5
 8079 01b5 27       		.uleb128 0x27
 8080 01b6 19       		.uleb128 0x19
 8081 01b7 11       		.uleb128 0x11
 8082 01b8 01       		.uleb128 0x1
 8083 01b9 12       		.uleb128 0x12
 8084 01ba 06       		.uleb128 0x6
 8085 01bb 40       		.uleb128 0x40
 8086 01bc 18       		.uleb128 0x18
 8087 01bd 9742     		.uleb128 0x2117
 8088 01bf 19       		.uleb128 0x19
 8089 01c0 01       		.uleb128 0x1
 8090 01c1 13       		.uleb128 0x13
 8091 01c2 00       		.byte	0
 8092 01c3 00       		.byte	0
 8093 01c4 22       		.uleb128 0x22
 8094 01c5 2E       		.uleb128 0x2e
 8095 01c6 00       		.byte	0
 8096 01c7 3F       		.uleb128 0x3f
 8097 01c8 19       		.uleb128 0x19
 8098 01c9 03       		.uleb128 0x3
 8099 01ca 0E       		.uleb128 0xe
 8100 01cb 3A       		.uleb128 0x3a
 8101 01cc 0B       		.uleb128 0xb
 8102 01cd 3B       		.uleb128 0x3b
 8103 01ce 05       		.uleb128 0x5
 8104 01cf 27       		.uleb128 0x27
 8105 01d0 19       		.uleb128 0x19
 8106 01d1 11       		.uleb128 0x11
 8107 01d2 01       		.uleb128 0x1
 8108 01d3 12       		.uleb128 0x12
 8109 01d4 06       		.uleb128 0x6
 8110 01d5 40       		.uleb128 0x40
 8111 01d6 18       		.uleb128 0x18
 8112 01d7 9742     		.uleb128 0x2117
 8113 01d9 19       		.uleb128 0x19
 8114 01da 00       		.byte	0
 8115 01db 00       		.byte	0
 8116 01dc 23       		.uleb128 0x23
 8117 01dd 34       		.uleb128 0x34
 8118 01de 00       		.byte	0
 8119 01df 03       		.uleb128 0x3
 8120 01e0 0E       		.uleb128 0xe
 8121 01e1 3A       		.uleb128 0x3a
 8122 01e2 0B       		.uleb128 0xb
 8123 01e3 3B       		.uleb128 0x3b
 8124 01e4 05       		.uleb128 0x5
 8125 01e5 49       		.uleb128 0x49
 8126 01e6 13       		.uleb128 0x13
 8127 01e7 1C       		.uleb128 0x1c
 8128 01e8 0B       		.uleb128 0xb
 8129 01e9 00       		.byte	0
 8130 01ea 00       		.byte	0
 8131 01eb 24       		.uleb128 0x24
 8132 01ec 2E       		.uleb128 0x2e
 8133 01ed 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 233


 8134 01ee 3F       		.uleb128 0x3f
 8135 01ef 19       		.uleb128 0x19
 8136 01f0 03       		.uleb128 0x3
 8137 01f1 0E       		.uleb128 0xe
 8138 01f2 3A       		.uleb128 0x3a
 8139 01f3 0B       		.uleb128 0xb
 8140 01f4 3B       		.uleb128 0x3b
 8141 01f5 05       		.uleb128 0x5
 8142 01f6 27       		.uleb128 0x27
 8143 01f7 19       		.uleb128 0x19
 8144 01f8 49       		.uleb128 0x49
 8145 01f9 13       		.uleb128 0x13
 8146 01fa 11       		.uleb128 0x11
 8147 01fb 01       		.uleb128 0x1
 8148 01fc 12       		.uleb128 0x12
 8149 01fd 06       		.uleb128 0x6
 8150 01fe 40       		.uleb128 0x40
 8151 01ff 18       		.uleb128 0x18
 8152 0200 9742     		.uleb128 0x2117
 8153 0202 19       		.uleb128 0x19
 8154 0203 00       		.byte	0
 8155 0204 00       		.byte	0
 8156 0205 25       		.uleb128 0x25
 8157 0206 0B       		.uleb128 0xb
 8158 0207 01       		.byte	0x1
 8159 0208 55       		.uleb128 0x55
 8160 0209 17       		.uleb128 0x17
 8161 020a 00       		.byte	0
 8162 020b 00       		.byte	0
 8163 020c 26       		.uleb128 0x26
 8164 020d 0B       		.uleb128 0xb
 8165 020e 01       		.byte	0x1
 8166 020f 55       		.uleb128 0x55
 8167 0210 17       		.uleb128 0x17
 8168 0211 01       		.uleb128 0x1
 8169 0212 13       		.uleb128 0x13
 8170 0213 00       		.byte	0
 8171 0214 00       		.byte	0
 8172 0215 27       		.uleb128 0x27
 8173 0216 0B       		.uleb128 0xb
 8174 0217 01       		.byte	0x1
 8175 0218 11       		.uleb128 0x11
 8176 0219 01       		.uleb128 0x1
 8177 021a 12       		.uleb128 0x12
 8178 021b 06       		.uleb128 0x6
 8179 021c 00       		.byte	0
 8180 021d 00       		.byte	0
 8181 021e 28       		.uleb128 0x28
 8182 021f 34       		.uleb128 0x34
 8183 0220 00       		.byte	0
 8184 0221 03       		.uleb128 0x3
 8185 0222 0E       		.uleb128 0xe
 8186 0223 3A       		.uleb128 0x3a
 8187 0224 0B       		.uleb128 0xb
 8188 0225 3B       		.uleb128 0x3b
 8189 0226 05       		.uleb128 0x5
 8190 0227 49       		.uleb128 0x49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 234


 8191 0228 13       		.uleb128 0x13
 8192 0229 1C       		.uleb128 0x1c
 8193 022a 0D       		.uleb128 0xd
 8194 022b 00       		.byte	0
 8195 022c 00       		.byte	0
 8196 022d 29       		.uleb128 0x29
 8197 022e 1D       		.uleb128 0x1d
 8198 022f 01       		.byte	0x1
 8199 0230 31       		.uleb128 0x31
 8200 0231 13       		.uleb128 0x13
 8201 0232 11       		.uleb128 0x11
 8202 0233 01       		.uleb128 0x1
 8203 0234 12       		.uleb128 0x12
 8204 0235 06       		.uleb128 0x6
 8205 0236 58       		.uleb128 0x58
 8206 0237 0B       		.uleb128 0xb
 8207 0238 59       		.uleb128 0x59
 8208 0239 05       		.uleb128 0x5
 8209 023a 01       		.uleb128 0x1
 8210 023b 13       		.uleb128 0x13
 8211 023c 00       		.byte	0
 8212 023d 00       		.byte	0
 8213 023e 2A       		.uleb128 0x2a
 8214 023f 05       		.uleb128 0x5
 8215 0240 00       		.byte	0
 8216 0241 31       		.uleb128 0x31
 8217 0242 13       		.uleb128 0x13
 8218 0243 02       		.uleb128 0x2
 8219 0244 17       		.uleb128 0x17
 8220 0245 00       		.byte	0
 8221 0246 00       		.byte	0
 8222 0247 2B       		.uleb128 0x2b
 8223 0248 34       		.uleb128 0x34
 8224 0249 00       		.byte	0
 8225 024a 31       		.uleb128 0x31
 8226 024b 13       		.uleb128 0x13
 8227 024c 02       		.uleb128 0x2
 8228 024d 17       		.uleb128 0x17
 8229 024e 00       		.byte	0
 8230 024f 00       		.byte	0
 8231 0250 2C       		.uleb128 0x2c
 8232 0251 34       		.uleb128 0x34
 8233 0252 00       		.byte	0
 8234 0253 03       		.uleb128 0x3
 8235 0254 0E       		.uleb128 0xe
 8236 0255 3A       		.uleb128 0x3a
 8237 0256 0B       		.uleb128 0xb
 8238 0257 3B       		.uleb128 0x3b
 8239 0258 0B       		.uleb128 0xb
 8240 0259 49       		.uleb128 0x49
 8241 025a 13       		.uleb128 0x13
 8242 025b 02       		.uleb128 0x2
 8243 025c 18       		.uleb128 0x18
 8244 025d 00       		.byte	0
 8245 025e 00       		.byte	0
 8246 025f 2D       		.uleb128 0x2d
 8247 0260 34       		.uleb128 0x34
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 235


 8248 0261 00       		.byte	0
 8249 0262 03       		.uleb128 0x3
 8250 0263 0E       		.uleb128 0xe
 8251 0264 3A       		.uleb128 0x3a
 8252 0265 0B       		.uleb128 0xb
 8253 0266 3B       		.uleb128 0x3b
 8254 0267 05       		.uleb128 0x5
 8255 0268 49       		.uleb128 0x49
 8256 0269 13       		.uleb128 0x13
 8257 026a 3F       		.uleb128 0x3f
 8258 026b 19       		.uleb128 0x19
 8259 026c 3C       		.uleb128 0x3c
 8260 026d 19       		.uleb128 0x19
 8261 026e 00       		.byte	0
 8262 026f 00       		.byte	0
 8263 0270 2E       		.uleb128 0x2e
 8264 0271 34       		.uleb128 0x34
 8265 0272 00       		.byte	0
 8266 0273 03       		.uleb128 0x3
 8267 0274 0E       		.uleb128 0xe
 8268 0275 3A       		.uleb128 0x3a
 8269 0276 0B       		.uleb128 0xb
 8270 0277 3B       		.uleb128 0x3b
 8271 0278 0B       		.uleb128 0xb
 8272 0279 49       		.uleb128 0x49
 8273 027a 13       		.uleb128 0x13
 8274 027b 3F       		.uleb128 0x3f
 8275 027c 19       		.uleb128 0x19
 8276 027d 02       		.uleb128 0x2
 8277 027e 18       		.uleb128 0x18
 8278 027f 00       		.byte	0
 8279 0280 00       		.byte	0
 8280 0281 2F       		.uleb128 0x2f
 8281 0282 2E       		.uleb128 0x2e
 8282 0283 01       		.byte	0x1
 8283 0284 3F       		.uleb128 0x3f
 8284 0285 19       		.uleb128 0x19
 8285 0286 03       		.uleb128 0x3
 8286 0287 0E       		.uleb128 0xe
 8287 0288 3A       		.uleb128 0x3a
 8288 0289 0B       		.uleb128 0xb
 8289 028a 3B       		.uleb128 0x3b
 8290 028b 0B       		.uleb128 0xb
 8291 028c 27       		.uleb128 0x27
 8292 028d 19       		.uleb128 0x19
 8293 028e 3C       		.uleb128 0x3c
 8294 028f 19       		.uleb128 0x19
 8295 0290 01       		.uleb128 0x1
 8296 0291 13       		.uleb128 0x13
 8297 0292 00       		.byte	0
 8298 0293 00       		.byte	0
 8299 0294 30       		.uleb128 0x30
 8300 0295 2E       		.uleb128 0x2e
 8301 0296 01       		.byte	0x1
 8302 0297 3F       		.uleb128 0x3f
 8303 0298 19       		.uleb128 0x19
 8304 0299 03       		.uleb128 0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 236


 8305 029a 0E       		.uleb128 0xe
 8306 029b 3A       		.uleb128 0x3a
 8307 029c 0B       		.uleb128 0xb
 8308 029d 3B       		.uleb128 0x3b
 8309 029e 0B       		.uleb128 0xb
 8310 029f 27       		.uleb128 0x27
 8311 02a0 19       		.uleb128 0x19
 8312 02a1 49       		.uleb128 0x49
 8313 02a2 13       		.uleb128 0x13
 8314 02a3 3C       		.uleb128 0x3c
 8315 02a4 19       		.uleb128 0x19
 8316 02a5 01       		.uleb128 0x1
 8317 02a6 13       		.uleb128 0x13
 8318 02a7 00       		.byte	0
 8319 02a8 00       		.byte	0
 8320 02a9 31       		.uleb128 0x31
 8321 02aa 2E       		.uleb128 0x2e
 8322 02ab 01       		.byte	0x1
 8323 02ac 3F       		.uleb128 0x3f
 8324 02ad 19       		.uleb128 0x19
 8325 02ae 03       		.uleb128 0x3
 8326 02af 0E       		.uleb128 0xe
 8327 02b0 3A       		.uleb128 0x3a
 8328 02b1 0B       		.uleb128 0xb
 8329 02b2 3B       		.uleb128 0x3b
 8330 02b3 05       		.uleb128 0x5
 8331 02b4 27       		.uleb128 0x27
 8332 02b5 19       		.uleb128 0x19
 8333 02b6 3C       		.uleb128 0x3c
 8334 02b7 19       		.uleb128 0x19
 8335 02b8 01       		.uleb128 0x1
 8336 02b9 13       		.uleb128 0x13
 8337 02ba 00       		.byte	0
 8338 02bb 00       		.byte	0
 8339 02bc 32       		.uleb128 0x32
 8340 02bd 2E       		.uleb128 0x2e
 8341 02be 00       		.byte	0
 8342 02bf 3F       		.uleb128 0x3f
 8343 02c0 19       		.uleb128 0x19
 8344 02c1 03       		.uleb128 0x3
 8345 02c2 0E       		.uleb128 0xe
 8346 02c3 3A       		.uleb128 0x3a
 8347 02c4 0B       		.uleb128 0xb
 8348 02c5 3B       		.uleb128 0x3b
 8349 02c6 0B       		.uleb128 0xb
 8350 02c7 27       		.uleb128 0x27
 8351 02c8 19       		.uleb128 0x19
 8352 02c9 3C       		.uleb128 0x3c
 8353 02ca 19       		.uleb128 0x19
 8354 02cb 00       		.byte	0
 8355 02cc 00       		.byte	0
 8356 02cd 33       		.uleb128 0x33
 8357 02ce 2E       		.uleb128 0x2e
 8358 02cf 01       		.byte	0x1
 8359 02d0 3F       		.uleb128 0x3f
 8360 02d1 19       		.uleb128 0x19
 8361 02d2 03       		.uleb128 0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 237


 8362 02d3 0E       		.uleb128 0xe
 8363 02d4 3A       		.uleb128 0x3a
 8364 02d5 0B       		.uleb128 0xb
 8365 02d6 3B       		.uleb128 0x3b
 8366 02d7 05       		.uleb128 0x5
 8367 02d8 27       		.uleb128 0x27
 8368 02d9 19       		.uleb128 0x19
 8369 02da 49       		.uleb128 0x49
 8370 02db 13       		.uleb128 0x13
 8371 02dc 3C       		.uleb128 0x3c
 8372 02dd 19       		.uleb128 0x19
 8373 02de 01       		.uleb128 0x1
 8374 02df 13       		.uleb128 0x13
 8375 02e0 00       		.byte	0
 8376 02e1 00       		.byte	0
 8377 02e2 34       		.uleb128 0x34
 8378 02e3 2E       		.uleb128 0x2e
 8379 02e4 00       		.byte	0
 8380 02e5 3F       		.uleb128 0x3f
 8381 02e6 19       		.uleb128 0x19
 8382 02e7 03       		.uleb128 0x3
 8383 02e8 0E       		.uleb128 0xe
 8384 02e9 3A       		.uleb128 0x3a
 8385 02ea 0B       		.uleb128 0xb
 8386 02eb 3B       		.uleb128 0x3b
 8387 02ec 0B       		.uleb128 0xb
 8388 02ed 27       		.uleb128 0x27
 8389 02ee 19       		.uleb128 0x19
 8390 02ef 49       		.uleb128 0x49
 8391 02f0 13       		.uleb128 0x13
 8392 02f1 3C       		.uleb128 0x3c
 8393 02f2 19       		.uleb128 0x19
 8394 02f3 00       		.byte	0
 8395 02f4 00       		.byte	0
 8396 02f5 35       		.uleb128 0x35
 8397 02f6 2E       		.uleb128 0x2e
 8398 02f7 01       		.byte	0x1
 8399 02f8 3F       		.uleb128 0x3f
 8400 02f9 19       		.uleb128 0x19
 8401 02fa 03       		.uleb128 0x3
 8402 02fb 0E       		.uleb128 0xe
 8403 02fc 3A       		.uleb128 0x3a
 8404 02fd 0B       		.uleb128 0xb
 8405 02fe 3B       		.uleb128 0x3b
 8406 02ff 05       		.uleb128 0x5
 8407 0300 27       		.uleb128 0x27
 8408 0301 19       		.uleb128 0x19
 8409 0302 3C       		.uleb128 0x3c
 8410 0303 19       		.uleb128 0x19
 8411 0304 00       		.byte	0
 8412 0305 00       		.byte	0
 8413 0306 00       		.byte	0
 8414              		.section	.debug_loc,"",%progbits
 8415              	.Ldebug_loc0:
 8416              	.LLST0:
 8417 0000 00000000 		.4byte	.LVL0
 8418 0004 20000000 		.4byte	.LVL1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 238


 8419 0008 0100     		.2byte	0x1
 8420 000a 50       		.byte	0x50
 8421 000b 20000000 		.4byte	.LVL1
 8422 000f 22000000 		.4byte	.LVL2
 8423 0013 0400     		.2byte	0x4
 8424 0015 F3       		.byte	0xf3
 8425 0016 01       		.uleb128 0x1
 8426 0017 50       		.byte	0x50
 8427 0018 9F       		.byte	0x9f
 8428 0019 22000000 		.4byte	.LVL2
 8429 001d 24000000 		.4byte	.LVL3
 8430 0021 0100     		.2byte	0x1
 8431 0023 50       		.byte	0x50
 8432 0024 24000000 		.4byte	.LVL3
 8433 0028 26000000 		.4byte	.LVL4
 8434 002c 0400     		.2byte	0x4
 8435 002e F3       		.byte	0xf3
 8436 002f 01       		.uleb128 0x1
 8437 0030 50       		.byte	0x50
 8438 0031 9F       		.byte	0x9f
 8439 0032 26000000 		.4byte	.LVL4
 8440 0036 28000000 		.4byte	.LVL5
 8441 003a 0100     		.2byte	0x1
 8442 003c 50       		.byte	0x50
 8443 003d 28000000 		.4byte	.LVL5
 8444 0041 2A000000 		.4byte	.LVL6
 8445 0045 0400     		.2byte	0x4
 8446 0047 F3       		.byte	0xf3
 8447 0048 01       		.uleb128 0x1
 8448 0049 50       		.byte	0x50
 8449 004a 9F       		.byte	0x9f
 8450 004b 2A000000 		.4byte	.LVL6
 8451 004f 2C000000 		.4byte	.LVL7
 8452 0053 0100     		.2byte	0x1
 8453 0055 50       		.byte	0x50
 8454 0056 2C000000 		.4byte	.LVL7
 8455 005a 38000000 		.4byte	.LFE73
 8456 005e 0400     		.2byte	0x4
 8457 0060 F3       		.byte	0xf3
 8458 0061 01       		.uleb128 0x1
 8459 0062 50       		.byte	0x50
 8460 0063 9F       		.byte	0x9f
 8461 0064 00000000 		.4byte	0
 8462 0068 00000000 		.4byte	0
 8463              	.LLST1:
 8464 006c 00000000 		.4byte	.LVL0
 8465 0070 2C000000 		.4byte	.LVL7
 8466 0074 0200     		.2byte	0x2
 8467 0076 30       		.byte	0x30
 8468 0077 9F       		.byte	0x9f
 8469 0078 2C000000 		.4byte	.LVL7
 8470 007c 38000000 		.4byte	.LFE73
 8471 0080 0100     		.2byte	0x1
 8472 0082 50       		.byte	0x50
 8473 0083 00000000 		.4byte	0
 8474 0087 00000000 		.4byte	0
 8475              	.LLST3:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 239


 8476 008b 00000000 		.4byte	.LVL8
 8477 008f 06000000 		.4byte	.LVL10
 8478 0093 0100     		.2byte	0x1
 8479 0095 50       		.byte	0x50
 8480 0096 06000000 		.4byte	.LVL10
 8481 009a 12000000 		.4byte	.LVL13
 8482 009e 0100     		.2byte	0x1
 8483 00a0 50       		.byte	0x50
 8484 00a1 00000000 		.4byte	0
 8485 00a5 00000000 		.4byte	0
 8486              	.LLST4:
 8487 00a9 00000000 		.4byte	.LVL8
 8488 00ad 04000000 		.4byte	.LVL9
 8489 00b1 0200     		.2byte	0x2
 8490 00b3 30       		.byte	0x30
 8491 00b4 9F       		.byte	0x9f
 8492 00b5 04000000 		.4byte	.LVL9
 8493 00b9 0E000000 		.4byte	.LVL12
 8494 00bd 0100     		.2byte	0x1
 8495 00bf 53       		.byte	0x53
 8496 00c0 0E000000 		.4byte	.LVL12
 8497 00c4 14000000 		.4byte	.LFE98
 8498 00c8 0500     		.2byte	0x5
 8499 00ca 73       		.byte	0x73
 8500 00cb 00       		.sleb128 0
 8501 00cc 32       		.byte	0x32
 8502 00cd 25       		.byte	0x25
 8503 00ce 9F       		.byte	0x9f
 8504 00cf 00000000 		.4byte	0
 8505 00d3 00000000 		.4byte	0
 8506              	.LLST5:
 8507 00d7 22000000 		.4byte	.LVL14
 8508 00db 24000000 		.4byte	.LVL15
 8509 00df 0100     		.2byte	0x1
 8510 00e1 52       		.byte	0x52
 8511 00e2 00000000 		.4byte	0
 8512 00e6 00000000 		.4byte	0
 8513              	.LLST6:
 8514 00ea 00000000 		.4byte	.LVL16
 8515 00ee 06000000 		.4byte	.LVL17
 8516 00f2 0100     		.2byte	0x1
 8517 00f4 50       		.byte	0x50
 8518 00f5 06000000 		.4byte	.LVL17
 8519 00f9 12000000 		.4byte	.LFE100
 8520 00fd 0100     		.2byte	0x1
 8521 00ff 54       		.byte	0x54
 8522 0100 00000000 		.4byte	0
 8523 0104 00000000 		.4byte	0
 8524              	.LLST7:
 8525 0108 00000000 		.4byte	.LVL20
 8526 010c 0A000000 		.4byte	.LVL21
 8527 0110 0100     		.2byte	0x1
 8528 0112 50       		.byte	0x50
 8529 0113 0A000000 		.4byte	.LVL21
 8530 0117 3A000000 		.4byte	.LFE97
 8531 011b 0400     		.2byte	0x4
 8532 011d F3       		.byte	0xf3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 240


 8533 011e 01       		.uleb128 0x1
 8534 011f 50       		.byte	0x50
 8535 0120 9F       		.byte	0x9f
 8536 0121 00000000 		.4byte	0
 8537 0125 00000000 		.4byte	0
 8538              	.LLST8:
 8539 0129 00000000 		.4byte	.LVL20
 8540 012d 0D000000 		.4byte	.LVL22-1
 8541 0131 0100     		.2byte	0x1
 8542 0133 51       		.byte	0x51
 8543 0134 0D000000 		.4byte	.LVL22-1
 8544 0138 10000000 		.4byte	.LVL23
 8545 013c 0100     		.2byte	0x1
 8546 013e 54       		.byte	0x54
 8547 013f 10000000 		.4byte	.LVL23
 8548 0143 3A000000 		.4byte	.LFE97
 8549 0147 0400     		.2byte	0x4
 8550 0149 F3       		.byte	0xf3
 8551 014a 01       		.uleb128 0x1
 8552 014b 51       		.byte	0x51
 8553 014c 9F       		.byte	0x9f
 8554 014d 00000000 		.4byte	0
 8555 0151 00000000 		.4byte	0
 8556              	.LLST9:
 8557 0155 18000000 		.4byte	.LVL24
 8558 0159 22000000 		.4byte	.LVL25
 8559 015d 0100     		.2byte	0x1
 8560 015f 50       		.byte	0x50
 8561 0160 22000000 		.4byte	.LVL25
 8562 0164 28000000 		.4byte	.LVL27
 8563 0168 0100     		.2byte	0x1
 8564 016a 55       		.byte	0x55
 8565 016b 2A000000 		.4byte	.LVL28
 8566 016f 3A000000 		.4byte	.LFE97
 8567 0173 0100     		.2byte	0x1
 8568 0175 55       		.byte	0x55
 8569 0176 00000000 		.4byte	0
 8570 017a 00000000 		.4byte	0
 8571              	.LLST10:
 8572 017e 00000000 		.4byte	.LVL30
 8573 0182 0A000000 		.4byte	.LVL33
 8574 0186 0100     		.2byte	0x1
 8575 0188 50       		.byte	0x50
 8576 0189 0A000000 		.4byte	.LVL33
 8577 018d 50000000 		.4byte	.LFE93
 8578 0191 0100     		.2byte	0x1
 8579 0193 54       		.byte	0x54
 8580 0194 00000000 		.4byte	0
 8581 0198 00000000 		.4byte	0
 8582              	.LLST11:
 8583 019c 00000000 		.4byte	.LVL30
 8584 01a0 35000000 		.4byte	.LVL37-1
 8585 01a4 0100     		.2byte	0x1
 8586 01a6 51       		.byte	0x51
 8587 01a7 35000000 		.4byte	.LVL37-1
 8588 01ab 50000000 		.4byte	.LFE93
 8589 01af 0400     		.2byte	0x4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 241


 8590 01b1 F3       		.byte	0xf3
 8591 01b2 01       		.uleb128 0x1
 8592 01b3 51       		.byte	0x51
 8593 01b4 9F       		.byte	0x9f
 8594 01b5 00000000 		.4byte	0
 8595 01b9 00000000 		.4byte	0
 8596              	.LLST12:
 8597 01bd 00000000 		.4byte	.LVL30
 8598 01c1 0A000000 		.4byte	.LVL33
 8599 01c5 0100     		.2byte	0x1
 8600 01c7 52       		.byte	0x52
 8601 01c8 0A000000 		.4byte	.LVL33
 8602 01cc 44000000 		.4byte	.LVL39
 8603 01d0 0100     		.2byte	0x1
 8604 01d2 55       		.byte	0x55
 8605 01d3 00000000 		.4byte	0
 8606 01d7 00000000 		.4byte	0
 8607              	.LLST13:
 8608 01db 00000000 		.4byte	.LVL30
 8609 01df 08000000 		.4byte	.LVL32
 8610 01e3 0100     		.2byte	0x1
 8611 01e5 53       		.byte	0x53
 8612 01e6 08000000 		.4byte	.LVL32
 8613 01ea 50000000 		.4byte	.LFE93
 8614 01ee 0400     		.2byte	0x4
 8615 01f0 F3       		.byte	0xf3
 8616 01f1 01       		.uleb128 0x1
 8617 01f2 53       		.byte	0x53
 8618 01f3 9F       		.byte	0x9f
 8619 01f4 00000000 		.4byte	0
 8620 01f8 00000000 		.4byte	0
 8621              	.LLST14:
 8622 01fc 06000000 		.4byte	.LVL31
 8623 0200 0A000000 		.4byte	.LVL33
 8624 0204 0200     		.2byte	0x2
 8625 0206 30       		.byte	0x30
 8626 0207 9F       		.byte	0x9f
 8627 0208 0A000000 		.4byte	.LVL33
 8628 020c 1E000000 		.4byte	.LVL35
 8629 0210 0100     		.2byte	0x1
 8630 0212 53       		.byte	0x53
 8631 0213 00000000 		.4byte	0
 8632 0217 00000000 		.4byte	0
 8633              	.LLST15:
 8634 021b 02000000 		.4byte	.LVL40
 8635 021f 06000000 		.4byte	.LVL41
 8636 0223 0200     		.2byte	0x2
 8637 0225 30       		.byte	0x30
 8638 0226 9F       		.byte	0x9f
 8639 0227 06000000 		.4byte	.LVL41
 8640 022b 1C000000 		.4byte	.LVL44
 8641 022f 0100     		.2byte	0x1
 8642 0231 54       		.byte	0x54
 8643 0232 00000000 		.4byte	0
 8644 0236 00000000 		.4byte	0
 8645              	.LLST16:
 8646 023a 00000000 		.4byte	.LVL50
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 242


 8647 023e 1A000000 		.4byte	.LVL51
 8648 0242 0100     		.2byte	0x1
 8649 0244 50       		.byte	0x50
 8650 0245 1A000000 		.4byte	.LVL51
 8651 0249 26000000 		.4byte	.LVL53
 8652 024d 0100     		.2byte	0x1
 8653 024f 54       		.byte	0x54
 8654 0250 26000000 		.4byte	.LVL53
 8655 0254 2A000000 		.4byte	.LVL54
 8656 0258 0100     		.2byte	0x1
 8657 025a 50       		.byte	0x50
 8658 025b 2A000000 		.4byte	.LVL54
 8659 025f 3E000000 		.4byte	.LVL56
 8660 0263 0100     		.2byte	0x1
 8661 0265 54       		.byte	0x54
 8662 0266 3E000000 		.4byte	.LVL56
 8663 026a 44000000 		.4byte	.LFE96
 8664 026e 0400     		.2byte	0x4
 8665 0270 F3       		.byte	0xf3
 8666 0271 01       		.uleb128 0x1
 8667 0272 50       		.byte	0x50
 8668 0273 9F       		.byte	0x9f
 8669 0274 00000000 		.4byte	0
 8670 0278 00000000 		.4byte	0
 8671              	.LLST17:
 8672 027c 00000000 		.4byte	.LVL57
 8673 0280 12000000 		.4byte	.LVL58
 8674 0284 0100     		.2byte	0x1
 8675 0286 50       		.byte	0x50
 8676 0287 12000000 		.4byte	.LVL58
 8677 028b F0000000 		.4byte	.LVL74
 8678 028f 0100     		.2byte	0x1
 8679 0291 59       		.byte	0x59
 8680 0292 F0000000 		.4byte	.LVL74
 8681 0296 F4000000 		.4byte	.LFE64
 8682 029a 0400     		.2byte	0x4
 8683 029c F3       		.byte	0xf3
 8684 029d 01       		.uleb128 0x1
 8685 029e 50       		.byte	0x50
 8686 029f 9F       		.byte	0x9f
 8687 02a0 00000000 		.4byte	0
 8688 02a4 00000000 		.4byte	0
 8689              	.LLST18:
 8690 02a8 00000000 		.4byte	.LVL57
 8691 02ac 14000000 		.4byte	.LVL59
 8692 02b0 0100     		.2byte	0x1
 8693 02b2 51       		.byte	0x51
 8694 02b3 14000000 		.4byte	.LVL59
 8695 02b7 F0000000 		.4byte	.LVL74
 8696 02bb 0100     		.2byte	0x1
 8697 02bd 5A       		.byte	0x5a
 8698 02be F0000000 		.4byte	.LVL74
 8699 02c2 F4000000 		.4byte	.LFE64
 8700 02c6 0400     		.2byte	0x4
 8701 02c8 F3       		.byte	0xf3
 8702 02c9 01       		.uleb128 0x1
 8703 02ca 51       		.byte	0x51
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 243


 8704 02cb 9F       		.byte	0x9f
 8705 02cc 00000000 		.4byte	0
 8706 02d0 00000000 		.4byte	0
 8707              	.LLST19:
 8708 02d4 00000000 		.4byte	.LVL57
 8709 02d8 17000000 		.4byte	.LVL60-1
 8710 02dc 0100     		.2byte	0x1
 8711 02de 52       		.byte	0x52
 8712 02df 17000000 		.4byte	.LVL60-1
 8713 02e3 F4000000 		.4byte	.LFE64
 8714 02e7 0400     		.2byte	0x4
 8715 02e9 F3       		.byte	0xf3
 8716 02ea 01       		.uleb128 0x1
 8717 02eb 52       		.byte	0x52
 8718 02ec 9F       		.byte	0x9f
 8719 02ed 00000000 		.4byte	0
 8720 02f1 00000000 		.4byte	0
 8721              	.LLST20:
 8722 02f5 00000000 		.4byte	.LVL57
 8723 02f9 17000000 		.4byte	.LVL60-1
 8724 02fd 0100     		.2byte	0x1
 8725 02ff 53       		.byte	0x53
 8726 0300 17000000 		.4byte	.LVL60-1
 8727 0304 F0000000 		.4byte	.LVL74
 8728 0308 0100     		.2byte	0x1
 8729 030a 58       		.byte	0x58
 8730 030b F0000000 		.4byte	.LVL74
 8731 030f F4000000 		.4byte	.LFE64
 8732 0313 0400     		.2byte	0x4
 8733 0315 F3       		.byte	0xf3
 8734 0316 01       		.uleb128 0x1
 8735 0317 53       		.byte	0x53
 8736 0318 9F       		.byte	0x9f
 8737 0319 00000000 		.4byte	0
 8738 031d 00000000 		.4byte	0
 8739              	.LLST21:
 8740 0321 00000000 		.4byte	.LVL57
 8741 0325 F0000000 		.4byte	.LVL74
 8742 0329 0200     		.2byte	0x2
 8743 032b 91       		.byte	0x91
 8744 032c 00       		.sleb128 0
 8745 032d F0000000 		.4byte	.LVL74
 8746 0331 F4000000 		.4byte	.LFE64
 8747 0335 0200     		.2byte	0x2
 8748 0337 7D       		.byte	0x7d
 8749 0338 00       		.sleb128 0
 8750 0339 00000000 		.4byte	0
 8751 033d 00000000 		.4byte	0
 8752              	.LLST22:
 8753 0341 00000000 		.4byte	.LVL57
 8754 0345 F0000000 		.4byte	.LVL74
 8755 0349 0200     		.2byte	0x2
 8756 034b 91       		.byte	0x91
 8757 034c 04       		.sleb128 4
 8758 034d F0000000 		.4byte	.LVL74
 8759 0351 F4000000 		.4byte	.LFE64
 8760 0355 0200     		.2byte	0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 244


 8761 0357 7D       		.byte	0x7d
 8762 0358 04       		.sleb128 4
 8763 0359 00000000 		.4byte	0
 8764 035d 00000000 		.4byte	0
 8765              	.LLST23:
 8766 0361 00000000 		.4byte	.LVL57
 8767 0365 F0000000 		.4byte	.LVL74
 8768 0369 0200     		.2byte	0x2
 8769 036b 91       		.byte	0x91
 8770 036c 08       		.sleb128 8
 8771 036d F0000000 		.4byte	.LVL74
 8772 0371 F4000000 		.4byte	.LFE64
 8773 0375 0200     		.2byte	0x2
 8774 0377 7D       		.byte	0x7d
 8775 0378 08       		.sleb128 8
 8776 0379 00000000 		.4byte	0
 8777 037d 00000000 		.4byte	0
 8778              	.LLST24:
 8779 0381 00000000 		.4byte	.LVL57
 8780 0385 F0000000 		.4byte	.LVL74
 8781 0389 0200     		.2byte	0x2
 8782 038b 91       		.byte	0x91
 8783 038c 0C       		.sleb128 12
 8784 038d F0000000 		.4byte	.LVL74
 8785 0391 F4000000 		.4byte	.LFE64
 8786 0395 0200     		.2byte	0x2
 8787 0397 7D       		.byte	0x7d
 8788 0398 0C       		.sleb128 12
 8789 0399 00000000 		.4byte	0
 8790 039d 00000000 		.4byte	0
 8791              	.LLST25:
 8792 03a1 BE000000 		.4byte	.LVL68
 8793 03a5 C6000000 		.4byte	.LVL71
 8794 03a9 0200     		.2byte	0x2
 8795 03ab 31       		.byte	0x31
 8796 03ac 9F       		.byte	0x9f
 8797 03ad CA000000 		.4byte	.LVL72
 8798 03b1 F0000000 		.4byte	.LVL74
 8799 03b5 0100     		.2byte	0x1
 8800 03b7 54       		.byte	0x54
 8801 03b8 F0000000 		.4byte	.LVL74
 8802 03bc F4000000 		.4byte	.LFE64
 8803 03c0 0100     		.2byte	0x1
 8804 03c2 50       		.byte	0x50
 8805 03c3 00000000 		.4byte	0
 8806 03c7 00000000 		.4byte	0
 8807              	.LLST26:
 8808 03cb 18000000 		.4byte	.LVL60
 8809 03cf 39000000 		.4byte	.LVL63-1
 8810 03d3 0100     		.2byte	0x1
 8811 03d5 50       		.byte	0x50
 8812 03d6 39000000 		.4byte	.LVL63-1
 8813 03da C4000000 		.4byte	.LVL70
 8814 03de 0100     		.2byte	0x1
 8815 03e0 54       		.byte	0x54
 8816 03e1 C6000000 		.4byte	.LVL71
 8817 03e5 CA000000 		.4byte	.LVL72
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 245


 8818 03e9 0100     		.2byte	0x1
 8819 03eb 50       		.byte	0x50
 8820 03ec 00000000 		.4byte	0
 8821 03f0 00000000 		.4byte	0
 8822              	.LLST27:
 8823 03f4 2A000000 		.4byte	.LVL61
 8824 03f8 A0000000 		.4byte	.LVL67
 8825 03fc 0100     		.2byte	0x1
 8826 03fe 55       		.byte	0x55
 8827 03ff 00000000 		.4byte	0
 8828 0403 00000000 		.4byte	0
 8829              	.LLST28:
 8830 0407 00000000 		.4byte	.LVL75
 8831 040b 07000000 		.4byte	.LVL76-1
 8832 040f 0100     		.2byte	0x1
 8833 0411 50       		.byte	0x50
 8834 0412 07000000 		.4byte	.LVL76-1
 8835 0416 10000000 		.4byte	.LVL77
 8836 041a 0100     		.2byte	0x1
 8837 041c 55       		.byte	0x55
 8838 041d 00000000 		.4byte	0
 8839 0421 00000000 		.4byte	0
 8840              	.LLST29:
 8841 0425 10000000 		.4byte	.LVL77
 8842 0429 8C000000 		.4byte	.LVL87
 8843 042d 0100     		.2byte	0x1
 8844 042f 55       		.byte	0x55
 8845 0430 00000000 		.4byte	0
 8846 0434 00000000 		.4byte	0
 8847              	.LLST30:
 8848 0438 00000000 		.4byte	.LVL88
 8849 043c 11000000 		.4byte	.LVL90-1
 8850 0440 0100     		.2byte	0x1
 8851 0442 50       		.byte	0x50
 8852 0443 11000000 		.4byte	.LVL90-1
 8853 0447 42000000 		.4byte	.LVL94
 8854 044b 0100     		.2byte	0x1
 8855 044d 54       		.byte	0x54
 8856 044e 42000000 		.4byte	.LVL94
 8857 0452 44000000 		.4byte	.LVL95
 8858 0456 0100     		.2byte	0x1
 8859 0458 50       		.byte	0x50
 8860 0459 44000000 		.4byte	.LVL95
 8861 045d 46000000 		.4byte	.LVL96
 8862 0461 0400     		.2byte	0x4
 8863 0463 F3       		.byte	0xf3
 8864 0464 01       		.uleb128 0x1
 8865 0465 50       		.byte	0x50
 8866 0466 9F       		.byte	0x9f
 8867 0467 46000000 		.4byte	.LVL96
 8868 046b 56000000 		.4byte	.LVL101
 8869 046f 0100     		.2byte	0x1
 8870 0471 54       		.byte	0x54
 8871 0472 56000000 		.4byte	.LVL101
 8872 0476 60000000 		.4byte	.LFE68
 8873 047a 0400     		.2byte	0x4
 8874 047c F3       		.byte	0xf3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 246


 8875 047d 01       		.uleb128 0x1
 8876 047e 50       		.byte	0x50
 8877 047f 9F       		.byte	0x9f
 8878 0480 00000000 		.4byte	0
 8879 0484 00000000 		.4byte	0
 8880              	.LLST31:
 8881 0488 14000000 		.4byte	.LVL91
 8882 048c 42000000 		.4byte	.LVL94
 8883 0490 0100     		.2byte	0x1
 8884 0492 55       		.byte	0x55
 8885 0493 46000000 		.4byte	.LVL96
 8886 0497 56000000 		.4byte	.LVL101
 8887 049b 0100     		.2byte	0x1
 8888 049d 55       		.byte	0x55
 8889 049e 00000000 		.4byte	0
 8890 04a2 00000000 		.4byte	0
 8891              	.LLST32:
 8892 04a6 02000000 		.4byte	.LVL89
 8893 04aa 11000000 		.4byte	.LVL90-1
 8894 04ae 0100     		.2byte	0x1
 8895 04b0 50       		.byte	0x50
 8896 04b1 11000000 		.4byte	.LVL90-1
 8897 04b5 42000000 		.4byte	.LVL94
 8898 04b9 0100     		.2byte	0x1
 8899 04bb 54       		.byte	0x54
 8900 04bc 42000000 		.4byte	.LVL94
 8901 04c0 44000000 		.4byte	.LVL95
 8902 04c4 0100     		.2byte	0x1
 8903 04c6 50       		.byte	0x50
 8904 04c7 44000000 		.4byte	.LVL95
 8905 04cb 46000000 		.4byte	.LVL96
 8906 04cf 0400     		.2byte	0x4
 8907 04d1 F3       		.byte	0xf3
 8908 04d2 01       		.uleb128 0x1
 8909 04d3 50       		.byte	0x50
 8910 04d4 9F       		.byte	0x9f
 8911 04d5 46000000 		.4byte	.LVL96
 8912 04d9 56000000 		.4byte	.LVL101
 8913 04dd 0100     		.2byte	0x1
 8914 04df 54       		.byte	0x54
 8915 04e0 56000000 		.4byte	.LVL101
 8916 04e4 60000000 		.4byte	.LFE68
 8917 04e8 0400     		.2byte	0x4
 8918 04ea F3       		.byte	0xf3
 8919 04eb 01       		.uleb128 0x1
 8920 04ec 50       		.byte	0x50
 8921 04ed 9F       		.byte	0x9f
 8922 04ee 00000000 		.4byte	0
 8923 04f2 00000000 		.4byte	0
 8924              	.LLST33:
 8925 04f6 00000000 		.4byte	.LVL102
 8926 04fa 07000000 		.4byte	.LVL103-1
 8927 04fe 0100     		.2byte	0x1
 8928 0500 50       		.byte	0x50
 8929 0501 07000000 		.4byte	.LVL103-1
 8930 0505 10000000 		.4byte	.LVL104
 8931 0509 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 247


 8932 050b 54       		.byte	0x54
 8933 050c 00000000 		.4byte	0
 8934 0510 00000000 		.4byte	0
 8935              	.LLST34:
 8936 0514 10000000 		.4byte	.LVL104
 8937 0518 12000000 		.4byte	.LVL105
 8938 051c 0100     		.2byte	0x1
 8939 051e 54       		.byte	0x54
 8940 051f 00000000 		.4byte	0
 8941 0523 00000000 		.4byte	0
 8942              	.LLST35:
 8943 0527 12000000 		.4byte	.LVL105
 8944 052b 1A000000 		.4byte	.LVL107
 8945 052f 0100     		.2byte	0x1
 8946 0531 54       		.byte	0x54
 8947 0532 1A000000 		.4byte	.LVL107
 8948 0536 20000000 		.4byte	.LFE69
 8949 053a 0100     		.2byte	0x1
 8950 053c 50       		.byte	0x50
 8951 053d 00000000 		.4byte	0
 8952 0541 00000000 		.4byte	0
 8953              	.LLST36:
 8954 0545 00000000 		.4byte	.LVL108
 8955 0549 07000000 		.4byte	.LVL109-1
 8956 054d 0100     		.2byte	0x1
 8957 054f 50       		.byte	0x50
 8958 0550 07000000 		.4byte	.LVL109-1
 8959 0554 10000000 		.4byte	.LVL110
 8960 0558 0100     		.2byte	0x1
 8961 055a 54       		.byte	0x54
 8962 055b 00000000 		.4byte	0
 8963 055f 00000000 		.4byte	0
 8964              	.LLST37:
 8965 0563 10000000 		.4byte	.LVL110
 8966 0567 12000000 		.4byte	.LVL111
 8967 056b 0100     		.2byte	0x1
 8968 056d 54       		.byte	0x54
 8969 056e 00000000 		.4byte	0
 8970 0572 00000000 		.4byte	0
 8971              	.LLST38:
 8972 0576 12000000 		.4byte	.LVL111
 8973 057a 1A000000 		.4byte	.LVL113
 8974 057e 0100     		.2byte	0x1
 8975 0580 54       		.byte	0x54
 8976 0581 1A000000 		.4byte	.LVL113
 8977 0585 20000000 		.4byte	.LFE70
 8978 0589 0100     		.2byte	0x1
 8979 058b 50       		.byte	0x50
 8980 058c 00000000 		.4byte	0
 8981 0590 00000000 		.4byte	0
 8982              	.LLST39:
 8983 0594 08000000 		.4byte	.LVL109
 8984 0598 15000000 		.4byte	.LVL112-1
 8985 059c 0100     		.2byte	0x1
 8986 059e 50       		.byte	0x50
 8987 059f 00000000 		.4byte	0
 8988 05a3 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 248


 8989              	.LLST40:
 8990 05a7 00000000 		.4byte	.LVL114
 8991 05ab 0F000000 		.4byte	.LVL117-1
 8992 05af 0100     		.2byte	0x1
 8993 05b1 50       		.byte	0x50
 8994 05b2 0F000000 		.4byte	.LVL117-1
 8995 05b6 18000000 		.4byte	.LVL118
 8996 05ba 0100     		.2byte	0x1
 8997 05bc 54       		.byte	0x54
 8998 05bd 00000000 		.4byte	0
 8999 05c1 00000000 		.4byte	0
 9000              	.LLST41:
 9001 05c5 00000000 		.4byte	.LVL114
 9002 05c9 0C000000 		.4byte	.LVL116
 9003 05cd 0100     		.2byte	0x1
 9004 05cf 51       		.byte	0x51
 9005 05d0 0C000000 		.4byte	.LVL116
 9006 05d4 68000000 		.4byte	.LVL123
 9007 05d8 0100     		.2byte	0x1
 9008 05da 55       		.byte	0x55
 9009 05db 68000000 		.4byte	.LVL123
 9010 05df 89000000 		.4byte	.LVL124-1
 9011 05e3 0300     		.2byte	0x3
 9012 05e5 74       		.byte	0x74
 9013 05e6 C000     		.sleb128 64
 9014 05e8 00000000 		.4byte	0
 9015 05ec 00000000 		.4byte	0
 9016              	.LLST42:
 9017 05f0 18000000 		.4byte	.LVL118
 9018 05f4 CC000000 		.4byte	.LVL128
 9019 05f8 0100     		.2byte	0x1
 9020 05fa 54       		.byte	0x54
 9021 05fb 00000000 		.4byte	0
 9022 05ff 00000000 		.4byte	0
 9023              	.LLST43:
 9024 0603 1A000000 		.4byte	.LVL119
 9025 0607 60000000 		.4byte	.LVL122
 9026 060b 0100     		.2byte	0x1
 9027 060d 53       		.byte	0x53
 9028 060e 00000000 		.4byte	0
 9029 0612 00000000 		.4byte	0
 9030              	.LLST44:
 9031 0616 56000000 		.4byte	.LVL121
 9032 061a C6000000 		.4byte	.LVL126
 9033 061e 0100     		.2byte	0x1
 9034 0620 56       		.byte	0x56
 9035 0621 00000000 		.4byte	0
 9036 0625 00000000 		.4byte	0
 9037              	.LLST45:
 9038 0629 06000000 		.4byte	.LVL115
 9039 062d 54000000 		.4byte	.LVL120
 9040 0631 0200     		.2byte	0x2
 9041 0633 30       		.byte	0x30
 9042 0634 9F       		.byte	0x9f
 9043 0635 54000000 		.4byte	.LVL120
 9044 0639 C6000000 		.4byte	.LVL126
 9045 063d 0100     		.2byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 249


 9046 063f 57       		.byte	0x57
 9047 0640 00000000 		.4byte	0
 9048 0644 00000000 		.4byte	0
 9049              	.LLST46:
 9050 0648 00000000 		.4byte	.LVL129
 9051 064c 13000000 		.4byte	.LVL130-1
 9052 0650 0100     		.2byte	0x1
 9053 0652 50       		.byte	0x50
 9054 0653 13000000 		.4byte	.LVL130-1
 9055 0657 60000000 		.4byte	.LVL136
 9056 065b 0100     		.2byte	0x1
 9057 065d 54       		.byte	0x54
 9058 065e 60000000 		.4byte	.LVL136
 9059 0662 68000000 		.4byte	.LFE74
 9060 0666 0100     		.2byte	0x1
 9061 0668 50       		.byte	0x50
 9062 0669 00000000 		.4byte	0
 9063 066d 00000000 		.4byte	0
 9064              	.LLST48:
 9065 0671 00000000 		.4byte	.LVL137
 9066 0675 07000000 		.4byte	.LVL139-1
 9067 0679 0100     		.2byte	0x1
 9068 067b 50       		.byte	0x50
 9069 067c 07000000 		.4byte	.LVL139-1
 9070 0680 76000000 		.4byte	.LVL150
 9071 0684 0100     		.2byte	0x1
 9072 0686 54       		.byte	0x54
 9073 0687 76000000 		.4byte	.LVL150
 9074 068b 80000000 		.4byte	.LFE75
 9075 068f 0400     		.2byte	0x4
 9076 0691 F3       		.byte	0xf3
 9077 0692 01       		.uleb128 0x1
 9078 0693 50       		.byte	0x50
 9079 0694 9F       		.byte	0x9f
 9080 0695 00000000 		.4byte	0
 9081 0699 00000000 		.4byte	0
 9082              	.LLST49:
 9083 069d 04000000 		.4byte	.LVL138
 9084 06a1 30000000 		.4byte	.LVL143
 9085 06a5 0200     		.2byte	0x2
 9086 06a7 30       		.byte	0x30
 9087 06a8 9F       		.byte	0x9f
 9088 06a9 30000000 		.4byte	.LVL143
 9089 06ad 5C000000 		.4byte	.LVL146
 9090 06b1 0100     		.2byte	0x1
 9091 06b3 56       		.byte	0x56
 9092 06b4 5C000000 		.4byte	.LVL146
 9093 06b8 6C000000 		.4byte	.LVL148
 9094 06bc 0200     		.2byte	0x2
 9095 06be 30       		.byte	0x30
 9096 06bf 9F       		.byte	0x9f
 9097 06c0 6C000000 		.4byte	.LVL148
 9098 06c4 76000000 		.4byte	.LVL150
 9099 06c8 0100     		.2byte	0x1
 9100 06ca 56       		.byte	0x56
 9101 06cb 76000000 		.4byte	.LVL150
 9102 06cf 80000000 		.4byte	.LFE75
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 250


 9103 06d3 0100     		.2byte	0x1
 9104 06d5 50       		.byte	0x50
 9105 06d6 00000000 		.4byte	0
 9106 06da 00000000 		.4byte	0
 9107              	.LLST50:
 9108 06de 04000000 		.4byte	.LVL138
 9109 06e2 07000000 		.4byte	.LVL139-1
 9110 06e6 0100     		.2byte	0x1
 9111 06e8 50       		.byte	0x50
 9112 06e9 07000000 		.4byte	.LVL139-1
 9113 06ed 76000000 		.4byte	.LVL150
 9114 06f1 0100     		.2byte	0x1
 9115 06f3 54       		.byte	0x54
 9116 06f4 76000000 		.4byte	.LVL150
 9117 06f8 80000000 		.4byte	.LFE75
 9118 06fc 0400     		.2byte	0x4
 9119 06fe F3       		.byte	0xf3
 9120 06ff 01       		.uleb128 0x1
 9121 0700 50       		.byte	0x50
 9122 0701 9F       		.byte	0x9f
 9123 0702 00000000 		.4byte	0
 9124 0706 00000000 		.4byte	0
 9125              	.LLST51:
 9126 070a 0A000000 		.4byte	.LVL140
 9127 070e 0C000000 		.4byte	.LVL141
 9128 0712 0100     		.2byte	0x1
 9129 0714 50       		.byte	0x50
 9130 0715 0C000000 		.4byte	.LVL141
 9131 0719 76000000 		.4byte	.LVL150
 9132 071d 0100     		.2byte	0x1
 9133 071f 55       		.byte	0x55
 9134 0720 00000000 		.4byte	0
 9135 0724 00000000 		.4byte	0
 9136              	.LLST52:
 9137 0728 18000000 		.4byte	.LVL151
 9138 072c 1F000000 		.4byte	.LVL152-1
 9139 0730 0100     		.2byte	0x1
 9140 0732 50       		.byte	0x50
 9141 0733 00000000 		.4byte	0
 9142 0737 00000000 		.4byte	0
 9143              	.LLST53:
 9144 073b 4A000000 		.4byte	.LVL165
 9145 073f 4E000000 		.4byte	.LVL167
 9146 0743 0100     		.2byte	0x1
 9147 0745 54       		.byte	0x54
 9148 0746 72000000 		.4byte	.LVL169
 9149 074a C4000000 		.4byte	.LVL174
 9150 074e 0100     		.2byte	0x1
 9151 0750 54       		.byte	0x54
 9152 0751 00000000 		.4byte	0
 9153 0755 00000000 		.4byte	0
 9154              	.LLST54:
 9155 0759 74000000 		.4byte	.LVL170
 9156 075d 85000000 		.4byte	.LVL171-1
 9157 0761 0100     		.2byte	0x1
 9158 0763 53       		.byte	0x53
 9159 0764 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 251


 9160 0768 00000000 		.4byte	0
 9161              	.LLST55:
 9162 076c 04000000 		.4byte	.LVL159
 9163 0770 4A000000 		.4byte	.LVL165
 9164 0774 0200     		.2byte	0x2
 9165 0776 30       		.byte	0x30
 9166 0777 9F       		.byte	0x9f
 9167 0778 4A000000 		.4byte	.LVL165
 9168 077c 4C000000 		.4byte	.LVL166
 9169 0780 0100     		.2byte	0x1
 9170 0782 57       		.byte	0x57
 9171 0783 4E000000 		.4byte	.LVL167
 9172 0787 50000000 		.4byte	.LVL168
 9173 078b 0200     		.2byte	0x2
 9174 078d 30       		.byte	0x30
 9175 078e 9F       		.byte	0x9f
 9176 078f 50000000 		.4byte	.LVL168
 9177 0793 DC000000 		.4byte	.LVL175
 9178 0797 0100     		.2byte	0x1
 9179 0799 57       		.byte	0x57
 9180 079a DC000000 		.4byte	.LVL175
 9181 079e EC000000 		.4byte	.LVL176
 9182 07a2 0200     		.2byte	0x2
 9183 07a4 30       		.byte	0x30
 9184 07a5 9F       		.byte	0x9f
 9185 07a6 EC000000 		.4byte	.LVL176
 9186 07aa FE000000 		.4byte	.LVL179
 9187 07ae 0100     		.2byte	0x1
 9188 07b0 57       		.byte	0x57
 9189 07b1 FE000000 		.4byte	.LVL179
 9190 07b5 04010000 		.4byte	.LFE83
 9191 07b9 0100     		.2byte	0x1
 9192 07bb 50       		.byte	0x50
 9193 07bc 00000000 		.4byte	0
 9194 07c0 00000000 		.4byte	0
 9195              	.LLST56:
 9196 07c4 1E000000 		.4byte	.LVL160
 9197 07c8 DC000000 		.4byte	.LVL175
 9198 07cc 0100     		.2byte	0x1
 9199 07ce 58       		.byte	0x58
 9200 07cf EC000000 		.4byte	.LVL176
 9201 07d3 EE000000 		.4byte	.LVL177
 9202 07d7 0100     		.2byte	0x1
 9203 07d9 58       		.byte	0x58
 9204 07da 00000000 		.4byte	0
 9205 07de 00000000 		.4byte	0
 9206              	.LLST57:
 9207 07e2 26000000 		.4byte	.LVL161
 9208 07e6 34000000 		.4byte	.LVL162
 9209 07ea 0100     		.2byte	0x1
 9210 07ec 52       		.byte	0x52
 9211 07ed 34000000 		.4byte	.LVL162
 9212 07f1 3A000000 		.4byte	.LVL163
 9213 07f5 0500     		.2byte	0x5
 9214 07f7 03       		.byte	0x3
 9215 07f8 D0000000 		.4byte	pxOverflowDelayedTaskList
 9216 07fc 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 252


 9217 0800 00000000 		.4byte	0
 9218              	.LLST58:
 9219 0804 2C000000 		.4byte	.LVL182
 9220 0808 70000000 		.4byte	.LVL186
 9221 080c 0100     		.2byte	0x1
 9222 080e 55       		.byte	0x55
 9223 080f 00000000 		.4byte	0
 9224 0813 00000000 		.4byte	0
 9225              	.LLST59:
 9226 0817 02000000 		.4byte	.LVL180
 9227 081b B0000000 		.4byte	.LVL188
 9228 081f 0200     		.2byte	0x2
 9229 0821 30       		.byte	0x30
 9230 0822 9F       		.byte	0x9f
 9231 0823 B0000000 		.4byte	.LVL188
 9232 0827 B8000000 		.4byte	.LVL190
 9233 082b 0200     		.2byte	0x2
 9234 082d 31       		.byte	0x31
 9235 082e 9F       		.byte	0x9f
 9236 082f B8000000 		.4byte	.LVL190
 9237 0833 BE000000 		.4byte	.LVL191
 9238 0837 0200     		.2byte	0x2
 9239 0839 30       		.byte	0x30
 9240 083a 9F       		.byte	0x9f
 9241 083b BE000000 		.4byte	.LVL191
 9242 083f C6000000 		.4byte	.LVL193
 9243 0843 0100     		.2byte	0x1
 9244 0845 54       		.byte	0x54
 9245 0846 C6000000 		.4byte	.LVL193
 9246 084a CC000000 		.4byte	.LFE79
 9247 084e 0100     		.2byte	0x1
 9248 0850 50       		.byte	0x50
 9249 0851 00000000 		.4byte	0
 9250 0855 00000000 		.4byte	0
 9251              	.LLST60:
 9252 0859 00000000 		.4byte	.LVL194
 9253 085d 09000000 		.4byte	.LVL196-1
 9254 0861 0100     		.2byte	0x1
 9255 0863 50       		.byte	0x50
 9256 0864 09000000 		.4byte	.LVL196-1
 9257 0868 7A000000 		.4byte	.LVL205
 9258 086c 0100     		.2byte	0x1
 9259 086e 55       		.byte	0x55
 9260 086f 7A000000 		.4byte	.LVL205
 9261 0873 80000000 		.4byte	.LFE66
 9262 0877 0400     		.2byte	0x4
 9263 0879 F3       		.byte	0xf3
 9264 087a 01       		.uleb128 0x1
 9265 087b 50       		.byte	0x50
 9266 087c 9F       		.byte	0x9f
 9267 087d 00000000 		.4byte	0
 9268 0881 00000000 		.4byte	0
 9269              	.LLST61:
 9270 0885 00000000 		.4byte	.LVL194
 9271 0889 09000000 		.4byte	.LVL196-1
 9272 088d 0100     		.2byte	0x1
 9273 088f 51       		.byte	0x51
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 253


 9274 0890 09000000 		.4byte	.LVL196-1
 9275 0894 14000000 		.4byte	.LVL198
 9276 0898 0100     		.2byte	0x1
 9277 089a 54       		.byte	0x54
 9278 089b 14000000 		.4byte	.LVL198
 9279 089f 80000000 		.4byte	.LFE66
 9280 08a3 0400     		.2byte	0x4
 9281 08a5 F3       		.byte	0xf3
 9282 08a6 01       		.uleb128 0x1
 9283 08a7 51       		.byte	0x51
 9284 08a8 9F       		.byte	0x9f
 9285 08a9 00000000 		.4byte	0
 9286 08ad 00000000 		.4byte	0
 9287              	.LLST62:
 9288 08b1 14000000 		.4byte	.LVL198
 9289 08b5 7A000000 		.4byte	.LVL205
 9290 08b9 0100     		.2byte	0x1
 9291 08bb 54       		.byte	0x54
 9292 08bc 00000000 		.4byte	0
 9293 08c0 00000000 		.4byte	0
 9294              	.LLST63:
 9295 08c4 72000000 		.4byte	.LVL203
 9296 08c8 77000000 		.4byte	.LVL204-1
 9297 08cc 0100     		.2byte	0x1
 9298 08ce 50       		.byte	0x50
 9299 08cf 00000000 		.4byte	0
 9300 08d3 00000000 		.4byte	0
 9301              	.LLST64:
 9302 08d7 06000000 		.4byte	.LVL195
 9303 08db 3E000000 		.4byte	.LVL199
 9304 08df 0200     		.2byte	0x2
 9305 08e1 30       		.byte	0x30
 9306 08e2 9F       		.byte	0x9f
 9307 08e3 3E000000 		.4byte	.LVL199
 9308 08e7 44000000 		.4byte	.LVL200
 9309 08eb 0100     		.2byte	0x1
 9310 08ed 53       		.byte	0x53
 9311 08ee 00000000 		.4byte	0
 9312 08f2 00000000 		.4byte	0
 9313              	.LLST65:
 9314 08f6 10000000 		.4byte	.LVL197
 9315 08fa 4D000000 		.4byte	.LVL201-1
 9316 08fe 0100     		.2byte	0x1
 9317 0900 52       		.byte	0x52
 9318 0901 00000000 		.4byte	0
 9319 0905 00000000 		.4byte	0
 9320              	.LLST66:
 9321 0909 00000000 		.4byte	.LVL206
 9322 090d 09000000 		.4byte	.LVL208-1
 9323 0911 0100     		.2byte	0x1
 9324 0913 50       		.byte	0x50
 9325 0914 09000000 		.4byte	.LVL208-1
 9326 0918 12000000 		.4byte	.LVL209
 9327 091c 0100     		.2byte	0x1
 9328 091e 54       		.byte	0x54
 9329 091f 12000000 		.4byte	.LVL209
 9330 0923 42000000 		.4byte	.LVL213
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 254


 9331 0927 0400     		.2byte	0x4
 9332 0929 F3       		.byte	0xf3
 9333 092a 01       		.uleb128 0x1
 9334 092b 50       		.byte	0x50
 9335 092c 9F       		.byte	0x9f
 9336 092d 42000000 		.4byte	.LVL213
 9337 0931 44000000 		.4byte	.LVL214
 9338 0935 0100     		.2byte	0x1
 9339 0937 50       		.byte	0x50
 9340 0938 44000000 		.4byte	.LVL214
 9341 093c 50000000 		.4byte	.LFE67
 9342 0940 0400     		.2byte	0x4
 9343 0942 F3       		.byte	0xf3
 9344 0943 01       		.uleb128 0x1
 9345 0944 50       		.byte	0x50
 9346 0945 9F       		.byte	0x9f
 9347 0946 00000000 		.4byte	0
 9348 094a 00000000 		.4byte	0
 9349              	.LLST67:
 9350 094e 12000000 		.4byte	.LVL209
 9351 0952 42000000 		.4byte	.LVL213
 9352 0956 0100     		.2byte	0x1
 9353 0958 54       		.byte	0x54
 9354 0959 00000000 		.4byte	0
 9355 095d 00000000 		.4byte	0
 9356              	.LLST68:
 9357 0961 02000000 		.4byte	.LVL207
 9358 0965 40000000 		.4byte	.LVL212
 9359 0969 0200     		.2byte	0x2
 9360 096b 30       		.byte	0x30
 9361 096c 9F       		.byte	0x9f
 9362 096d 40000000 		.4byte	.LVL212
 9363 0971 42000000 		.4byte	.LVL213
 9364 0975 0100     		.2byte	0x1
 9365 0977 50       		.byte	0x50
 9366 0978 42000000 		.4byte	.LVL213
 9367 097c 44000000 		.4byte	.LVL214
 9368 0980 0200     		.2byte	0x2
 9369 0982 30       		.byte	0x30
 9370 0983 9F       		.byte	0x9f
 9371 0984 44000000 		.4byte	.LVL214
 9372 0988 49000000 		.4byte	.LVL215-1
 9373 098c 0100     		.2byte	0x1
 9374 098e 50       		.byte	0x50
 9375 098f 00000000 		.4byte	0
 9376 0993 00000000 		.4byte	0
 9377              	.LLST69:
 9378 0997 0E000000 		.4byte	.LVL217
 9379 099b 1A000000 		.4byte	.LVL220
 9380 099f 0800     		.2byte	0x8
 9381 09a1 74       		.byte	0x74
 9382 09a2 00       		.sleb128 0
 9383 09a3 30       		.byte	0x30
 9384 09a4 29       		.byte	0x29
 9385 09a5 08       		.byte	0x8
 9386 09a6 FF       		.byte	0xff
 9387 09a7 1A       		.byte	0x1a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 255


 9388 09a8 9F       		.byte	0x9f
 9389 09a9 00000000 		.4byte	0
 9390 09ad 00000000 		.4byte	0
 9391              	.LLST70:
 9392 09b1 20000000 		.4byte	.LVL221
 9393 09b5 44000000 		.4byte	.LVL224
 9394 09b9 0100     		.2byte	0x1
 9395 09bb 55       		.byte	0x55
 9396 09bc 00000000 		.4byte	0
 9397 09c0 00000000 		.4byte	0
 9398              	.LLST71:
 9399 09c4 00000000 		.4byte	.LVL225
 9400 09c8 02000000 		.4byte	.LVL226
 9401 09cc 0100     		.2byte	0x1
 9402 09ce 50       		.byte	0x50
 9403 09cf 02000000 		.4byte	.LVL226
 9404 09d3 08000000 		.4byte	.LFE92
 9405 09d7 0400     		.2byte	0x4
 9406 09d9 F3       		.byte	0xf3
 9407 09da 01       		.uleb128 0x1
 9408 09db 50       		.byte	0x50
 9409 09dc 9F       		.byte	0x9f
 9410 09dd 00000000 		.4byte	0
 9411 09e1 00000000 		.4byte	0
 9412              	.LLST72:
 9413 09e5 22000000 		.4byte	.LVL228
 9414 09e9 3C000000 		.4byte	.LVL229
 9415 09ed 0100     		.2byte	0x1
 9416 09ef 53       		.byte	0x53
 9417 09f0 00000000 		.4byte	0
 9418 09f4 00000000 		.4byte	0
 9419              	.LLST73:
 9420 09f8 62000000 		.4byte	.LVL234
 9421 09fc 90000000 		.4byte	.LVL235
 9422 0a00 0100     		.2byte	0x1
 9423 0a02 53       		.byte	0x53
 9424 0a03 00000000 		.4byte	0
 9425 0a07 00000000 		.4byte	0
 9426              	.LLST74:
 9427 0a0b 58000000 		.4byte	.LVL231
 9428 0a0f 5C000000 		.4byte	.LVL232
 9429 0a13 0100     		.2byte	0x1
 9430 0a15 53       		.byte	0x53
 9431 0a16 00000000 		.4byte	0
 9432 0a1a 00000000 		.4byte	0
 9433              	.LLST75:
 9434 0a1e 5E000000 		.4byte	.LVL233
 9435 0a22 62000000 		.4byte	.LVL234
 9436 0a26 0100     		.2byte	0x1
 9437 0a28 53       		.byte	0x53
 9438 0a29 00000000 		.4byte	0
 9439 0a2d 00000000 		.4byte	0
 9440              	.LLST76:
 9441 0a31 62000000 		.4byte	.LVL234
 9442 0a35 90000000 		.4byte	.LVL235
 9443 0a39 0B00     		.2byte	0xb
 9444 0a3b 73       		.byte	0x73
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 256


 9445 0a3c 00       		.sleb128 0
 9446 0a3d 44       		.byte	0x44
 9447 0a3e 1E       		.byte	0x1e
 9448 0a3f 03       		.byte	0x3
 9449 0a40 30000000 		.4byte	pxReadyTasksLists
 9450 0a44 22       		.byte	0x22
 9451 0a45 9F       		.byte	0x9f
 9452 0a46 00000000 		.4byte	0
 9453 0a4a 00000000 		.4byte	0
 9454              	.LLST77:
 9455 0a4e 00000000 		.4byte	.LVL236
 9456 0a52 07000000 		.4byte	.LVL237-1
 9457 0a56 0100     		.2byte	0x1
 9458 0a58 50       		.byte	0x50
 9459 0a59 07000000 		.4byte	.LVL237-1
 9460 0a5d 10000000 		.4byte	.LVL238
 9461 0a61 0100     		.2byte	0x1
 9462 0a63 54       		.byte	0x54
 9463 0a64 00000000 		.4byte	0
 9464 0a68 00000000 		.4byte	0
 9465              	.LLST78:
 9466 0a6c 10000000 		.4byte	.LVL238
 9467 0a70 9A000000 		.4byte	.LVL251
 9468 0a74 0100     		.2byte	0x1
 9469 0a76 54       		.byte	0x54
 9470 0a77 00000000 		.4byte	0
 9471 0a7b 00000000 		.4byte	0
 9472              	.LLST79:
 9473 0a7f 00000000 		.4byte	.LVL252
 9474 0a83 0F000000 		.4byte	.LVL254-1
 9475 0a87 0100     		.2byte	0x1
 9476 0a89 50       		.byte	0x50
 9477 0a8a 0F000000 		.4byte	.LVL254-1
 9478 0a8e 58000000 		.4byte	.LFE85
 9479 0a92 0400     		.2byte	0x4
 9480 0a94 F3       		.byte	0xf3
 9481 0a95 01       		.uleb128 0x1
 9482 0a96 50       		.byte	0x50
 9483 0a97 9F       		.byte	0x9f
 9484 0a98 00000000 		.4byte	0
 9485 0a9c 00000000 		.4byte	0
 9486              	.LLST80:
 9487 0aa0 00000000 		.4byte	.LVL252
 9488 0aa4 0A000000 		.4byte	.LVL253
 9489 0aa8 0100     		.2byte	0x1
 9490 0aaa 51       		.byte	0x51
 9491 0aab 0A000000 		.4byte	.LVL253
 9492 0aaf 54000000 		.4byte	.LVL261
 9493 0ab3 0100     		.2byte	0x1
 9494 0ab5 55       		.byte	0x55
 9495 0ab6 54000000 		.4byte	.LVL261
 9496 0aba 58000000 		.4byte	.LFE85
 9497 0abe 0400     		.2byte	0x4
 9498 0ac0 F3       		.byte	0xf3
 9499 0ac1 01       		.uleb128 0x1
 9500 0ac2 51       		.byte	0x51
 9501 0ac3 9F       		.byte	0x9f
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 257


 9502 0ac4 00000000 		.4byte	0
 9503 0ac8 00000000 		.4byte	0
 9504              	.LLST81:
 9505 0acc 4C000000 		.4byte	.LVL258
 9506 0ad0 4E000000 		.4byte	.LVL259
 9507 0ad4 0600     		.2byte	0x6
 9508 0ad6 70       		.byte	0x70
 9509 0ad7 00       		.sleb128 0
 9510 0ad8 75       		.byte	0x75
 9511 0ad9 00       		.sleb128 0
 9512 0ada 22       		.byte	0x22
 9513 0adb 9F       		.byte	0x9f
 9514 0adc 4E000000 		.4byte	.LVL259
 9515 0ae0 51000000 		.4byte	.LVL260-1
 9516 0ae4 0100     		.2byte	0x1
 9517 0ae6 50       		.byte	0x50
 9518 0ae7 00000000 		.4byte	0
 9519 0aeb 00000000 		.4byte	0
 9520              	.LLST82:
 9521 0aef 00000000 		.4byte	.LVL262
 9522 0af3 19000000 		.4byte	.LVL264-1
 9523 0af7 0100     		.2byte	0x1
 9524 0af9 50       		.byte	0x50
 9525 0afa 19000000 		.4byte	.LVL264-1
 9526 0afe 64000000 		.4byte	.LFE86
 9527 0b02 0400     		.2byte	0x4
 9528 0b04 F3       		.byte	0xf3
 9529 0b05 01       		.uleb128 0x1
 9530 0b06 50       		.byte	0x50
 9531 0b07 9F       		.byte	0x9f
 9532 0b08 00000000 		.4byte	0
 9533 0b0c 00000000 		.4byte	0
 9534              	.LLST83:
 9535 0b10 00000000 		.4byte	.LVL262
 9536 0b14 0E000000 		.4byte	.LVL263
 9537 0b18 0100     		.2byte	0x1
 9538 0b1a 51       		.byte	0x51
 9539 0b1b 0E000000 		.4byte	.LVL263
 9540 0b1f 64000000 		.4byte	.LFE86
 9541 0b23 0400     		.2byte	0x4
 9542 0b25 F3       		.byte	0xf3
 9543 0b26 01       		.uleb128 0x1
 9544 0b27 51       		.byte	0x51
 9545 0b28 9F       		.byte	0x9f
 9546 0b29 00000000 		.4byte	0
 9547 0b2d 00000000 		.4byte	0
 9548              	.LLST84:
 9549 0b31 00000000 		.4byte	.LVL262
 9550 0b35 19000000 		.4byte	.LVL264-1
 9551 0b39 0100     		.2byte	0x1
 9552 0b3b 52       		.byte	0x52
 9553 0b3c 19000000 		.4byte	.LVL264-1
 9554 0b40 5E000000 		.4byte	.LVL271
 9555 0b44 0100     		.2byte	0x1
 9556 0b46 55       		.byte	0x55
 9557 0b47 5E000000 		.4byte	.LVL271
 9558 0b4b 64000000 		.4byte	.LFE86
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 258


 9559 0b4f 0400     		.2byte	0x4
 9560 0b51 F3       		.byte	0xf3
 9561 0b52 01       		.uleb128 0x1
 9562 0b53 52       		.byte	0x52
 9563 0b54 9F       		.byte	0x9f
 9564 0b55 00000000 		.4byte	0
 9565 0b59 00000000 		.4byte	0
 9566              	.LLST85:
 9567 0b5d 56000000 		.4byte	.LVL268
 9568 0b61 58000000 		.4byte	.LVL269
 9569 0b65 0600     		.2byte	0x6
 9570 0b67 70       		.byte	0x70
 9571 0b68 00       		.sleb128 0
 9572 0b69 75       		.byte	0x75
 9573 0b6a 00       		.sleb128 0
 9574 0b6b 22       		.byte	0x22
 9575 0b6c 9F       		.byte	0x9f
 9576 0b6d 58000000 		.4byte	.LVL269
 9577 0b71 5B000000 		.4byte	.LVL270-1
 9578 0b75 0100     		.2byte	0x1
 9579 0b77 50       		.byte	0x50
 9580 0b78 00000000 		.4byte	0
 9581 0b7c 00000000 		.4byte	0
 9582              	.LLST86:
 9583 0b80 00000000 		.4byte	.LVL272
 9584 0b84 0C000000 		.4byte	.LVL274
 9585 0b88 0100     		.2byte	0x1
 9586 0b8a 50       		.byte	0x50
 9587 0b8b 0C000000 		.4byte	.LVL274
 9588 0b8f 70000000 		.4byte	.LFE87
 9589 0b93 0400     		.2byte	0x4
 9590 0b95 F3       		.byte	0xf3
 9591 0b96 01       		.uleb128 0x1
 9592 0b97 50       		.byte	0x50
 9593 0b98 9F       		.byte	0x9f
 9594 0b99 00000000 		.4byte	0
 9595 0b9d 00000000 		.4byte	0
 9596              	.LLST87:
 9597 0ba1 06000000 		.4byte	.LVL273
 9598 0ba5 68000000 		.4byte	.LVL282
 9599 0ba9 0100     		.2byte	0x1
 9600 0bab 54       		.byte	0x54
 9601 0bac 00000000 		.4byte	0
 9602 0bb0 00000000 		.4byte	0
 9603              	.LLST88:
 9604 0bb4 5A000000 		.4byte	.LVL279
 9605 0bb8 64000000 		.4byte	.LVL280
 9606 0bbc 0200     		.2byte	0x2
 9607 0bbe 31       		.byte	0x31
 9608 0bbf 9F       		.byte	0x9f
 9609 0bc0 66000000 		.4byte	.LVL281
 9610 0bc4 70000000 		.4byte	.LFE87
 9611 0bc8 0100     		.2byte	0x1
 9612 0bca 50       		.byte	0x50
 9613 0bcb 00000000 		.4byte	0
 9614 0bcf 00000000 		.4byte	0
 9615              	.LLST89:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 259


 9616 0bd3 00000000 		.4byte	.LVL283
 9617 0bd7 0D000000 		.4byte	.LVL286-1
 9618 0bdb 0100     		.2byte	0x1
 9619 0bdd 50       		.byte	0x50
 9620 0bde 0D000000 		.4byte	.LVL286-1
 9621 0be2 58000000 		.4byte	.LFE88
 9622 0be6 0400     		.2byte	0x4
 9623 0be8 F3       		.byte	0xf3
 9624 0be9 01       		.uleb128 0x1
 9625 0bea 50       		.byte	0x50
 9626 0beb 9F       		.byte	0x9f
 9627 0bec 00000000 		.4byte	0
 9628 0bf0 00000000 		.4byte	0
 9629              	.LLST90:
 9630 0bf4 00000000 		.4byte	.LVL283
 9631 0bf8 06000000 		.4byte	.LVL284
 9632 0bfc 0100     		.2byte	0x1
 9633 0bfe 51       		.byte	0x51
 9634 0bff 06000000 		.4byte	.LVL284
 9635 0c03 58000000 		.4byte	.LFE88
 9636 0c07 0400     		.2byte	0x4
 9637 0c09 F3       		.byte	0xf3
 9638 0c0a 01       		.uleb128 0x1
 9639 0c0b 51       		.byte	0x51
 9640 0c0c 9F       		.byte	0x9f
 9641 0c0d 00000000 		.4byte	0
 9642 0c11 00000000 		.4byte	0
 9643              	.LLST91:
 9644 0c15 0A000000 		.4byte	.LVL285
 9645 0c19 52000000 		.4byte	.LVL292
 9646 0c1d 0100     		.2byte	0x1
 9647 0c1f 55       		.byte	0x55
 9648 0c20 00000000 		.4byte	0
 9649 0c24 00000000 		.4byte	0
 9650              	.LLST92:
 9651 0c28 46000000 		.4byte	.LVL289
 9652 0c2c 4E000000 		.4byte	.LVL290
 9653 0c30 0200     		.2byte	0x2
 9654 0c32 31       		.byte	0x31
 9655 0c33 9F       		.byte	0x9f
 9656 0c34 50000000 		.4byte	.LVL291
 9657 0c38 58000000 		.4byte	.LFE88
 9658 0c3c 0100     		.2byte	0x1
 9659 0c3e 50       		.byte	0x50
 9660 0c3f 00000000 		.4byte	0
 9661 0c43 00000000 		.4byte	0
 9662              	.LLST93:
 9663 0c47 00000000 		.4byte	.LVL294
 9664 0c4b 09000000 		.4byte	.LVL295-1
 9665 0c4f 0100     		.2byte	0x1
 9666 0c51 50       		.byte	0x50
 9667 0c52 09000000 		.4byte	.LVL295-1
 9668 0c56 40000000 		.4byte	.LVL299
 9669 0c5a 0100     		.2byte	0x1
 9670 0c5c 54       		.byte	0x54
 9671 0c5d 40000000 		.4byte	.LVL299
 9672 0c61 42000000 		.4byte	.LVL300
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 260


 9673 0c65 0400     		.2byte	0x4
 9674 0c67 F3       		.byte	0xf3
 9675 0c68 01       		.uleb128 0x1
 9676 0c69 50       		.byte	0x50
 9677 0c6a 9F       		.byte	0x9f
 9678 0c6b 42000000 		.4byte	.LVL300
 9679 0c6f 44000000 		.4byte	.LVL301
 9680 0c73 0100     		.2byte	0x1
 9681 0c75 54       		.byte	0x54
 9682 0c76 44000000 		.4byte	.LVL301
 9683 0c7a 46000000 		.4byte	.LVL302
 9684 0c7e 0400     		.2byte	0x4
 9685 0c80 F3       		.byte	0xf3
 9686 0c81 01       		.uleb128 0x1
 9687 0c82 50       		.byte	0x50
 9688 0c83 9F       		.byte	0x9f
 9689 0c84 46000000 		.4byte	.LVL302
 9690 0c88 48000000 		.4byte	.LVL303
 9691 0c8c 0100     		.2byte	0x1
 9692 0c8e 54       		.byte	0x54
 9693 0c8f 48000000 		.4byte	.LVL303
 9694 0c93 4A000000 		.4byte	.LVL304
 9695 0c97 0400     		.2byte	0x4
 9696 0c99 F3       		.byte	0xf3
 9697 0c9a 01       		.uleb128 0x1
 9698 0c9b 50       		.byte	0x50
 9699 0c9c 9F       		.byte	0x9f
 9700 0c9d 4A000000 		.4byte	.LVL304
 9701 0ca1 4C000000 		.4byte	.LVL305
 9702 0ca5 0100     		.2byte	0x1
 9703 0ca7 54       		.byte	0x54
 9704 0ca8 4C000000 		.4byte	.LVL305
 9705 0cac 58000000 		.4byte	.LFE90
 9706 0cb0 0400     		.2byte	0x4
 9707 0cb2 F3       		.byte	0xf3
 9708 0cb3 01       		.uleb128 0x1
 9709 0cb4 50       		.byte	0x50
 9710 0cb5 9F       		.byte	0x9f
 9711 0cb6 00000000 		.4byte	0
 9712 0cba 00000000 		.4byte	0
 9713              	.LLST94:
 9714 0cbe 00000000 		.4byte	.LVL294
 9715 0cc2 09000000 		.4byte	.LVL295-1
 9716 0cc6 0100     		.2byte	0x1
 9717 0cc8 51       		.byte	0x51
 9718 0cc9 09000000 		.4byte	.LVL295-1
 9719 0ccd 54000000 		.4byte	.LVL307
 9720 0cd1 0100     		.2byte	0x1
 9721 0cd3 55       		.byte	0x55
 9722 0cd4 54000000 		.4byte	.LVL307
 9723 0cd8 58000000 		.4byte	.LFE90
 9724 0cdc 0400     		.2byte	0x4
 9725 0cde F3       		.byte	0xf3
 9726 0cdf 01       		.uleb128 0x1
 9727 0ce0 51       		.byte	0x51
 9728 0ce1 9F       		.byte	0x9f
 9729 0ce2 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 261


 9730 0ce6 00000000 		.4byte	0
 9731              	.LLST95:
 9732 0cea 3E000000 		.4byte	.LVL298
 9733 0cee 42000000 		.4byte	.LVL300
 9734 0cf2 0200     		.2byte	0x2
 9735 0cf4 30       		.byte	0x30
 9736 0cf5 9F       		.byte	0x9f
 9737 0cf6 4C000000 		.4byte	.LVL305
 9738 0cfa 54000000 		.4byte	.LVL307
 9739 0cfe 0100     		.2byte	0x1
 9740 0d00 54       		.byte	0x54
 9741 0d01 54000000 		.4byte	.LVL307
 9742 0d05 58000000 		.4byte	.LFE90
 9743 0d09 0100     		.2byte	0x1
 9744 0d0b 50       		.byte	0x50
 9745 0d0c 00000000 		.4byte	0
 9746 0d10 00000000 		.4byte	0
 9747              	.LLST96:
 9748 0d14 10000000 		.4byte	.LVL296
 9749 0d18 34000000 		.4byte	.LVL297
 9750 0d1c 0100     		.2byte	0x1
 9751 0d1e 52       		.byte	0x52
 9752 0d1f 42000000 		.4byte	.LVL300
 9753 0d23 4C000000 		.4byte	.LVL305
 9754 0d27 0100     		.2byte	0x1
 9755 0d29 52       		.byte	0x52
 9756 0d2a 00000000 		.4byte	0
 9757 0d2e 00000000 		.4byte	0
 9758              	.LLST97:
 9759 0d32 00000000 		.4byte	.LVL308
 9760 0d36 0C000000 		.4byte	.LVL309
 9761 0d3a 0100     		.2byte	0x1
 9762 0d3c 50       		.byte	0x50
 9763 0d3d 00000000 		.4byte	0
 9764 0d41 00000000 		.4byte	0
 9765              	.LLST98:
 9766 0d45 0C000000 		.4byte	.LVL309
 9767 0d49 11000000 		.4byte	.LVL310-1
 9768 0d4d 0100     		.2byte	0x1
 9769 0d4f 53       		.byte	0x53
 9770 0d50 00000000 		.4byte	0
 9771 0d54 00000000 		.4byte	0
 9772              	.LLST99:
 9773 0d58 0C000000 		.4byte	.LVL309
 9774 0d5c 11000000 		.4byte	.LVL310-1
 9775 0d60 0200     		.2byte	0x2
 9776 0d62 73       		.byte	0x73
 9777 0d63 30       		.sleb128 48
 9778 0d64 00000000 		.4byte	0
 9779 0d68 00000000 		.4byte	0
 9780              	.LLST100:
 9781 0d6c 00000000 		.4byte	.LVL312
 9782 0d70 36000000 		.4byte	.LVL313
 9783 0d74 0100     		.2byte	0x1
 9784 0d76 50       		.byte	0x50
 9785 0d77 36000000 		.4byte	.LVL313
 9786 0d7b 4D000000 		.4byte	.LVL314-1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 262


 9787 0d7f 0100     		.2byte	0x1
 9788 0d81 53       		.byte	0x53
 9789 0d82 4D000000 		.4byte	.LVL314-1
 9790 0d86 9A000000 		.4byte	.LVL316
 9791 0d8a 0100     		.2byte	0x1
 9792 0d8c 55       		.byte	0x55
 9793 0d8d 9A000000 		.4byte	.LVL316
 9794 0d91 A6000000 		.4byte	.LVL317
 9795 0d95 0100     		.2byte	0x1
 9796 0d97 53       		.byte	0x53
 9797 0d98 A6000000 		.4byte	.LVL317
 9798 0d9c B0000000 		.4byte	.LFE103
 9799 0da0 0100     		.2byte	0x1
 9800 0da2 50       		.byte	0x50
 9801 0da3 00000000 		.4byte	0
 9802 0da7 00000000 		.4byte	0
 9803              	.LLST102:
 9804 0dab 00000000 		.4byte	.LVL318
 9805 0daf 10000000 		.4byte	.LVL319
 9806 0db3 0100     		.2byte	0x1
 9807 0db5 50       		.byte	0x50
 9808 0db6 10000000 		.4byte	.LVL319
 9809 0dba 21000000 		.4byte	.LVL320-1
 9810 0dbe 0100     		.2byte	0x1
 9811 0dc0 53       		.byte	0x53
 9812 0dc1 21000000 		.4byte	.LVL320-1
 9813 0dc5 50000000 		.4byte	.LVL321
 9814 0dc9 0100     		.2byte	0x1
 9815 0dcb 54       		.byte	0x54
 9816 0dcc 50000000 		.4byte	.LVL321
 9817 0dd0 74000000 		.4byte	.LVL323
 9818 0dd4 0300     		.2byte	0x3
 9819 0dd6 75       		.byte	0x75
 9820 0dd7 7C       		.sleb128 -4
 9821 0dd8 9F       		.byte	0x9f
 9822 0dd9 74000000 		.4byte	.LVL323
 9823 0ddd 76000000 		.4byte	.LVL324
 9824 0de1 0100     		.2byte	0x1
 9825 0de3 50       		.byte	0x50
 9826 0de4 76000000 		.4byte	.LVL324
 9827 0de8 78000000 		.4byte	.LVL325
 9828 0dec 0400     		.2byte	0x4
 9829 0dee F3       		.byte	0xf3
 9830 0def 01       		.uleb128 0x1
 9831 0df0 50       		.byte	0x50
 9832 0df1 9F       		.byte	0x9f
 9833 0df2 78000000 		.4byte	.LVL325
 9834 0df6 80000000 		.4byte	.LVL328
 9835 0dfa 0100     		.2byte	0x1
 9836 0dfc 53       		.byte	0x53
 9837 0dfd 80000000 		.4byte	.LVL328
 9838 0e01 84000000 		.4byte	.LFE104
 9839 0e05 0400     		.2byte	0x4
 9840 0e07 F3       		.byte	0xf3
 9841 0e08 01       		.uleb128 0x1
 9842 0e09 50       		.byte	0x50
 9843 0e0a 9F       		.byte	0x9f
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 263


 9844 0e0b 00000000 		.4byte	0
 9845 0e0f 00000000 		.4byte	0
 9846              	.LLST104:
 9847 0e13 00000000 		.4byte	.LVL318
 9848 0e17 70000000 		.4byte	.LVL322
 9849 0e1b 0200     		.2byte	0x2
 9850 0e1d 30       		.byte	0x30
 9851 0e1e 9F       		.byte	0x9f
 9852 0e1f 70000000 		.4byte	.LVL322
 9853 0e23 74000000 		.4byte	.LVL323
 9854 0e27 0200     		.2byte	0x2
 9855 0e29 31       		.byte	0x31
 9856 0e2a 9F       		.byte	0x9f
 9857 0e2b 74000000 		.4byte	.LVL323
 9858 0e2f 76000000 		.4byte	.LVL324
 9859 0e33 0200     		.2byte	0x2
 9860 0e35 30       		.byte	0x30
 9861 0e36 9F       		.byte	0x9f
 9862 0e37 76000000 		.4byte	.LVL324
 9863 0e3b 78000000 		.4byte	.LVL325
 9864 0e3f 0100     		.2byte	0x1
 9865 0e41 50       		.byte	0x50
 9866 0e42 78000000 		.4byte	.LVL325
 9867 0e46 7E000000 		.4byte	.LVL327
 9868 0e4a 0200     		.2byte	0x2
 9869 0e4c 30       		.byte	0x30
 9870 0e4d 9F       		.byte	0x9f
 9871 0e4e 7E000000 		.4byte	.LVL327
 9872 0e52 84000000 		.4byte	.LFE104
 9873 0e56 0100     		.2byte	0x1
 9874 0e58 50       		.byte	0x50
 9875 0e59 00000000 		.4byte	0
 9876 0e5d 00000000 		.4byte	0
 9877              	.LLST105:
 9878 0e61 00000000 		.4byte	.LVL330
 9879 0e65 09000000 		.4byte	.LVL331-1
 9880 0e69 0100     		.2byte	0x1
 9881 0e6b 50       		.byte	0x50
 9882 0e6c 09000000 		.4byte	.LVL331-1
 9883 0e70 AC000000 		.4byte	.LVL342
 9884 0e74 0100     		.2byte	0x1
 9885 0e76 55       		.byte	0x55
 9886 0e77 AC000000 		.4byte	.LVL342
 9887 0e7b B0000000 		.4byte	.LFE107
 9888 0e7f 0400     		.2byte	0x4
 9889 0e81 F3       		.byte	0xf3
 9890 0e82 01       		.uleb128 0x1
 9891 0e83 50       		.byte	0x50
 9892 0e84 9F       		.byte	0x9f
 9893 0e85 00000000 		.4byte	0
 9894 0e89 00000000 		.4byte	0
 9895              	.LLST106:
 9896 0e8d 00000000 		.4byte	.LVL330
 9897 0e91 09000000 		.4byte	.LVL331-1
 9898 0e95 0100     		.2byte	0x1
 9899 0e97 51       		.byte	0x51
 9900 0e98 09000000 		.4byte	.LVL331-1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 264


 9901 0e9c 7C000000 		.4byte	.LVL340
 9902 0ea0 0100     		.2byte	0x1
 9903 0ea2 54       		.byte	0x54
 9904 0ea3 7C000000 		.4byte	.LVL340
 9905 0ea7 B0000000 		.4byte	.LFE107
 9906 0eab 0400     		.2byte	0x4
 9907 0ead F3       		.byte	0xf3
 9908 0eae 01       		.uleb128 0x1
 9909 0eaf 51       		.byte	0x51
 9910 0eb0 9F       		.byte	0x9f
 9911 0eb1 00000000 		.4byte	0
 9912 0eb5 00000000 		.4byte	0
 9913              	.LLST107:
 9914 0eb9 62000000 		.4byte	.LVL334
 9915 0ebd 64000000 		.4byte	.LVL335
 9916 0ec1 0600     		.2byte	0x6
 9917 0ec3 70       		.byte	0x70
 9918 0ec4 00       		.sleb128 0
 9919 0ec5 74       		.byte	0x74
 9920 0ec6 00       		.sleb128 0
 9921 0ec7 22       		.byte	0x22
 9922 0ec8 9F       		.byte	0x9f
 9923 0ec9 64000000 		.4byte	.LVL335
 9924 0ecd 67000000 		.4byte	.LVL336-1
 9925 0ed1 0100     		.2byte	0x1
 9926 0ed3 50       		.byte	0x50
 9927 0ed4 00000000 		.4byte	0
 9928 0ed8 00000000 		.4byte	0
 9929              	.LLST108:
 9930 0edc 7C000000 		.4byte	.LVL340
 9931 0ee0 AC000000 		.4byte	.LVL342
 9932 0ee4 0100     		.2byte	0x1
 9933 0ee6 54       		.byte	0x54
 9934 0ee7 AC000000 		.4byte	.LVL342
 9935 0eeb B0000000 		.4byte	.LFE107
 9936 0eef 0100     		.2byte	0x1
 9937 0ef1 50       		.byte	0x50
 9938 0ef2 00000000 		.4byte	0
 9939 0ef6 00000000 		.4byte	0
 9940              	.LLST109:
 9941 0efa 00000000 		.4byte	.LVL343
 9942 0efe 0D000000 		.4byte	.LVL344-1
 9943 0f02 0100     		.2byte	0x1
 9944 0f04 50       		.byte	0x50
 9945 0f05 0D000000 		.4byte	.LVL344-1
 9946 0f09 CE000000 		.4byte	.LVL358
 9947 0f0d 0100     		.2byte	0x1
 9948 0f0f 57       		.byte	0x57
 9949 0f10 CE000000 		.4byte	.LVL358
 9950 0f14 D4000000 		.4byte	.LFE108
 9951 0f18 0400     		.2byte	0x4
 9952 0f1a F3       		.byte	0xf3
 9953 0f1b 01       		.uleb128 0x1
 9954 0f1c 50       		.byte	0x50
 9955 0f1d 9F       		.byte	0x9f
 9956 0f1e 00000000 		.4byte	0
 9957 0f22 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 265


 9958              	.LLST110:
 9959 0f26 00000000 		.4byte	.LVL343
 9960 0f2a 0D000000 		.4byte	.LVL344-1
 9961 0f2e 0100     		.2byte	0x1
 9962 0f30 51       		.byte	0x51
 9963 0f31 0D000000 		.4byte	.LVL344-1
 9964 0f35 B6000000 		.4byte	.LVL354
 9965 0f39 0100     		.2byte	0x1
 9966 0f3b 54       		.byte	0x54
 9967 0f3c B6000000 		.4byte	.LVL354
 9968 0f40 B8000000 		.4byte	.LVL355
 9969 0f44 0400     		.2byte	0x4
 9970 0f46 F3       		.byte	0xf3
 9971 0f47 01       		.uleb128 0x1
 9972 0f48 51       		.byte	0x51
 9973 0f49 9F       		.byte	0x9f
 9974 0f4a B8000000 		.4byte	.LVL355
 9975 0f4e BA000000 		.4byte	.LVL356
 9976 0f52 0100     		.2byte	0x1
 9977 0f54 54       		.byte	0x54
 9978 0f55 BA000000 		.4byte	.LVL356
 9979 0f59 D4000000 		.4byte	.LFE108
 9980 0f5d 0400     		.2byte	0x4
 9981 0f5f F3       		.byte	0xf3
 9982 0f60 01       		.uleb128 0x1
 9983 0f61 51       		.byte	0x51
 9984 0f62 9F       		.byte	0x9f
 9985 0f63 00000000 		.4byte	0
 9986 0f67 00000000 		.4byte	0
 9987              	.LLST111:
 9988 0f6b 00000000 		.4byte	.LVL343
 9989 0f6f 0D000000 		.4byte	.LVL344-1
 9990 0f73 0100     		.2byte	0x1
 9991 0f75 52       		.byte	0x52
 9992 0f76 0D000000 		.4byte	.LVL344-1
 9993 0f7a CE000000 		.4byte	.LVL358
 9994 0f7e 0100     		.2byte	0x1
 9995 0f80 55       		.byte	0x55
 9996 0f81 CE000000 		.4byte	.LVL358
 9997 0f85 D4000000 		.4byte	.LFE108
 9998 0f89 0400     		.2byte	0x4
 9999 0f8b F3       		.byte	0xf3
 10000 0f8c 01       		.uleb128 0x1
 10001 0f8d 52       		.byte	0x52
 10002 0f8e 9F       		.byte	0x9f
 10003 0f8f 00000000 		.4byte	0
 10004 0f93 00000000 		.4byte	0
 10005              	.LLST112:
 10006 0f97 00000000 		.4byte	.LVL343
 10007 0f9b 0D000000 		.4byte	.LVL344-1
 10008 0f9f 0100     		.2byte	0x1
 10009 0fa1 53       		.byte	0x53
 10010 0fa2 0D000000 		.4byte	.LVL344-1
 10011 0fa6 CE000000 		.4byte	.LVL358
 10012 0faa 0100     		.2byte	0x1
 10013 0fac 56       		.byte	0x56
 10014 0fad CE000000 		.4byte	.LVL358
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 266


 10015 0fb1 D4000000 		.4byte	.LFE108
 10016 0fb5 0400     		.2byte	0x4
 10017 0fb7 F3       		.byte	0xf3
 10018 0fb8 01       		.uleb128 0x1
 10019 0fb9 53       		.byte	0x53
 10020 0fba 9F       		.byte	0x9f
 10021 0fbb 00000000 		.4byte	0
 10022 0fbf 00000000 		.4byte	0
 10023              	.LLST113:
 10024 0fc3 78000000 		.4byte	.LVL347
 10025 0fc7 7A000000 		.4byte	.LVL348
 10026 0fcb 0600     		.2byte	0x6
 10027 0fcd 70       		.byte	0x70
 10028 0fce 00       		.sleb128 0
 10029 0fcf 76       		.byte	0x76
 10030 0fd0 00       		.sleb128 0
 10031 0fd1 22       		.byte	0x22
 10032 0fd2 9F       		.byte	0x9f
 10033 0fd3 7A000000 		.4byte	.LVL348
 10034 0fd7 7D000000 		.4byte	.LVL349-1
 10035 0fdb 0100     		.2byte	0x1
 10036 0fdd 50       		.byte	0x50
 10037 0fde 00000000 		.4byte	0
 10038 0fe2 00000000 		.4byte	0
 10039              	.LLST114:
 10040 0fe6 B4000000 		.4byte	.LVL353
 10041 0fea B8000000 		.4byte	.LVL355
 10042 0fee 0200     		.2byte	0x2
 10043 0ff0 31       		.byte	0x31
 10044 0ff1 9F       		.byte	0x9f
 10045 0ff2 BA000000 		.4byte	.LVL356
 10046 0ff6 CE000000 		.4byte	.LVL358
 10047 0ffa 0100     		.2byte	0x1
 10048 0ffc 54       		.byte	0x54
 10049 0ffd CE000000 		.4byte	.LVL358
 10050 1001 D4000000 		.4byte	.LFE108
 10051 1005 0100     		.2byte	0x1
 10052 1007 50       		.byte	0x50
 10053 1008 00000000 		.4byte	0
 10054 100c 00000000 		.4byte	0
 10055              	.LLST115:
 10056 1010 00000000 		.4byte	.LVL359
 10057 1014 0D000000 		.4byte	.LVL361-1
 10058 1018 0100     		.2byte	0x1
 10059 101a 50       		.byte	0x50
 10060 101b 0D000000 		.4byte	.LVL361-1
 10061 101f A0000000 		.4byte	.LVL371
 10062 1023 0100     		.2byte	0x1
 10063 1025 54       		.byte	0x54
 10064 1026 A0000000 		.4byte	.LVL371
 10065 102a A4000000 		.4byte	.LFE109
 10066 102e 0400     		.2byte	0x4
 10067 1030 F3       		.byte	0xf3
 10068 1031 01       		.uleb128 0x1
 10069 1032 50       		.byte	0x50
 10070 1033 9F       		.byte	0x9f
 10071 1034 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 267


 10072 1038 00000000 		.4byte	0
 10073              	.LLST116:
 10074 103c 00000000 		.4byte	.LVL359
 10075 1040 0D000000 		.4byte	.LVL361-1
 10076 1044 0100     		.2byte	0x1
 10077 1046 51       		.byte	0x51
 10078 1047 0D000000 		.4byte	.LVL361-1
 10079 104b 32000000 		.4byte	.LVL363
 10080 104f 0100     		.2byte	0x1
 10081 1051 57       		.byte	0x57
 10082 1052 32000000 		.4byte	.LVL363
 10083 1056 38000000 		.4byte	.LVL364
 10084 105a 0400     		.2byte	0x4
 10085 105c F3       		.byte	0xf3
 10086 105d 01       		.uleb128 0x1
 10087 105e 51       		.byte	0x51
 10088 105f 9F       		.byte	0x9f
 10089 1060 38000000 		.4byte	.LVL364
 10090 1064 58000000 		.4byte	.LVL365
 10091 1068 0100     		.2byte	0x1
 10092 106a 57       		.byte	0x57
 10093 106b 58000000 		.4byte	.LVL365
 10094 106f A4000000 		.4byte	.LFE109
 10095 1073 0400     		.2byte	0x4
 10096 1075 F3       		.byte	0xf3
 10097 1076 01       		.uleb128 0x1
 10098 1077 51       		.byte	0x51
 10099 1078 9F       		.byte	0x9f
 10100 1079 00000000 		.4byte	0
 10101 107d 00000000 		.4byte	0
 10102              	.LLST117:
 10103 1081 00000000 		.4byte	.LVL359
 10104 1085 0D000000 		.4byte	.LVL361-1
 10105 1089 0100     		.2byte	0x1
 10106 108b 52       		.byte	0x52
 10107 108c 0D000000 		.4byte	.LVL361-1
 10108 1090 A4000000 		.4byte	.LFE109
 10109 1094 0400     		.2byte	0x4
 10110 1096 F3       		.byte	0xf3
 10111 1097 01       		.uleb128 0x1
 10112 1098 52       		.byte	0x52
 10113 1099 9F       		.byte	0x9f
 10114 109a 00000000 		.4byte	0
 10115 109e 00000000 		.4byte	0
 10116              	.LLST118:
 10117 10a2 00000000 		.4byte	.LVL359
 10118 10a6 0D000000 		.4byte	.LVL361-1
 10119 10aa 0100     		.2byte	0x1
 10120 10ac 53       		.byte	0x53
 10121 10ad 0D000000 		.4byte	.LVL361-1
 10122 10b1 6C000000 		.4byte	.LVL367
 10123 10b5 0100     		.2byte	0x1
 10124 10b7 56       		.byte	0x56
 10125 10b8 6C000000 		.4byte	.LVL367
 10126 10bc A4000000 		.4byte	.LFE109
 10127 10c0 0400     		.2byte	0x4
 10128 10c2 F3       		.byte	0xf3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 268


 10129 10c3 01       		.uleb128 0x1
 10130 10c4 53       		.byte	0x53
 10131 10c5 9F       		.byte	0x9f
 10132 10c6 00000000 		.4byte	0
 10133 10ca 00000000 		.4byte	0
 10134              	.LLST119:
 10135 10ce 0A000000 		.4byte	.LVL360
 10136 10d2 0D000000 		.4byte	.LVL361-1
 10137 10d6 0100     		.2byte	0x1
 10138 10d8 50       		.byte	0x50
 10139 10d9 0D000000 		.4byte	.LVL361-1
 10140 10dd A0000000 		.4byte	.LVL371
 10141 10e1 0100     		.2byte	0x1
 10142 10e3 54       		.byte	0x54
 10143 10e4 A0000000 		.4byte	.LVL371
 10144 10e8 A4000000 		.4byte	.LFE109
 10145 10ec 0400     		.2byte	0x4
 10146 10ee F3       		.byte	0xf3
 10147 10ef 01       		.uleb128 0x1
 10148 10f0 50       		.byte	0x50
 10149 10f1 9F       		.byte	0x9f
 10150 10f2 00000000 		.4byte	0
 10151 10f6 00000000 		.4byte	0
 10152              	.LLST120:
 10153 10fa 1A000000 		.4byte	.LVL362
 10154 10fe 63000000 		.4byte	.LVL366-1
 10155 1102 0100     		.2byte	0x1
 10156 1104 53       		.byte	0x53
 10157 1105 00000000 		.4byte	0
 10158 1109 00000000 		.4byte	0
 10159              	.LLST121:
 10160 110d 0A000000 		.4byte	.LVL360
 10161 1111 58000000 		.4byte	.LVL365
 10162 1115 0200     		.2byte	0x2
 10163 1117 31       		.byte	0x31
 10164 1118 9F       		.byte	0x9f
 10165 1119 58000000 		.4byte	.LVL365
 10166 111d A0000000 		.4byte	.LVL371
 10167 1121 0100     		.2byte	0x1
 10168 1123 55       		.byte	0x55
 10169 1124 A0000000 		.4byte	.LVL371
 10170 1128 A4000000 		.4byte	.LFE109
 10171 112c 0100     		.2byte	0x1
 10172 112e 50       		.byte	0x50
 10173 112f 00000000 		.4byte	0
 10174 1133 00000000 		.4byte	0
 10175              	.LLST122:
 10176 1137 00000000 		.4byte	.LVL372
 10177 113b 0F000000 		.4byte	.LVL374-1
 10178 113f 0100     		.2byte	0x1
 10179 1141 50       		.byte	0x50
 10180 1142 0F000000 		.4byte	.LVL374-1
 10181 1146 C8000000 		.4byte	.LVL387
 10182 114a 0100     		.2byte	0x1
 10183 114c 54       		.byte	0x54
 10184 114d C8000000 		.4byte	.LVL387
 10185 1151 D0000000 		.4byte	.LFE110
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 269


 10186 1155 0400     		.2byte	0x4
 10187 1157 F3       		.byte	0xf3
 10188 1158 01       		.uleb128 0x1
 10189 1159 50       		.byte	0x50
 10190 115a 9F       		.byte	0x9f
 10191 115b 00000000 		.4byte	0
 10192 115f 00000000 		.4byte	0
 10193              	.LLST123:
 10194 1163 00000000 		.4byte	.LVL372
 10195 1167 0F000000 		.4byte	.LVL374-1
 10196 116b 0100     		.2byte	0x1
 10197 116d 51       		.byte	0x51
 10198 116e 0F000000 		.4byte	.LVL374-1
 10199 1172 C8000000 		.4byte	.LVL387
 10200 1176 0100     		.2byte	0x1
 10201 1178 58       		.byte	0x58
 10202 1179 C8000000 		.4byte	.LVL387
 10203 117d D0000000 		.4byte	.LFE110
 10204 1181 0400     		.2byte	0x4
 10205 1183 F3       		.byte	0xf3
 10206 1184 01       		.uleb128 0x1
 10207 1185 51       		.byte	0x51
 10208 1186 9F       		.byte	0x9f
 10209 1187 00000000 		.4byte	0
 10210 118b 00000000 		.4byte	0
 10211              	.LLST124:
 10212 118f 00000000 		.4byte	.LVL372
 10213 1193 0F000000 		.4byte	.LVL374-1
 10214 1197 0100     		.2byte	0x1
 10215 1199 52       		.byte	0x52
 10216 119a 0F000000 		.4byte	.LVL374-1
 10217 119e D0000000 		.4byte	.LFE110
 10218 11a2 0400     		.2byte	0x4
 10219 11a4 F3       		.byte	0xf3
 10220 11a5 01       		.uleb128 0x1
 10221 11a6 52       		.byte	0x52
 10222 11a7 9F       		.byte	0x9f
 10223 11a8 00000000 		.4byte	0
 10224 11ac 00000000 		.4byte	0
 10225              	.LLST125:
 10226 11b0 00000000 		.4byte	.LVL372
 10227 11b4 0F000000 		.4byte	.LVL374-1
 10228 11b8 0100     		.2byte	0x1
 10229 11ba 53       		.byte	0x53
 10230 11bb 0F000000 		.4byte	.LVL374-1
 10231 11bf 70000000 		.4byte	.LVL379
 10232 11c3 0100     		.2byte	0x1
 10233 11c5 56       		.byte	0x56
 10234 11c6 70000000 		.4byte	.LVL379
 10235 11ca 9A000000 		.4byte	.LVL383
 10236 11ce 0400     		.2byte	0x4
 10237 11d0 F3       		.byte	0xf3
 10238 11d1 01       		.uleb128 0x1
 10239 11d2 53       		.byte	0x53
 10240 11d3 9F       		.byte	0x9f
 10241 11d4 9A000000 		.4byte	.LVL383
 10242 11d8 A4000000 		.4byte	.LVL385
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 270


 10243 11dc 0100     		.2byte	0x1
 10244 11de 56       		.byte	0x56
 10245 11df A4000000 		.4byte	.LVL385
 10246 11e3 D0000000 		.4byte	.LFE110
 10247 11e7 0400     		.2byte	0x4
 10248 11e9 F3       		.byte	0xf3
 10249 11ea 01       		.uleb128 0x1
 10250 11eb 53       		.byte	0x53
 10251 11ec 9F       		.byte	0x9f
 10252 11ed 00000000 		.4byte	0
 10253 11f1 00000000 		.4byte	0
 10254              	.LLST126:
 10255 11f5 00000000 		.4byte	.LVL372
 10256 11f9 C8000000 		.4byte	.LVL387
 10257 11fd 0200     		.2byte	0x2
 10258 11ff 91       		.byte	0x91
 10259 1200 00       		.sleb128 0
 10260 1201 C8000000 		.4byte	.LVL387
 10261 1205 D0000000 		.4byte	.LFE110
 10262 1209 0200     		.2byte	0x2
 10263 120b 7D       		.byte	0x7d
 10264 120c 00       		.sleb128 0
 10265 120d 00000000 		.4byte	0
 10266 1211 00000000 		.4byte	0
 10267              	.LLST127:
 10268 1215 0C000000 		.4byte	.LVL373
 10269 1219 0F000000 		.4byte	.LVL374-1
 10270 121d 0100     		.2byte	0x1
 10271 121f 50       		.byte	0x50
 10272 1220 0F000000 		.4byte	.LVL374-1
 10273 1224 C8000000 		.4byte	.LVL387
 10274 1228 0100     		.2byte	0x1
 10275 122a 54       		.byte	0x54
 10276 122b C8000000 		.4byte	.LVL387
 10277 122f D0000000 		.4byte	.LFE110
 10278 1233 0400     		.2byte	0x4
 10279 1235 F3       		.byte	0xf3
 10280 1236 01       		.uleb128 0x1
 10281 1237 50       		.byte	0x50
 10282 1238 9F       		.byte	0x9f
 10283 1239 00000000 		.4byte	0
 10284 123d 00000000 		.4byte	0
 10285              	.LLST128:
 10286 1241 1E000000 		.4byte	.LVL376
 10287 1245 68000000 		.4byte	.LVL378
 10288 1249 0100     		.2byte	0x1
 10289 124b 53       		.byte	0x53
 10290 124c 00000000 		.4byte	0
 10291 1250 00000000 		.4byte	0
 10292              	.LLST129:
 10293 1254 0C000000 		.4byte	.LVL373
 10294 1258 62000000 		.4byte	.LVL377
 10295 125c 0200     		.2byte	0x2
 10296 125e 31       		.byte	0x31
 10297 125f 9F       		.byte	0x9f
 10298 1260 62000000 		.4byte	.LVL377
 10299 1264 C8000000 		.4byte	.LVL387
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 271


 10300 1268 0100     		.2byte	0x1
 10301 126a 55       		.byte	0x55
 10302 126b C8000000 		.4byte	.LVL387
 10303 126f D0000000 		.4byte	.LFE110
 10304 1273 0100     		.2byte	0x1
 10305 1275 50       		.byte	0x50
 10306 1276 00000000 		.4byte	0
 10307 127a 00000000 		.4byte	0
 10308              	.LLST130:
 10309 127e 12000000 		.4byte	.LVL375
 10310 1282 72000000 		.4byte	.LVL380
 10311 1286 0100     		.2byte	0x1
 10312 1288 50       		.byte	0x50
 10313 1289 72000000 		.4byte	.LVL380
 10314 128d 9A000000 		.4byte	.LVL383
 10315 1291 0100     		.2byte	0x1
 10316 1293 57       		.byte	0x57
 10317 1294 9A000000 		.4byte	.LVL383
 10318 1298 9C000000 		.4byte	.LVL384
 10319 129c 0100     		.2byte	0x1
 10320 129e 50       		.byte	0x50
 10321 129f 9C000000 		.4byte	.LVL384
 10322 12a3 C8000000 		.4byte	.LVL387
 10323 12a7 0100     		.2byte	0x1
 10324 12a9 57       		.byte	0x57
 10325 12aa 00000000 		.4byte	0
 10326 12ae 00000000 		.4byte	0
 10327              	.LLST131:
 10328 12b2 00000000 		.4byte	.LVL388
 10329 12b6 09000000 		.4byte	.LVL390-1
 10330 12ba 0100     		.2byte	0x1
 10331 12bc 50       		.byte	0x50
 10332 12bd 09000000 		.4byte	.LVL390-1
 10333 12c1 7C000000 		.4byte	.LVL401
 10334 12c5 0100     		.2byte	0x1
 10335 12c7 54       		.byte	0x54
 10336 12c8 7C000000 		.4byte	.LVL401
 10337 12cc 84000000 		.4byte	.LFE111
 10338 12d0 0400     		.2byte	0x4
 10339 12d2 F3       		.byte	0xf3
 10340 12d3 01       		.uleb128 0x1
 10341 12d4 50       		.byte	0x50
 10342 12d5 9F       		.byte	0x9f
 10343 12d6 00000000 		.4byte	0
 10344 12da 00000000 		.4byte	0
 10345              	.LLST132:
 10346 12de 00000000 		.4byte	.LVL388
 10347 12e2 09000000 		.4byte	.LVL390-1
 10348 12e6 0100     		.2byte	0x1
 10349 12e8 51       		.byte	0x51
 10350 12e9 09000000 		.4byte	.LVL390-1
 10351 12ed 7C000000 		.4byte	.LVL401
 10352 12f1 0100     		.2byte	0x1
 10353 12f3 56       		.byte	0x56
 10354 12f4 7C000000 		.4byte	.LVL401
 10355 12f8 84000000 		.4byte	.LFE111
 10356 12fc 0400     		.2byte	0x4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 272


 10357 12fe F3       		.byte	0xf3
 10358 12ff 01       		.uleb128 0x1
 10359 1300 51       		.byte	0x51
 10360 1301 9F       		.byte	0x9f
 10361 1302 00000000 		.4byte	0
 10362 1306 00000000 		.4byte	0
 10363              	.LLST133:
 10364 130a 06000000 		.4byte	.LVL389
 10365 130e 09000000 		.4byte	.LVL390-1
 10366 1312 0100     		.2byte	0x1
 10367 1314 50       		.byte	0x50
 10368 1315 09000000 		.4byte	.LVL390-1
 10369 1319 7C000000 		.4byte	.LVL401
 10370 131d 0100     		.2byte	0x1
 10371 131f 54       		.byte	0x54
 10372 1320 7C000000 		.4byte	.LVL401
 10373 1324 84000000 		.4byte	.LFE111
 10374 1328 0400     		.2byte	0x4
 10375 132a F3       		.byte	0xf3
 10376 132b 01       		.uleb128 0x1
 10377 132c 50       		.byte	0x50
 10378 132d 9F       		.byte	0x9f
 10379 132e 00000000 		.4byte	0
 10380 1332 00000000 		.4byte	0
 10381              	.LLST134:
 10382 1336 12000000 		.4byte	.LVL392
 10383 133a 24000000 		.4byte	.LVL393
 10384 133e 0100     		.2byte	0x1
 10385 1340 53       		.byte	0x53
 10386 1341 00000000 		.4byte	0
 10387 1345 00000000 		.4byte	0
 10388              	.LLST135:
 10389 1349 0C000000 		.4byte	.LVL391
 10390 134d 2E000000 		.4byte	.LVL394
 10391 1351 0100     		.2byte	0x1
 10392 1353 50       		.byte	0x50
 10393 1354 2E000000 		.4byte	.LVL394
 10394 1358 56000000 		.4byte	.LVL397
 10395 135c 0100     		.2byte	0x1
 10396 135e 55       		.byte	0x55
 10397 135f 56000000 		.4byte	.LVL397
 10398 1363 58000000 		.4byte	.LVL398
 10399 1367 0100     		.2byte	0x1
 10400 1369 50       		.byte	0x50
 10401 136a 58000000 		.4byte	.LVL398
 10402 136e 7C000000 		.4byte	.LVL401
 10403 1372 0100     		.2byte	0x1
 10404 1374 55       		.byte	0x55
 10405 1375 00000000 		.4byte	0
 10406 1379 00000000 		.4byte	0
 10407              	.LLST136:
 10408 137d 00000000 		.4byte	.LVL402
 10409 1381 0C000000 		.4byte	.LVL404
 10410 1385 0100     		.2byte	0x1
 10411 1387 50       		.byte	0x50
 10412 1388 00000000 		.4byte	0
 10413 138c 00000000 		.4byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 273


 10414              	.LLST137:
 10415 1390 02000000 		.4byte	.LVL403
 10416 1394 0C000000 		.4byte	.LVL404
 10417 1398 0100     		.2byte	0x1
 10418 139a 50       		.byte	0x50
 10419 139b 0C000000 		.4byte	.LVL404
 10420 139f 22000000 		.4byte	.LVL407
 10421 13a3 0100     		.2byte	0x1
 10422 13a5 54       		.byte	0x54
 10423 13a6 24000000 		.4byte	.LVL408
 10424 13aa 26000000 		.4byte	.LVL409
 10425 13ae 0100     		.2byte	0x1
 10426 13b0 54       		.byte	0x54
 10427 13b1 00000000 		.4byte	0
 10428 13b5 00000000 		.4byte	0
 10429              	.LLST138:
 10430 13b9 20000000 		.4byte	.LVL406
 10431 13bd 24000000 		.4byte	.LVL408
 10432 13c1 0200     		.2byte	0x2
 10433 13c3 31       		.byte	0x31
 10434 13c4 9F       		.byte	0x9f
 10435 13c5 26000000 		.4byte	.LVL409
 10436 13c9 2E000000 		.4byte	.LVL411
 10437 13cd 0100     		.2byte	0x1
 10438 13cf 54       		.byte	0x54
 10439 13d0 2E000000 		.4byte	.LVL411
 10440 13d4 34000000 		.4byte	.LFE112
 10441 13d8 0100     		.2byte	0x1
 10442 13da 50       		.byte	0x50
 10443 13db 00000000 		.4byte	0
 10444 13df 00000000 		.4byte	0
 10445              		.section	.debug_aranges,"",%progbits
 10446 0000 9C010000 		.4byte	0x19c
 10447 0004 0200     		.2byte	0x2
 10448 0006 00000000 		.4byte	.Ldebug_info0
 10449 000a 04       		.byte	0x4
 10450 000b 00       		.byte	0
 10451 000c 0000     		.2byte	0
 10452 000e 0000     		.2byte	0
 10453 0010 00000000 		.4byte	.LFB73
 10454 0014 38000000 		.4byte	.LFE73-.LFB73
 10455 0018 00000000 		.4byte	.LFB98
 10456 001c 14000000 		.4byte	.LFE98-.LFB98
 10457 0020 00000000 		.4byte	.LFB101
 10458 0024 2C000000 		.4byte	.LFE101-.LFB101
 10459 0028 00000000 		.4byte	.LFB100
 10460 002c 12000000 		.4byte	.LFE100-.LFB100
 10461 0030 00000000 		.4byte	.LFB97
 10462 0034 3A000000 		.4byte	.LFE97-.LFB97
 10463 0038 00000000 		.4byte	.LFB93
 10464 003c 50000000 		.4byte	.LFE93-.LFB93
 10465 0040 00000000 		.4byte	.LFB94
 10466 0044 58000000 		.4byte	.LFE94-.LFB94
 10467 0048 00000000 		.4byte	.LFB96
 10468 004c 44000000 		.4byte	.LFE96-.LFB96
 10469 0050 00000000 		.4byte	.LFB64
 10470 0054 F4000000 		.4byte	.LFE64-.LFB64
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 274


 10471 0058 00000000 		.4byte	.LFB65
 10472 005c 90000000 		.4byte	.LFE65-.LFB65
 10473 0060 00000000 		.4byte	.LFB68
 10474 0064 60000000 		.4byte	.LFE68-.LFB68
 10475 0068 00000000 		.4byte	.LFB69
 10476 006c 20000000 		.4byte	.LFE69-.LFB69
 10477 0070 00000000 		.4byte	.LFB70
 10478 0074 20000000 		.4byte	.LFE70-.LFB70
 10479 0078 00000000 		.4byte	.LFB71
 10480 007c D4000000 		.4byte	.LFE71-.LFB71
 10481 0080 00000000 		.4byte	.LFB74
 10482 0084 68000000 		.4byte	.LFE74-.LFB74
 10483 0088 00000000 		.4byte	.LFB75
 10484 008c 80000000 		.4byte	.LFE75-.LFB75
 10485 0090 00000000 		.4byte	.LFB76
 10486 0094 4C000000 		.4byte	.LFE76-.LFB76
 10487 0098 00000000 		.4byte	.LFB77
 10488 009c 18000000 		.4byte	.LFE77-.LFB77
 10489 00a0 00000000 		.4byte	.LFB78
 10490 00a4 14000000 		.4byte	.LFE78-.LFB78
 10491 00a8 00000000 		.4byte	.LFB80
 10492 00ac 0C000000 		.4byte	.LFE80-.LFB80
 10493 00b0 00000000 		.4byte	.LFB81
 10494 00b4 0C000000 		.4byte	.LFE81-.LFB81
 10495 00b8 00000000 		.4byte	.LFB82
 10496 00bc 0C000000 		.4byte	.LFE82-.LFB82
 10497 00c0 00000000 		.4byte	.LFB83
 10498 00c4 04010000 		.4byte	.LFE83-.LFB83
 10499 00c8 00000000 		.4byte	.LFB79
 10500 00cc CC000000 		.4byte	.LFE79-.LFB79
 10501 00d0 00000000 		.4byte	.LFB66
 10502 00d4 80000000 		.4byte	.LFE66-.LFB66
 10503 00d8 00000000 		.4byte	.LFB67
 10504 00dc 50000000 		.4byte	.LFE67-.LFB67
 10505 00e0 00000000 		.4byte	.LFB95
 10506 00e4 54000000 		.4byte	.LFE95-.LFB95
 10507 00e8 00000000 		.4byte	.LFB92
 10508 00ec 08000000 		.4byte	.LFE92-.LFB92
 10509 00f0 00000000 		.4byte	.LFB84
 10510 00f4 A8000000 		.4byte	.LFE84-.LFB84
 10511 00f8 00000000 		.4byte	.LFB72
 10512 00fc A0000000 		.4byte	.LFE72-.LFB72
 10513 0100 00000000 		.4byte	.LFB85
 10514 0104 58000000 		.4byte	.LFE85-.LFB85
 10515 0108 00000000 		.4byte	.LFB86
 10516 010c 64000000 		.4byte	.LFE86-.LFB86
 10517 0110 00000000 		.4byte	.LFB87
 10518 0114 70000000 		.4byte	.LFE87-.LFB87
 10519 0118 00000000 		.4byte	.LFB88
 10520 011c 58000000 		.4byte	.LFE88-.LFB88
 10521 0120 00000000 		.4byte	.LFB89
 10522 0124 14000000 		.4byte	.LFE89-.LFB89
 10523 0128 00000000 		.4byte	.LFB90
 10524 012c 58000000 		.4byte	.LFE90-.LFB90
 10525 0130 00000000 		.4byte	.LFB91
 10526 0134 10000000 		.4byte	.LFE91-.LFB91
 10527 0138 00000000 		.4byte	.LFB99
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 275


 10528 013c 18000000 		.4byte	.LFE99-.LFB99
 10529 0140 00000000 		.4byte	.LFB102
 10530 0144 0C000000 		.4byte	.LFE102-.LFB102
 10531 0148 00000000 		.4byte	.LFB103
 10532 014c B0000000 		.4byte	.LFE103-.LFB103
 10533 0150 00000000 		.4byte	.LFB104
 10534 0154 84000000 		.4byte	.LFE104-.LFB104
 10535 0158 00000000 		.4byte	.LFB105
 10536 015c 20000000 		.4byte	.LFE105-.LFB105
 10537 0160 00000000 		.4byte	.LFB106
 10538 0164 20000000 		.4byte	.LFE106-.LFB106
 10539 0168 00000000 		.4byte	.LFB107
 10540 016c B0000000 		.4byte	.LFE107-.LFB107
 10541 0170 00000000 		.4byte	.LFB108
 10542 0174 D4000000 		.4byte	.LFE108-.LFB108
 10543 0178 00000000 		.4byte	.LFB109
 10544 017c A4000000 		.4byte	.LFE109-.LFB109
 10545 0180 00000000 		.4byte	.LFB110
 10546 0184 D0000000 		.4byte	.LFE110-.LFB110
 10547 0188 00000000 		.4byte	.LFB111
 10548 018c 84000000 		.4byte	.LFE111-.LFB111
 10549 0190 00000000 		.4byte	.LFB112
 10550 0194 34000000 		.4byte	.LFE112-.LFB112
 10551 0198 00000000 		.4byte	0
 10552 019c 00000000 		.4byte	0
 10553              		.section	.debug_ranges,"",%progbits
 10554              	.Ldebug_ranges0:
 10555 0000 1A000000 		.4byte	.LBB8
 10556 0004 46000000 		.4byte	.LBE8
 10557 0008 4A000000 		.4byte	.LBB10
 10558 000c C4000000 		.4byte	.LBE10
 10559 0010 00000000 		.4byte	0
 10560 0014 00000000 		.4byte	0
 10561 0018 0A000000 		.4byte	.LBB11
 10562 001c 20000000 		.4byte	.LBE11
 10563 0020 24000000 		.4byte	.LBB12
 10564 0024 2C000000 		.4byte	.LBE12
 10565 0028 34000000 		.4byte	.LBB13
 10566 002c 6E000000 		.4byte	.LBE13
 10567 0030 00000000 		.4byte	0
 10568 0034 00000000 		.4byte	0
 10569 0038 00000000 		.4byte	.LFB73
 10570 003c 38000000 		.4byte	.LFE73
 10571 0040 00000000 		.4byte	.LFB98
 10572 0044 14000000 		.4byte	.LFE98
 10573 0048 00000000 		.4byte	.LFB101
 10574 004c 2C000000 		.4byte	.LFE101
 10575 0050 00000000 		.4byte	.LFB100
 10576 0054 12000000 		.4byte	.LFE100
 10577 0058 00000000 		.4byte	.LFB97
 10578 005c 3A000000 		.4byte	.LFE97
 10579 0060 00000000 		.4byte	.LFB93
 10580 0064 50000000 		.4byte	.LFE93
 10581 0068 00000000 		.4byte	.LFB94
 10582 006c 58000000 		.4byte	.LFE94
 10583 0070 00000000 		.4byte	.LFB96
 10584 0074 44000000 		.4byte	.LFE96
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 276


 10585 0078 00000000 		.4byte	.LFB64
 10586 007c F4000000 		.4byte	.LFE64
 10587 0080 00000000 		.4byte	.LFB65
 10588 0084 90000000 		.4byte	.LFE65
 10589 0088 00000000 		.4byte	.LFB68
 10590 008c 60000000 		.4byte	.LFE68
 10591 0090 00000000 		.4byte	.LFB69
 10592 0094 20000000 		.4byte	.LFE69
 10593 0098 00000000 		.4byte	.LFB70
 10594 009c 20000000 		.4byte	.LFE70
 10595 00a0 00000000 		.4byte	.LFB71
 10596 00a4 D4000000 		.4byte	.LFE71
 10597 00a8 00000000 		.4byte	.LFB74
 10598 00ac 68000000 		.4byte	.LFE74
 10599 00b0 00000000 		.4byte	.LFB75
 10600 00b4 80000000 		.4byte	.LFE75
 10601 00b8 00000000 		.4byte	.LFB76
 10602 00bc 4C000000 		.4byte	.LFE76
 10603 00c0 00000000 		.4byte	.LFB77
 10604 00c4 18000000 		.4byte	.LFE77
 10605 00c8 00000000 		.4byte	.LFB78
 10606 00cc 14000000 		.4byte	.LFE78
 10607 00d0 00000000 		.4byte	.LFB80
 10608 00d4 0C000000 		.4byte	.LFE80
 10609 00d8 00000000 		.4byte	.LFB81
 10610 00dc 0C000000 		.4byte	.LFE81
 10611 00e0 00000000 		.4byte	.LFB82
 10612 00e4 0C000000 		.4byte	.LFE82
 10613 00e8 00000000 		.4byte	.LFB83
 10614 00ec 04010000 		.4byte	.LFE83
 10615 00f0 00000000 		.4byte	.LFB79
 10616 00f4 CC000000 		.4byte	.LFE79
 10617 00f8 00000000 		.4byte	.LFB66
 10618 00fc 80000000 		.4byte	.LFE66
 10619 0100 00000000 		.4byte	.LFB67
 10620 0104 50000000 		.4byte	.LFE67
 10621 0108 00000000 		.4byte	.LFB95
 10622 010c 54000000 		.4byte	.LFE95
 10623 0110 00000000 		.4byte	.LFB92
 10624 0114 08000000 		.4byte	.LFE92
 10625 0118 00000000 		.4byte	.LFB84
 10626 011c A8000000 		.4byte	.LFE84
 10627 0120 00000000 		.4byte	.LFB72
 10628 0124 A0000000 		.4byte	.LFE72
 10629 0128 00000000 		.4byte	.LFB85
 10630 012c 58000000 		.4byte	.LFE85
 10631 0130 00000000 		.4byte	.LFB86
 10632 0134 64000000 		.4byte	.LFE86
 10633 0138 00000000 		.4byte	.LFB87
 10634 013c 70000000 		.4byte	.LFE87
 10635 0140 00000000 		.4byte	.LFB88
 10636 0144 58000000 		.4byte	.LFE88
 10637 0148 00000000 		.4byte	.LFB89
 10638 014c 14000000 		.4byte	.LFE89
 10639 0150 00000000 		.4byte	.LFB90
 10640 0154 58000000 		.4byte	.LFE90
 10641 0158 00000000 		.4byte	.LFB91
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 277


 10642 015c 10000000 		.4byte	.LFE91
 10643 0160 00000000 		.4byte	.LFB99
 10644 0164 18000000 		.4byte	.LFE99
 10645 0168 00000000 		.4byte	.LFB102
 10646 016c 0C000000 		.4byte	.LFE102
 10647 0170 00000000 		.4byte	.LFB103
 10648 0174 B0000000 		.4byte	.LFE103
 10649 0178 00000000 		.4byte	.LFB104
 10650 017c 84000000 		.4byte	.LFE104
 10651 0180 00000000 		.4byte	.LFB105
 10652 0184 20000000 		.4byte	.LFE105
 10653 0188 00000000 		.4byte	.LFB106
 10654 018c 20000000 		.4byte	.LFE106
 10655 0190 00000000 		.4byte	.LFB107
 10656 0194 B0000000 		.4byte	.LFE107
 10657 0198 00000000 		.4byte	.LFB108
 10658 019c D4000000 		.4byte	.LFE108
 10659 01a0 00000000 		.4byte	.LFB109
 10660 01a4 A4000000 		.4byte	.LFE109
 10661 01a8 00000000 		.4byte	.LFB110
 10662 01ac D0000000 		.4byte	.LFE110
 10663 01b0 00000000 		.4byte	.LFB111
 10664 01b4 84000000 		.4byte	.LFE111
 10665 01b8 00000000 		.4byte	.LFB112
 10666 01bc 34000000 		.4byte	.LFE112
 10667 01c0 00000000 		.4byte	0
 10668 01c4 00000000 		.4byte	0
 10669              		.section	.debug_line,"",%progbits
 10670              	.Ldebug_line0:
 10671 0000 8D090000 		.section	.debug_str,"MS",%progbits,1
 10671      02001402 
 10671      00000201 
 10671      FB0E0D00 
 10671      01010101 
 10672              	.LASF73:
 10673 0000 70635461 		.ascii	"pcTaskName\000"
 10673      736B4E61 
 10673      6D6500
 10674              	.LASF37:
 10675 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 10675      6D626572 
 10675      4F664974 
 10675      656D7300 
 10676              	.LASF218:
 10677 001b 76506F72 		.ascii	"vPortExitCritical\000"
 10677      74457869 
 10677      74437269 
 10677      74696361 
 10677      6C00
 10678              	.LASF223:
 10679 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 10679      74537461 
 10679      72745363 
 10679      68656475 
 10679      6C657200 
 10680              	.LASF71:
 10681 0041 75785072 		.ascii	"uxPriority\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 278


 10681      696F7269 
 10681      747900
 10682              	.LASF145:
 10683 004c 7078436F 		.ascii	"pxConstList\000"
 10683      6E73744C 
 10683      69737400 
 10684              	.LASF106:
 10685 0058 70785374 		.ascii	"pxStateList\000"
 10685      6174654C 
 10685      69737400 
 10686              	.LASF45:
 10687 0064 65537573 		.ascii	"eSuspended\000"
 10687      70656E64 
 10687      656400
 10688              	.LASF219:
 10689 006f 76506F72 		.ascii	"vPortYield\000"
 10689      74596965 
 10689      6C6400
 10690              	.LASF67:
 10691 007a 74736B54 		.ascii	"tskTaskControlBlock\000"
 10691      61736B43 
 10691      6F6E7472 
 10691      6F6C426C 
 10691      6F636B00 
 10692              	.LASF176:
 10693 008e 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 10693      7473546F 
 10693      436C6561 
 10693      724F6E45 
 10693      78697400 
 10694              	.LASF169:
 10695 00a2 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 10695      736B4765 
 10695      744E756D 
 10695      6265724F 
 10695      66546173 
 10696              	.LASF185:
 10697 00b9 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 10697      67686572 
 10697      5072696F 
 10697      72697479 
 10697      5461736B 
 10698              	.LASF48:
 10699 00d3 654E6F41 		.ascii	"eNoAction\000"
 10699      6374696F 
 10699      6E00
 10700              	.LASF199:
 10701 00dd 7578546F 		.ascii	"uxTopReadyPriority\000"
 10701      70526561 
 10701      64795072 
 10701      696F7269 
 10701      747900
 10702              	.LASF0:
 10703 00f0 756E7369 		.ascii	"unsigned int\000"
 10703      676E6564 
 10703      20696E74 
 10703      00
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 279


 10704              	.LASF149:
 10705 00fd 70784576 		.ascii	"pxEventList\000"
 10705      656E744C 
 10705      69737400 
 10706              	.LASF200:
 10707 0109 78536368 		.ascii	"xSchedulerRunning\000"
 10707      6564756C 
 10707      65725275 
 10707      6E6E696E 
 10707      6700
 10708              	.LASF38:
 10709 011b 7078496E 		.ascii	"pxIndex\000"
 10709      64657800 
 10710              	.LASF165:
 10711 0123 76546173 		.ascii	"vTaskPriorityInherit\000"
 10711      6B507269 
 10711      6F726974 
 10711      79496E68 
 10711      65726974 
 10712              	.LASF23:
 10713 0138 53746163 		.ascii	"StackType_t\000"
 10713      6B547970 
 10713      655F7400 
 10714              	.LASF54:
 10715 0144 7854494D 		.ascii	"xTIME_OUT\000"
 10715      455F4F55 
 10715      5400
 10716              	.LASF8:
 10717 014e 5F5F696E 		.ascii	"__int32_t\000"
 10717      7433325F 
 10717      7400
 10718              	.LASF33:
 10719 0158 784C4953 		.ascii	"xLIST_ITEM\000"
 10719      545F4954 
 10719      454D00
 10720              	.LASF188:
 10721 0163 70785265 		.ascii	"pxReadyTasksLists\000"
 10721      61647954 
 10721      61736B73 
 10721      4C697374 
 10721      7300
 10722              	.LASF65:
 10723 0175 654E6F74 		.ascii	"eNotified\000"
 10723      69666965 
 10723      6400
 10724              	.LASF156:
 10725 017f 76546173 		.ascii	"vTaskSetTimeOutState\000"
 10725      6B536574 
 10725      54696D65 
 10725      4F757453 
 10725      74617465 
 10726              	.LASF184:
 10727 0194 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 10727      6B47656E 
 10727      65726963 
 10727      4E6F7469 
 10727      66794672 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 280


 10728              	.LASF85:
 10729 01ae 70756353 		.ascii	"pucStackByte\000"
 10729      7461636B 
 10729      42797465 
 10729      00
 10730              	.LASF229:
 10731 01bb 756C4269 		.ascii	"ulBitmap\000"
 10731      746D6170 
 10731      00
 10732              	.LASF189:
 10733 01c4 7844656C 		.ascii	"xDelayedTaskList1\000"
 10733      61796564 
 10733      5461736B 
 10733      4C697374 
 10733      3100
 10734              	.LASF190:
 10735 01d6 7844656C 		.ascii	"xDelayedTaskList2\000"
 10735      61796564 
 10735      5461736B 
 10735      4C697374 
 10735      3200
 10736              	.LASF55:
 10737 01e8 784F7665 		.ascii	"xOverflowCount\000"
 10737      72666C6F 
 10737      77436F75 
 10737      6E7400
 10738              	.LASF69:
 10739 01f7 7847656E 		.ascii	"xGenericListItem\000"
 10739      65726963 
 10739      4C697374 
 10739      4974656D 
 10739      00
 10740              	.LASF217:
 10741 0208 76506F72 		.ascii	"vPortEnterCritical\000"
 10741      74456E74 
 10741      65724372 
 10741      69746963 
 10741      616C00
 10742              	.LASF61:
 10743 021b 756C5061 		.ascii	"ulParameters\000"
 10743      72616D65 
 10743      74657273 
 10743      00
 10744              	.LASF105:
 10745 0228 65526574 		.ascii	"eReturn\000"
 10745      75726E00 
 10746              	.LASF89:
 10747 0230 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 10747      6C6C6F63 
 10747      61746554 
 10747      4342416E 
 10747      64537461 
 10748              	.LASF118:
 10749 0247 78546173 		.ascii	"xTaskToResume\000"
 10749      6B546F52 
 10749      6573756D 
 10749      6500
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 281


 10750              	.LASF108:
 10751 0255 75785265 		.ascii	"uxReturn\000"
 10751      7475726E 
 10751      00
 10752              	.LASF77:
 10753 025e 654E6F74 		.ascii	"eNotifyState\000"
 10753      69667953 
 10753      74617465 
 10753      00
 10754              	.LASF78:
 10755 026b 74736B54 		.ascii	"tskTCB\000"
 10755      434200
 10756              	.LASF120:
 10757 0272 75785361 		.ascii	"uxSavedInterruptStatus\000"
 10757      76656449 
 10757      6E746572 
 10757      72757074 
 10757      53746174 
 10758              	.LASF19:
 10759 0289 75696E74 		.ascii	"uint32_t\000"
 10759      33325F74 
 10759      00
 10760              	.LASF220:
 10761 0292 75784C69 		.ascii	"uxListRemove\000"
 10761      73745265 
 10761      6D6F7665 
 10761      00
 10762              	.LASF116:
 10763 029f 78596965 		.ascii	"xYieldRequired\000"
 10763      6C645265 
 10763      71756972 
 10763      656400
 10764              	.LASF178:
 10765 02ae 78546173 		.ascii	"xTaskGenericNotify\000"
 10765      6B47656E 
 10765      65726963 
 10765      4E6F7469 
 10765      667900
 10766              	.LASF20:
 10767 02c1 666C6F61 		.ascii	"float\000"
 10767      7400
 10768              	.LASF153:
 10769 02c7 7078556E 		.ascii	"pxUnblockedTCB\000"
 10769      626C6F63 
 10769      6B656454 
 10769      434200
 10770              	.LASF90:
 10771 02d6 75735374 		.ascii	"usStackDepth\000"
 10771      61636B44 
 10771      65707468 
 10771      00
 10772              	.LASF172:
 10773 02e3 78436C65 		.ascii	"xClearCountOnExit\000"
 10773      6172436F 
 10773      756E744F 
 10773      6E457869 
 10773      7400
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 282


 10774              	.LASF51:
 10775 02f5 65536574 		.ascii	"eSetValueWithOverwrite\000"
 10775      56616C75 
 10775      65576974 
 10775      684F7665 
 10775      72777269 
 10776              	.LASF13:
 10777 030c 6C6F6E67 		.ascii	"long long unsigned int\000"
 10777      206C6F6E 
 10777      6720756E 
 10777      7369676E 
 10777      65642069 
 10778              	.LASF125:
 10779 0323 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 10779      6B476574 
 10779      5469636B 
 10779      436F756E 
 10779      7446726F 
 10780              	.LASF110:
 10781 033c 75785361 		.ascii	"uxSavedInterruptState\000"
 10781      76656449 
 10781      6E746572 
 10781      72757074 
 10781      53746174 
 10782              	.LASF175:
 10783 0352 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 10783      7473546F 
 10783      436C6561 
 10783      724F6E45 
 10783      6E747279 
 10784              	.LASF193:
 10785 0367 7850656E 		.ascii	"xPendingReadyList\000"
 10785      64696E67 
 10785      52656164 
 10785      794C6973 
 10785      7400
 10786              	.LASF29:
 10787 0379 70785072 		.ascii	"pxPrevious\000"
 10787      6576696F 
 10787      757300
 10788              	.LASF194:
 10789 0384 78546173 		.ascii	"xTasksWaitingTermination\000"
 10789      6B735761 
 10789      6974696E 
 10789      67546572 
 10789      6D696E61 
 10790              	.LASF6:
 10791 039d 5F5F7569 		.ascii	"__uint16_t\000"
 10791      6E743136 
 10791      5F7400
 10792              	.LASF119:
 10793 03a8 78546173 		.ascii	"xTaskResumeFromISR\000"
 10793      6B526573 
 10793      756D6546 
 10793      726F6D49 
 10793      535200
 10794              	.LASF209:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 283


 10795 03bb 7076506F 		.ascii	"pvPortMalloc\000"
 10795      72744D61 
 10795      6C6C6F63 
 10795      00
 10796              	.LASF160:
 10797 03c8 76546173 		.ascii	"vTaskSuspendAll\000"
 10797      6B537573 
 10797      70656E64 
 10797      416C6C00 
 10798              	.LASF162:
 10799 03d8 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 10799      736B4765 
 10799      74537461 
 10799      636B4869 
 10799      67685761 
 10800              	.LASF126:
 10801 03f4 78546173 		.ascii	"xTaskIncrementTick\000"
 10801      6B496E63 
 10801      72656D65 
 10801      6E745469 
 10801      636B00
 10802              	.LASF183:
 10803 0407 654F7269 		.ascii	"eOriginalNotifyState\000"
 10803      67696E61 
 10803      6C4E6F74 
 10803      69667953 
 10803      74617465 
 10804              	.LASF53:
 10805 041c 654E6F74 		.ascii	"eNotifyAction\000"
 10805      69667941 
 10805      6374696F 
 10805      6E00
 10806              	.LASF2:
 10807 042a 73697A65 		.ascii	"size_t\000"
 10807      5F7400
 10808              	.LASF50:
 10809 0431 65496E63 		.ascii	"eIncrement\000"
 10809      72656D65 
 10809      6E7400
 10810              	.LASF34:
 10811 043c 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 10811      495F4C49 
 10811      53545F49 
 10811      54454D00 
 10812              	.LASF195:
 10813 044c 75785461 		.ascii	"uxTasksDeleted\000"
 10813      736B7344 
 10813      656C6574 
 10813      656400
 10814              	.LASF198:
 10815 045b 78546963 		.ascii	"xTickCount\000"
 10815      6B436F75 
 10815      6E7400
 10816              	.LASF36:
 10817 0466 784C4953 		.ascii	"xLIST\000"
 10817      5400
 10818              	.LASF122:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 284


 10819 046c 76546173 		.ascii	"vTaskEndScheduler\000"
 10819      6B456E64 
 10819      53636865 
 10819      64756C65 
 10819      7200
 10820              	.LASF107:
 10821 047e 75785461 		.ascii	"uxTaskPriorityGet\000"
 10821      736B5072 
 10821      696F7269 
 10821      74794765 
 10821      7400
 10822              	.LASF128:
 10823 0490 78436F6E 		.ascii	"xConstTickCount\000"
 10823      73745469 
 10823      636B436F 
 10823      756E7400 
 10824              	.LASF216:
 10825 04a0 764C6973 		.ascii	"vListInsertEnd\000"
 10825      74496E73 
 10825      65727445 
 10825      6E6400
 10826              	.LASF196:
 10827 04af 78537573 		.ascii	"xSuspendedTaskList\000"
 10827      70656E64 
 10827      65645461 
 10827      736B4C69 
 10827      737400
 10828              	.LASF94:
 10829 04c2 70634E61 		.ascii	"pcName\000"
 10829      6D6500
 10830              	.LASF192:
 10831 04c9 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 10831      6572666C 
 10831      6F774465 
 10831      6C617965 
 10831      64546173 
 10832              	.LASF148:
 10833 04e3 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 10833      6B506C61 
 10833      63654F6E 
 10833      4576656E 
 10833      744C6973 
 10834              	.LASF136:
 10835 04f9 76546173 		.ascii	"vTaskDelay\000"
 10835      6B44656C 
 10835      617900
 10836              	.LASF170:
 10837 0504 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 10837      736B496E 
 10837      6372656D 
 10837      656E744D 
 10837      75746578 
 10838              	.LASF76:
 10839 0522 756C4E6F 		.ascii	"ulNotifiedValue\000"
 10839      74696669 
 10839      65645661 
 10839      6C756500 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 285


 10840              	.LASF75:
 10841 0532 75784D75 		.ascii	"uxMutexesHeld\000"
 10841      74657865 
 10841      7348656C 
 10841      6400
 10842              	.LASF167:
 10843 0540 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 10843      6B507269 
 10843      6F726974 
 10843      79446973 
 10843      696E6865 
 10844              	.LASF152:
 10845 0558 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 10845      6B52656D 
 10845      6F766546 
 10845      726F6D45 
 10845      76656E74 
 10846              	.LASF15:
 10847 0571 63686172 		.ascii	"char\000"
 10847      00
 10848              	.LASF32:
 10849 0576 4C697374 		.ascii	"ListItem_t\000"
 10849      4974656D 
 10849      5F7400
 10850              	.LASF52:
 10851 0581 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 10851      56616C75 
 10851      65576974 
 10851      686F7574 
 10851      4F766572 
 10852              	.LASF174:
 10853 059b 78546173 		.ascii	"xTaskNotifyWait\000"
 10853      6B4E6F74 
 10853      69667957 
 10853      61697400 
 10854              	.LASF25:
 10855 05ab 55426173 		.ascii	"UBaseType_t\000"
 10855      65547970 
 10855      655F7400 
 10856              	.LASF135:
 10857 05b7 7853686F 		.ascii	"xShouldDelay\000"
 10857      756C6444 
 10857      656C6179 
 10857      00
 10858              	.LASF140:
 10859 05c4 70727649 		.ascii	"prvIdleTask\000"
 10859      646C6554 
 10859      61736B00 
 10860              	.LASF39:
 10861 05d0 784C6973 		.ascii	"xListEnd\000"
 10861      74456E64 
 10861      00
 10862              	.LASF139:
 10863 05d9 784C6973 		.ascii	"xListIsEmpty\000"
 10863      74497345 
 10863      6D707479 
 10863      00
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 286


 10864              	.LASF171:
 10865 05e6 756C5461 		.ascii	"ulTaskNotifyTake\000"
 10865      736B4E6F 
 10865      74696679 
 10865      54616B65 
 10865      00
 10866              	.LASF222:
 10867 05f7 756C506F 		.ascii	"ulPortSetInterruptMask\000"
 10867      72745365 
 10867      74496E74 
 10867      65727275 
 10867      70744D61 
 10868              	.LASF35:
 10869 060e 4D696E69 		.ascii	"MiniListItem_t\000"
 10869      4C697374 
 10869      4974656D 
 10869      5F7400
 10870              	.LASF16:
 10871 061d 75696E74 		.ascii	"uint8_t\000"
 10871      385F7400 
 10872              	.LASF43:
 10873 0625 65526561 		.ascii	"eReady\000"
 10873      647900
 10874              	.LASF104:
 10875 062c 65546173 		.ascii	"eTaskGetState\000"
 10875      6B476574 
 10875      53746174 
 10875      6500
 10876              	.LASF92:
 10877 063a 70784E65 		.ascii	"pxNewTCB\000"
 10877      77544342 
 10877      00
 10878              	.LASF99:
 10879 0643 70785461 		.ascii	"pxTaskCode\000"
 10879      736B436F 
 10879      646500
 10880              	.LASF62:
 10881 064e 4D656D6F 		.ascii	"MemoryRegion_t\000"
 10881      72795265 
 10881      67696F6E 
 10881      5F7400
 10882              	.LASF205:
 10883 065d 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 10883      74546173 
 10883      6B556E62 
 10883      6C6F636B 
 10883      54696D65 
 10884              	.LASF215:
 10885 0672 7078506F 		.ascii	"pxPortInitialiseStack\000"
 10885      7274496E 
 10885      69746961 
 10885      6C697365 
 10885      53746163 
 10886              	.LASF12:
 10887 0688 6C6F6E67 		.ascii	"long long int\000"
 10887      206C6F6E 
 10887      6720696E 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 287


 10887      7400
 10888              	.LASF46:
 10889 0696 6544656C 		.ascii	"eDeleted\000"
 10889      65746564 
 10889      00
 10890              	.LASF228:
 10891 069f 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 10891      7274436F 
 10891      756E744C 
 10891      65616469 
 10891      6E675A65 
 10892              	.LASF60:
 10893 06b7 756C4C65 		.ascii	"ulLengthInBytes\000"
 10893      6E677468 
 10893      496E4279 
 10893      74657300 
 10894              	.LASF24:
 10895 06c7 42617365 		.ascii	"BaseType_t\000"
 10895      54797065 
 10895      5F7400
 10896              	.LASF143:
 10897 06d2 756C4368 		.ascii	"ulCheckValue\000"
 10897      65636B56 
 10897      616C7565 
 10897      00
 10898              	.LASF87:
 10899 06df 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 10899      65736574 
 10899      4E657874 
 10899      5461736B 
 10899      556E626C 
 10900              	.LASF56:
 10901 06fb 7854696D 		.ascii	"xTimeOnEntering\000"
 10901      654F6E45 
 10901      6E746572 
 10901      696E6700 
 10902              	.LASF113:
 10903 070b 75784E65 		.ascii	"uxNewPriority\000"
 10903      77507269 
 10903      6F726974 
 10903      7900
 10904              	.LASF226:
 10905 0719 2E2E5C46 		.ascii	"..\\FreeRTOS\\tasks.c\000"
 10905      72656552 
 10905      544F535C 
 10905      7461736B 
 10905      732E6300 
 10906              	.LASF22:
 10907 072d 5461736B 		.ascii	"TaskFunction_t\000"
 10907      46756E63 
 10907      74696F6E 
 10907      5F7400
 10908              	.LASF28:
 10909 073c 70784E65 		.ascii	"pxNext\000"
 10909      787400
 10910              	.LASF182:
 10911 0743 70756C50 		.ascii	"pulPreviousNotificationValue\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 288


 10911      72657669 
 10911      6F75734E 
 10911      6F746966 
 10911      69636174 
 10912              	.LASF64:
 10913 0760 65576169 		.ascii	"eWaitingNotification\000"
 10913      74696E67 
 10913      4E6F7469 
 10913      66696361 
 10913      74696F6E 
 10914              	.LASF210:
 10915 0775 6D656D73 		.ascii	"memset\000"
 10915      657400
 10916              	.LASF157:
 10917 077c 70785469 		.ascii	"pxTimeOut\000"
 10917      6D654F75 
 10917      7400
 10918              	.LASF137:
 10919 0786 78546963 		.ascii	"xTicksToDelay\000"
 10919      6B73546F 
 10919      44656C61 
 10919      7900
 10920              	.LASF109:
 10921 0794 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 10921      736B5072 
 10921      696F7269 
 10921      74794765 
 10921      7446726F 
 10922              	.LASF86:
 10923 07ad 756C436F 		.ascii	"ulCount\000"
 10923      756E7400 
 10924              	.LASF57:
 10925 07b5 54696D65 		.ascii	"TimeOut_t\000"
 10925      4F75745F 
 10925      7400
 10926              	.LASF204:
 10927 07bf 75785461 		.ascii	"uxTaskNumber\000"
 10927      736B4E75 
 10927      6D626572 
 10927      00
 10928              	.LASF41:
 10929 07cc 5461736B 		.ascii	"TaskHandle_t\000"
 10929      48616E64 
 10929      6C655F74 
 10929      00
 10930              	.LASF181:
 10931 07d9 65416374 		.ascii	"eAction\000"
 10931      696F6E00 
 10932              	.LASF168:
 10933 07e1 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 10933      736B5265 
 10933      73657445 
 10933      76656E74 
 10933      4974656D 
 10934              	.LASF112:
 10935 07fb 76546173 		.ascii	"vTaskPrioritySet\000"
 10935      6B507269 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 289


 10935      6F726974 
 10935      79536574 
 10935      00
 10936              	.LASF47:
 10937 080c 65546173 		.ascii	"eTaskState\000"
 10937      6B537461 
 10937      746500
 10938              	.LASF66:
 10939 0817 654E6F74 		.ascii	"eNotifyValue\000"
 10939      69667956 
 10939      616C7565 
 10939      00
 10940              	.LASF40:
 10941 0824 4C697374 		.ascii	"List_t\000"
 10941      5F7400
 10942              	.LASF26:
 10943 082b 5469636B 		.ascii	"TickType_t\000"
 10943      54797065 
 10943      5F7400
 10944              	.LASF179:
 10945 0836 78546173 		.ascii	"xTaskToNotify\000"
 10945      6B546F4E 
 10945      6F746966 
 10945      7900
 10946              	.LASF84:
 10947 0844 78546173 		.ascii	"xTask\000"
 10947      6B00
 10948              	.LASF49:
 10949 084a 65536574 		.ascii	"eSetBits\000"
 10949      42697473 
 10949      00
 10950              	.LASF93:
 10951 0853 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 10951      6E697469 
 10951      616C6973 
 10951      65544342 
 10951      56617269 
 10952              	.LASF123:
 10953 086d 78546173 		.ascii	"xTaskGetTickCount\000"
 10953      6B476574 
 10953      5469636B 
 10953      436F756E 
 10953      7400
 10954              	.LASF227:
 10955 087f 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_Simple_S"
 10955      536F435F 
 10955      43726561 
 10955      746F725C 
 10955      43593843 
 10956 08af 44525F52 		.ascii	"DR_Receiver\\CY8CKIT-059_Simple_SDR_Receiver.cydsn\000"
 10956      65636569 
 10956      7665725C 
 10956      43593843 
 10956      4B49542D 
 10957              	.LASF58:
 10958 08e1 784D454D 		.ascii	"xMEMORY_REGION\000"
 10958      4F52595F 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 290


 10958      52454749 
 10958      4F4E00
 10959              	.LASF17:
 10960 08f0 75696E74 		.ascii	"uint16_t\000"
 10960      31365F74 
 10960      00
 10961              	.LASF111:
 10962 08f9 76546173 		.ascii	"vTaskDelete\000"
 10962      6B44656C 
 10962      65746500 
 10963              	.LASF103:
 10964 0905 78546173 		.ascii	"xTaskGenericCreate\000"
 10964      6B47656E 
 10964      65726963 
 10964      43726561 
 10964      746500
 10965              	.LASF141:
 10966 0918 76546173 		.ascii	"vTaskSwitchContext\000"
 10966      6B537769 
 10966      74636843 
 10966      6F6E7465 
 10966      787400
 10967              	.LASF203:
 10968 092b 784E756D 		.ascii	"xNumOfOverflows\000"
 10968      4F664F76 
 10968      6572666C 
 10968      6F777300 
 10969              	.LASF31:
 10970 093b 7076436F 		.ascii	"pvContainer\000"
 10970      6E746169 
 10970      6E657200 
 10971              	.LASF208:
 10972 0947 70784375 		.ascii	"pxCurrentTCB\000"
 10972      7272656E 
 10972      74544342 
 10972      00
 10973              	.LASF231:
 10974 0954 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 10974      6C696361 
 10974      74696F6E 
 10974      53746163 
 10974      6B4F7665 
 10975              	.LASF5:
 10976 0972 73686F72 		.ascii	"short int\000"
 10976      7420696E 
 10976      7400
 10977              	.LASF212:
 10978 097c 764C6973 		.ascii	"vListInitialiseItem\000"
 10978      74496E69 
 10978      7469616C 
 10978      69736549 
 10978      74656D00 
 10979              	.LASF100:
 10980 0990 70765061 		.ascii	"pvParameters\000"
 10980      72616D65 
 10980      74657273 
 10980      00
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 291


 10981              	.LASF27:
 10982 099d 78497465 		.ascii	"xItemValue\000"
 10982      6D56616C 
 10982      756500
 10983              	.LASF9:
 10984 09a8 6C6F6E67 		.ascii	"long int\000"
 10984      20696E74 
 10984      00
 10985              	.LASF207:
 10986 09b1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 10986      52784275 
 10986      66666572 
 10986      00
 10987              	.LASF221:
 10988 09be 76506F72 		.ascii	"vPortClearInterruptMask\000"
 10988      74436C65 
 10988      6172496E 
 10988      74657272 
 10988      7570744D 
 10989              	.LASF130:
 10990 09d6 78546173 		.ascii	"xTaskResumeAll\000"
 10990      6B526573 
 10990      756D6541 
 10990      6C6C00
 10991              	.LASF186:
 10992 09e5 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 10992      6B4E6F74 
 10992      69667947 
 10992      69766546 
 10992      726F6D49 
 10993              	.LASF191:
 10994 09fc 70784465 		.ascii	"pxDelayedTaskList\000"
 10994      6C617965 
 10994      64546173 
 10994      6B4C6973 
 10994      7400
 10995              	.LASF82:
 10996 0a0e 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 10996      61736B49 
 10996      73546173 
 10996      6B537573 
 10996      70656E64 
 10997              	.LASF127:
 10998 0a25 78537769 		.ascii	"xSwitchRequired\000"
 10998      74636852 
 10998      65717569 
 10998      72656400 
 10999              	.LASF166:
 11000 0a35 70784D75 		.ascii	"pxMutexHolder\000"
 11000      74657848 
 11000      6F6C6465 
 11000      7200
 11001              	.LASF72:
 11002 0a43 70785374 		.ascii	"pxStack\000"
 11002      61636B00 
 11003              	.LASF102:
 11004 0a4b 78546173 		.ascii	"xTaskToDelete\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 292


 11004      6B546F44 
 11004      656C6574 
 11004      6500
 11005              	.LASF180:
 11006 0a59 756C5661 		.ascii	"ulValue\000"
 11006      6C756500 
 11007              	.LASF147:
 11008 0a61 78546173 		.ascii	"xTaskToSuspend\000"
 11008      6B546F53 
 11008      75737065 
 11008      6E6400
 11009              	.LASF158:
 11010 0a70 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11010      6B436865 
 11010      636B466F 
 11010      7254696D 
 11010      654F7574 
 11011              	.LASF224:
 11012 0a85 76506F72 		.ascii	"vPortEndScheduler\000"
 11012      74456E64 
 11012      53636865 
 11012      64756C65 
 11012      7200
 11013              	.LASF211:
 11014 0a97 76506F72 		.ascii	"vPortFree\000"
 11014      74467265 
 11014      6500
 11015              	.LASF133:
 11016 0aa1 70785072 		.ascii	"pxPreviousWakeTime\000"
 11016      6576696F 
 11016      75735761 
 11016      6B655469 
 11016      6D6500
 11017              	.LASF3:
 11018 0ab4 5F5F7569 		.ascii	"__uint8_t\000"
 11018      6E74385F 
 11018      7400
 11019              	.LASF63:
 11020 0abe 654E6F74 		.ascii	"eNotWaitingNotification\000"
 11020      57616974 
 11020      696E674E 
 11020      6F746966 
 11020      69636174 
 11021              	.LASF230:
 11022 0ad6 75635265 		.ascii	"ucReturn\000"
 11022      7475726E 
 11022      00
 11023              	.LASF177:
 11024 0adf 70756C4E 		.ascii	"pulNotificationValue\000"
 11024      6F746966 
 11024      69636174 
 11024      696F6E56 
 11024      616C7565 
 11025              	.LASF80:
 11026 0af4 78526574 		.ascii	"xReturn\000"
 11026      75726E00 
 11027              	.LASF14:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 293


 11028 0afc 73697A65 		.ascii	"sizetype\000"
 11028      74797065 
 11028      00
 11029              	.LASF161:
 11030 0b05 76546173 		.ascii	"vTaskMissedYield\000"
 11030      6B4D6973 
 11030      73656459 
 11030      69656C64 
 11030      00
 11031              	.LASF201:
 11032 0b16 75785065 		.ascii	"uxPendedTicks\000"
 11032      6E646564 
 11032      5469636B 
 11032      7300
 11033              	.LASF11:
 11034 0b24 6C6F6E67 		.ascii	"long unsigned int\000"
 11034      20756E73 
 11034      69676E65 
 11034      6420696E 
 11034      7400
 11035              	.LASF163:
 11036 0b36 70756345 		.ascii	"pucEndOfStack\000"
 11036      6E644F66 
 11036      53746163 
 11036      6B00
 11037              	.LASF18:
 11038 0b44 696E7433 		.ascii	"int32_t\000"
 11038      325F7400 
 11039              	.LASF124:
 11040 0b4c 78546963 		.ascii	"xTicks\000"
 11040      6B7300
 11041              	.LASF121:
 11042 0b53 76546173 		.ascii	"vTaskStartScheduler\000"
 11042      6B537461 
 11042      72745363 
 11042      68656475 
 11042      6C657200 
 11043              	.LASF42:
 11044 0b67 6552756E 		.ascii	"eRunning\000"
 11044      6E696E67 
 11044      00
 11045              	.LASF142:
 11046 0b70 70756C53 		.ascii	"pulStack\000"
 11046      7461636B 
 11046      00
 11047              	.LASF59:
 11048 0b79 70764261 		.ascii	"pvBaseAddress\000"
 11048      73654164 
 11048      64726573 
 11048      7300
 11049              	.LASF129:
 11050 0b87 70785465 		.ascii	"pxTemp\000"
 11050      6D7000
 11051              	.LASF4:
 11052 0b8e 756E7369 		.ascii	"unsigned char\000"
 11052      676E6564 
 11052      20636861 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 294


 11052      7200
 11053              	.LASF151:
 11054 0b9c 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11054      6B506C61 
 11054      63654F6E 
 11054      556E6F72 
 11054      64657265 
 11055              	.LASF154:
 11056 0bbb 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11056      6B52656D 
 11056      6F766546 
 11056      726F6D55 
 11056      6E6F7264 
 11057              	.LASF10:
 11058 0bdd 5F5F7569 		.ascii	"__uint32_t\000"
 11058      6E743332 
 11058      5F7400
 11059              	.LASF225:
 11060 0be8 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 11060      4320342E 
 11060      392E3320 
 11060      32303135 
 11060      30333033 
 11061 0c1b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 11061      20726576 
 11061      6973696F 
 11061      6E203232 
 11061      31323230 
 11062 0c4e 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11062      66756E63 
 11062      74696F6E 
 11062      2D736563 
 11062      74696F6E 
 11063              	.LASF213:
 11064 0c76 764C6973 		.ascii	"vListInitialise\000"
 11064      74496E69 
 11064      7469616C 
 11064      69736500 
 11065              	.LASF159:
 11066 0c86 70785469 		.ascii	"pxTicksToWait\000"
 11066      636B7354 
 11066      6F576169 
 11066      7400
 11067              	.LASF214:
 11068 0c94 764C6973 		.ascii	"vListInsert\000"
 11068      74496E73 
 11068      65727400 
 11069              	.LASF144:
 11070 0ca0 7578546F 		.ascii	"uxTopPriority\000"
 11070      70507269 
 11070      6F726974 
 11070      7900
 11071              	.LASF74:
 11072 0cae 75784261 		.ascii	"uxBasePriority\000"
 11072      73655072 
 11072      696F7269 
 11072      747900
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 295


 11073              	.LASF132:
 11074 0cbd 76546173 		.ascii	"vTaskDelayUntil\000"
 11074      6B44656C 
 11074      6179556E 
 11074      74696C00 
 11075              	.LASF70:
 11076 0ccd 78457665 		.ascii	"xEventListItem\000"
 11076      6E744C69 
 11076      73744974 
 11076      656D00
 11077              	.LASF115:
 11078 0cdc 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11078      696F7269 
 11078      74795573 
 11078      65644F6E 
 11078      456E7472 
 11079              	.LASF79:
 11080 0cf2 5443425F 		.ascii	"TCB_t\000"
 11080      7400
 11081              	.LASF150:
 11082 0cf8 78546963 		.ascii	"xTicksToWait\000"
 11082      6B73546F 
 11082      57616974 
 11082      00
 11083              	.LASF30:
 11084 0d05 70764F77 		.ascii	"pvOwner\000"
 11084      6E657200 
 11085              	.LASF88:
 11086 0d0d 70727644 		.ascii	"prvDeleteTCB\000"
 11086      656C6574 
 11086      65544342 
 11086      00
 11087              	.LASF44:
 11088 0d1a 65426C6F 		.ascii	"eBlocked\000"
 11088      636B6564 
 11088      00
 11089              	.LASF146:
 11090 0d23 76546173 		.ascii	"vTaskSuspend\000"
 11090      6B537573 
 11090      70656E64 
 11090      00
 11091              	.LASF131:
 11092 0d30 78416C72 		.ascii	"xAlreadyYielded\000"
 11092      65616479 
 11092      5969656C 
 11092      64656400 
 11093              	.LASF164:
 11094 0d40 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11094      6B476574 
 11094      43757272 
 11094      656E7454 
 11094      61736B48 
 11095              	.LASF83:
 11096 0d5a 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11096      61736B43 
 11096      6865636B 
 11096      46726565 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 296


 11096      53746163 
 11097              	.LASF95:
 11098 0d75 78526567 		.ascii	"xRegions\000"
 11098      696F6E73 
 11098      00
 11099              	.LASF97:
 11100 0d7e 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11100      64644375 
 11100      7272656E 
 11100      74546173 
 11100      6B546F44 
 11101              	.LASF197:
 11102 0d9d 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11102      7272656E 
 11102      744E756D 
 11102      6265724F 
 11102      66546173 
 11103              	.LASF134:
 11104 0db4 7854696D 		.ascii	"xTimeIncrement\000"
 11104      65496E63 
 11104      72656D65 
 11104      6E7400
 11105              	.LASF1:
 11106 0dc3 7369676E 		.ascii	"signed char\000"
 11106      65642063 
 11106      68617200 
 11107              	.LASF7:
 11108 0dcf 73686F72 		.ascii	"short unsigned int\000"
 11108      7420756E 
 11108      7369676E 
 11108      65642069 
 11108      6E7400
 11109              	.LASF98:
 11110 0de2 7854696D 		.ascii	"xTimeToWake\000"
 11110      65546F57 
 11110      616B6500 
 11111              	.LASF187:
 11112 0dee 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11112      6B4E6F74 
 11112      69667953 
 11112      74617465 
 11112      436C6561 
 11113              	.LASF81:
 11114 0e04 70785443 		.ascii	"pxTCB\000"
 11114      4200
 11115              	.LASF21:
 11116 0e0a 646F7562 		.ascii	"double\000"
 11116      6C6500
 11117              	.LASF206:
 11118 0e11 75785363 		.ascii	"uxSchedulerSuspended\000"
 11118      68656475 
 11118      6C657253 
 11118      75737065 
 11118      6E646564 
 11119              	.LASF91:
 11120 0e26 70757853 		.ascii	"puxStackBuffer\000"
 11120      7461636B 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccTPq5Tt.s 			page 297


 11120      42756666 
 11120      657200
 11121              	.LASF68:
 11122 0e35 7078546F 		.ascii	"pxTopOfStack\000"
 11122      704F6653 
 11122      7461636B 
 11122      00
 11123              	.LASF117:
 11124 0e42 76546173 		.ascii	"vTaskResume\000"
 11124      6B526573 
 11124      756D6500 
 11125              	.LASF96:
 11126 0e4e 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11126      6E697469 
 11126      616C6973 
 11126      65546173 
 11126      6B4C6973 
 11127              	.LASF155:
 11128 0e65 70784576 		.ascii	"pxEventListItem\000"
 11128      656E744C 
 11128      69737449 
 11128      74656D00 
 11129              	.LASF101:
 11130 0e75 70784372 		.ascii	"pxCreatedTask\000"
 11130      65617465 
 11130      64546173 
 11130      6B00
 11131              	.LASF138:
 11132 0e83 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11132      6865636B 
 11132      5461736B 
 11132      73576169 
 11132      74696E67 
 11133              	.LASF173:
 11134 0ea3 756C5265 		.ascii	"ulReturn\000"
 11134      7475726E 
 11134      00
 11135              	.LASF114:
 11136 0eac 75784375 		.ascii	"uxCurrentBasePriority\000"
 11136      7272656E 
 11136      74426173 
 11136      65507269 
 11136      6F726974 
 11137              	.LASF202:
 11138 0ec2 78596965 		.ascii	"xYieldPending\000"
 11138      6C645065 
 11138      6E64696E 
 11138      6700
 11139              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
